
MUTEX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007258  08007258  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007260  08007260  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          0001448c  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b8  200144b8  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a32  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003023  00000000  00000000  00034a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00037ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  00038e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002602d  00000000  00000000  0003a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f61  00000000  00000000  0006002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a7a  00000000  00000000  00075f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ca08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005098  00000000  00000000  0015ca58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080070b4 	.word	0x080070b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000030 	.word	0x20000030
 80001ec:	080070b4 	.word	0x080070b4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e40 	.word	0x20012e40

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <StmRand>:
#include "main.h"



uint32_t StmRand( uint32_t Min, uint32_t Max )
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	return RNG->DR % Max + Min;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <StmRand+0x2c>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	fbb3 f2f2 	udiv	r2, r3, r2
 800059c:	6839      	ldr	r1, [r7, #0]
 800059e:	fb01 f202 	mul.w	r2, r1, r2
 80005a2:	1a9a      	subs	r2, r3, r2
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4413      	add	r3, r2
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	50060800 	.word	0x50060800

080005b8 <GreenOn>:
#include "STM32_Disc1_Gpio.h"
#include "main.h"



void GreenOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);}
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <GreenOn+0x14>)
 80005c4:	f001 f84e 	bl	8001664 <HAL_GPIO_WritePin>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021800 	.word	0x40021800

080005d0 <GreenOff>:
void GreenOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <GreenOff+0x14>)
 80005dc:	f001 f842 	bl	8001664 <HAL_GPIO_WritePin>
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021800 	.word	0x40021800

080005e8 <BlueOn>:
LED GreenLed = { GreenOn, GreenOff };   // initialize the GreenLed struct




void BlueOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);}
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f2:	4802      	ldr	r0, [pc, #8]	; (80005fc <BlueOn+0x14>)
 80005f4:	f001 f836 	bl	8001664 <HAL_GPIO_WritePin>
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021800 	.word	0x40021800

08000600 <BlueOff>:
void BlueOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);}
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060a:	4802      	ldr	r0, [pc, #8]	; (8000614 <BlueOff+0x14>)
 800060c:	f001 f82a 	bl	8001664 <HAL_GPIO_WritePin>
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021800 	.word	0x40021800

08000618 <RedOn>:
LED BlueLed = { BlueOn, BlueOff }; // initialize the BlueLed struct




void RedOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);}
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000622:	4802      	ldr	r0, [pc, #8]	; (800062c <RedOn+0x14>)
 8000624:	f001 f81e 	bl	8001664 <HAL_GPIO_WritePin>
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021800 	.word	0x40021800

08000630 <RedOff>:
void RedOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);}
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063a:	4802      	ldr	r0, [pc, #8]	; (8000644 <RedOff+0x14>)
 800063c:	f001 f812 	bl	8001664 <HAL_GPIO_WritePin>
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021800 	.word	0x40021800

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fd39 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f875 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8df 	bl	8000818 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 800065a:	f006 fbb5 	bl	8006dc8 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 800065e:	2003      	movs	r0, #3
 8000660:	f000 fe1f 	bl	80012a2 <HAL_NVIC_SetPriorityGrouping>


  ///create a mutex - note this is just a special case of a binary semaphore
  mutexPtr = xSemaphoreCreateMutex();
 8000664:	2001      	movs	r0, #1
 8000666:	f002 f939 	bl	80028dc <xQueueCreateMutex>
 800066a:	4603      	mov	r3, r0
 800066c:	4a2d      	ldr	r2, [pc, #180]	; (8000724 <main+0xdc>)
 800066e:	6013      	str	r3, [r2, #0]
  configASSERT(mutexPtr != NULL);
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <main+0xdc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10a      	bne.n	800068e <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067c:	f383 8811 	msr	BASEPRI, r3
 8000680:	f3bf 8f6f 	isb	sy
 8000684:	f3bf 8f4f 	dsb	sy
 8000688:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800068a:	bf00      	nop
 800068c:	e7fe      	b.n	800068c <main+0x44>


  configASSERT(xTaskCreate(TaskA, "TaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) == pdPASS);
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2303      	movs	r3, #3
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	4923      	ldr	r1, [pc, #140]	; (8000728 <main+0xe0>)
 800069c:	4823      	ldr	r0, [pc, #140]	; (800072c <main+0xe4>)
 800069e:	f002 fef3 	bl	8003488 <xTaskCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d00a      	beq.n	80006be <main+0x76>
        __asm volatile
 80006a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ac:	f383 8811 	msr	BASEPRI, r3
 80006b0:	f3bf 8f6f 	isb	sy
 80006b4:	f3bf 8f4f 	dsb	sy
 80006b8:	60bb      	str	r3, [r7, #8]
    }
 80006ba:	bf00      	nop
 80006bc:	e7fe      	b.n	80006bc <main+0x74>
  configASSERT(xTaskCreate(TaskB, "TaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 80006be:	2300      	movs	r3, #0
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2302      	movs	r3, #2
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	4919      	ldr	r1, [pc, #100]	; (8000730 <main+0xe8>)
 80006cc:	4819      	ldr	r0, [pc, #100]	; (8000734 <main+0xec>)
 80006ce:	f002 fedb 	bl	8003488 <xTaskCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d00a      	beq.n	80006ee <main+0xa6>
        __asm volatile
 80006d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006dc:	f383 8811 	msr	BASEPRI, r3
 80006e0:	f3bf 8f6f 	isb	sy
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	607b      	str	r3, [r7, #4]
    }
 80006ea:	bf00      	nop
 80006ec:	e7fe      	b.n	80006ec <main+0xa4>
  configASSERT(xTaskCreate(TaskC, "TaskC", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
 80006ee:	2300      	movs	r3, #0
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	2301      	movs	r3, #1
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	490f      	ldr	r1, [pc, #60]	; (8000738 <main+0xf0>)
 80006fc:	480f      	ldr	r0, [pc, #60]	; (800073c <main+0xf4>)
 80006fe:	f002 fec3 	bl	8003488 <xTaskCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d00a      	beq.n	800071e <main+0xd6>
        __asm volatile
 8000708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070c:	f383 8811 	msr	BASEPRI, r3
 8000710:	f3bf 8f6f 	isb	sy
 8000714:	f3bf 8f4f 	dsb	sy
 8000718:	603b      	str	r3, [r7, #0]
    }
 800071a:	bf00      	nop
 800071c:	e7fe      	b.n	800071c <main+0xd4>


  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 800071e:	f003 f84f 	bl	80037c0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0xda>
 8000724:	20000048 	.word	0x20000048
 8000728:	080070cc 	.word	0x080070cc
 800072c:	08000cf1 	.word	0x08000cf1
 8000730:	080070d4 	.word	0x080070d4
 8000734:	08000d69 	.word	0x08000d69
 8000738:	080070dc 	.word	0x080070dc
 800073c:	08000db1 	.word	0x08000db1

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fca8 	bl	80070a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a28      	ldr	r2, [pc, #160]	; (8000810 <SystemClock_Config+0xd0>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd4>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b4:	2308      	movs	r3, #8
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007b8:	2332      	movs	r3, #50	; 0x32
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007bc:	2304      	movs	r3, #4
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c0:	2307      	movs	r3, #7
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 ff65 	bl	8001698 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d4:	f000 fb70 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f9c6 	bl	8001b88 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000802:	f000 fb59 	bl	8000eb8 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
 8000832:	4bb2      	ldr	r3, [pc, #712]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4ab1      	ldr	r2, [pc, #708]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4baf      	ldr	r3, [pc, #700]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	623b      	str	r3, [r7, #32]
 8000848:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	4bab      	ldr	r3, [pc, #684]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4aaa      	ldr	r2, [pc, #680]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4ba8      	ldr	r3, [pc, #672]	; (8000afc <MX_GPIO_Init+0x2e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	4ba4      	ldr	r3, [pc, #656]	; (8000afc <MX_GPIO_Init+0x2e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4aa3      	ldr	r2, [pc, #652]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4ba1      	ldr	r3, [pc, #644]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	4b9d      	ldr	r3, [pc, #628]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a9c      	ldr	r2, [pc, #624]	; (8000afc <MX_GPIO_Init+0x2e4>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b9a      	ldr	r3, [pc, #616]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b96      	ldr	r3, [pc, #600]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a95      	ldr	r2, [pc, #596]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b93      	ldr	r3, [pc, #588]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b8f      	ldr	r3, [pc, #572]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a8e      	ldr	r2, [pc, #568]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b8c      	ldr	r3, [pc, #560]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b88      	ldr	r3, [pc, #544]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a87      	ldr	r2, [pc, #540]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b85      	ldr	r3, [pc, #532]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b81      	ldr	r3, [pc, #516]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a80      	ldr	r2, [pc, #512]	; (8000afc <MX_GPIO_Init+0x2e4>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b7e      	ldr	r3, [pc, #504]	; (8000afc <MX_GPIO_Init+0x2e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2116      	movs	r1, #22
 8000912:	487b      	ldr	r0, [pc, #492]	; (8000b00 <MX_GPIO_Init+0x2e8>)
 8000914:	f000 fea6 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	4879      	ldr	r0, [pc, #484]	; (8000b04 <MX_GPIO_Init+0x2ec>)
 800091e:	f000 fea1 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000928:	4877      	ldr	r0, [pc, #476]	; (8000b08 <MX_GPIO_Init+0x2f0>)
 800092a:	f000 fe9b 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000934:	4875      	ldr	r0, [pc, #468]	; (8000b0c <MX_GPIO_Init+0x2f4>)
 8000936:	f000 fe95 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800093a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094c:	230c      	movs	r3, #12
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	486e      	ldr	r0, [pc, #440]	; (8000b10 <MX_GPIO_Init+0x2f8>)
 8000958:	f000 fcd8 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800095c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800096e:	2305      	movs	r3, #5
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4865      	ldr	r0, [pc, #404]	; (8000b10 <MX_GPIO_Init+0x2f8>)
 800097a:	f000 fcc7 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000990:	230e      	movs	r3, #14
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	485d      	ldr	r0, [pc, #372]	; (8000b10 <MX_GPIO_Init+0x2f8>)
 800099c:	f000 fcb6 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80009a0:	2301      	movs	r3, #1
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b0:	230c      	movs	r3, #12
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4851      	ldr	r0, [pc, #324]	; (8000b00 <MX_GPIO_Init+0x2e8>)
 80009bc:	f000 fca6 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009c0:	2316      	movs	r3, #22
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	484a      	ldr	r0, [pc, #296]	; (8000b00 <MX_GPIO_Init+0x2e8>)
 80009d8:	f000 fc98 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009dc:	f248 0307 	movw	r3, #32775	; 0x8007
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	4844      	ldr	r0, [pc, #272]	; (8000b04 <MX_GPIO_Init+0x2ec>)
 80009f4:	f000 fc8a 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009f8:	f641 0358 	movw	r3, #6232	; 0x1858
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a0a:	230e      	movs	r3, #14
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	483b      	ldr	r0, [pc, #236]	; (8000b04 <MX_GPIO_Init+0x2ec>)
 8000a16:	f000 fc79 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4834      	ldr	r0, [pc, #208]	; (8000b04 <MX_GPIO_Init+0x2ec>)
 8000a32:	f000 fc6b 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	482d      	ldr	r0, [pc, #180]	; (8000b00 <MX_GPIO_Init+0x2e8>)
 8000a4c:	f000 fc5e 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a50:	2303      	movs	r3, #3
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a60:	2309      	movs	r3, #9
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482a      	ldr	r0, [pc, #168]	; (8000b14 <MX_GPIO_Init+0x2fc>)
 8000a6c:	f000 fc4e 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a70:	2304      	movs	r3, #4
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	4824      	ldr	r0, [pc, #144]	; (8000b14 <MX_GPIO_Init+0x2fc>)
 8000a84:	f000 fc42 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a88:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4819      	ldr	r0, [pc, #100]	; (8000b0c <MX_GPIO_Init+0x2f4>)
 8000aa6:	f000 fc31 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000aaa:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000abc:	230c      	movs	r3, #12
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4814      	ldr	r0, [pc, #80]	; (8000b18 <MX_GPIO_Init+0x300>)
 8000ac8:	f000 fc20 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000acc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ade:	230e      	movs	r3, #14
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <MX_GPIO_Init+0x2fc>)
 8000aea:	f000 fc0f 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000aee:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af8:	e010      	b.n	8000b1c <MX_GPIO_Init+0x304>
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	40021400 	.word	0x40021400
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b24:	230c      	movs	r3, #12
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	486b      	ldr	r0, [pc, #428]	; (8000cdc <MX_GPIO_Init+0x4c4>)
 8000b30:	f000 fbec 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4864      	ldr	r0, [pc, #400]	; (8000cdc <MX_GPIO_Init+0x4c4>)
 8000b4a:	f000 fbdf 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b4e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b60:	230c      	movs	r3, #12
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	485d      	ldr	r0, [pc, #372]	; (8000ce0 <MX_GPIO_Init+0x4c8>)
 8000b6c:	f000 fbce 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4856      	ldr	r0, [pc, #344]	; (8000ce0 <MX_GPIO_Init+0x4c8>)
 8000b86:	f000 fbc1 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	484f      	ldr	r0, [pc, #316]	; (8000ce0 <MX_GPIO_Init+0x4c8>)
 8000ba4:	f000 fbb2 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ba8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bba:	230e      	movs	r3, #14
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4847      	ldr	r0, [pc, #284]	; (8000ce4 <MX_GPIO_Init+0x4cc>)
 8000bc6:	f000 fba1 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000bca:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bdc:	230e      	movs	r3, #14
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4840      	ldr	r0, [pc, #256]	; (8000ce8 <MX_GPIO_Init+0x4d0>)
 8000be8:	f000 fb90 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4837      	ldr	r0, [pc, #220]	; (8000ce8 <MX_GPIO_Init+0x4d0>)
 8000c0a:	f000 fb7f 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c20:	2304      	movs	r3, #4
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4830      	ldr	r0, [pc, #192]	; (8000cec <MX_GPIO_Init+0x4d4>)
 8000c2c:	f000 fb6e 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c42:	2307      	movs	r3, #7
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4827      	ldr	r0, [pc, #156]	; (8000cec <MX_GPIO_Init+0x4d4>)
 8000c4e:	f000 fb5d 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c52:	2348      	movs	r3, #72	; 0x48
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c62:	230e      	movs	r3, #14
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <MX_GPIO_Init+0x4c8>)
 8000c6e:	f000 fb4d 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c84:	2309      	movs	r3, #9
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <MX_GPIO_Init+0x4cc>)
 8000c90:	f000 fb3c 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000c94:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_GPIO_Init+0x4cc>)
 8000cae:	f000 fb2d 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_GPIO_Init+0x4c4>)
 8000cce:	f000 fb1d 	bl	800130c <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <TaskA>:
 * - This semaphore isn't "given" to any task specifically
 * - giving the semaphore doesn't prevent taskA from continuing to run.
 *   Notice the green LED continues to blink at all times
 */
void TaskA( void* argument )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//'take' the mutex with a 200mS timeout
		SEGGER_SYSVIEW_PrintfHost("attempt to take mutex");
 8000cf8:	4815      	ldr	r0, [pc, #84]	; (8000d50 <TaskA+0x60>)
 8000cfa:	f005 ffe7 	bl	8006ccc <SEGGER_SYSVIEW_PrintfHost>
		if(xSemaphoreTake(mutexPtr, 200/portTICK_PERIOD_MS) == pdPASS)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <TaskA+0x64>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	21c8      	movs	r1, #200	; 0xc8
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 f8f5 	bl	8002ef4 <xQueueSemaphoreTake>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d110      	bne.n	8000d32 <TaskA+0x42>
		{
			RedLed.Off();
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <TaskA+0x68>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4798      	blx	r3
			SEGGER_SYSVIEW_PrintfHost("mutex taken");
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <TaskA+0x6c>)
 8000d18:	f005 ffd8 	bl	8006ccc <SEGGER_SYSVIEW_PrintfHost>
			blinkTwice(&GreenLed);
 8000d1c:	4810      	ldr	r0, [pc, #64]	; (8000d60 <TaskA+0x70>)
 8000d1e:	f000 f87b 	bl	8000e18 <blinkTwice>
			xSemaphoreGive(mutexPtr);
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <TaskA+0x64>)
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f001 fdee 	bl	800290c <xQueueGenericSend>
 8000d30:	e005      	b.n	8000d3e <TaskA+0x4e>
		}
		else
		{
			//this code is called when the semaphore wasn't taken in time
			SEGGER_SYSVIEW_PrintfHost("FAILED to take "
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <TaskA+0x74>)
 8000d34:	f005 ffca 	bl	8006ccc <SEGGER_SYSVIEW_PrintfHost>
			                           "mutex in time");
			RedLed.On();
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <TaskA+0x68>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4798      	blx	r3
		}
		//sleep for a bit to let other tasks run
		vTaskDelay(StmRand(5,30));
 8000d3e:	211e      	movs	r1, #30
 8000d40:	2005      	movs	r0, #5
 8000d42:	f7ff fc21 	bl	8000588 <StmRand>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fd01 	bl	8003750 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("attempt to take mutex");
 8000d4e:	e7d3      	b.n	8000cf8 <TaskA+0x8>
 8000d50:	080070e4 	.word	0x080070e4
 8000d54:	20000048 	.word	0x20000048
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	080070fc 	.word	0x080070fc
 8000d60:	20000000 	.word	0x20000000
 8000d64:	08007108 	.word	0x08007108

08000d68 <TaskB>:

/**
 * this task just wakes up periodically and wastes time.
 */
void TaskB( void* argument )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("starting iteration %u", counter++);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60fa      	str	r2, [r7, #12]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <TaskB+0x3c>)
 8000d7e:	f005 ffa5 	bl	8006ccc <SEGGER_SYSVIEW_PrintfHost>
		vTaskDelay(StmRand(10,25));
 8000d82:	2119      	movs	r1, #25
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff fbff 	bl	8000588 <StmRand>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 fcdf 	bl	8003750 <vTaskDelay>
		lookBusy(StmRand(250000, 750000));
 8000d92:	4905      	ldr	r1, [pc, #20]	; (8000da8 <TaskB+0x40>)
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <TaskB+0x44>)
 8000d96:	f7ff fbf7 	bl	8000588 <StmRand>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f859 	bl	8000e54 <lookBusy>
		SEGGER_SYSVIEW_PrintfHost("starting iteration %u", counter++);
 8000da2:	e7e7      	b.n	8000d74 <TaskB+0xc>
 8000da4:	08007128 	.word	0x08007128
 8000da8:	000b71b0 	.word	0x000b71b0
 8000dac:	0003d090 	.word	0x0003d090

08000db0 <TaskC>:
 * wait to receive semPtr and double blink the Blue LED
 * If the semaphore isn't available within 500 mS, then
 * turn on the RED LED until the semaphore is available
 */
void TaskC( void* argument )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//'take' the semaphore with a 200mS timeout
		SEGGER_SYSVIEW_PrintfHost("attempt to take mutex");
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <TaskC+0x50>)
 8000dba:	f005 ff87 	bl	8006ccc <SEGGER_SYSVIEW_PrintfHost>
		if(xSemaphoreTake(mutexPtr, 200/portTICK_PERIOD_MS) == pdPASS)
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <TaskC+0x54>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	21c8      	movs	r1, #200	; 0xc8
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 f895 	bl	8002ef4 <xQueueSemaphoreTake>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d110      	bne.n	8000df2 <TaskC+0x42>
		{
			RedLed.Off();
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <TaskC+0x58>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4798      	blx	r3
			SEGGER_SYSVIEW_PrintfHost("mutex taken");
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <TaskC+0x5c>)
 8000dd8:	f005 ff78 	bl	8006ccc <SEGGER_SYSVIEW_PrintfHost>
			blinkTwice(&BlueLed);
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <TaskC+0x60>)
 8000dde:	f000 f81b 	bl	8000e18 <blinkTwice>
			xSemaphoreGive(mutexPtr);
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <TaskC+0x54>)
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	f001 fd8e 	bl	800290c <xQueueGenericSend>
 8000df0:	e7e2      	b.n	8000db8 <TaskC+0x8>
		}
		else
		{
			//this code is called when the semaphore wasn't taken in time
			SEGGER_SYSVIEW_PrintfHost("FAILED to take mutex in time");
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <TaskC+0x64>)
 8000df4:	f005 ff6a 	bl	8006ccc <SEGGER_SYSVIEW_PrintfHost>
			RedLed.On();
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <TaskC+0x58>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4798      	blx	r3
		SEGGER_SYSVIEW_PrintfHost("attempt to take mutex");
 8000dfe:	e7db      	b.n	8000db8 <TaskC+0x8>
 8000e00:	080070e4 	.word	0x080070e4
 8000e04:	20000048 	.word	0x20000048
 8000e08:	20000010 	.word	0x20000010
 8000e0c:	080070fc 	.word	0x080070fc
 8000e10:	20000008 	.word	0x20000008
 8000e14:	08007108 	.word	0x08007108

08000e18 <blinkTwice>:

/**
 * Blink the desired LED twice
 */
static void blinkTwice( LED* led )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < 2; i++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e00e      	b.n	8000e44 <blinkTwice+0x2c>
	{
		led->On();
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4798      	blx	r3
		vTaskDelay(43/portTICK_PERIOD_MS);
 8000e2c:	202b      	movs	r0, #43	; 0x2b
 8000e2e:	f002 fc8f 	bl	8003750 <vTaskDelay>
		led->Off();
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4798      	blx	r3
		vTaskDelay(43/portTICK_PERIOD_MS);
 8000e38:	202b      	movs	r0, #43	; 0x2b
 8000e3a:	f002 fc89 	bl	8003750 <vTaskDelay>
	for(uint32_t i = 0; i < 2; i++)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d9ed      	bls.n	8000e26 <blinkTwice+0xe>
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <lookBusy>:
/**
 * run a simple loop for numIterations
 * @param numIterations number of iterations to compute modulus
 */
static void lookBusy( uint32_t numIterations )
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	__attribute__((unused))volatile uint32_t dontCare = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < numIterations; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	e00b      	b.n	8000e7e <lookBusy+0x2a>
	{
		dontCare = i % 4;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	425a      	negs	r2, r3
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	bf58      	it	pl
 8000e74:	4253      	negpl	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < numIterations; i++)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d8ef      	bhi.n	8000e66 <lookBusy+0x12>
	}
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea6:	f000 f92f 	bl	8001108 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40001000 	.word	0x40001000

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f02:	2007      	movs	r0, #7
 8000f04:	f000 f9cd 	bl	80012a2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <HAL_InitTick+0xe4>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a32      	ldr	r2, [pc, #200]	; (8000ff8 <HAL_InitTick+0xe4>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <HAL_InitTick+0xe4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 f828 	bl	8001fa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d103      	bne.n	8000f62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f5a:	f001 f80d 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8000f5e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f60:	e004      	b.n	8000f6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f62:	f001 f809 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8000f66:	4603      	mov	r3, r0
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <HAL_InitTick+0xe8>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0c9b      	lsrs	r3, r3, #18
 8000f76:	3b01      	subs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_InitTick+0xec>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <HAL_InitTick+0xf0>)
 8000f7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_InitTick+0xec>)
 8000f82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_InitTick+0xec>)
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_InitTick+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_InitTick+0xec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_InitTick+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <HAL_InitTick+0xec>)
 8000fa2:	f001 f82f 	bl	8002004 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11b      	bne.n	8000fec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fb4:	4812      	ldr	r0, [pc, #72]	; (8001000 <HAL_InitTick+0xec>)
 8000fb6:	f001 f87f 	bl	80020b8 <HAL_TIM_Base_Start_IT>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d111      	bne.n	8000fec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fc8:	2036      	movs	r0, #54	; 0x36
 8000fca:	f000 f991 	bl	80012f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d808      	bhi.n	8000fe6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	2036      	movs	r0, #54	; 0x36
 8000fda:	f000 f96d 	bl	80012b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_InitTick+0xf4>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e002      	b.n	8000fec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3738      	adds	r7, #56	; 0x38
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	431bde83 	.word	0x431bde83
 8001000:	2000004c 	.word	0x2000004c
 8001004:	40001000 	.word	0x40001000
 8001008:	2000001c 	.word	0x2000001c

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM6_DAC_IRQHandler+0x10>)
 800103e:	f001 f8ab 	bl	8002198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000004c 	.word	0x2000004c

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109a:	f7ff ffd7 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f005 ffbf 	bl	8007020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fad1 	bl	8000648 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80010b4:	08007268 	.word	0x08007268
  ldr r2, =_sbss
 80010b8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80010bc:	200144b8 	.word	0x200144b8

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f8d8 	bl	80012a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff ff0e 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fee4 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000020 	.word	0x20000020
 800112c:	20000094 	.word	0x20000094

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000094 	.word	0x20000094

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff4c 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ca:	f7ff ff61 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ffb1 	bl	800123c <NVIC_EncodePriority>
 80012da:	4602      	mov	r2, r0
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff80 	bl	80011e8 <__NVIC_SetPriority>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff54 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e177      	b.n	8001618 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 8166 	bne.w	8001612 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	2b02      	cmp	r3, #2
 800135c:	d130      	bne.n	80013c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80c0 	beq.w	8001612 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_GPIO_Init+0x324>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_GPIO_Init+0x324>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_GPIO_Init+0x324>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ae:	4a61      	ldr	r2, [pc, #388]	; (8001634 <HAL_GPIO_Init+0x328>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_GPIO_Init+0x32c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d037      	beq.n	800154a <HAL_GPIO_Init+0x23e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a57      	ldr	r2, [pc, #348]	; (800163c <HAL_GPIO_Init+0x330>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d031      	beq.n	8001546 <HAL_GPIO_Init+0x23a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a56      	ldr	r2, [pc, #344]	; (8001640 <HAL_GPIO_Init+0x334>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d02b      	beq.n	8001542 <HAL_GPIO_Init+0x236>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a55      	ldr	r2, [pc, #340]	; (8001644 <HAL_GPIO_Init+0x338>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x232>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_GPIO_Init+0x33c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x22e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a53      	ldr	r2, [pc, #332]	; (800164c <HAL_GPIO_Init+0x340>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x22a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_GPIO_Init+0x344>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x226>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a51      	ldr	r2, [pc, #324]	; (8001654 <HAL_GPIO_Init+0x348>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x222>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a50      	ldr	r2, [pc, #320]	; (8001658 <HAL_GPIO_Init+0x34c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x21e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4f      	ldr	r2, [pc, #316]	; (800165c <HAL_GPIO_Init+0x350>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x21a>
 8001522:	2309      	movs	r3, #9
 8001524:	e012      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001526:	230a      	movs	r3, #10
 8001528:	e010      	b.n	800154c <HAL_GPIO_Init+0x240>
 800152a:	2308      	movs	r3, #8
 800152c:	e00e      	b.n	800154c <HAL_GPIO_Init+0x240>
 800152e:	2307      	movs	r3, #7
 8001530:	e00c      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001532:	2306      	movs	r3, #6
 8001534:	e00a      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001536:	2305      	movs	r3, #5
 8001538:	e008      	b.n	800154c <HAL_GPIO_Init+0x240>
 800153a:	2304      	movs	r3, #4
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x240>
 800153e:	2303      	movs	r3, #3
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x240>
 800154a:	2300      	movs	r3, #0
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155c:	4935      	ldr	r1, [pc, #212]	; (8001634 <HAL_GPIO_Init+0x328>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156a:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <HAL_GPIO_Init+0x354>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158e:	4a34      	ldr	r2, [pc, #208]	; (8001660 <HAL_GPIO_Init+0x354>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <HAL_GPIO_Init+0x354>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <HAL_GPIO_Init+0x354>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_GPIO_Init+0x354>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <HAL_GPIO_Init+0x354>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_GPIO_Init+0x354>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_GPIO_Init+0x354>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	f67f ae84 	bls.w	8001328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40013800 	.word	0x40013800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020800 	.word	0x40020800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40021000 	.word	0x40021000
 800164c:	40021400 	.word	0x40021400
 8001650:	40021800 	.word	0x40021800
 8001654:	40021c00 	.word	0x40021c00
 8001658:	40022000 	.word	0x40022000
 800165c:	40022400 	.word	0x40022400
 8001660:	40013c00 	.word	0x40013c00

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e267      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d075      	beq.n	80017a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d00c      	beq.n	80016dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4b85      	ldr	r3, [pc, #532]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d112      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4b82      	ldr	r3, [pc, #520]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016da:	d10b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4b7e      	ldr	r3, [pc, #504]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d157      	bne.n	80017a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e242      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x74>
 80016fe:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a75      	ldr	r2, [pc, #468]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b70      	ldr	r3, [pc, #448]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6f      	ldr	r2, [pc, #444]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6c      	ldr	r2, [pc, #432]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 8001730:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a68      	ldr	r2, [pc, #416]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fcee 	bl	8001130 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fcea 	bl	8001130 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e207      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xc0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fcda 	bl	8001130 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fcd6 	bl	8001130 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1f3      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b51      	ldr	r3, [pc, #324]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0xe8>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1c7      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4937      	ldr	r1, [pc, #220]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <HAL_RCC_OscConfig+0x244>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fc8f 	bl	8001130 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fc8b 	bl	8001130 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1a8      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4925      	ldr	r1, [pc, #148]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x244>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fc6e 	bl	8001130 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fc6a 	bl	8001130 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e187      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d036      	beq.n	80018f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_OscConfig+0x248>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fc4e 	bl	8001130 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fc4a 	bl	8001130 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e167      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
 80018b6:	e01b      	b.n	80018f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_OscConfig+0x248>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff fc37 	bl	8001130 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	e00e      	b.n	80018e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fc33 	bl	8001130 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d907      	bls.n	80018e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e150      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
 80018d8:	40023800 	.word	0x40023800
 80018dc:	42470000 	.word	0x42470000
 80018e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ea      	bne.n	80018c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8097 	beq.w	8001a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a7c      	ldr	r2, [pc, #496]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b7a      	ldr	r3, [pc, #488]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b77      	ldr	r3, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a73      	ldr	r2, [pc, #460]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff fbf3 	bl	8001130 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff fbef 	bl	8001130 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e10c      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x2ea>
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x30c>
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a5e      	ldr	r2, [pc, #376]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a5b      	ldr	r2, [pc, #364]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 80019a4:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff fbb4 	bl	8001130 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff fbb0 	bl	8001130 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0cb      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ee      	beq.n	80019cc <HAL_RCC_OscConfig+0x334>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fb9e 	bl	8001130 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fb9a 	bl	8001130 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0b5      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a1 	beq.w	8001b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d05c      	beq.n	8001afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d141      	bne.n	8001ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb6e 	bl	8001130 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fb6a 	bl	8001130 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e087      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	491b      	ldr	r1, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fb43 	bl	8001130 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff fb3f 	bl	8001130 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e05c      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x416>
 8001acc:	e054      	b.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb2c 	bl	8001130 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fb28 	bl	8001130 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e045      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x444>
 8001afa:	e03d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e038      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x4ec>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d028      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d121      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d11a      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0cc      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d90c      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b65      	ldr	r3, [pc, #404]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	494d      	ldr	r1, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d044      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d119      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e067      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fa5a 	bl	8001130 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff fa56 	bl	8001130 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d20c      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e032      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f821 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f8f0 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08007218 	.word	0x08007218
 8001d4c:	20000018 	.word	0x20000018
 8001d50:	2000001c 	.word	0x2000001c

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b094      	sub	sp, #80	; 0x50
 8001d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d60:	2300      	movs	r3, #0
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d64:	2300      	movs	r3, #0
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6c:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x40>
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	f200 80e1 	bhi.w	8001f40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x34>
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d86:	e0db      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d8c:	e0db      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d92:	e0d8      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d94:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d063      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001daa:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	099b      	lsrs	r3, r3, #6
 8001db0:	2200      	movs	r2, #0
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	462b      	mov	r3, r5
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	0159      	lsls	r1, r3, #5
 8001dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd8:	0150      	lsls	r0, r2, #5
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4621      	mov	r1, r4
 8001de0:	1a51      	subs	r1, r2, r1
 8001de2:	6139      	str	r1, [r7, #16]
 8001de4:	4629      	mov	r1, r5
 8001de6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001df8:	4659      	mov	r1, fp
 8001dfa:	018b      	lsls	r3, r1, #6
 8001dfc:	4651      	mov	r1, sl
 8001dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e02:	4651      	mov	r1, sl
 8001e04:	018a      	lsls	r2, r1, #6
 8001e06:	4651      	mov	r1, sl
 8001e08:	ebb2 0801 	subs.w	r8, r2, r1
 8001e0c:	4659      	mov	r1, fp
 8001e0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e26:	4690      	mov	r8, r2
 8001e28:	4699      	mov	r9, r3
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	eb18 0303 	adds.w	r3, r8, r3
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	462b      	mov	r3, r5
 8001e34:	eb49 0303 	adc.w	r3, r9, r3
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e46:	4629      	mov	r1, r5
 8001e48:	024b      	lsls	r3, r1, #9
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e50:	4621      	mov	r1, r4
 8001e52:	024a      	lsls	r2, r1, #9
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e64:	f7fe fa0e 	bl	8000284 <__aeabi_uldivmod>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	e058      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e8c:	4642      	mov	r2, r8
 8001e8e:	464b      	mov	r3, r9
 8001e90:	f04f 0000 	mov.w	r0, #0
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	0159      	lsls	r1, r3, #5
 8001e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9e:	0150      	lsls	r0, r2, #5
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eaa:	4649      	mov	r1, r9
 8001eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	00eb      	lsls	r3, r5, #3
 8001ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eda:	00e2      	lsls	r2, r4, #3
 8001edc:	4614      	mov	r4, r2
 8001ede:	461d      	mov	r5, r3
 8001ee0:	4643      	mov	r3, r8
 8001ee2:	18e3      	adds	r3, r4, r3
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	eb45 0303 	adc.w	r3, r5, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001efa:	4629      	mov	r1, r5
 8001efc:	028b      	lsls	r3, r1, #10
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f04:	4621      	mov	r1, r4
 8001f06:	028a      	lsls	r2, r1, #10
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	61fa      	str	r2, [r7, #28]
 8001f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f18:	f7fe f9b4 	bl	8000284 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f3e:	e002      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3750      	adds	r7, #80	; 0x50
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000018 	.word	0x20000018

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a9b      	lsrs	r3, r3, #10
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08007228 	.word	0x08007228

08001fa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	220f      	movs	r2, #15
 8001fae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_RCC_GetClockConfig+0x60>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	601a      	str	r2, [r3, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40023c00 	.word	0x40023c00

08002004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e041      	b.n	800209a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f839 	bl	80020a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 f9d8 	bl	80023f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d001      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e04e      	b.n	800216e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_TIM_Base_Start_IT+0xc4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d022      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x80>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fa:	d01d      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x80>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_TIM_Base_Start_IT+0xc8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d018      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x80>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_TIM_Base_Start_IT+0xcc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x80>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_TIM_Base_Start_IT+0xd0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00e      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x80>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_TIM_Base_Start_IT+0xd4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d009      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x80>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_TIM_Base_Start_IT+0xd8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x80>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a18      	ldr	r2, [pc, #96]	; (8002194 <HAL_TIM_Base_Start_IT+0xdc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d111      	bne.n	800215c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b06      	cmp	r3, #6
 8002148:	d010      	beq.n	800216c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215a:	e007      	b.n	800216c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000
 8002180:	40000400 	.word	0x40000400
 8002184:	40000800 	.word	0x40000800
 8002188:	40000c00 	.word	0x40000c00
 800218c:	40010400 	.word	0x40010400
 8002190:	40014000 	.word	0x40014000
 8002194:	40001800 	.word	0x40001800

08002198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d122      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d11b      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0202 	mvn.w	r2, #2
 80021c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8ee 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8e0 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f8f1 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d122      	bne.n	8002248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b04      	cmp	r3, #4
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0204 	mvn.w	r2, #4
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8c4 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8b6 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f8c7 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b08      	cmp	r3, #8
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b08      	cmp	r3, #8
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0208 	mvn.w	r2, #8
 800226c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2204      	movs	r2, #4
 8002272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f89a 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f88c 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f89d 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0210 	mvn.w	r2, #16
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2208      	movs	r2, #8
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f870 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f862 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f873 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10e      	bne.n	800231c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0201 	mvn.w	r2, #1
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fdbc 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b80      	cmp	r3, #128	; 0x80
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	2b80      	cmp	r3, #128	; 0x80
 8002336:	d107      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f902 	bl	800254c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d107      	bne.n	8002374 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f838 	bl	80023e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b20      	cmp	r3, #32
 8002380:	d10e      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b20      	cmp	r3, #32
 800238e:	d107      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0220 	mvn.w	r2, #32
 8002398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8cc 	bl	8002538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a40      	ldr	r2, [pc, #256]	; (800250c <TIM_Base_SetConfig+0x114>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002416:	d00f      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3d      	ldr	r2, [pc, #244]	; (8002510 <TIM_Base_SetConfig+0x118>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00b      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3c      	ldr	r2, [pc, #240]	; (8002514 <TIM_Base_SetConfig+0x11c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3b      	ldr	r2, [pc, #236]	; (8002518 <TIM_Base_SetConfig+0x120>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3a      	ldr	r2, [pc, #232]	; (800251c <TIM_Base_SetConfig+0x124>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d108      	bne.n	800244a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a2f      	ldr	r2, [pc, #188]	; (800250c <TIM_Base_SetConfig+0x114>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002458:	d027      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <TIM_Base_SetConfig+0x118>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d023      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <TIM_Base_SetConfig+0x11c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2a      	ldr	r2, [pc, #168]	; (8002518 <TIM_Base_SetConfig+0x120>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <TIM_Base_SetConfig+0x124>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d017      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <TIM_Base_SetConfig+0x128>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <TIM_Base_SetConfig+0x12c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00f      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a26      	ldr	r2, [pc, #152]	; (8002528 <TIM_Base_SetConfig+0x130>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <TIM_Base_SetConfig+0x134>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <TIM_Base_SetConfig+0x138>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d003      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <TIM_Base_SetConfig+0x13c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d108      	bne.n	80024bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <TIM_Base_SetConfig+0x114>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0xf8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <TIM_Base_SetConfig+0x124>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d103      	bne.n	80024f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	615a      	str	r2, [r3, #20]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800
 8002518:	40000c00 	.word	0x40000c00
 800251c:	40010400 	.word	0x40010400
 8002520:	40014000 	.word	0x40014000
 8002524:	40014400 	.word	0x40014400
 8002528:	40014800 	.word	0x40014800
 800252c:	40001800 	.word	0x40001800
 8002530:	40001c00 	.word	0x40001c00
 8002534:	40002000 	.word	0x40002000

08002538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f103 0208 	add.w	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f103 0208 	add.w	r2, r3, #8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f103 0208 	add.w	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d103      	bne.n	8002622 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e00c      	b.n	800263c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3308      	adds	r3, #8
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e002      	b.n	8002630 <vListInsert+0x2e>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	d2f6      	bcs.n	800262a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	601a      	str	r2, [r3, #0]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6892      	ldr	r2, [r2, #8]
 800268a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6852      	ldr	r2, [r2, #4]
 8002694:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d103      	bne.n	80026a8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1e5a      	subs	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <xQueueGenericReset+0x2a>
        __asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	60bb      	str	r3, [r7, #8]
    }
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80026f2:	f002 fb29 	bl	8004d48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	68f9      	ldr	r1, [r7, #12]
 8002700:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	441a      	add	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	3b01      	subs	r3, #1
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	441a      	add	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	22ff      	movs	r2, #255	; 0xff
 8002736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	22ff      	movs	r2, #255	; 0xff
 800273e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d114      	bne.n	8002772 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01a      	beq.n	8002786 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3310      	adds	r3, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f001 fadd 	bl	8003d14 <xTaskRemoveFromEventList>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <xQueueGenericReset+0xcc>)
 8002762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	e009      	b.n	8002786 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3310      	adds	r3, #16
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fef2 	bl	8002560 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3324      	adds	r3, #36	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff feed 	bl	8002560 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002786:	f002 fb0f 	bl	8004da8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	61bb      	str	r3, [r7, #24]
    }
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <xQueueGenericCreate+0x48>
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d101      	bne.n	80027e4 <xQueueGenericCreate+0x4c>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <xQueueGenericCreate+0x4e>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <xQueueGenericCreate+0x68>
        __asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	617b      	str	r3, [r7, #20]
    }
 80027fc:	bf00      	nop
 80027fe:	e7fe      	b.n	80027fe <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002806:	d90a      	bls.n	800281e <xQueueGenericCreate+0x86>
        __asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	613b      	str	r3, [r7, #16]
    }
 800281a:	bf00      	nop
 800281c:	e7fe      	b.n	800281c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	3350      	adds	r3, #80	; 0x50
 8002822:	4618      	mov	r0, r3
 8002824:	f002 fbba 	bl	8004f9c <pvPortMalloc>
 8002828:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3350      	adds	r3, #80	; 0x50
 8002838:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800283a:	79fa      	ldrb	r2, [r7, #7]
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f805 	bl	8002856 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800284c:	6a3b      	ldr	r3, [r7, #32]
    }
 800284e:	4618      	mov	r0, r3
 8002850:	3728      	adds	r7, #40	; 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e002      	b.n	8002878 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002884:	2101      	movs	r1, #1
 8002886:	69b8      	ldr	r0, [r7, #24]
 8002888:	f7ff ff1e 	bl	80026c8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	2073      	movs	r0, #115	; 0x73
 800289c:	f003 fb9e 	bl	8005fdc <SEGGER_SYSVIEW_RecordU32x3>
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00e      	beq.n	80028d4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80028c8:	2300      	movs	r3, #0
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f81c 	bl	800290c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80028e6:	2301      	movs	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	461a      	mov	r2, r3
 80028f2:	6939      	ldr	r1, [r7, #16]
 80028f4:	6978      	ldr	r0, [r7, #20]
 80028f6:	f7ff ff4f 	bl	8002798 <xQueueGenericCreate>
 80028fa:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff ffd3 	bl	80028a8 <prvInitialiseMutex>

        return xNewQueue;
 8002902:	68fb      	ldr	r3, [r7, #12]
    }
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b090      	sub	sp, #64	; 0x40
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800291a:	2300      	movs	r3, #0
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <xQueueGenericSend+0x32>
        __asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <xQueueGenericSend+0x40>
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <xQueueGenericSend+0x44>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <xQueueGenericSend+0x46>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <xQueueGenericSend+0x60>
        __asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002968:	bf00      	nop
 800296a:	e7fe      	b.n	800296a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d103      	bne.n	800297a <xQueueGenericSend+0x6e>
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <xQueueGenericSend+0x72>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <xQueueGenericSend+0x74>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericSend+0x8e>
        __asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	623b      	str	r3, [r7, #32]
    }
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800299a:	f001 fb5b 	bl	8004054 <xTaskGetSchedulerState>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <xQueueGenericSend+0x9e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <xQueueGenericSend+0xa2>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueGenericSend+0xa4>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueGenericSend+0xbe>
        __asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	61fb      	str	r3, [r7, #28]
    }
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029ca:	f002 f9bd 	bl	8004d48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <xQueueGenericSend+0xd4>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d136      	bne.n	8002a4e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 f886 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	460b      	mov	r3, r1
 80029f2:	4601      	mov	r1, r0
 80029f4:	205a      	movs	r0, #90	; 0x5a
 80029f6:	f003 fb67 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a00:	f000 fbcc 	bl	800319c <prvCopyDataToQueue>
 8002a04:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 f97e 	bl	8003d14 <xTaskRemoveFromEventList>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d013      	beq.n	8002a46 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <xQueueGenericSend+0x248>)
 8002a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	e00a      	b.n	8002a46 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <xQueueGenericSend+0x248>)
 8002a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002a46:	f002 f9af 	bl	8004da8 <vPortExitCritical>
                return pdPASS;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07d      	b.n	8002b4a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d110      	bne.n	8002a76 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a54:	f002 f9a8 	bl	8004da8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 f84a 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	205a      	movs	r0, #90	; 0x5a
 8002a6e:	f003 fb2b 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e069      	b.n	8002b4a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 f9ad 	bl	8003de0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a86:	2301      	movs	r3, #1
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a8a:	f002 f98d 	bl	8004da8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a8e:	f000 fef9 	bl	8003884 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a92:	f002 f959 	bl	8004d48 <vPortEnterCritical>
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa2:	d103      	bne.n	8002aac <xQueueGenericSend+0x1a0>
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d103      	bne.n	8002ac2 <xQueueGenericSend+0x1b6>
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac2:	f002 f971 	bl	8004da8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ac6:	1d3a      	adds	r2, r7, #4
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 f99c 	bl	8003e0c <xTaskCheckForTimeOut>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d124      	bne.n	8002b24 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002adc:	f000 fc56 	bl	800338c <prvIsQueueFull>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d018      	beq.n	8002b18 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	3310      	adds	r3, #16
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f8be 	bl	8003c70 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af6:	f000 fbe1 	bl	80032bc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002afa:	f000 fed1 	bl	80038a0 <xTaskResumeAll>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f47f af62 	bne.w	80029ca <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <xQueueGenericSend+0x248>)
 8002b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	e758      	b.n	80029ca <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b1a:	f000 fbcf 	bl	80032bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b1e:	f000 febf 	bl	80038a0 <xTaskResumeAll>
 8002b22:	e752      	b.n	80029ca <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b26:	f000 fbc9 	bl	80032bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b2a:	f000 feb9 	bl	80038a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 ffdf 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4601      	mov	r1, r0
 8002b42:	205a      	movs	r0, #90	; 0x5a
 8002b44:	f003 fac0 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002b48:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3738      	adds	r7, #56	; 0x38
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b090      	sub	sp, #64	; 0x40
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <xQueueGenericSendFromISR+0x3c>
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <xQueueGenericSendFromISR+0x40>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <xQueueGenericSendFromISR+0x42>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d103      	bne.n	8002bc2 <xQueueGenericSendFromISR+0x6a>
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <xQueueGenericSendFromISR+0x6e>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueGenericSendFromISR+0x70>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	623b      	str	r3, [r7, #32]
    }
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002be2:	f002 f99b 	bl	8004f1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002be6:	f3ef 8211 	mrs	r2, BASEPRI
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	61fa      	str	r2, [r7, #28]
 8002bfc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <xQueueGenericSendFromISR+0xbc>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d148      	bne.n	8002ca6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 ff64 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002c2c:	4601      	mov	r1, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	461a      	mov	r2, r3
 8002c32:	2060      	movs	r0, #96	; 0x60
 8002c34:	f003 f978 	bl	8005f28 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c3e:	f000 faad 	bl	800319c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002c42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d112      	bne.n	8002c72 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d025      	beq.n	8002ca0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	3324      	adds	r3, #36	; 0x24
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 f85b 	bl	8003d14 <xTaskRemoveFromEventList>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01d      	beq.n	8002ca0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01a      	beq.n	8002ca0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e016      	b.n	8002ca0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002c72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c76:	2b7f      	cmp	r3, #127	; 0x7f
 8002c78:	d10a      	bne.n	8002c90 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	617b      	str	r3, [r7, #20]
    }
 8002c8c:	bf00      	nop
 8002c8e:	e7fe      	b.n	8002c8e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c94:	3301      	adds	r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	b25a      	sxtb	r2, r3
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ca4:	e00b      	b.n	8002cbe <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 ff23 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002cae:	4601      	mov	r1, r0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2060      	movs	r0, #96	; 0x60
 8002cb6:	f003 f937 	bl	8005f28 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002cc8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3740      	adds	r7, #64	; 0x40
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b08f      	sub	sp, #60	; 0x3c
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <xQueueReceive+0x30>
        __asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	623b      	str	r3, [r7, #32]
    }
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <xQueueReceive+0x3e>
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <xQueueReceive+0x42>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueReceive+0x44>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueReceive+0x5e>
        __asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61fb      	str	r3, [r7, #28]
    }
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d32:	f001 f98f 	bl	8004054 <xTaskGetSchedulerState>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <xQueueReceive+0x6e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <xQueueReceive+0x72>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueReceive+0x74>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueReceive+0x8e>
        __asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61bb      	str	r3, [r7, #24]
    }
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d62:	f001 fff1 	bl	8004d48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d02f      	beq.n	8002dd2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d76:	f000 fa7b 	bl	8003270 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 feb9 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002d82:	4604      	mov	r4, r0
 8002d84:	2000      	movs	r0, #0
 8002d86:	f003 feb5 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2101      	movs	r1, #1
 8002d90:	9100      	str	r1, [sp, #0]
 8002d92:	4621      	mov	r1, r4
 8002d94:	205c      	movs	r0, #92	; 0x5c
 8002d96:	f003 f997 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00f      	beq.n	8002dca <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	3310      	adds	r3, #16
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 ffb0 	bl	8003d14 <xTaskRemoveFromEventList>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dba:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <xQueueReceive+0x21c>)
 8002dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002dca:	f001 ffed 	bl	8004da8 <vPortExitCritical>
                return pdPASS;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e08a      	b.n	8002ee8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d113      	bne.n	8002e00 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dd8:	f001 ffe6 	bl	8004da8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fe88 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002de4:	4604      	mov	r4, r0
 8002de6:	2000      	movs	r0, #0
 8002de8:	f003 fe84 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002dec:	4602      	mov	r2, r0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2101      	movs	r1, #1
 8002df2:	9100      	str	r1, [sp, #0]
 8002df4:	4621      	mov	r1, r4
 8002df6:	205c      	movs	r0, #92	; 0x5c
 8002df8:	f003 f966 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e073      	b.n	8002ee8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 ffe8 	bl	8003de0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e14:	f001 ffc8 	bl	8004da8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e18:	f000 fd34 	bl	8003884 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e1c:	f001 ff94 	bl	8004d48 <vPortEnterCritical>
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e26:	b25b      	sxtb	r3, r3
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d103      	bne.n	8002e36 <xQueueReceive+0x162>
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d103      	bne.n	8002e4c <xQueueReceive+0x178>
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e4c:	f001 ffac 	bl	8004da8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e50:	1d3a      	adds	r2, r7, #4
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 ffd7 	bl	8003e0c <xTaskCheckForTimeOut>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d124      	bne.n	8002eae <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e66:	f000 fa7b 	bl	8003360 <prvIsQueueEmpty>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d018      	beq.n	8002ea2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	3324      	adds	r3, #36	; 0x24
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fef9 	bl	8003c70 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e80:	f000 fa1c 	bl	80032bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e84:	f000 fd0c 	bl	80038a0 <xTaskResumeAll>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f af69 	bne.w	8002d62 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <xQueueReceive+0x21c>)
 8002e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	e75f      	b.n	8002d62 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea4:	f000 fa0a 	bl	80032bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ea8:	f000 fcfa 	bl	80038a0 <xTaskResumeAll>
 8002eac:	e759      	b.n	8002d62 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb0:	f000 fa04 	bl	80032bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eb4:	f000 fcf4 	bl	80038a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eba:	f000 fa51 	bl	8003360 <prvIsQueueEmpty>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f43f af4e 	beq.w	8002d62 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 fe13 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002ece:	4604      	mov	r4, r0
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f003 fe0f 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2101      	movs	r1, #1
 8002edc:	9100      	str	r1, [sp, #0]
 8002ede:	4621      	mov	r1, r4
 8002ee0:	205c      	movs	r0, #92	; 0x5c
 8002ee2:	f003 f8f1 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ee6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3734      	adds	r7, #52	; 0x34
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b091      	sub	sp, #68	; 0x44
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	623b      	str	r3, [r7, #32]
    }
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	61fb      	str	r3, [r7, #28]
    }
 8002f40:	bf00      	nop
 8002f42:	e7fe      	b.n	8002f42 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f44:	f001 f886 	bl	8004054 <xTaskGetSchedulerState>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <xQueueSemaphoreTake+0x60>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <xQueueSemaphoreTake+0x64>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <xQueueSemaphoreTake+0x66>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	61bb      	str	r3, [r7, #24]
    }
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f74:	f001 fee8 	bl	8004d48 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d034      	beq.n	8002fee <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fdb4 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f003 fdb0 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8002f94:	4602      	mov	r2, r0
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	9100      	str	r1, [sp, #0]
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	205c      	movs	r0, #92	; 0x5c
 8002fa0:	f003 f892 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	1e5a      	subs	r2, r3, #1
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d104      	bne.n	8002fbe <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fb4:	f001 f9fe 	bl	80043b4 <pvTaskIncrementMutexHeldCount>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00f      	beq.n	8002fe6 <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	3310      	adds	r3, #16
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fea2 	bl	8003d14 <xTaskRemoveFromEventList>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002fd6:	4b64      	ldr	r3, [pc, #400]	; (8003168 <xQueueSemaphoreTake+0x274>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002fe6:	f001 fedf 	bl	8004da8 <vPortExitCritical>
                return pdPASS;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0b7      	b.n	800315e <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d121      	bne.n	8003038 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	617b      	str	r3, [r7, #20]
    }
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003010:	f001 feca 	bl	8004da8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fd6c 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 800301c:	4604      	mov	r4, r0
 800301e:	2000      	movs	r0, #0
 8003020:	f003 fd68 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8003024:	4602      	mov	r2, r0
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	9100      	str	r1, [sp, #0]
 800302c:	4621      	mov	r1, r4
 800302e:	205c      	movs	r0, #92	; 0x5c
 8003030:	f003 f84a 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003034:	2300      	movs	r3, #0
 8003036:	e092      	b.n	800315e <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800303e:	f107 030c 	add.w	r3, r7, #12
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fecc 	bl	8003de0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800304c:	f001 feac 	bl	8004da8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003050:	f000 fc18 	bl	8003884 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003054:	f001 fe78 	bl	8004d48 <vPortEnterCritical>
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800305e:	b25b      	sxtb	r3, r3
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d103      	bne.n	800306e <xQueueSemaphoreTake+0x17a>
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003074:	b25b      	sxtb	r3, r3
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d103      	bne.n	8003084 <xQueueSemaphoreTake+0x190>
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003084:	f001 fe90 	bl	8004da8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003088:	463a      	mov	r2, r7
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f000 febb 	bl	8003e0c <xTaskCheckForTimeOut>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d132      	bne.n	8003102 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800309c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800309e:	f000 f95f 	bl	8003360 <prvIsQueueEmpty>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d026      	beq.n	80030f6 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 80030b0:	f001 fe4a 	bl	8004d48 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 ffe9 	bl	8004090 <xTaskPriorityInherit>
 80030be:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80030c0:	f001 fe72 	bl	8004da8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	3324      	adds	r3, #36	; 0x24
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fdcf 	bl	8003c70 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d4:	f000 f8f2 	bl	80032bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030d8:	f000 fbe2 	bl	80038a0 <xTaskResumeAll>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f47f af48 	bne.w	8002f74 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <xQueueSemaphoreTake+0x274>)
 80030e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	e73e      	b.n	8002f74 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80030f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030f8:	f000 f8e0 	bl	80032bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030fc:	f000 fbd0 	bl	80038a0 <xTaskResumeAll>
 8003100:	e738      	b.n	8002f74 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003104:	f000 f8da 	bl	80032bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003108:	f000 fbca 	bl	80038a0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800310c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800310e:	f000 f927 	bl	8003360 <prvIsQueueEmpty>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	f43f af2d 	beq.w	8002f74 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8003120:	f001 fe12 	bl	8004d48 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003126:	f000 f821 	bl	800316c <prvGetDisinheritPriorityAfterTimeout>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003132:	4618      	mov	r0, r3
 8003134:	f001 f8a6 	bl	8004284 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003138:	f001 fe36 	bl	8004da8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fcd8 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 8003144:	4604      	mov	r4, r0
 8003146:	2000      	movs	r0, #0
 8003148:	f003 fcd4 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 800314c:	4602      	mov	r2, r0
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	9100      	str	r1, [sp, #0]
 8003154:	4621      	mov	r1, r4
 8003156:	205c      	movs	r0, #92	; 0x5c
 8003158:	f002 ffb6 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800315c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800315e:	4618      	mov	r0, r3
 8003160:	373c      	adds	r7, #60	; 0x3c
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}
 8003166:	bf00      	nop
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1c3 0305 	rsb	r3, r3, #5
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e001      	b.n	800318e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800318e:	68fb      	ldr	r3, [r7, #12]
    }
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d14d      	bne.n	800325e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 ffdc 	bl	8004184 <xTaskPriorityDisinherit>
 80031cc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e043      	b.n	800325e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d119      	bne.n	8003210 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6858      	ldr	r0, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	461a      	mov	r2, r3
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	f003 ff4e 	bl	8007088 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	441a      	add	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	d32b      	bcc.n	800325e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e026      	b.n	800325e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68d8      	ldr	r0, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	461a      	mov	r2, r3
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	f003 ff34 	bl	8007088 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	425b      	negs	r3, r3
 800322a:	441a      	add	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d207      	bcs.n	800324c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	425b      	negs	r3, r3
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d105      	bne.n	800325e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	3b01      	subs	r3, #1
 800325c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003266:	697b      	ldr	r3, [r7, #20]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	441a      	add	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	d303      	bcc.n	80032a4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68d9      	ldr	r1, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	461a      	mov	r2, r3
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	f003 feea 	bl	8007088 <memcpy>
    }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80032c4:	f001 fd40 	bl	8004d48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032d0:	e011      	b.n	80032f6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3324      	adds	r3, #36	; 0x24
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fd18 	bl	8003d14 <xTaskRemoveFromEventList>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80032ea:	f000 fdf5 	bl	8003ed8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	dce9      	bgt.n	80032d2 <prvUnlockQueue+0x16>
 80032fe:	e000      	b.n	8003302 <prvUnlockQueue+0x46>
                        break;
 8003300:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	22ff      	movs	r2, #255	; 0xff
 8003306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800330a:	f001 fd4d 	bl	8004da8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800330e:	f001 fd1b 	bl	8004d48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003318:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800331a:	e011      	b.n	8003340 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3310      	adds	r3, #16
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fcf3 	bl	8003d14 <xTaskRemoveFromEventList>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003334:	f000 fdd0 	bl	8003ed8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	3b01      	subs	r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003344:	2b00      	cmp	r3, #0
 8003346:	dce9      	bgt.n	800331c <prvUnlockQueue+0x60>
 8003348:	e000      	b.n	800334c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800334a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	22ff      	movs	r2, #255	; 0xff
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003354:	f001 fd28 	bl	8004da8 <vPortExitCritical>
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003368:	f001 fcee 	bl	8004d48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003374:	2301      	movs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e001      	b.n	800337e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800337e:	f001 fd13 	bl	8004da8 <vPortExitCritical>

    return xReturn;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003394:	f001 fcd8 	bl	8004d48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d102      	bne.n	80033aa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e001      	b.n	80033ae <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80033ae:	f001 fcfb 	bl	8004da8 <vPortExitCritical>

    return xReturn;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e01e      	b.n	800340a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <vQueueAddToRegistry+0x60>)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d115      	bne.n	8003404 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033d8:	4910      	ldr	r1, [pc, #64]	; (800341c <vQueueAddToRegistry+0x60>)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80033e2:	4a0e      	ldr	r2, [pc, #56]	; (800341c <vQueueAddToRegistry+0x60>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fb7f 	bl	8006af4 <SEGGER_SYSVIEW_ShrinkId>
 80033f6:	4601      	mov	r1, r0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	2071      	movs	r0, #113	; 0x71
 80033fe:	f002 fd93 	bl	8005f28 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003402:	e006      	b.n	8003412 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b07      	cmp	r3, #7
 800340e:	d9dd      	bls.n	80033cc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000098 	.word	0x20000098

08003420 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003430:	f001 fc8a 	bl	8004d48 <vPortEnterCritical>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800343a:	b25b      	sxtb	r3, r3
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d103      	bne.n	800344a <vQueueWaitForMessageRestricted+0x2a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d103      	bne.n	8003460 <vQueueWaitForMessageRestricted+0x40>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003460:	f001 fca2 	bl	8004da8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fc1f 	bl	8003cb8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff1e 	bl	80032bc <prvUnlockQueue>
    }
 8003480:	bf00      	nop
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af04      	add	r7, sp, #16
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fd7d 	bl	8004f9c <pvPortMalloc>
 80034a2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034aa:	2058      	movs	r0, #88	; 0x58
 80034ac:	f001 fd76 	bl	8004f9c <pvPortMalloc>
 80034b0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
 80034be:	e005      	b.n	80034cc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80034c0:	6978      	ldr	r0, [r7, #20]
 80034c2:	f001 fe4b 	bl	800515c <vPortFree>
 80034c6:	e001      	b.n	80034cc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d013      	beq.n	80034fa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	2300      	movs	r3, #0
 80034d6:	9303      	str	r3, [sp, #12]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f80e 	bl	800350a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034ee:	69f8      	ldr	r0, [r7, #28]
 80034f0:	f000 f8a2 	bl	8003638 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034f4:	2301      	movs	r3, #1
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e002      	b.n	8003500 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
 80034fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003500:	69bb      	ldr	r3, [r7, #24]
    }
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b088      	sub	sp, #32
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	461a      	mov	r2, r3
 8003522:	21a5      	movs	r1, #165	; 0xa5
 8003524:	f003 fdbe 	bl	80070a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003532:	3b01      	subs	r3, #1
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f023 0307 	bic.w	r3, r3, #7
 8003540:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <prvInitialiseNewTask+0x58>
        __asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	617b      	str	r3, [r7, #20]
    }
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01f      	beq.n	80035a8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	e012      	b.n	8003594 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	7819      	ldrb	r1, [r3, #0]
 8003576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	3334      	adds	r3, #52	; 0x34
 800357e:	460a      	mov	r2, r1
 8003580:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b09      	cmp	r3, #9
 8003598:	d9e9      	bls.n	800356e <prvInitialiseNewTask+0x64>
 800359a:	e000      	b.n	800359e <prvInitialiseNewTask+0x94>
            {
                break;
 800359c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035a6:	e003      	b.n	80035b0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d901      	bls.n	80035ba <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035b6:	2304      	movs	r3, #4
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	2200      	movs	r2, #0
 80035ca:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	3304      	adds	r3, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe ffe5 	bl	80025a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	3318      	adds	r3, #24
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe ffe0 	bl	80025a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	f1c3 0205 	rsb	r2, r3, #5
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	3350      	adds	r3, #80	; 0x50
 80035fa:	2204      	movs	r2, #4
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f003 fd50 	bl	80070a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	3354      	adds	r3, #84	; 0x54
 8003608:	2201      	movs	r2, #1
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fd49 	bl	80070a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	69b8      	ldr	r0, [r7, #24]
 8003618:	f001 fa6a 	bl	8004af0 <pxPortInitialiseStack>
 800361c:	4602      	mov	r2, r0
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800362e:	bf00      	nop
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003640:	f001 fb82 	bl	8004d48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <prvAddNewTaskToReadyList+0xfc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a3a      	ldr	r2, [pc, #232]	; (8003734 <prvAddNewTaskToReadyList+0xfc>)
 800364c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800364e:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <prvAddNewTaskToReadyList+0x100>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003656:	4a38      	ldr	r2, [pc, #224]	; (8003738 <prvAddNewTaskToReadyList+0x100>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800365c:	4b35      	ldr	r3, [pc, #212]	; (8003734 <prvAddNewTaskToReadyList+0xfc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d110      	bne.n	8003686 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003664:	f000 fc5c 	bl	8003f20 <prvInitialiseTaskLists>
 8003668:	e00d      	b.n	8003686 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800366a:	4b34      	ldr	r3, [pc, #208]	; (800373c <prvAddNewTaskToReadyList+0x104>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <prvAddNewTaskToReadyList+0x100>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	429a      	cmp	r2, r3
 800367e:	d802      	bhi.n	8003686 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003680:	4a2d      	ldr	r2, [pc, #180]	; (8003738 <prvAddNewTaskToReadyList+0x100>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <prvAddNewTaskToReadyList+0x108>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <prvAddNewTaskToReadyList+0x108>)
 800368e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <prvAddNewTaskToReadyList+0x108>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <prvAddNewTaskToReadyList+0x94>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 f901 	bl	80068a8 <SEGGER_SYSVIEW_OnTaskCreate>
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	461d      	mov	r5, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461c      	mov	r4, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	1ae3      	subs	r3, r4, r3
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	462b      	mov	r3, r5
 80036c8:	f003 fc20 	bl	8006f0c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 f96e 	bl	80069b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <prvAddNewTaskToReadyList+0x10c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <prvAddNewTaskToReadyList+0x10c>)
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4a15      	ldr	r2, [pc, #84]	; (8003748 <prvAddNewTaskToReadyList+0x110>)
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fe ff5c 	bl	80025ba <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003702:	f001 fb51 	bl	8004da8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <prvAddNewTaskToReadyList+0x104>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00e      	beq.n	800372c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <prvAddNewTaskToReadyList+0x100>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	429a      	cmp	r2, r3
 800371a:	d207      	bcs.n	800372c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <prvAddNewTaskToReadyList+0x114>)
 800371e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bdb0      	pop	{r4, r5, r7, pc}
 8003734:	200001b0 	.word	0x200001b0
 8003738:	200000d8 	.word	0x200000d8
 800373c:	200001bc 	.word	0x200001bc
 8003740:	200001cc 	.word	0x200001cc
 8003744:	200001b8 	.word	0x200001b8
 8003748:	200000dc 	.word	0x200000dc
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01b      	beq.n	800379a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <vTaskDelay+0x68>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <vTaskDelay+0x30>
        __asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	60bb      	str	r3, [r7, #8]
    }
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003780:	f000 f880 	bl	8003884 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	2023      	movs	r0, #35	; 0x23
 8003788:	f002 fb92 	bl	8005eb0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800378c:	2100      	movs	r1, #0
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fe24 	bl	80043dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003794:	f000 f884 	bl	80038a0 <xTaskResumeAll>
 8003798:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <vTaskDelay+0x6c>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	200001d8 	.word	0x200001d8
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <vTaskStartScheduler+0xa4>)
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	2282      	movs	r2, #130	; 0x82
 80037d2:	4925      	ldr	r1, [pc, #148]	; (8003868 <vTaskStartScheduler+0xa8>)
 80037d4:	4825      	ldr	r0, [pc, #148]	; (800386c <vTaskStartScheduler+0xac>)
 80037d6:	f7ff fe57 	bl	8003488 <xTaskCreate>
 80037da:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80037e2:	f000 fe73 	bl	80044cc <xTimerCreateTimerTask>
 80037e6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d124      	bne.n	8003838 <vTaskStartScheduler+0x78>
        __asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60bb      	str	r3, [r7, #8]
    }
 8003800:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <vTaskStartScheduler+0xb0>)
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <vTaskStartScheduler+0xb4>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <vTaskStartScheduler+0xb8>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <vTaskStartScheduler+0xbc>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <vTaskStartScheduler+0xa4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d102      	bne.n	8003828 <vTaskStartScheduler+0x68>
 8003822:	f003 f825 	bl	8006870 <SEGGER_SYSVIEW_OnIdle>
 8003826:	e004      	b.n	8003832 <vTaskStartScheduler+0x72>
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <vTaskStartScheduler+0xbc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f003 f87d 	bl	800692c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003832:	f001 f9e7 	bl	8004c04 <xPortStartScheduler>
 8003836:	e00e      	b.n	8003856 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d10a      	bne.n	8003856 <vTaskStartScheduler+0x96>
        __asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	607b      	str	r3, [r7, #4]
    }
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <vTaskStartScheduler+0xc0>)
 8003858:	681b      	ldr	r3, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200001d4 	.word	0x200001d4
 8003868:	08007140 	.word	0x08007140
 800386c:	08003ef1 	.word	0x08003ef1
 8003870:	200001d0 	.word	0x200001d0
 8003874:	200001bc 	.word	0x200001bc
 8003878:	200001b4 	.word	0x200001b4
 800387c:	200000d8 	.word	0x200000d8
 8003880:	20000024 	.word	0x20000024

08003884 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <vTaskSuspendAll+0x18>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a03      	ldr	r2, [pc, #12]	; (800389c <vTaskSuspendAll+0x18>)
 8003890:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	200001d8 	.word	0x200001d8

080038a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038ae:	4b43      	ldr	r3, [pc, #268]	; (80039bc <xTaskResumeAll+0x11c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <xTaskResumeAll+0x2c>
        __asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	603b      	str	r3, [r7, #0]
    }
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80038cc:	f001 fa3c 	bl	8004d48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <xTaskResumeAll+0x11c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	4a39      	ldr	r2, [pc, #228]	; (80039bc <xTaskResumeAll+0x11c>)
 80038d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <xTaskResumeAll+0x11c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d165      	bne.n	80039ae <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <xTaskResumeAll+0x120>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d061      	beq.n	80039ae <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ea:	e032      	b.n	8003952 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ec:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <xTaskResumeAll+0x124>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3318      	adds	r3, #24
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe febb 	bl	8002674 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe feb6 	bl	8002674 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4618      	mov	r0, r3
 800390c:	f003 f850 	bl	80069b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <xTaskResumeAll+0x128>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <xTaskResumeAll+0x128>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4a27      	ldr	r2, [pc, #156]	; (80039cc <xTaskResumeAll+0x12c>)
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fe fe3e 	bl	80025ba <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <xTaskResumeAll+0x130>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <xTaskResumeAll+0x134>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <xTaskResumeAll+0x124>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1c8      	bne.n	80038ec <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003960:	f000 fb5c 	bl	800401c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <xTaskResumeAll+0x138>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003970:	f000 f858 	bl	8003a24 <xTaskIncrementTick>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <xTaskResumeAll+0x134>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f1      	bne.n	8003970 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <xTaskResumeAll+0x138>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <xTaskResumeAll+0x134>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800399a:	2301      	movs	r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <xTaskResumeAll+0x13c>)
 80039a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039ae:	f001 f9fb 	bl	8004da8 <vPortExitCritical>

    return xAlreadyYielded;
 80039b2:	68bb      	ldr	r3, [r7, #8]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200001d8 	.word	0x200001d8
 80039c0:	200001b0 	.word	0x200001b0
 80039c4:	20000170 	.word	0x20000170
 80039c8:	200001b8 	.word	0x200001b8
 80039cc:	200000dc 	.word	0x200000dc
 80039d0:	200000d8 	.word	0x200000d8
 80039d4:	200001c4 	.word	0x200001c4
 80039d8:	200001c0 	.word	0x200001c0
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <xTaskGetTickCount+0x1c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	200001b4 	.word	0x200001b4

08003a00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a06:	f001 fa89 	bl	8004f1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <xTaskGetTickCountFromISR+0x20>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003a14:	683b      	ldr	r3, [r7, #0]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200001b4 	.word	0x200001b4

08003a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2e:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <xTaskIncrementTick+0x14c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 8092 	bne.w	8003b5c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a38:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a40:	4a4c      	ldr	r2, [pc, #304]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d120      	bne.n	8003a8e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <xTaskIncrementTick+0x48>
        __asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	603b      	str	r3, [r7, #0]
    }
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <xTaskIncrementTick+0x46>
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <xTaskIncrementTick+0x158>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <xTaskIncrementTick+0x158>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <xTaskIncrementTick+0x15c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a3e      	ldr	r2, [pc, #248]	; (8003b80 <xTaskIncrementTick+0x15c>)
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	f000 fac7 	bl	800401c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d34c      	bcc.n	8003b32 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa2:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	601a      	str	r2, [r3, #0]
                    break;
 8003aaa:	e042      	b.n	8003b32 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aac:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d203      	bcs.n	8003acc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aca:	e032      	b.n	8003b32 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fdcf 	bl	8002674 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fdc6 	bl	8002674 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 ff60 	bl	80069b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	2201      	movs	r2, #1
 8003af6:	409a      	lsls	r2, r3
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <xTaskIncrementTick+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <xTaskIncrementTick+0x164>)
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <xTaskIncrementTick+0x168>)
 8003b10:	441a      	add	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe fd4e 	bl	80025ba <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <xTaskIncrementTick+0x16c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3b5      	bcc.n	8003a98 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b30:	e7b2      	b.n	8003a98 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <xTaskIncrementTick+0x16c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4914      	ldr	r1, [pc, #80]	; (8003b8c <xTaskIncrementTick+0x168>)
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d901      	bls.n	8003b4e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <xTaskIncrementTick+0x170>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e004      	b.n	8003b66 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <xTaskIncrementTick+0x174>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <xTaskIncrementTick+0x174>)
 8003b64:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b66:	697b      	ldr	r3, [r7, #20]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200001d8 	.word	0x200001d8
 8003b74:	200001b4 	.word	0x200001b4
 8003b78:	20000168 	.word	0x20000168
 8003b7c:	2000016c 	.word	0x2000016c
 8003b80:	200001c8 	.word	0x200001c8
 8003b84:	200001d0 	.word	0x200001d0
 8003b88:	200001b8 	.word	0x200001b8
 8003b8c:	200000dc 	.word	0x200000dc
 8003b90:	200000d8 	.word	0x200000d8
 8003b94:	200001c4 	.word	0x200001c4
 8003b98:	200001c0 	.word	0x200001c0

08003b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <vTaskSwitchContext+0xbc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <vTaskSwitchContext+0xc0>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003bb0:	e04d      	b.n	8003c4e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <vTaskSwitchContext+0xc0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <vTaskSwitchContext+0xc4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f1c3 031f 	rsb	r3, r3, #31
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	4925      	ldr	r1, [pc, #148]	; (8003c64 <vTaskSwitchContext+0xc8>)
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
    }
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vTaskSwitchContext+0x5a>
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <vTaskSwitchContext+0xc8>)
 8003c04:	4413      	add	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d104      	bne.n	8003c28 <vTaskSwitchContext+0x8c>
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c30:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <vTaskSwitchContext+0xd0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d102      	bne.n	8003c44 <vTaskSwitchContext+0xa8>
 8003c3e:	f002 fe17 	bl	8006870 <SEGGER_SYSVIEW_OnIdle>
}
 8003c42:	e004      	b.n	8003c4e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 fe6f 	bl	800692c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200001d8 	.word	0x200001d8
 8003c5c:	200001c4 	.word	0x200001c4
 8003c60:	200001b8 	.word	0x200001b8
 8003c64:	200000dc 	.word	0x200000dc
 8003c68:	200000d8 	.word	0x200000d8
 8003c6c:	200001d4 	.word	0x200001d4

08003c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <vTaskPlaceOnEventList+0x44>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fe fcaf 	bl	8002602 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fb98 	bl	80043dc <prvAddCurrentTaskToDelayedList>
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	200000d8 	.word	0x200000d8

08003cb8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	617b      	str	r3, [r7, #20]
    }
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <vTaskPlaceOnEventListRestricted+0x58>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7fe fc66 	bl	80025ba <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003cfa:	2024      	movs	r0, #36	; 0x24
 8003cfc:	f002 f8ba 	bl	8005e74 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	68b8      	ldr	r0, [r7, #8]
 8003d04:	f000 fb6a 	bl	80043dc <prvAddCurrentTaskToDelayedList>
    }
 8003d08:	bf00      	nop
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200000d8 	.word	0x200000d8

08003d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	60fb      	str	r3, [r7, #12]
    }
 8003d3c:	bf00      	nop
 8003d3e:	e7fe      	b.n	8003d3e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	3318      	adds	r3, #24
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe fc95 	bl	8002674 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <xTaskRemoveFromEventList+0xb4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d120      	bne.n	8003d94 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fc8c 	bl	8002674 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 fe26 	bl	80069b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <xTaskRemoveFromEventList+0xb8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <xTaskRemoveFromEventList+0xb8>)
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <xTaskRemoveFromEventList+0xbc>)
 8003d84:	441a      	add	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7fe fc14 	bl	80025ba <vListInsertEnd>
 8003d92:	e005      	b.n	8003da0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	3318      	adds	r3, #24
 8003d98:	4619      	mov	r1, r3
 8003d9a:	480e      	ldr	r0, [pc, #56]	; (8003dd4 <xTaskRemoveFromEventList+0xc0>)
 8003d9c:	f7fe fc0d 	bl	80025ba <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <xTaskRemoveFromEventList+0xc4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d905      	bls.n	8003dba <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <xTaskRemoveFromEventList+0xc8>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e001      	b.n	8003dbe <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003dbe:	697b      	ldr	r3, [r7, #20]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200001d8 	.word	0x200001d8
 8003dcc:	200001b8 	.word	0x200001b8
 8003dd0:	200000dc 	.word	0x200000dc
 8003dd4:	20000170 	.word	0x20000170
 8003dd8:	200000d8 	.word	0x200000d8
 8003ddc:	200001c4 	.word	0x200001c4

08003de0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <vTaskInternalSetTimeOutState+0x24>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <vTaskInternalSetTimeOutState+0x28>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	200001c8 	.word	0x200001c8
 8003e08:	200001b4 	.word	0x200001b4

08003e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
    }
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60fb      	str	r3, [r7, #12]
    }
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003e4e:	f000 ff7b 	bl	8004d48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <xTaskCheckForTimeOut+0xc4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d102      	bne.n	8003e72 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e026      	b.n	8003ec0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <xTaskCheckForTimeOut+0xc8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d00a      	beq.n	8003e94 <xTaskCheckForTimeOut+0x88>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d305      	bcc.n	8003e94 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e015      	b.n	8003ec0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d20b      	bcs.n	8003eb6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1ad2      	subs	r2, r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ff98 	bl	8003de0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	e004      	b.n	8003ec0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ec0:	f000 ff72 	bl	8004da8 <vPortExitCritical>

    return xReturn;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200001b4 	.word	0x200001b4
 8003ed4:	200001c8 	.word	0x200001c8

08003ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <vTaskMissedYield+0x14>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	200001c4 	.word	0x200001c4

08003ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ef8:	f000 f852 	bl	8003fa0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvIdleTask+0x28>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d9f9      	bls.n	8003ef8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <prvIdleTask+0x2c>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003f14:	e7f0      	b.n	8003ef8 <prvIdleTask+0x8>
 8003f16:	bf00      	nop
 8003f18:	200000dc 	.word	0x200000dc
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	e00c      	b.n	8003f46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <prvInitialiseTaskLists+0x60>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fb10 	bl	8002560 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3301      	adds	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d9ef      	bls.n	8003f2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <prvInitialiseTaskLists+0x64>)
 8003f4e:	f7fe fb07 	bl	8002560 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f52:	480d      	ldr	r0, [pc, #52]	; (8003f88 <prvInitialiseTaskLists+0x68>)
 8003f54:	f7fe fb04 	bl	8002560 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <prvInitialiseTaskLists+0x6c>)
 8003f5a:	f7fe fb01 	bl	8002560 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f5e:	480c      	ldr	r0, [pc, #48]	; (8003f90 <prvInitialiseTaskLists+0x70>)
 8003f60:	f7fe fafe 	bl	8002560 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f64:	480b      	ldr	r0, [pc, #44]	; (8003f94 <prvInitialiseTaskLists+0x74>)
 8003f66:	f7fe fafb 	bl	8002560 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvInitialiseTaskLists+0x78>)
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <prvInitialiseTaskLists+0x64>)
 8003f6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvInitialiseTaskLists+0x7c>)
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <prvInitialiseTaskLists+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200000dc 	.word	0x200000dc
 8003f84:	20000140 	.word	0x20000140
 8003f88:	20000154 	.word	0x20000154
 8003f8c:	20000170 	.word	0x20000170
 8003f90:	20000184 	.word	0x20000184
 8003f94:	2000019c 	.word	0x2000019c
 8003f98:	20000168 	.word	0x20000168
 8003f9c:	2000016c 	.word	0x2000016c

08003fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fa6:	e019      	b.n	8003fdc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003fa8:	f000 fece 	bl	8004d48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <prvCheckTasksWaitingTermination+0x50>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fb5b 	bl	8002674 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <prvCheckTasksWaitingTermination+0x54>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4a0b      	ldr	r2, [pc, #44]	; (8003ff4 <prvCheckTasksWaitingTermination+0x54>)
 8003fc6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fd0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003fd2:	f000 fee9 	bl	8004da8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f810 	bl	8003ffc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e1      	bne.n	8003fa8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000184 	.word	0x20000184
 8003ff4:	200001b0 	.word	0x200001b0
 8003ff8:	20000198 	.word	0x20000198

08003ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	4618      	mov	r0, r3
 800400a:	f001 f8a7 	bl	800515c <vPortFree>
                vPortFree( pxTCB );
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f001 f8a4 	bl	800515c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <prvResetNextTaskUnblockTime+0x30>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <prvResetNextTaskUnblockTime+0x34>)
 800402c:	f04f 32ff 	mov.w	r2, #4294967295
 8004030:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004032:	e005      	b.n	8004040 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <prvResetNextTaskUnblockTime+0x30>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <prvResetNextTaskUnblockTime+0x34>)
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000168 	.word	0x20000168
 8004050:	200001d0 	.word	0x200001d0

08004054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <xTaskGetSchedulerState+0x34>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004062:	2301      	movs	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	e008      	b.n	800407a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <xTaskGetSchedulerState+0x38>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004070:	2302      	movs	r3, #2
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	e001      	b.n	800407a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800407a:	687b      	ldr	r3, [r7, #4]
    }
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	200001bc 	.word	0x200001bc
 800408c:	200001d8 	.word	0x200001d8

08004090 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d063      	beq.n	800416e <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	4b33      	ldr	r3, [pc, #204]	; (8004178 <xTaskPriorityInherit+0xe8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d253      	bcs.n	800415c <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db06      	blt.n	80040ca <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040bc:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <xTaskPriorityInherit+0xe8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	f1c3 0205 	rsb	r2, r3, #5
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6959      	ldr	r1, [r3, #20]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4a28      	ldr	r2, [pc, #160]	; (800417c <xTaskPriorityInherit+0xec>)
 80040dc:	4413      	add	r3, r2
 80040de:	4299      	cmp	r1, r3
 80040e0:	d12f      	bne.n	8004142 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fac4 	bl	8002674 <uxListRemove>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	2201      	movs	r2, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	43da      	mvns	r2, r3
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <xTaskPriorityInherit+0xf0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4013      	ands	r3, r2
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <xTaskPriorityInherit+0xf0>)
 8004106:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <xTaskPriorityInherit+0xe8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	2201      	movs	r2, #1
 8004118:	409a      	lsls	r2, r3
 800411a:	4b19      	ldr	r3, [pc, #100]	; (8004180 <xTaskPriorityInherit+0xf0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	4a17      	ldr	r2, [pc, #92]	; (8004180 <xTaskPriorityInherit+0xf0>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <xTaskPriorityInherit+0xec>)
 8004132:	441a      	add	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fe fa3d 	bl	80025ba <vListInsertEnd>
 8004140:	e004      	b.n	800414c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <xTaskPriorityInherit+0xe8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4619      	mov	r1, r3
 8004150:	2049      	movs	r0, #73	; 0x49
 8004152:	f001 fead 	bl	8005eb0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004156:	2301      	movs	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e008      	b.n	800416e <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <xTaskPriorityInherit+0xe8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	429a      	cmp	r2, r3
 8004168:	d201      	bcs.n	800416e <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800416e:	68fb      	ldr	r3, [r7, #12]
    }
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200000d8 	.word	0x200000d8
 800417c:	200000dc 	.word	0x200000dc
 8004180:	200001b8 	.word	0x200001b8

08004184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d068      	beq.n	800426c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800419a:	4b37      	ldr	r3, [pc, #220]	; (8004278 <xTaskPriorityDisinherit+0xf4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d00a      	beq.n	80041ba <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
    }
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60bb      	str	r3, [r7, #8]
    }
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041dc:	1e5a      	subs	r2, r3, #1
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d03e      	beq.n	800426c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d13a      	bne.n	800426c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fa3a 	bl	8002674 <uxListRemove>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	2201      	movs	r2, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43da      	mvns	r2, r3
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <xTaskPriorityDisinherit+0xf8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4013      	ands	r3, r2
 8004218:	4a18      	ldr	r2, [pc, #96]	; (800427c <xTaskPriorityDisinherit+0xf8>)
 800421a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4619      	mov	r1, r3
 8004220:	204a      	movs	r0, #74	; 0x4a
 8004222:	f001 fe45 	bl	8005eb0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	f1c3 0205 	rsb	r2, r3, #5
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	2201      	movs	r2, #1
 8004240:	409a      	lsls	r2, r3
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <xTaskPriorityDisinherit+0xf8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4313      	orrs	r3, r2
 8004248:	4a0c      	ldr	r2, [pc, #48]	; (800427c <xTaskPriorityDisinherit+0xf8>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4a09      	ldr	r2, [pc, #36]	; (8004280 <xTaskPriorityDisinherit+0xfc>)
 800425a:	441a      	add	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe f9a9 	bl	80025ba <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004268:	2301      	movs	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800426c:	697b      	ldr	r3, [r7, #20]
    }
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200000d8 	.word	0x200000d8
 800427c:	200001b8 	.word	0x200001b8
 8004280:	200000dc 	.word	0x200000dc

08004284 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004292:	2301      	movs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8081 	beq.w	80043a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60fb      	str	r3, [r7, #12]
    }
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d902      	bls.n	80042cc <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	e002      	b.n	80042d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d061      	beq.n	80043a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d15c      	bne.n	80043a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80042e6:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d10a      	bne.n	8004306 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	60bb      	str	r3, [r7, #8]
    }
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4619      	mov	r1, r3
 800430a:	204a      	movs	r0, #74	; 0x4a
 800430c:	f001 fdd0 	bl	8005eb0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	db04      	blt.n	800432e <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f1c3 0205 	rsb	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	6959      	ldr	r1, [r3, #20]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800433e:	4413      	add	r3, r2
 8004340:	4299      	cmp	r1, r3
 8004342:	d12d      	bne.n	80043a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe f993 	bl	8002674 <uxListRemove>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	2201      	movs	r2, #1
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4013      	ands	r3, r2
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004368:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4618      	mov	r0, r3
 800436e:	f002 fb1f 	bl	80069b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	2201      	movs	r2, #1
 8004378:	409a      	lsls	r2, r3
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4a06      	ldr	r2, [pc, #24]	; (80043ac <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004392:	441a      	add	r2, r3
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f7fe f90d 	bl	80025ba <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80043a0:	bf00      	nop
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200000d8 	.word	0x200000d8
 80043ac:	200000dc 	.word	0x200000dc
 80043b0:	200001b8 	.word	0x200001b8

080043b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043c6:	3201      	adds	r2, #1
 80043c8:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80043ca:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80043cc:	681b      	ldr	r3, [r3, #0]
    }
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	200000d8 	.word	0x200000d8

080043dc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80043e6:	4b32      	ldr	r3, [pc, #200]	; (80044b0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe f93e 	bl	8002674 <uxListRemove>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	2201      	movs	r2, #1
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43da      	mvns	r2, r3
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4013      	ands	r3, r2
 8004412:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004414:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d110      	bne.n	8004440 <prvAddCurrentTaskToDelayedList+0x64>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004424:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	211b      	movs	r1, #27
 800442a:	4618      	mov	r0, r3
 800442c:	f002 fb02 	bl	8006a34 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004430:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4820      	ldr	r0, [pc, #128]	; (80044bc <prvAddCurrentTaskToDelayedList+0xe0>)
 800443a:	f7fe f8be 	bl	80025ba <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800443e:	e032      	b.n	80044a6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	429a      	cmp	r2, r3
 8004456:	d20f      	bcs.n	8004478 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004458:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2104      	movs	r1, #4
 800445e:	4618      	mov	r0, r3
 8004460:	f002 fae8 	bl	8006a34 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004464:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fe f8c6 	bl	8002602 <vListInsert>
}
 8004476:	e016      	b.n	80044a6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2104      	movs	r1, #4
 800447e:	4618      	mov	r0, r3
 8004480:	f002 fad8 	bl	8006a34 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe f8b6 	bl	8002602 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	429a      	cmp	r2, r3
 800449e:	d202      	bcs.n	80044a6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80044a0:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xec>)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200001b4 	.word	0x200001b4
 80044b4:	200000d8 	.word	0x200000d8
 80044b8:	200001b8 	.word	0x200001b8
 80044bc:	2000019c 	.word	0x2000019c
 80044c0:	2000016c 	.word	0x2000016c
 80044c4:	20000168 	.word	0x20000168
 80044c8:	200001d0 	.word	0x200001d0

080044cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80044d6:	f000 fad5 	bl	8004a84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <xTimerCreateTimerTask+0x54>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <xTimerCreateTimerTask+0x58>)
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	2302      	movs	r3, #2
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044f0:	490d      	ldr	r1, [pc, #52]	; (8004528 <xTimerCreateTimerTask+0x5c>)
 80044f2:	480e      	ldr	r0, [pc, #56]	; (800452c <xTimerCreateTimerTask+0x60>)
 80044f4:	f7fe ffc8 	bl	8003488 <xTaskCreate>
 80044f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	603b      	str	r3, [r7, #0]
    }
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004516:	687b      	ldr	r3, [r7, #4]
    }
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	2000020c 	.word	0x2000020c
 8004524:	20000210 	.word	0x20000210
 8004528:	08007148 	.word	0x08007148
 800452c:	08004665 	.word	0x08004665

08004530 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	623b      	str	r3, [r7, #32]
    }
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <xTimerGenericCommand+0x98>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02a      	beq.n	80045bc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	dc18      	bgt.n	80045aa <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004578:	f7ff fd6c 	bl	8004054 <xTaskGetSchedulerState>
 800457c:	4603      	mov	r3, r0
 800457e:	2b02      	cmp	r3, #2
 8004580:	d109      	bne.n	8004596 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <xTimerGenericCommand+0x98>)
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f107 0114 	add.w	r1, r7, #20
 800458a:	2300      	movs	r3, #0
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	f7fe f9bd 	bl	800290c <xQueueGenericSend>
 8004592:	6278      	str	r0, [r7, #36]	; 0x24
 8004594:	e012      	b.n	80045bc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <xTimerGenericCommand+0x98>)
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f107 0114 	add.w	r1, r7, #20
 800459e:	2300      	movs	r3, #0
 80045a0:	2200      	movs	r2, #0
 80045a2:	f7fe f9b3 	bl	800290c <xQueueGenericSend>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24
 80045a8:	e008      	b.n	80045bc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <xTimerGenericCommand+0x98>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f107 0114 	add.w	r1, r7, #20
 80045b2:	2300      	movs	r3, #0
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	f7fe facf 	bl	8002b58 <xQueueGenericSendFromISR>
 80045ba:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80045be:	4618      	mov	r0, r3
 80045c0:	3728      	adds	r7, #40	; 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000020c 	.word	0x2000020c

080045cc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <prvProcessExpiredTimer+0x94>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe f845 	bl	8002674 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d022      	beq.n	800463e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	18d1      	adds	r1, r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	6978      	ldr	r0, [r7, #20]
 8004606:	f000 f8d1 	bl	80047ac <prvInsertTimerInActiveList>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01f      	beq.n	8004650 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004610:	2300      	movs	r3, #0
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	2100      	movs	r1, #0
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff ff88 	bl	8004530 <xTimerGenericCommand>
 8004620:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d113      	bne.n	8004650 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60fb      	str	r3, [r7, #12]
    }
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	b2da      	uxtb	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	6978      	ldr	r0, [r7, #20]
 8004656:	4798      	blx	r3
    }
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000204 	.word	0x20000204

08004664 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f857 	bl	8004724 <prvGetNextExpireTime>
 8004676:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4619      	mov	r1, r3
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f803 	bl	8004688 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004682:	f000 f8d5 	bl	8004830 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004686:	e7f1      	b.n	800466c <prvTimerTask+0x8>

08004688 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004692:	f7ff f8f7 	bl	8003884 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f866 	bl	800476c <prvSampleTimeNow>
 80046a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d130      	bne.n	800470a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <prvProcessTimerOrBlockTask+0x3c>
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d806      	bhi.n	80046c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80046b6:	f7ff f8f3 	bl	80038a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff85 	bl	80045cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80046c2:	e024      	b.n	800470e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <prvProcessTimerOrBlockTask+0x90>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <prvProcessTimerOrBlockTask+0x50>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <prvProcessTimerOrBlockTask+0x52>
 80046d8:	2300      	movs	r3, #0
 80046da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <prvProcessTimerOrBlockTask+0x94>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7fe fe99 	bl	8003420 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80046ee:	f7ff f8d7 	bl	80038a0 <xTaskResumeAll>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <prvProcessTimerOrBlockTask+0x98>)
 80046fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	f3bf 8f6f 	isb	sy
    }
 8004708:	e001      	b.n	800470e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800470a:	f7ff f8c9 	bl	80038a0 <xTaskResumeAll>
    }
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000208 	.word	0x20000208
 800471c:	2000020c 	.word	0x2000020c
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800472c:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <prvGetNextExpireTime+0x44>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <prvGetNextExpireTime+0x16>
 8004736:	2201      	movs	r2, #1
 8004738:	e000      	b.n	800473c <prvGetNextExpireTime+0x18>
 800473a:	2200      	movs	r2, #0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <prvGetNextExpireTime+0x44>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e001      	b.n	8004758 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004758:	68fb      	ldr	r3, [r7, #12]
    }
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000204 	.word	0x20000204

0800476c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004774:	f7ff f934 	bl	80039e0 <xTaskGetTickCount>
 8004778:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <prvSampleTimeNow+0x3c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d205      	bcs.n	8004790 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004784:	f000 f91a 	bl	80049bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e002      	b.n	8004796 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <prvSampleTimeNow+0x3c>)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800479c:	68fb      	ldr	r3, [r7, #12]
    }
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000214 	.word	0x20000214

080047ac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d812      	bhi.n	80047f8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e01b      	b.n	800481e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <prvInsertTimerInActiveList+0x7c>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f7fd ff06 	bl	8002602 <vListInsert>
 80047f6:	e012      	b.n	800481e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d206      	bcs.n	800480e <prvInsertTimerInActiveList+0x62>
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e007      	b.n	800481e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <prvInsertTimerInActiveList+0x80>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7fd fef2 	bl	8002602 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800481e:	697b      	ldr	r3, [r7, #20]
    }
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000208 	.word	0x20000208
 800482c:	20000204 	.word	0x20000204

08004830 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004830:	b580      	push	{r7, lr}
 8004832:	b08c      	sub	sp, #48	; 0x30
 8004834:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004836:	e0ae      	b.n	8004996 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f2c0 80aa 	blt.w	8004994 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7fd ff0f 	bl	8002674 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff87 	bl	800476c <prvSampleTimeNow>
 800485e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b09      	cmp	r3, #9
 8004864:	f200 8097 	bhi.w	8004996 <prvProcessReceivedCommands+0x166>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <prvProcessReceivedCommands+0x40>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004899 	.word	0x08004899
 8004874:	08004899 	.word	0x08004899
 8004878:	08004899 	.word	0x08004899
 800487c:	0800490d 	.word	0x0800490d
 8004880:	08004921 	.word	0x08004921
 8004884:	0800496b 	.word	0x0800496b
 8004888:	08004899 	.word	0x08004899
 800488c:	08004899 	.word	0x08004899
 8004890:	0800490d 	.word	0x0800490d
 8004894:	08004921 	.word	0x08004921
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	18d1      	adds	r1, r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b8:	f7ff ff78 	bl	80047ac <prvInsertTimerInActiveList>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d069      	beq.n	8004996 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048c8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d05e      	beq.n	8004996 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	441a      	add	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048ea:	f7ff fe21 	bl	8004530 <xTimerGenericCommand>
 80048ee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d14f      	bne.n	8004996 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	61bb      	str	r3, [r7, #24]
    }
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	b2da      	uxtb	r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800491e:	e03a      	b.n	8004996 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	617b      	str	r3, [r7, #20]
    }
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	18d1      	adds	r1, r2, r3
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	6a3a      	ldr	r2, [r7, #32]
 8004962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004964:	f7ff ff22 	bl	80047ac <prvInsertTimerInActiveList>
                        break;
 8004968:	e015      	b.n	8004996 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d103      	bne.n	8004980 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800497a:	f000 fbef 	bl	800515c <vPortFree>
 800497e:	e00a      	b.n	8004996 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004992:	e000      	b.n	8004996 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004994:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <prvProcessReceivedCommands+0x188>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f107 0108 	add.w	r1, r7, #8
 800499e:	2200      	movs	r2, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe f997 	bl	8002cd4 <xQueueReceive>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f af45 	bne.w	8004838 <prvProcessReceivedCommands+0x8>
        }
    }
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000020c 	.word	0x2000020c

080049bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049c2:	e048      	b.n	8004a56 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049c4:	4b2d      	ldr	r3, [pc, #180]	; (8004a7c <prvSwitchTimerLists+0xc0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ce:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <prvSwitchTimerLists+0xc0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3304      	adds	r3, #4
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fd fe49 	bl	8002674 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02e      	beq.n	8004a56 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d90e      	bls.n	8004a28 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <prvSwitchTimerLists+0xc0>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fd fdee 	bl	8002602 <vListInsert>
 8004a26:	e016      	b.n	8004a56 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	2100      	movs	r1, #0
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fd7c 	bl	8004530 <xTimerGenericCommand>
 8004a38:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	603b      	str	r3, [r7, #0]
    }
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <prvSwitchTimerLists+0xc0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1b1      	bne.n	80049c4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <prvSwitchTimerLists+0xc0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <prvSwitchTimerLists+0xc4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <prvSwitchTimerLists+0xc0>)
 8004a6c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004a6e:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <prvSwitchTimerLists+0xc4>)
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	6013      	str	r3, [r2, #0]
    }
 8004a74:	bf00      	nop
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000204 	.word	0x20000204
 8004a80:	20000208 	.word	0x20000208

08004a84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004a88:	f000 f95e 	bl	8004d48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004a8c:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <prvCheckForValidListAndQueue+0x54>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11d      	bne.n	8004ad0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004a94:	4811      	ldr	r0, [pc, #68]	; (8004adc <prvCheckForValidListAndQueue+0x58>)
 8004a96:	f7fd fd63 	bl	8002560 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004a9a:	4811      	ldr	r0, [pc, #68]	; (8004ae0 <prvCheckForValidListAndQueue+0x5c>)
 8004a9c:	f7fd fd60 	bl	8002560 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <prvCheckForValidListAndQueue+0x60>)
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <prvCheckForValidListAndQueue+0x58>)
 8004aa4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <prvCheckForValidListAndQueue+0x64>)
 8004aa8:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <prvCheckForValidListAndQueue+0x5c>)
 8004aaa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004aac:	2200      	movs	r2, #0
 8004aae:	210c      	movs	r1, #12
 8004ab0:	200a      	movs	r0, #10
 8004ab2:	f7fd fe71 	bl	8002798 <xQueueGenericCreate>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <prvCheckForValidListAndQueue+0x54>)
 8004aba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <prvCheckForValidListAndQueue+0x54>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <prvCheckForValidListAndQueue+0x54>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4908      	ldr	r1, [pc, #32]	; (8004aec <prvCheckForValidListAndQueue+0x68>)
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fc76 	bl	80033bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ad0:	f000 f96a 	bl	8004da8 <vPortExitCritical>
    }
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2000020c 	.word	0x2000020c
 8004adc:	200001dc 	.word	0x200001dc
 8004ae0:	200001f0 	.word	0x200001f0
 8004ae4:	20000204 	.word	0x20000204
 8004ae8:	20000208 	.word	0x20000208
 8004aec:	08007150 	.word	0x08007150

08004af0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b04      	subs	r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b20:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <pxPortInitialiseStack+0x64>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b14      	subs	r3, #20
 8004b2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f06f 0202 	mvn.w	r2, #2
 8004b3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3b20      	subs	r3, #32
 8004b44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	08004b59 	.word	0x08004b59

08004b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <prvTaskExitError+0x54>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d00a      	beq.n	8004b82 <prvTaskExitError+0x2a>
        __asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
    }
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <prvTaskExitError+0x28>
        __asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	60bb      	str	r3, [r7, #8]
    }
 8004b94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004b96:	bf00      	nop
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0fc      	beq.n	8004b98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000028 	.word	0x20000028

08004bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <pxCurrentTCBConst2>)
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	6808      	ldr	r0, [r1, #0]
 8004bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	f380 8809 	msr	PSP, r0
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	f380 8811 	msr	BASEPRI, r0
 8004bca:	4770      	bx	lr
 8004bcc:	f3af 8000 	nop.w

08004bd0 <pxCurrentTCBConst2>:
 8004bd0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop

08004bd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <prvPortStartFirstTask+0x24>)
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	6800      	ldr	r0, [r0, #0]
 8004bde:	f380 8808 	msr	MSP, r0
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8814 	msr	CONTROL, r0
 8004bea:	b662      	cpsie	i
 8004bec:	b661      	cpsie	f
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	df00      	svc	0
 8004bf8:	bf00      	nop
 8004bfa:	0000      	.short	0x0000
 8004bfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop

08004c04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c0a:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <xPortStartScheduler+0x120>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a46      	ldr	r2, [pc, #280]	; (8004d28 <xPortStartScheduler+0x124>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10a      	bne.n	8004c2a <xPortStartScheduler+0x26>
        __asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	613b      	str	r3, [r7, #16]
    }
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <xPortStartScheduler+0x120>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a3f      	ldr	r2, [pc, #252]	; (8004d2c <xPortStartScheduler+0x128>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d10a      	bne.n	8004c4a <xPortStartScheduler+0x46>
        __asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	60fb      	str	r3, [r7, #12]
    }
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c4a:	4b39      	ldr	r3, [pc, #228]	; (8004d30 <xPortStartScheduler+0x12c>)
 8004c4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	22ff      	movs	r2, #255	; 0xff
 8004c5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <xPortStartScheduler+0x130>)
 8004c70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c72:	4b31      	ldr	r3, [pc, #196]	; (8004d38 <xPortStartScheduler+0x134>)
 8004c74:	2207      	movs	r2, #7
 8004c76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c78:	e009      	b.n	8004c8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <xPortStartScheduler+0x134>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4a2d      	ldr	r2, [pc, #180]	; (8004d38 <xPortStartScheduler+0x134>)
 8004c82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d0ef      	beq.n	8004c7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <xPortStartScheduler+0x134>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d00a      	beq.n	8004cbc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	60bb      	str	r3, [r7, #8]
    }
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <xPortStartScheduler+0x134>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <xPortStartScheduler+0x134>)
 8004cc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <xPortStartScheduler+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cce:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <xPortStartScheduler+0x134>)
 8004cd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004cda:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <xPortStartScheduler+0x138>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <xPortStartScheduler+0x138>)
 8004ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ce4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <xPortStartScheduler+0x138>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <xPortStartScheduler+0x138>)
 8004cec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cf0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004cf2:	f000 f8e3 	bl	8004ebc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <xPortStartScheduler+0x13c>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004cfc:	f000 f902 	bl	8004f04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d00:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <xPortStartScheduler+0x140>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a0f      	ldr	r2, [pc, #60]	; (8004d44 <xPortStartScheduler+0x140>)
 8004d06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d0c:	f7ff ff64 	bl	8004bd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d10:	f7fe ff44 	bl	8003b9c <vTaskSwitchContext>
    prvTaskExitError();
 8004d14:	f7ff ff20 	bl	8004b58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	e000ed00 	.word	0xe000ed00
 8004d28:	410fc271 	.word	0x410fc271
 8004d2c:	410fc270 	.word	0x410fc270
 8004d30:	e000e400 	.word	0xe000e400
 8004d34:	20000218 	.word	0x20000218
 8004d38:	2000021c 	.word	0x2000021c
 8004d3c:	e000ed20 	.word	0xe000ed20
 8004d40:	20000028 	.word	0x20000028
 8004d44:	e000ef34 	.word	0xe000ef34

08004d48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	607b      	str	r3, [r7, #4]
    }
 8004d60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <vPortEnterCritical+0x58>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <vPortEnterCritical+0x58>)
 8004d6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <vPortEnterCritical+0x58>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10f      	bne.n	8004d94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <vPortEnterCritical+0x5c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <vPortEnterCritical+0x4c>
        __asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	603b      	str	r3, [r7, #0]
    }
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <vPortEnterCritical+0x4a>
    }
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	20000028 	.word	0x20000028
 8004da4:	e000ed04 	.word	0xe000ed04

08004da8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <vPortExitCritical+0x50>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <vPortExitCritical+0x24>
        __asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	607b      	str	r3, [r7, #4]
    }
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vPortExitCritical+0x50>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <vPortExitCritical+0x50>)
 8004dd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <vPortExitCritical+0x50>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d105      	bne.n	8004dea <vPortExitCritical+0x42>
 8004dde:	2300      	movs	r3, #0
 8004de0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f383 8811 	msr	BASEPRI, r3
    }
 8004de8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000028 	.word	0x20000028
 8004dfc:	00000000 	.word	0x00000000

08004e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e00:	f3ef 8009 	mrs	r0, PSP
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <pxCurrentTCBConst>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	f01e 0f10 	tst.w	lr, #16
 8004e10:	bf08      	it	eq
 8004e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1a:	6010      	str	r0, [r2, #0]
 8004e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e24:	f380 8811 	msr	BASEPRI, r0
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f7fe feb4 	bl	8003b9c <vTaskSwitchContext>
 8004e34:	f04f 0000 	mov.w	r0, #0
 8004e38:	f380 8811 	msr	BASEPRI, r0
 8004e3c:	bc09      	pop	{r0, r3}
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	6808      	ldr	r0, [r1, #0]
 8004e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e46:	f01e 0f10 	tst.w	lr, #16
 8004e4a:	bf08      	it	eq
 8004e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e50:	f380 8809 	msr	PSP, r0
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	f3af 8000 	nop.w

08004e60 <pxCurrentTCBConst>:
 8004e60:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop

08004e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	607b      	str	r3, [r7, #4]
    }
 8004e80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004e82:	f001 fc7b 	bl	800677c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e86:	f7fe fdcd 	bl	8003a24 <xTaskIncrementTick>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d006      	beq.n	8004e9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004e90:	f001 fcd2 	bl	8006838 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <SysTick_Handler+0x50>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e001      	b.n	8004ea2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004e9e:	f001 fcaf 	bl	8006800 <SEGGER_SYSVIEW_RecordExitISR>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f383 8811 	msr	BASEPRI, r3
    }
 8004eac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <vPortSetupTimerInterrupt+0x38>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <vPortSetupTimerInterrupt+0x3c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <vPortSetupTimerInterrupt+0x40>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <vPortSetupTimerInterrupt+0x44>)
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010
 8004ef4:	e000e018 	.word	0xe000e018
 8004ef8:	20000018 	.word	0x20000018
 8004efc:	10624dd3 	.word	0x10624dd3
 8004f00:	e000e014 	.word	0xe000e014

08004f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f14 <vPortEnableVFP+0x10>
 8004f08:	6801      	ldr	r1, [r0, #0]
 8004f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f0e:	6001      	str	r1, [r0, #0]
 8004f10:	4770      	bx	lr
 8004f12:	0000      	.short	0x0000
 8004f14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop

08004f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004f22:	f3ef 8305 	mrs	r3, IPSR
 8004f26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	d914      	bls.n	8004f58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <vPortValidateInterruptPriority+0x70>)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <vPortValidateInterruptPriority+0x74>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	7afa      	ldrb	r2, [r7, #11]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d20a      	bcs.n	8004f58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
    }
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <vPortValidateInterruptPriority+0x78>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <vPortValidateInterruptPriority+0x7c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d90a      	bls.n	8004f7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	603b      	str	r3, [r7, #0]
    }
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <vPortValidateInterruptPriority+0x60>
    }
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000e3f0 	.word	0xe000e3f0
 8004f90:	20000218 	.word	0x20000218
 8004f94:	e000ed0c 	.word	0xe000ed0c
 8004f98:	2000021c 	.word	0x2000021c

08004f9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004fa8:	f7fe fc6c 	bl	8003884 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004fac:	4b65      	ldr	r3, [pc, #404]	; (8005144 <pvPortMalloc+0x1a8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004fb4:	f000 f934 	bl	8005220 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fb8:	4b63      	ldr	r3, [pc, #396]	; (8005148 <pvPortMalloc+0x1ac>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f040 80a7 	bne.w	8005114 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02d      	beq.n	8005028 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004fcc:	2208      	movs	r2, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d227      	bcs.n	8005028 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004fd8:	2208      	movs	r2, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d021      	beq.n	800502e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f023 0307 	bic.w	r3, r3, #7
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d214      	bcs.n	8005022 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f023 0307 	bic.w	r3, r3, #7
 8004ffe:	3308      	adds	r3, #8
 8005000:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	2b00      	cmp	r3, #0
 800500a:	d010      	beq.n	800502e <pvPortMalloc+0x92>
        __asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	617b      	str	r3, [r7, #20]
    }
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005026:	e002      	b.n	800502e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	e000      	b.n	8005030 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800502e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d06e      	beq.n	8005114 <pvPortMalloc+0x178>
 8005036:	4b45      	ldr	r3, [pc, #276]	; (800514c <pvPortMalloc+0x1b0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d869      	bhi.n	8005114 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005040:	4b43      	ldr	r3, [pc, #268]	; (8005150 <pvPortMalloc+0x1b4>)
 8005042:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005044:	4b42      	ldr	r3, [pc, #264]	; (8005150 <pvPortMalloc+0x1b4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800504a:	e004      	b.n	8005056 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d903      	bls.n	8005068 <pvPortMalloc+0xcc>
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f1      	bne.n	800504c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005068:	4b36      	ldr	r3, [pc, #216]	; (8005144 <pvPortMalloc+0x1a8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	429a      	cmp	r2, r3
 8005070:	d050      	beq.n	8005114 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2208      	movs	r2, #8
 8005078:	4413      	add	r3, r2
 800507a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	1ad2      	subs	r2, r2, r3
 800508c:	2308      	movs	r3, #8
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	429a      	cmp	r2, r3
 8005092:	d91f      	bls.n	80050d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <pvPortMalloc+0x120>
        __asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	613b      	str	r3, [r7, #16]
    }
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050ce:	69b8      	ldr	r0, [r7, #24]
 80050d0:	f000 f908 	bl	80052e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050d4:	4b1d      	ldr	r3, [pc, #116]	; (800514c <pvPortMalloc+0x1b0>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	4a1b      	ldr	r2, [pc, #108]	; (800514c <pvPortMalloc+0x1b0>)
 80050e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <pvPortMalloc+0x1b0>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <pvPortMalloc+0x1b8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d203      	bcs.n	80050f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <pvPortMalloc+0x1b0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a18      	ldr	r2, [pc, #96]	; (8005154 <pvPortMalloc+0x1b8>)
 80050f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <pvPortMalloc+0x1ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	431a      	orrs	r2, r3
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800510a:	4b13      	ldr	r3, [pc, #76]	; (8005158 <pvPortMalloc+0x1bc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3301      	adds	r3, #1
 8005110:	4a11      	ldr	r2, [pc, #68]	; (8005158 <pvPortMalloc+0x1bc>)
 8005112:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005114:	f7fe fbc4 	bl	80038a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <pvPortMalloc+0x19c>
        __asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60fb      	str	r3, [r7, #12]
    }
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <pvPortMalloc+0x19a>
    return pvReturn;
 8005138:	69fb      	ldr	r3, [r7, #28]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20012e28 	.word	0x20012e28
 8005148:	20012e3c 	.word	0x20012e3c
 800514c:	20012e2c 	.word	0x20012e2c
 8005150:	20012e20 	.word	0x20012e20
 8005154:	20012e30 	.word	0x20012e30
 8005158:	20012e34 	.word	0x20012e34

0800515c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d04d      	beq.n	800520a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800516e:	2308      	movs	r3, #8
 8005170:	425b      	negs	r3, r3
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <vPortFree+0xb8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4013      	ands	r3, r2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <vPortFree+0x44>
        __asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	60fb      	str	r3, [r7, #12]
    }
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <vPortFree+0x62>
        __asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60bb      	str	r3, [r7, #8]
    }
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <vPortFree+0xb8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01e      	beq.n	800520a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11a      	bne.n	800520a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <vPortFree+0xb8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	43db      	mvns	r3, r3
 80051de:	401a      	ands	r2, r3
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80051e4:	f7fe fb4e 	bl	8003884 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <vPortFree+0xbc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <vPortFree+0xbc>)
 80051f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051f6:	6938      	ldr	r0, [r7, #16]
 80051f8:	f000 f874 	bl	80052e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <vPortFree+0xc0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a06      	ldr	r2, [pc, #24]	; (800521c <vPortFree+0xc0>)
 8005204:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005206:	f7fe fb4b 	bl	80038a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800520a:	bf00      	nop
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20012e3c 	.word	0x20012e3c
 8005218:	20012e2c 	.word	0x20012e2c
 800521c:	20012e38 	.word	0x20012e38

08005220 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005226:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800522a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <prvHeapInit+0xac>)
 800522e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3307      	adds	r3, #7
 800523e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0307 	bic.w	r3, r3, #7
 8005246:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <prvHeapInit+0xac>)
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005258:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <prvHeapInit+0xb0>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800525e:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <prvHeapInit+0xb0>)
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4413      	add	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800526c:	2208      	movs	r2, #8
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <prvHeapInit+0xb4>)
 8005280:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005282:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <prvHeapInit+0xb4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <prvHeapInit+0xb4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	1ad2      	subs	r2, r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <prvHeapInit+0xb4>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <prvHeapInit+0xb8>)
 80052ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a09      	ldr	r2, [pc, #36]	; (80052dc <prvHeapInit+0xbc>)
 80052b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <prvHeapInit+0xc0>)
 80052ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052be:	601a      	str	r2, [r3, #0]
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000220 	.word	0x20000220
 80052d0:	20012e20 	.word	0x20012e20
 80052d4:	20012e28 	.word	0x20012e28
 80052d8:	20012e30 	.word	0x20012e30
 80052dc:	20012e2c 	.word	0x20012e2c
 80052e0:	20012e3c 	.word	0x20012e3c

080052e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052ec:	4b28      	ldr	r3, [pc, #160]	; (8005390 <prvInsertBlockIntoFreeList+0xac>)
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e002      	b.n	80052f8 <prvInsertBlockIntoFreeList+0x14>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d8f7      	bhi.n	80052f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d108      	bne.n	8005326 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	441a      	add	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d118      	bne.n	800536c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <prvInsertBlockIntoFreeList+0xb0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d00d      	beq.n	8005362 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	441a      	add	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e008      	b.n	8005374 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <prvInsertBlockIntoFreeList+0xb0>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e003      	b.n	8005374 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d002      	beq.n	8005382 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20012e20 	.word	0x20012e20
 8005394:	20012e28 	.word	0x20012e28

08005398 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800539e:	4b26      	ldr	r3, [pc, #152]	; (8005438 <_DoInit+0xa0>)
 80053a0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80053a2:	22a8      	movs	r2, #168	; 0xa8
 80053a4:	2100      	movs	r1, #0
 80053a6:	6838      	ldr	r0, [r7, #0]
 80053a8:	f001 fe7c 	bl	80070a4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2203      	movs	r2, #3
 80053b0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2203      	movs	r2, #3
 80053b6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	4a20      	ldr	r2, [pc, #128]	; (800543c <_DoInit+0xa4>)
 80053bc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <_DoInit+0xa8>)
 80053c2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2200      	movs	r2, #0
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	; (800543c <_DoInit+0xa4>)
 80053e2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4a17      	ldr	r2, [pc, #92]	; (8005444 <_DoInit+0xac>)
 80053e8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2210      	movs	r2, #16
 80053ee:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2200      	movs	r2, #0
 80053f4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2200      	movs	r2, #0
 80053fa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005402:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	e00c      	b.n	8005426 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f1c3 030f 	rsb	r3, r3, #15
 8005412:	4a0d      	ldr	r2, [pc, #52]	; (8005448 <_DoInit+0xb0>)
 8005414:	5cd1      	ldrb	r1, [r2, r3]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	460a      	mov	r2, r1
 800541e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3301      	adds	r3, #1
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b0f      	cmp	r3, #15
 800542a:	d9ef      	bls.n	800540c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800542c:	f3bf 8f5f 	dmb	sy
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20012e40 	.word	0x20012e40
 800543c:	08007158 	.word	0x08007158
 8005440:	20012ee8 	.word	0x20012ee8
 8005444:	200132e8 	.word	0x200132e8
 8005448:	08007230 	.word	0x08007230

0800544c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b08c      	sub	sp, #48	; 0x30
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005458:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <SEGGER_RTT_ReadNoLock+0x108>)
 800545a:	623b      	str	r3, [r7, #32]
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <SEGGER_RTT_ReadNoLock+0x1e>
 8005466:	f7ff ff97 	bl	8005398 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	3360      	adds	r3, #96	; 0x60
 8005476:	4a37      	ldr	r2, [pc, #220]	; (8005554 <SEGGER_RTT_ReadNoLock+0x108>)
 8005478:	4413      	add	r3, r2
 800547a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800548c:	2300      	movs	r3, #0
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	d92b      	bls.n	80054f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4293      	cmp	r3, r2
 80054a8:	bf28      	it	cs
 80054aa:	4613      	movcs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	4413      	add	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	6939      	ldr	r1, [r7, #16]
 80054bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054be:	f001 fde3 	bl	8007088 <memcpy>
    NumBytesRead += NumBytesRem;
 80054c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d101      	bne.n	80054f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4293      	cmp	r3, r2
 80054fe:	bf28      	it	cs
 8005500:	4613      	movcs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d019      	beq.n	800553e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	4413      	add	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	6939      	ldr	r1, [r7, #16]
 8005518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800551a:	f001 fdb5 	bl	8007088 <memcpy>
    NumBytesRead += NumBytesRem;
 800551e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005548:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800554c:	4618      	mov	r0, r3
 800554e:	3730      	adds	r7, #48	; 0x30
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20012e40 	.word	0x20012e40

08005558 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005566:	4b3d      	ldr	r3, [pc, #244]	; (800565c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005574:	f7ff ff10 	bl	8005398 <_DoInit>
  SEGGER_RTT_LOCK();
 8005578:	f3ef 8311 	mrs	r3, BASEPRI
 800557c:	f04f 0120 	mov.w	r1, #32
 8005580:	f381 8811 	msr	BASEPRI, r1
 8005584:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005586:	4b35      	ldr	r3, [pc, #212]	; (800565c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005588:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800558e:	6939      	ldr	r1, [r7, #16]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	4613      	mov	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	4413      	add	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	440b      	add	r3, r1
 800559e:	3304      	adds	r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	3301      	adds	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	dbeb      	blt.n	800558e <SEGGER_RTT_AllocUpBuffer+0x36>
 80055b6:	e000      	b.n	80055ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80055b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	da3f      	bge.n	8005644 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80055c4:	6939      	ldr	r1, [r7, #16]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	440b      	add	r3, r1
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80055d8:	6939      	ldr	r1, [r7, #16]
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	4613      	mov	r3, r2
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4413      	add	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	440b      	add	r3, r1
 80055e8:	3304      	adds	r3, #4
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80055ee:	6939      	ldr	r1, [r7, #16]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	4613      	mov	r3, r2
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	4413      	add	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	440b      	add	r3, r1
 80055fc:	3320      	adds	r3, #32
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005602:	6939      	ldr	r1, [r7, #16]
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	440b      	add	r3, r1
 8005610:	3328      	adds	r3, #40	; 0x28
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005616:	6939      	ldr	r1, [r7, #16]
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	4613      	mov	r3, r2
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	440b      	add	r3, r1
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800562a:	6939      	ldr	r1, [r7, #16]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	332c      	adds	r3, #44	; 0x2c
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800563e:	f3bf 8f5f 	dmb	sy
 8005642:	e002      	b.n	800564a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005644:	f04f 33ff 	mov.w	r3, #4294967295
 8005648:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005650:	69fb      	ldr	r3, [r7, #28]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20012e40 	.word	0x20012e40

08005660 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800567c:	f7ff fe8c 	bl	8005398 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005680:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005682:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d82c      	bhi.n	80056e4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800568a:	f3ef 8311 	mrs	r3, BASEPRI
 800568e:	f04f 0120 	mov.w	r1, #32
 8005692:	f381 8811 	msr	BASEPRI, r1
 8005696:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4613      	mov	r3, r2
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	3360      	adds	r3, #96	; 0x60
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00e      	beq.n	80056ce <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056d4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
 80056e2:	e002      	b.n	80056ea <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20012e40 	.word	0x20012e40

080056f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00f      	beq.n	800572e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800570e:	e002      	b.n	8005716 <_EncodeStr+0x1e>
      Len++;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	3301      	adds	r3, #1
 8005714:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4413      	add	r3, r2
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f6      	bne.n	8005710 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d901      	bls.n	800572e <_EncodeStr+0x36>
      Len = Limit;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2bfe      	cmp	r3, #254	; 0xfe
 8005732:	d806      	bhi.n	8005742 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	60fa      	str	r2, [r7, #12]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e011      	b.n	8005766 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	60fa      	str	r2, [r7, #12]
 8005748:	22ff      	movs	r2, #255	; 0xff
 800574a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	60fa      	str	r2, [r7, #12]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	0a19      	lsrs	r1, r3, #8
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	60fa      	str	r2, [r7, #12]
 8005762:	b2ca      	uxtb	r2, r1
 8005764:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800576a:	e00a      	b.n	8005782 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	1c53      	adds	r3, r2, #1
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	60f9      	str	r1, [r7, #12]
 8005778:	7812      	ldrb	r2, [r2, #0]
 800577a:	701a      	strb	r2, [r3, #0]
    n++;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3301      	adds	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	429a      	cmp	r2, r3
 8005788:	d3f0      	bcc.n	800576c <_EncodeStr+0x74>
  }
  return pPayload;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3307      	adds	r3, #7
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057b6:	4b35      	ldr	r3, [pc, #212]	; (800588c <_HandleIncomingPacket+0xdc>)
 80057b8:	7e1b      	ldrb	r3, [r3, #24]
 80057ba:	4618      	mov	r0, r3
 80057bc:	1cfb      	adds	r3, r7, #3
 80057be:	2201      	movs	r2, #1
 80057c0:	4619      	mov	r1, r3
 80057c2:	f7ff fe43 	bl	800544c <SEGGER_RTT_ReadNoLock>
 80057c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d052      	beq.n	8005874 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d031      	beq.n	8005838 <_HandleIncomingPacket+0x88>
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	dc40      	bgt.n	800585a <_HandleIncomingPacket+0xaa>
 80057d8:	2b07      	cmp	r3, #7
 80057da:	dc15      	bgt.n	8005808 <_HandleIncomingPacket+0x58>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dd3c      	ble.n	800585a <_HandleIncomingPacket+0xaa>
 80057e0:	3b01      	subs	r3, #1
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d839      	bhi.n	800585a <_HandleIncomingPacket+0xaa>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <_HandleIncomingPacket+0x3c>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	0800580f 	.word	0x0800580f
 80057f0:	08005815 	.word	0x08005815
 80057f4:	0800581b 	.word	0x0800581b
 80057f8:	08005821 	.word	0x08005821
 80057fc:	08005827 	.word	0x08005827
 8005800:	0800582d 	.word	0x0800582d
 8005804:	08005833 	.word	0x08005833
 8005808:	2b7f      	cmp	r3, #127	; 0x7f
 800580a:	d035      	beq.n	8005878 <_HandleIncomingPacket+0xc8>
 800580c:	e025      	b.n	800585a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800580e:	f000 fced 	bl	80061ec <SEGGER_SYSVIEW_Start>
      break;
 8005812:	e036      	b.n	8005882 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005814:	f000 fda4 	bl	8006360 <SEGGER_SYSVIEW_Stop>
      break;
 8005818:	e033      	b.n	8005882 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800581a:	f000 ff7d 	bl	8006718 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800581e:	e030      	b.n	8005882 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005820:	f000 ff42 	bl	80066a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005824:	e02d      	b.n	8005882 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005826:	f000 fdc1 	bl	80063ac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800582a:	e02a      	b.n	8005882 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800582c:	f001 fa10 	bl	8006c50 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005830:	e027      	b.n	8005882 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005832:	f001 f9ef 	bl	8006c14 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005836:	e024      	b.n	8005882 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005838:	4b14      	ldr	r3, [pc, #80]	; (800588c <_HandleIncomingPacket+0xdc>)
 800583a:	7e1b      	ldrb	r3, [r3, #24]
 800583c:	4618      	mov	r0, r3
 800583e:	1cfb      	adds	r3, r7, #3
 8005840:	2201      	movs	r2, #1
 8005842:	4619      	mov	r1, r3
 8005844:	f7ff fe02 	bl	800544c <SEGGER_RTT_ReadNoLock>
 8005848:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d015      	beq.n	800587c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	4618      	mov	r0, r3
 8005854:	f001 f95e 	bl	8006b14 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005858:	e010      	b.n	800587c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	b25b      	sxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	da0e      	bge.n	8005880 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <_HandleIncomingPacket+0xdc>)
 8005864:	7e1b      	ldrb	r3, [r3, #24]
 8005866:	4618      	mov	r0, r3
 8005868:	1cfb      	adds	r3, r7, #3
 800586a:	2201      	movs	r2, #1
 800586c:	4619      	mov	r1, r3
 800586e:	f7ff fded 	bl	800544c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005872:	e005      	b.n	8005880 <_HandleIncomingPacket+0xd0>
    }
  }
 8005874:	bf00      	nop
 8005876:	e004      	b.n	8005882 <_HandleIncomingPacket+0xd2>
      break;
 8005878:	bf00      	nop
 800587a:	e002      	b.n	8005882 <_HandleIncomingPacket+0xd2>
      break;
 800587c:	bf00      	nop
 800587e:	e000      	b.n	8005882 <_HandleIncomingPacket+0xd2>
      break;
 8005880:	bf00      	nop
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20014300 	.word	0x20014300

08005890 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005896:	2301      	movs	r3, #1
 8005898:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	3301      	adds	r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a4:	4b31      	ldr	r3, [pc, #196]	; (800596c <_TrySendOverflowPacket+0xdc>)
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058aa:	e00b      	b.n	80058c4 <_TrySendOverflowPacket+0x34>
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	09db      	lsrs	r3, r3, #7
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	2b7f      	cmp	r3, #127	; 0x7f
 80058c8:	d8f0      	bhi.n	80058ac <_TrySendOverflowPacket+0x1c>
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058da:	4b25      	ldr	r3, [pc, #148]	; (8005970 <_TrySendOverflowPacket+0xe0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80058e0:	4b22      	ldr	r3, [pc, #136]	; (800596c <_TrySendOverflowPacket+0xdc>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	623b      	str	r3, [r7, #32]
 80058f2:	e00b      	b.n	800590c <_TrySendOverflowPacket+0x7c>
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	6279      	str	r1, [r7, #36]	; 0x24
 80058fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	09db      	lsrs	r3, r3, #7
 800590a:	623b      	str	r3, [r7, #32]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	2b7f      	cmp	r3, #127	; 0x7f
 8005910:	d8f0      	bhi.n	80058f4 <_TrySendOverflowPacket+0x64>
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	627a      	str	r2, [r7, #36]	; 0x24
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <_TrySendOverflowPacket+0xdc>)
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	4618      	mov	r0, r3
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	461a      	mov	r2, r3
 8005930:	1d3b      	adds	r3, r7, #4
 8005932:	4619      	mov	r1, r3
 8005934:	f7fa fc5c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005938:	4603      	mov	r3, r0
 800593a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <_TrySendOverflowPacket+0xdc>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005948:	4b08      	ldr	r3, [pc, #32]	; (800596c <_TrySendOverflowPacket+0xdc>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	3b01      	subs	r3, #1
 800594e:	b2da      	uxtb	r2, r3
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <_TrySendOverflowPacket+0xdc>)
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e004      	b.n	8005960 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <_TrySendOverflowPacket+0xdc>)
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	3301      	adds	r3, #1
 800595c:	4a03      	ldr	r2, [pc, #12]	; (800596c <_TrySendOverflowPacket+0xdc>)
 800595e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005960:	693b      	ldr	r3, [r7, #16]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3730      	adds	r7, #48	; 0x30
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20014300 	.word	0x20014300
 8005970:	e0001004 	.word	0xe0001004

08005974 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005980:	4b98      	ldr	r3, [pc, #608]	; (8005be4 <_SendPacket+0x270>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d010      	beq.n	80059aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005988:	4b96      	ldr	r3, [pc, #600]	; (8005be4 <_SendPacket+0x270>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 812d 	beq.w	8005bec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005992:	4b94      	ldr	r3, [pc, #592]	; (8005be4 <_SendPacket+0x270>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d109      	bne.n	80059ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800599a:	f7ff ff79 	bl	8005890 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800599e:	4b91      	ldr	r3, [pc, #580]	; (8005be4 <_SendPacket+0x270>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	f040 8124 	bne.w	8005bf0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80059a8:	e001      	b.n	80059ae <_SendPacket+0x3a>
    goto Send;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <_SendPacket+0x3c>
Send:
 80059ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b1f      	cmp	r3, #31
 80059b4:	d809      	bhi.n	80059ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80059b6:	4b8b      	ldr	r3, [pc, #556]	; (8005be4 <_SendPacket+0x270>)
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 8115 	bne.w	8005bf4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b17      	cmp	r3, #23
 80059ce:	d807      	bhi.n	80059e0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e0c4      	b.n	8005b6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b7f      	cmp	r3, #127	; 0x7f
 80059ec:	d912      	bls.n	8005a14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	09da      	lsrs	r2, r3, #7
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	3a01      	subs	r2, #1
 8005a06:	60fa      	str	r2, [r7, #12]
 8005a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e006      	b.n	8005a22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b7e      	cmp	r3, #126	; 0x7e
 8005a26:	d807      	bhi.n	8005a38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e098      	b.n	8005b6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a3e:	d212      	bcs.n	8005a66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	09da      	lsrs	r2, r3, #7
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	3a01      	subs	r2, #1
 8005a58:	60fa      	str	r2, [r7, #12]
 8005a5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e081      	b.n	8005b6a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a6c:	d21d      	bcs.n	8005aaa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	0b9a      	lsrs	r2, r3, #14
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	09db      	lsrs	r3, r3, #7
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	3a01      	subs	r2, #1
 8005a88:	60fa      	str	r2, [r7, #12]
 8005a8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	3a01      	subs	r2, #1
 8005a9c:	60fa      	str	r2, [r7, #12]
 8005a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	e05f      	b.n	8005b6a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab0:	d228      	bcs.n	8005b04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0d5a      	lsrs	r2, r3, #21
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0b9b      	lsrs	r3, r3, #14
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	3a01      	subs	r2, #1
 8005acc:	60fa      	str	r2, [r7, #12]
 8005ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	60fa      	str	r2, [r7, #12]
 8005ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	3a01      	subs	r2, #1
 8005af6:	60fa      	str	r2, [r7, #12]
 8005af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e032      	b.n	8005b6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	0f1a      	lsrs	r2, r3, #28
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	0d5b      	lsrs	r3, r3, #21
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	3a01      	subs	r2, #1
 8005b1e:	60fa      	str	r2, [r7, #12]
 8005b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0b9b      	lsrs	r3, r3, #14
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	3a01      	subs	r2, #1
 8005b34:	60fa      	str	r2, [r7, #12]
 8005b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	09db      	lsrs	r3, r3, #7
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	60fa      	str	r2, [r7, #12]
 8005b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	3a01      	subs	r2, #1
 8005b5e:	60fa      	str	r2, [r7, #12]
 8005b60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <_SendPacket+0x274>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b70:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <_SendPacket+0x270>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	e00b      	b.n	8005b9c <_SendPacket+0x228>
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	09db      	lsrs	r3, r3, #7
 8005b9a:	623b      	str	r3, [r7, #32]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba0:	d8f0      	bhi.n	8005b84 <_SendPacket+0x210>
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ba8:	6a3a      	ldr	r2, [r7, #32]
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <_SendPacket+0x270>)
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	f7fa fb15 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bce:	4a05      	ldr	r2, [pc, #20]	; (8005be4 <_SendPacket+0x270>)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	60d3      	str	r3, [r2, #12]
 8005bd4:	e00f      	b.n	8005bf6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005bd6:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <_SendPacket+0x270>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	4b01      	ldr	r3, [pc, #4]	; (8005be4 <_SendPacket+0x270>)
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	e008      	b.n	8005bf6 <_SendPacket+0x282>
 8005be4:	20014300 	.word	0x20014300
 8005be8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005bec:	bf00      	nop
 8005bee:	e002      	b.n	8005bf6 <_SendPacket+0x282>
      goto SendDone;
 8005bf0:	bf00      	nop
 8005bf2:	e000      	b.n	8005bf6 <_SendPacket+0x282>
      goto SendDone;
 8005bf4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <_SendPacket+0x2d4>)
 8005bf8:	7e1b      	ldrb	r3, [r3, #24]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <_SendPacket+0x2d8>)
 8005bfe:	460b      	mov	r3, r1
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	440b      	add	r3, r1
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	336c      	adds	r3, #108	; 0x6c
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <_SendPacket+0x2d4>)
 8005c0e:	7e1b      	ldrb	r3, [r3, #24]
 8005c10:	4618      	mov	r0, r3
 8005c12:	490e      	ldr	r1, [pc, #56]	; (8005c4c <_SendPacket+0x2d8>)
 8005c14:	4603      	mov	r3, r0
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	4403      	add	r3, r0
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	440b      	add	r3, r1
 8005c1e:	3370      	adds	r3, #112	; 0x70
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d00b      	beq.n	8005c3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c26:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <_SendPacket+0x2d4>)
 8005c28:	789b      	ldrb	r3, [r3, #2]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d107      	bne.n	8005c3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <_SendPacket+0x2d4>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c34:	f7ff fdbc 	bl	80057b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <_SendPacket+0x2d4>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c3e:	bf00      	nop
 8005c40:	3728      	adds	r7, #40	; 0x28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20014300 	.word	0x20014300
 8005c4c:	20012e40 	.word	0x20012e40

08005c50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b0a2      	sub	sp, #136	; 0x88
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8005c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8005c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01d      	beq.n	8005cb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8005c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c7e:	2b25      	cmp	r3, #37	; 0x25
 8005c80:	d1f1      	bne.n	8005c66 <_VPrintHost+0x16>
      c = *p;
 8005c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	1d19      	adds	r1, r3, #4
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6011      	str	r1, [r2, #0]
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	3388      	adds	r3, #136	; 0x88
 8005ca6:	443b      	add	r3, r7
 8005ca8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8005cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d002      	beq.n	8005cba <_VPrintHost+0x6a>
    c = *p++;
 8005cb4:	e7d7      	b.n	8005c66 <_VPrintHost+0x16>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <_VPrintHost+0x6c>
        break;
 8005cba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8005cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc0:	f04f 0120 	mov.w	r1, #32
 8005cc4:	f381 8811 	msr	BASEPRI, r1
 8005cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cca:	483f      	ldr	r0, [pc, #252]	; (8005dc8 <_VPrintHost+0x178>)
 8005ccc:	f7ff fd64 	bl	8005798 <_PreparePacket>
 8005cd0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	68f9      	ldr	r1, [r7, #12]
 8005cd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005cd8:	f7ff fd0e 	bl	80056f8 <_EncodeStr>
 8005cdc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8005cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce0:	677b      	str	r3, [r7, #116]	; 0x74
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8005ce6:	e00b      	b.n	8005d00 <_VPrintHost+0xb0>
 8005ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cee:	1c59      	adds	r1, r3, #1
 8005cf0:	6779      	str	r1, [r7, #116]	; 0x74
 8005cf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cfc:	09db      	lsrs	r3, r3, #7
 8005cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8005d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d02:	2b7f      	cmp	r3, #127	; 0x7f
 8005d04:	d8f0      	bhi.n	8005ce8 <_VPrintHost+0x98>
 8005d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	677a      	str	r2, [r7, #116]	; 0x74
 8005d0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8005d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d20:	e00b      	b.n	8005d3a <_VPrintHost+0xea>
 8005d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d28:	1c59      	adds	r1, r3, #1
 8005d2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8005d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d36:	09db      	lsrs	r3, r3, #7
 8005d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d3e:	d8f0      	bhi.n	8005d22 <_VPrintHost+0xd2>
 8005d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005d58:	e022      	b.n	8005da0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	663b      	str	r3, [r7, #96]	; 0x60
 8005d66:	e00b      	b.n	8005d80 <_VPrintHost+0x130>
 8005d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	6679      	str	r1, [r7, #100]	; 0x64
 8005d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7c:	09db      	lsrs	r3, r3, #7
 8005d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d82:	2b7f      	cmp	r3, #127	; 0x7f
 8005d84:	d8f0      	bhi.n	8005d68 <_VPrintHost+0x118>
 8005d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	667a      	str	r2, [r7, #100]	; 0x64
 8005d8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8005d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005da4:	1e5a      	subs	r2, r3, #1
 8005da6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1d5      	bne.n	8005d5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005dae:	221a      	movs	r2, #26
 8005db0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005db2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005db4:	f7ff fdde 	bl	8005974 <_SendPacket>
    RECORD_END();
 8005db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3788      	adds	r7, #136	; 0x88
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20014330 	.word	0x20014330

08005dcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005de0:	4917      	ldr	r1, [pc, #92]	; (8005e40 <SEGGER_SYSVIEW_Init+0x74>)
 8005de2:	4818      	ldr	r0, [pc, #96]	; (8005e44 <SEGGER_SYSVIEW_Init+0x78>)
 8005de4:	f7ff fbb8 	bl	8005558 <SEGGER_RTT_AllocUpBuffer>
 8005de8:	4603      	mov	r3, r0
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005df0:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005df2:	785a      	ldrb	r2, [r3, #1]
 8005df4:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005df6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005df8:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dfa:	7e1b      	ldrb	r3, [r3, #24]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	2308      	movs	r3, #8
 8005e04:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <SEGGER_SYSVIEW_Init+0x80>)
 8005e06:	490f      	ldr	r1, [pc, #60]	; (8005e44 <SEGGER_SYSVIEW_Init+0x78>)
 8005e08:	f7ff fc2a 	bl	8005660 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e0c:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e12:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <SEGGER_SYSVIEW_Init+0x84>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a0c      	ldr	r2, [pc, #48]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e18:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e1a:	4a0b      	ldr	r2, [pc, #44]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e20:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e26:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e2c:	4a06      	ldr	r2, [pc, #24]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	200132f8 	.word	0x200132f8
 8005e44:	08007164 	.word	0x08007164
 8005e48:	20014300 	.word	0x20014300
 8005e4c:	200142f8 	.word	0x200142f8
 8005e50:	e0001004 	.word	0xe0001004

08005e54 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005e5c:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6113      	str	r3, [r2, #16]
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20014300 	.word	0x20014300

08005e74 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e80:	f04f 0120 	mov.w	r1, #32
 8005e84:	f381 8811 	msr	BASEPRI, r1
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	4808      	ldr	r0, [pc, #32]	; (8005eac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005e8c:	f7ff fc84 	bl	8005798 <_PreparePacket>
 8005e90:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	68b8      	ldr	r0, [r7, #8]
 8005e98:	f7ff fd6c 	bl	8005974 <_SendPacket>
  RECORD_END();
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20014330 	.word	0x20014330

08005eb0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eba:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebe:	f04f 0120 	mov.w	r1, #32
 8005ec2:	f381 8811 	msr	BASEPRI, r1
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	4816      	ldr	r0, [pc, #88]	; (8005f24 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005eca:	f7ff fc65 	bl	8005798 <_PreparePacket>
 8005ece:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	e00b      	b.n	8005ef6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	1c59      	adds	r1, r3, #1
 8005ee6:	61f9      	str	r1, [r7, #28]
 8005ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	09db      	lsrs	r3, r3, #7
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8005efa:	d8f0      	bhi.n	8005ede <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	61fa      	str	r2, [r7, #28]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	6938      	ldr	r0, [r7, #16]
 8005f12:	f7ff fd2f 	bl	8005974 <_SendPacket>
  RECORD_END();
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f383 8811 	msr	BASEPRI, r3
}
 8005f1c:	bf00      	nop
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20014330 	.word	0x20014330

08005f28 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	; 0x30
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f34:	f3ef 8311 	mrs	r3, BASEPRI
 8005f38:	f04f 0120 	mov.w	r1, #32
 8005f3c:	f381 8811 	msr	BASEPRI, r1
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	4825      	ldr	r0, [pc, #148]	; (8005fd8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f44:	f7ff fc28 	bl	8005798 <_PreparePacket>
 8005f48:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f56:	e00b      	b.n	8005f70 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	1c59      	adds	r1, r3, #1
 8005f60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	09db      	lsrs	r3, r3, #7
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2b7f      	cmp	r3, #127	; 0x7f
 8005f74:	d8f0      	bhi.n	8005f58 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	e00b      	b.n	8005fa8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	6279      	str	r1, [r7, #36]	; 0x24
 8005f9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	09db      	lsrs	r3, r3, #7
 8005fa6:	623b      	str	r3, [r7, #32]
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2b7f      	cmp	r3, #127	; 0x7f
 8005fac:	d8f0      	bhi.n	8005f90 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	6979      	ldr	r1, [r7, #20]
 8005fc2:	69b8      	ldr	r0, [r7, #24]
 8005fc4:	f7ff fcd6 	bl	8005974 <_SendPacket>
  RECORD_END();
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f383 8811 	msr	BASEPRI, r3
}
 8005fce:	bf00      	nop
 8005fd0:	3730      	adds	r7, #48	; 0x30
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20014330 	.word	0x20014330

08005fdc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08e      	sub	sp, #56	; 0x38
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fea:	f3ef 8311 	mrs	r3, BASEPRI
 8005fee:	f04f 0120 	mov.w	r1, #32
 8005ff2:	f381 8811 	msr	BASEPRI, r1
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	4832      	ldr	r0, [pc, #200]	; (80060c4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005ffa:	f7ff fbcd 	bl	8005798 <_PreparePacket>
 8005ffe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
 800600c:	e00b      	b.n	8006026 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	6379      	str	r1, [r7, #52]	; 0x34
 8006018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	09db      	lsrs	r3, r3, #7
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	2b7f      	cmp	r3, #127	; 0x7f
 800602a:	d8f0      	bhi.n	800600e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	637a      	str	r2, [r7, #52]	; 0x34
 8006032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
 8006044:	e00b      	b.n	800605e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	b2da      	uxtb	r2, r3
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	1c59      	adds	r1, r3, #1
 800604e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	09db      	lsrs	r3, r3, #7
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	2b7f      	cmp	r3, #127	; 0x7f
 8006062:	d8f0      	bhi.n	8006046 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800606a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	623b      	str	r3, [r7, #32]
 800607c:	e00b      	b.n	8006096 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	1c59      	adds	r1, r3, #1
 8006086:	6279      	str	r1, [r7, #36]	; 0x24
 8006088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	09db      	lsrs	r3, r3, #7
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	2b7f      	cmp	r3, #127	; 0x7f
 800609a:	d8f0      	bhi.n	800607e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	627a      	str	r2, [r7, #36]	; 0x24
 80060a2:	6a3a      	ldr	r2, [r7, #32]
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	6979      	ldr	r1, [r7, #20]
 80060b0:	69b8      	ldr	r0, [r7, #24]
 80060b2:	f7ff fc5f 	bl	8005974 <_SendPacket>
  RECORD_END();
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f383 8811 	msr	BASEPRI, r3
}
 80060bc:	bf00      	nop
 80060be:	3738      	adds	r7, #56	; 0x38
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20014330 	.word	0x20014330

080060c8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b090      	sub	sp, #64	; 0x40
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060d6:	f3ef 8311 	mrs	r3, BASEPRI
 80060da:	f04f 0120 	mov.w	r1, #32
 80060de:	f381 8811 	msr	BASEPRI, r1
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	4840      	ldr	r0, [pc, #256]	; (80061e8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80060e6:	f7ff fb57 	bl	8005798 <_PreparePacket>
 80060ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060f8:	e00b      	b.n	8006112 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	63bb      	str	r3, [r7, #56]	; 0x38
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	2b7f      	cmp	r3, #127	; 0x7f
 8006116:	d8f0      	bhi.n	80060fa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800611e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	633b      	str	r3, [r7, #48]	; 0x30
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	b2da      	uxtb	r2, r3
 8006136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	6379      	str	r1, [r7, #52]	; 0x34
 800613c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2b7f      	cmp	r3, #127	; 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	637a      	str	r2, [r7, #52]	; 0x34
 8006156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
 8006168:	e00b      	b.n	8006182 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	b2da      	uxtb	r2, r3
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	09db      	lsrs	r3, r3, #7
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	2b7f      	cmp	r3, #127	; 0x7f
 8006186:	d8f0      	bhi.n	800616a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800618e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
 800619c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	e00b      	b.n	80061ba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	6279      	str	r1, [r7, #36]	; 0x24
 80061ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2b7f      	cmp	r3, #127	; 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	627a      	str	r2, [r7, #36]	; 0x24
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	6979      	ldr	r1, [r7, #20]
 80061d4:	69b8      	ldr	r0, [r7, #24]
 80061d6:	f7ff fbcd 	bl	8005974 <_SendPacket>
  RECORD_END();
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f383 8811 	msr	BASEPRI, r3
}
 80061e0:	bf00      	nop
 80061e2:	3740      	adds	r7, #64	; 0x40
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20014330 	.word	0x20014330

080061ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	; 0x30
 80061f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80061f2:	4b58      	ldr	r3, [pc, #352]	; (8006354 <SEGGER_SYSVIEW_Start+0x168>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80061f8:	f3ef 8311 	mrs	r3, BASEPRI
 80061fc:	f04f 0120 	mov.w	r1, #32
 8006200:	f381 8811 	msr	BASEPRI, r1
 8006204:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006206:	4b53      	ldr	r3, [pc, #332]	; (8006354 <SEGGER_SYSVIEW_Start+0x168>)
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	220a      	movs	r2, #10
 800620c:	4952      	ldr	r1, [pc, #328]	; (8006358 <SEGGER_SYSVIEW_Start+0x16c>)
 800620e:	4618      	mov	r0, r3
 8006210:	f7f9 ffee 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800621a:	200a      	movs	r0, #10
 800621c:	f7ff fe2a 	bl	8005e74 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006220:	f3ef 8311 	mrs	r3, BASEPRI
 8006224:	f04f 0120 	mov.w	r1, #32
 8006228:	f381 8811 	msr	BASEPRI, r1
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	484b      	ldr	r0, [pc, #300]	; (800635c <SEGGER_SYSVIEW_Start+0x170>)
 8006230:	f7ff fab2 	bl	8005798 <_PreparePacket>
 8006234:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623e:	4b45      	ldr	r3, [pc, #276]	; (8006354 <SEGGER_SYSVIEW_Start+0x168>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
 8006244:	e00b      	b.n	800625e <SEGGER_SYSVIEW_Start+0x72>
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	b2da      	uxtb	r2, r3
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	1c59      	adds	r1, r3, #1
 800624e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	09db      	lsrs	r3, r3, #7
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	2b7f      	cmp	r3, #127	; 0x7f
 8006262:	d8f0      	bhi.n	8006246 <SEGGER_SYSVIEW_Start+0x5a>
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800626a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
 8006278:	4b36      	ldr	r3, [pc, #216]	; (8006354 <SEGGER_SYSVIEW_Start+0x168>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	623b      	str	r3, [r7, #32]
 800627e:	e00b      	b.n	8006298 <SEGGER_SYSVIEW_Start+0xac>
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	6279      	str	r1, [r7, #36]	; 0x24
 800628a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	09db      	lsrs	r3, r3, #7
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	2b7f      	cmp	r3, #127	; 0x7f
 800629c:	d8f0      	bhi.n	8006280 <SEGGER_SYSVIEW_Start+0x94>
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	627a      	str	r2, [r7, #36]	; 0x24
 80062a4:	6a3a      	ldr	r2, [r7, #32]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	4b28      	ldr	r3, [pc, #160]	; (8006354 <SEGGER_SYSVIEW_Start+0x168>)
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e00b      	b.n	80062d2 <SEGGER_SYSVIEW_Start+0xe6>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	1c59      	adds	r1, r3, #1
 80062c2:	61f9      	str	r1, [r7, #28]
 80062c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	09db      	lsrs	r3, r3, #7
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b7f      	cmp	r3, #127	; 0x7f
 80062d6:	d8f0      	bhi.n	80062ba <SEGGER_SYSVIEW_Start+0xce>
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	61fa      	str	r2, [r7, #28]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	e00b      	b.n	800630a <SEGGER_SYSVIEW_Start+0x11e>
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	6179      	str	r1, [r7, #20]
 80062fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	09db      	lsrs	r3, r3, #7
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b7f      	cmp	r3, #127	; 0x7f
 800630e:	d8f0      	bhi.n	80062f2 <SEGGER_SYSVIEW_Start+0x106>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	617a      	str	r2, [r7, #20]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006320:	2218      	movs	r2, #24
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fb25 	bl	8005974 <_SendPacket>
      RECORD_END();
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006330:	4b08      	ldr	r3, [pc, #32]	; (8006354 <SEGGER_SYSVIEW_Start+0x168>)
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <SEGGER_SYSVIEW_Start+0x168>)
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800633e:	f000 f9eb 	bl	8006718 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006342:	f000 f9b1 	bl	80066a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006346:	f000 fc83 	bl	8006c50 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800634a:	bf00      	nop
 800634c:	3730      	adds	r7, #48	; 0x30
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20014300 	.word	0x20014300
 8006358:	08007244 	.word	0x08007244
 800635c:	20014330 	.word	0x20014330

08006360 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006366:	f3ef 8311 	mrs	r3, BASEPRI
 800636a:	f04f 0120 	mov.w	r1, #32
 800636e:	f381 8811 	msr	BASEPRI, r1
 8006372:	607b      	str	r3, [r7, #4]
 8006374:	480b      	ldr	r0, [pc, #44]	; (80063a4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006376:	f7ff fa0f 	bl	8005798 <_PreparePacket>
 800637a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <SEGGER_SYSVIEW_Stop+0x48>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006384:	220b      	movs	r2, #11
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6838      	ldr	r0, [r7, #0]
 800638a:	f7ff faf3 	bl	8005974 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f383 8811 	msr	BASEPRI, r3
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20014330 	.word	0x20014330
 80063a8:	20014300 	.word	0x20014300

080063ac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063b2:	f3ef 8311 	mrs	r3, BASEPRI
 80063b6:	f04f 0120 	mov.w	r1, #32
 80063ba:	f381 8811 	msr	BASEPRI, r1
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	4845      	ldr	r0, [pc, #276]	; (80064d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80063c2:	f7ff f9e9 	bl	8005798 <_PreparePacket>
 80063c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d0:	4b42      	ldr	r3, [pc, #264]	; (80064dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d6:	e00b      	b.n	80063f0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	2b7f      	cmp	r3, #127	; 0x7f
 80063f4:	d8f0      	bhi.n	80063d8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	4b34      	ldr	r3, [pc, #208]	; (80064dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	623b      	str	r3, [r7, #32]
 8006410:	e00b      	b.n	800642a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	6279      	str	r1, [r7, #36]	; 0x24
 800641c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	09db      	lsrs	r3, r3, #7
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2b7f      	cmp	r3, #127	; 0x7f
 800642e:	d8f0      	bhi.n	8006412 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	627a      	str	r2, [r7, #36]	; 0x24
 8006436:	6a3a      	ldr	r2, [r7, #32]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	e00b      	b.n	8006464 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	1c59      	adds	r1, r3, #1
 8006454:	61f9      	str	r1, [r7, #28]
 8006456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	09db      	lsrs	r3, r3, #7
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b7f      	cmp	r3, #127	; 0x7f
 8006468:	d8f0      	bhi.n	800644c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	61fa      	str	r2, [r7, #28]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	e00b      	b.n	800649c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	6179      	str	r1, [r7, #20]
 800648e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	09db      	lsrs	r3, r3, #7
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b7f      	cmp	r3, #127	; 0x7f
 80064a0:	d8f0      	bhi.n	8006484 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	617a      	str	r2, [r7, #20]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064b2:	2218      	movs	r2, #24
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	68b8      	ldr	r0, [r7, #8]
 80064b8:	f7ff fa5c 	bl	8005974 <_SendPacket>
  RECORD_END();
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064c2:	4b06      	ldr	r3, [pc, #24]	; (80064dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80064ca:	4b04      	ldr	r3, [pc, #16]	; (80064dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	4798      	blx	r3
  }
}
 80064d0:	bf00      	nop
 80064d2:	3730      	adds	r7, #48	; 0x30
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20014330 	.word	0x20014330
 80064dc:	20014300 	.word	0x20014300

080064e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b092      	sub	sp, #72	; 0x48
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80064e8:	f3ef 8311 	mrs	r3, BASEPRI
 80064ec:	f04f 0120 	mov.w	r1, #32
 80064f0:	f381 8811 	msr	BASEPRI, r1
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	486a      	ldr	r0, [pc, #424]	; (80066a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80064f8:	f7ff f94e 	bl	8005798 <_PreparePacket>
 80064fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	647b      	str	r3, [r7, #68]	; 0x44
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b66      	ldr	r3, [pc, #408]	; (80066a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	643b      	str	r3, [r7, #64]	; 0x40
 8006512:	e00b      	b.n	800652c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006516:	b2da      	uxtb	r2, r3
 8006518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	6479      	str	r1, [r7, #68]	; 0x44
 800651e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006528:	09db      	lsrs	r3, r3, #7
 800652a:	643b      	str	r3, [r7, #64]	; 0x40
 800652c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652e:	2b7f      	cmp	r3, #127	; 0x7f
 8006530:	d8f0      	bhi.n	8006514 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	647a      	str	r2, [r7, #68]	; 0x44
 8006538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006540:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	63bb      	str	r3, [r7, #56]	; 0x38
 800654c:	e00b      	b.n	8006566 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006554:	1c59      	adds	r1, r3, #1
 8006556:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	09db      	lsrs	r3, r3, #7
 8006564:	63bb      	str	r3, [r7, #56]	; 0x38
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	2b7f      	cmp	r3, #127	; 0x7f
 800656a:	d8f0      	bhi.n	800654e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff f8b7 	bl	80056f8 <_EncodeStr>
 800658a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800658c:	2209      	movs	r2, #9
 800658e:	68f9      	ldr	r1, [r7, #12]
 8006590:	6938      	ldr	r0, [r7, #16]
 8006592:	f7ff f9ef 	bl	8005974 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b40      	ldr	r3, [pc, #256]	; (80066a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
 80065aa:	e00b      	b.n	80065c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	6379      	str	r1, [r7, #52]	; 0x34
 80065b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	09db      	lsrs	r3, r3, #7
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	2b7f      	cmp	r3, #127	; 0x7f
 80065c8:	d8f0      	bhi.n	80065ac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	637a      	str	r2, [r7, #52]	; 0x34
 80065d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e4:	e00b      	b.n	80065fe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	1c59      	adds	r1, r3, #1
 80065ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	09db      	lsrs	r3, r3, #7
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	2b7f      	cmp	r3, #127	; 0x7f
 8006602:	d8f0      	bhi.n	80065e6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800660a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	623b      	str	r3, [r7, #32]
 800661e:	e00b      	b.n	8006638 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	6279      	str	r1, [r7, #36]	; 0x24
 800662a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	09db      	lsrs	r3, r3, #7
 8006636:	623b      	str	r3, [r7, #32]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	2b7f      	cmp	r3, #127	; 0x7f
 800663c:	d8f0      	bhi.n	8006620 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	627a      	str	r2, [r7, #36]	; 0x24
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	2300      	movs	r3, #0
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e00b      	b.n	8006670 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	b2da      	uxtb	r2, r3
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	61f9      	str	r1, [r7, #28]
 8006662:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	09db      	lsrs	r3, r3, #7
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b7f      	cmp	r3, #127	; 0x7f
 8006674:	d8f0      	bhi.n	8006658 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	61fa      	str	r2, [r7, #28]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006686:	2215      	movs	r2, #21
 8006688:	68f9      	ldr	r1, [r7, #12]
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f7ff f972 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f383 8811 	msr	BASEPRI, r3
}
 8006696:	bf00      	nop
 8006698:	3748      	adds	r7, #72	; 0x48
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20014330 	.word	0x20014330
 80066a4:	20014300 	.word	0x20014300

080066a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4798      	blx	r3
  }
}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20014300 	.word	0x20014300

080066d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066d8:	f3ef 8311 	mrs	r3, BASEPRI
 80066dc:	f04f 0120 	mov.w	r1, #32
 80066e0:	f381 8811 	msr	BASEPRI, r1
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	480b      	ldr	r0, [pc, #44]	; (8006714 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80066e8:	f7ff f856 	bl	8005798 <_PreparePacket>
 80066ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066ee:	2280      	movs	r2, #128	; 0x80
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	6938      	ldr	r0, [r7, #16]
 80066f4:	f7ff f800 	bl	80056f8 <_EncodeStr>
 80066f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80066fa:	220e      	movs	r2, #14
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	6938      	ldr	r0, [r7, #16]
 8006700:	f7ff f938 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f383 8811 	msr	BASEPRI, r3
}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20014330 	.word	0x20014330

08006718 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01a      	beq.n	800675c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006726:	4b13      	ldr	r3, [pc, #76]	; (8006774 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d015      	beq.n	800675c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006730:	4b10      	ldr	r3, [pc, #64]	; (8006774 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4798      	blx	r3
 8006738:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800673c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800673e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	000a      	movs	r2, r1
 800674c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800674e:	4613      	mov	r3, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4621      	mov	r1, r4
 8006754:	200d      	movs	r0, #13
 8006756:	f7ff fbe7 	bl	8005f28 <SEGGER_SYSVIEW_RecordU32x2>
 800675a:	e006      	b.n	800676a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4619      	mov	r1, r3
 8006762:	200c      	movs	r0, #12
 8006764:	f7ff fba4 	bl	8005eb0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bd90      	pop	{r4, r7, pc}
 8006772:	bf00      	nop
 8006774:	20014300 	.word	0x20014300
 8006778:	e0001004 	.word	0xe0001004

0800677c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006782:	f3ef 8311 	mrs	r3, BASEPRI
 8006786:	f04f 0120 	mov.w	r1, #32
 800678a:	f381 8811 	msr	BASEPRI, r1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4819      	ldr	r0, [pc, #100]	; (80067f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006792:	f7ff f801 	bl	8005798 <_PreparePacket>
 8006796:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800679c:	4b17      	ldr	r3, [pc, #92]	; (80067fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	e00b      	b.n	80067c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	6179      	str	r1, [r7, #20]
 80067ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	09db      	lsrs	r3, r3, #7
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b7f      	cmp	r3, #127	; 0x7f
 80067cc:	d8f0      	bhi.n	80067b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	617a      	str	r2, [r7, #20]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80067de:	2202      	movs	r2, #2
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f7ff f8c6 	bl	8005974 <_SendPacket>
  RECORD_END();
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f383 8811 	msr	BASEPRI, r3
}
 80067ee:	bf00      	nop
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20014330 	.word	0x20014330
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006806:	f3ef 8311 	mrs	r3, BASEPRI
 800680a:	f04f 0120 	mov.w	r1, #32
 800680e:	f381 8811 	msr	BASEPRI, r1
 8006812:	607b      	str	r3, [r7, #4]
 8006814:	4807      	ldr	r0, [pc, #28]	; (8006834 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006816:	f7fe ffbf 	bl	8005798 <_PreparePacket>
 800681a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800681c:	2203      	movs	r2, #3
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6838      	ldr	r0, [r7, #0]
 8006822:	f7ff f8a7 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f383 8811 	msr	BASEPRI, r3
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20014330 	.word	0x20014330

08006838 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800683e:	f3ef 8311 	mrs	r3, BASEPRI
 8006842:	f04f 0120 	mov.w	r1, #32
 8006846:	f381 8811 	msr	BASEPRI, r1
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	4807      	ldr	r0, [pc, #28]	; (800686c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800684e:	f7fe ffa3 	bl	8005798 <_PreparePacket>
 8006852:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006854:	2212      	movs	r2, #18
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6838      	ldr	r0, [r7, #0]
 800685a:	f7ff f88b 	bl	8005974 <_SendPacket>
  RECORD_END();
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f383 8811 	msr	BASEPRI, r3
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20014330 	.word	0x20014330

08006870 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006876:	f3ef 8311 	mrs	r3, BASEPRI
 800687a:	f04f 0120 	mov.w	r1, #32
 800687e:	f381 8811 	msr	BASEPRI, r1
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	4807      	ldr	r0, [pc, #28]	; (80068a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006886:	f7fe ff87 	bl	8005798 <_PreparePacket>
 800688a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800688c:	2211      	movs	r2, #17
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6838      	ldr	r0, [r7, #0]
 8006892:	f7ff f86f 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f383 8811 	msr	BASEPRI, r3
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20014330 	.word	0x20014330

080068a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068b0:	f3ef 8311 	mrs	r3, BASEPRI
 80068b4:	f04f 0120 	mov.w	r1, #32
 80068b8:	f381 8811 	msr	BASEPRI, r1
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	4819      	ldr	r0, [pc, #100]	; (8006924 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80068c0:	f7fe ff6a 	bl	8005798 <_PreparePacket>
 80068c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068ca:	4b17      	ldr	r3, [pc, #92]	; (8006928 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e00b      	b.n	80068f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	1c59      	adds	r1, r3, #1
 80068e6:	61f9      	str	r1, [r7, #28]
 80068e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	09db      	lsrs	r3, r3, #7
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b7f      	cmp	r3, #127	; 0x7f
 80068fa:	d8f0      	bhi.n	80068de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	61fa      	str	r2, [r7, #28]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800690c:	2208      	movs	r2, #8
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	6938      	ldr	r0, [r7, #16]
 8006912:	f7ff f82f 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f383 8811 	msr	BASEPRI, r3
}
 800691c:	bf00      	nop
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20014330 	.word	0x20014330
 8006928:	20014300 	.word	0x20014300

0800692c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006934:	f3ef 8311 	mrs	r3, BASEPRI
 8006938:	f04f 0120 	mov.w	r1, #32
 800693c:	f381 8811 	msr	BASEPRI, r1
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	4819      	ldr	r0, [pc, #100]	; (80069a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006944:	f7fe ff28 	bl	8005798 <_PreparePacket>
 8006948:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800694e:	4b17      	ldr	r3, [pc, #92]	; (80069ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e00b      	b.n	800697a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	1c59      	adds	r1, r3, #1
 800696a:	61f9      	str	r1, [r7, #28]
 800696c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	09db      	lsrs	r3, r3, #7
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b7f      	cmp	r3, #127	; 0x7f
 800697e:	d8f0      	bhi.n	8006962 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	61fa      	str	r2, [r7, #28]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006990:	2204      	movs	r2, #4
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	6938      	ldr	r0, [r7, #16]
 8006996:	f7fe ffed 	bl	8005974 <_SendPacket>
  RECORD_END();
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f383 8811 	msr	BASEPRI, r3
}
 80069a0:	bf00      	nop
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20014330 	.word	0x20014330
 80069ac:	20014300 	.word	0x20014300

080069b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069b8:	f3ef 8311 	mrs	r3, BASEPRI
 80069bc:	f04f 0120 	mov.w	r1, #32
 80069c0:	f381 8811 	msr	BASEPRI, r1
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	4819      	ldr	r0, [pc, #100]	; (8006a2c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80069c8:	f7fe fee6 	bl	8005798 <_PreparePacket>
 80069cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069d2:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e00b      	b.n	80069fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	1c59      	adds	r1, r3, #1
 80069ee:	61f9      	str	r1, [r7, #28]
 80069f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	09db      	lsrs	r3, r3, #7
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b7f      	cmp	r3, #127	; 0x7f
 8006a02:	d8f0      	bhi.n	80069e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	61fa      	str	r2, [r7, #28]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a14:	2206      	movs	r2, #6
 8006a16:	68f9      	ldr	r1, [r7, #12]
 8006a18:	6938      	ldr	r0, [r7, #16]
 8006a1a:	f7fe ffab 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f383 8811 	msr	BASEPRI, r3
}
 8006a24:	bf00      	nop
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20014330 	.word	0x20014330
 8006a30:	20014300 	.word	0x20014300

08006a34 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	f04f 0120 	mov.w	r1, #32
 8006a46:	f381 8811 	msr	BASEPRI, r1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	4827      	ldr	r0, [pc, #156]	; (8006aec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a4e:	f7fe fea3 	bl	8005798 <_PreparePacket>
 8006a52:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a58:	4b25      	ldr	r3, [pc, #148]	; (8006af0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	623b      	str	r3, [r7, #32]
 8006a6a:	e00b      	b.n	8006a84 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	6279      	str	r1, [r7, #36]	; 0x24
 8006a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	09db      	lsrs	r3, r3, #7
 8006a82:	623b      	str	r3, [r7, #32]
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	2b7f      	cmp	r3, #127	; 0x7f
 8006a88:	d8f0      	bhi.n	8006a6c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	e00b      	b.n	8006abc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	61f9      	str	r1, [r7, #28]
 8006aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	09db      	lsrs	r3, r3, #7
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac0:	d8f0      	bhi.n	8006aa4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	61fa      	str	r2, [r7, #28]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006ad2:	2207      	movs	r2, #7
 8006ad4:	68f9      	ldr	r1, [r7, #12]
 8006ad6:	6938      	ldr	r0, [r7, #16]
 8006ad8:	f7fe ff4c 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f383 8811 	msr	BASEPRI, r3
}
 8006ae2:	bf00      	nop
 8006ae4:	3728      	adds	r7, #40	; 0x28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20014330 	.word	0x20014330
 8006af0:	20014300 	.word	0x20014300

08006af4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006afc:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	1ad3      	subs	r3, r2, r3
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20014300 	.word	0x20014300

08006b14 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08c      	sub	sp, #48	; 0x30
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d06d      	beq.n	8006c02 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006b26:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b30:	e008      	b.n	8006b44 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	3301      	adds	r3, #1
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d3f2      	bcc.n	8006b32 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b4c:	e000      	b.n	8006b50 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b4e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d055      	beq.n	8006c02 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b56:	f3ef 8311 	mrs	r3, BASEPRI
 8006b5a:	f04f 0120 	mov.w	r1, #32
 8006b5e:	f381 8811 	msr	BASEPRI, r1
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	482a      	ldr	r0, [pc, #168]	; (8006c10 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006b66:	f7fe fe17 	bl	8005798 <_PreparePacket>
 8006b6a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	e00b      	b.n	8006b92 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1c59      	adds	r1, r3, #1
 8006b82:	6279      	str	r1, [r7, #36]	; 0x24
 8006b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	09db      	lsrs	r3, r3, #7
 8006b90:	623b      	str	r3, [r7, #32]
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	2b7f      	cmp	r3, #127	; 0x7f
 8006b96:	d8f0      	bhi.n	8006b7a <SEGGER_SYSVIEW_SendModule+0x66>
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b9e:	6a3a      	ldr	r2, [r7, #32]
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	e00b      	b.n	8006bcc <SEGGER_SYSVIEW_SendModule+0xb8>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	1c59      	adds	r1, r3, #1
 8006bbc:	61f9      	str	r1, [r7, #28]
 8006bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	09db      	lsrs	r3, r3, #7
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd0:	d8f0      	bhi.n	8006bb4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	61fa      	str	r2, [r7, #28]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2280      	movs	r2, #128	; 0x80
 8006be8:	4619      	mov	r1, r3
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7fe fd84 	bl	80056f8 <_EncodeStr>
 8006bf0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006bf2:	2216      	movs	r2, #22
 8006bf4:	68f9      	ldr	r1, [r7, #12]
 8006bf6:	6938      	ldr	r0, [r7, #16]
 8006bf8:	f7fe febc 	bl	8005974 <_SendPacket>
      RECORD_END();
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c02:	bf00      	nop
 8006c04:	3730      	adds	r7, #48	; 0x30
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20014328 	.word	0x20014328
 8006c10:	20014330 	.word	0x20014330

08006c14 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f2      	bne.n	8006c28 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20014328 	.word	0x20014328

08006c50 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c56:	f3ef 8311 	mrs	r3, BASEPRI
 8006c5a:	f04f 0120 	mov.w	r1, #32
 8006c5e:	f381 8811 	msr	BASEPRI, r1
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	4817      	ldr	r0, [pc, #92]	; (8006cc4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006c66:	f7fe fd97 	bl	8005798 <_PreparePacket>
 8006c6a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e00b      	b.n	8006c94 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	6179      	str	r1, [r7, #20]
 8006c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	09db      	lsrs	r3, r3, #7
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b7f      	cmp	r3, #127	; 0x7f
 8006c98:	d8f0      	bhi.n	8006c7c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	617a      	str	r2, [r7, #20]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006caa:	221b      	movs	r2, #27
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	68b8      	ldr	r0, [r7, #8]
 8006cb0:	f7fe fe60 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f383 8811 	msr	BASEPRI, r3
}
 8006cba:	bf00      	nop
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20014330 	.word	0x20014330
 8006cc8:	2001432c 	.word	0x2001432c

08006ccc <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8006ccc:	b40f      	push	{r0, r1, r2, r3}
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8006cd4:	f107 0314 	add.w	r3, r7, #20
 8006cd8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006cda:	1d3b      	adds	r3, r7, #4
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	6938      	ldr	r0, [r7, #16]
 8006ce2:	f7fe ffb5 	bl	8005c50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cf0:	b004      	add	sp, #16
 8006cf2:	4770      	bx	lr

08006cf4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8006d00:	f04f 0120 	mov.w	r1, #32
 8006d04:	f381 8811 	msr	BASEPRI, r1
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	4827      	ldr	r0, [pc, #156]	; (8006da8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d0c:	f7fe fd44 	bl	8005798 <_PreparePacket>
 8006d10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d12:	2280      	movs	r2, #128	; 0x80
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	6938      	ldr	r0, [r7, #16]
 8006d18:	f7fe fcee 	bl	80056f8 <_EncodeStr>
 8006d1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
 8006d22:	2301      	movs	r3, #1
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	e00b      	b.n	8006d40 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	1c59      	adds	r1, r3, #1
 8006d30:	6279      	str	r1, [r7, #36]	; 0x24
 8006d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	09db      	lsrs	r3, r3, #7
 8006d3e:	623b      	str	r3, [r7, #32]
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	2b7f      	cmp	r3, #127	; 0x7f
 8006d44:	d8f0      	bhi.n	8006d28 <SEGGER_SYSVIEW_Warn+0x34>
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d4c:	6a3a      	ldr	r2, [r7, #32]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e00b      	b.n	8006d78 <SEGGER_SYSVIEW_Warn+0x84>
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	1c59      	adds	r1, r3, #1
 8006d68:	61f9      	str	r1, [r7, #28]
 8006d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	09db      	lsrs	r3, r3, #7
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d7c:	d8f0      	bhi.n	8006d60 <SEGGER_SYSVIEW_Warn+0x6c>
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	61fa      	str	r2, [r7, #28]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d8e:	221a      	movs	r2, #26
 8006d90:	68f9      	ldr	r1, [r7, #12]
 8006d92:	6938      	ldr	r0, [r7, #16]
 8006d94:	f7fe fdee 	bl	8005974 <_SendPacket>
  RECORD_END();
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f383 8811 	msr	BASEPRI, r3
}
 8006d9e:	bf00      	nop
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20014330 	.word	0x20014330

08006dac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006db0:	4803      	ldr	r0, [pc, #12]	; (8006dc0 <_cbSendSystemDesc+0x14>)
 8006db2:	f7ff fc8d 	bl	80066d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006db6:	4803      	ldr	r0, [pc, #12]	; (8006dc4 <_cbSendSystemDesc+0x18>)
 8006db8:	f7ff fc8a 	bl	80066d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006dbc:	bf00      	nop
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	0800716c 	.word	0x0800716c
 8006dc4:	080071b0 	.word	0x080071b0

08006dc8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <SEGGER_SYSVIEW_Conf+0x24>)
 8006dd6:	4a06      	ldr	r2, [pc, #24]	; (8006df0 <SEGGER_SYSVIEW_Conf+0x28>)
 8006dd8:	f7fe fff8 	bl	8005dcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006ddc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006de0:	f7ff f838 	bl	8005e54 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006de4:	bf00      	nop
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000018 	.word	0x20000018
 8006dec:	08006dad 	.word	0x08006dad
 8006df0:	08007250 	.word	0x08007250

08006df4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	607b      	str	r3, [r7, #4]
 8006dfe:	e033      	b.n	8006e68 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006e00:	491e      	ldr	r1, [pc, #120]	; (8006e7c <_cbSendTaskList+0x88>)
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	491a      	ldr	r1, [pc, #104]	; (8006e7c <_cbSendTaskList+0x88>)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3304      	adds	r3, #4
 8006e20:	6819      	ldr	r1, [r3, #0]
 8006e22:	4c16      	ldr	r4, [pc, #88]	; (8006e7c <_cbSendTaskList+0x88>)
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4423      	add	r3, r4
 8006e30:	3308      	adds	r3, #8
 8006e32:	681c      	ldr	r4, [r3, #0]
 8006e34:	4d11      	ldr	r5, [pc, #68]	; (8006e7c <_cbSendTaskList+0x88>)
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	442b      	add	r3, r5
 8006e42:	330c      	adds	r3, #12
 8006e44:	681d      	ldr	r5, [r3, #0]
 8006e46:	4e0d      	ldr	r6, [pc, #52]	; (8006e7c <_cbSendTaskList+0x88>)
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4433      	add	r3, r6
 8006e54:	3310      	adds	r3, #16
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	f000 f8bd 	bl	8006fdc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3301      	adds	r3, #1
 8006e66:	607b      	str	r3, [r7, #4]
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <_cbSendTaskList+0x8c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d3c6      	bcc.n	8006e00 <_cbSendTaskList+0xc>
  }
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e7c:	20014414 	.word	0x20014414
 8006e80:	200144b4 	.word	0x200144b4

08006e84 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006e8c:	f7fc fdb8 	bl	8003a00 <xTaskGetTickCountFromISR>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2200      	movs	r2, #0
 8006e94:	469a      	mov	sl, r3
 8006e96:	4693      	mov	fp, r2
 8006e98:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	f04f 0a00 	mov.w	sl, #0
 8006ea8:	f04f 0b00 	mov.w	fp, #0
 8006eac:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006eb0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006eb4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006eb8:	4652      	mov	r2, sl
 8006eba:	465b      	mov	r3, fp
 8006ebc:	1a14      	subs	r4, r2, r0
 8006ebe:	eb63 0501 	sbc.w	r5, r3, r1
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	00ab      	lsls	r3, r5, #2
 8006ecc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006ed0:	00a2      	lsls	r2, r4, #2
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	461d      	mov	r5, r3
 8006ed6:	eb14 0800 	adds.w	r8, r4, r0
 8006eda:	eb45 0901 	adc.w	r9, r5, r1
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	4699      	mov	r9, r3
 8006ef6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006efa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006f0c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006f1a:	2205      	movs	r2, #5
 8006f1c:	492b      	ldr	r1, [pc, #172]	; (8006fcc <SYSVIEW_AddTask+0xc0>)
 8006f1e:	68b8      	ldr	r0, [r7, #8]
 8006f20:	f000 f8a2 	bl	8007068 <memcmp>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04b      	beq.n	8006fc2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006f2a:	4b29      	ldr	r3, [pc, #164]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b07      	cmp	r3, #7
 8006f30:	d903      	bls.n	8006f3a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006f32:	4828      	ldr	r0, [pc, #160]	; (8006fd4 <SYSVIEW_AddTask+0xc8>)
 8006f34:	f7ff fede 	bl	8006cf4 <SEGGER_SYSVIEW_Warn>
    return;
 8006f38:	e044      	b.n	8006fc4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006f3a:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4926      	ldr	r1, [pc, #152]	; (8006fd8 <SYSVIEW_AddTask+0xcc>)
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006f4e:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4921      	ldr	r1, [pc, #132]	; (8006fd8 <SYSVIEW_AddTask+0xcc>)
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3304      	adds	r3, #4
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006f64:	4b1a      	ldr	r3, [pc, #104]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	491b      	ldr	r1, [pc, #108]	; (8006fd8 <SYSVIEW_AddTask+0xcc>)
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3308      	adds	r3, #8
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006f7a:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4916      	ldr	r1, [pc, #88]	; (8006fd8 <SYSVIEW_AddTask+0xcc>)
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4910      	ldr	r1, [pc, #64]	; (8006fd8 <SYSVIEW_AddTask+0xcc>)
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	3310      	adds	r3, #16
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <SYSVIEW_AddTask+0xc4>)
 8006fae:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f80e 	bl	8006fdc <SYSVIEW_SendTaskInfo>
 8006fc0:	e000      	b.n	8006fc4 <SYSVIEW_AddTask+0xb8>
    return;
 8006fc2:	bf00      	nop

}
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	080071c0 	.word	0x080071c0
 8006fd0:	200144b4 	.word	0x200144b4
 8006fd4:	080071c8 	.word	0x080071c8
 8006fd8:	20014414 	.word	0x20014414

08006fdc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006fea:	f107 0314 	add.w	r3, r7, #20
 8006fee:	2214      	movs	r2, #20
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f856 	bl	80070a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff fa65 	bl	80064e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007016:	bf00      	nop
 8007018:	3728      	adds	r7, #40	; 0x28
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <__libc_init_array>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4d0d      	ldr	r5, [pc, #52]	; (8007058 <__libc_init_array+0x38>)
 8007024:	4c0d      	ldr	r4, [pc, #52]	; (800705c <__libc_init_array+0x3c>)
 8007026:	1b64      	subs	r4, r4, r5
 8007028:	10a4      	asrs	r4, r4, #2
 800702a:	2600      	movs	r6, #0
 800702c:	42a6      	cmp	r6, r4
 800702e:	d109      	bne.n	8007044 <__libc_init_array+0x24>
 8007030:	4d0b      	ldr	r5, [pc, #44]	; (8007060 <__libc_init_array+0x40>)
 8007032:	4c0c      	ldr	r4, [pc, #48]	; (8007064 <__libc_init_array+0x44>)
 8007034:	f000 f83e 	bl	80070b4 <_init>
 8007038:	1b64      	subs	r4, r4, r5
 800703a:	10a4      	asrs	r4, r4, #2
 800703c:	2600      	movs	r6, #0
 800703e:	42a6      	cmp	r6, r4
 8007040:	d105      	bne.n	800704e <__libc_init_array+0x2e>
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	f855 3b04 	ldr.w	r3, [r5], #4
 8007048:	4798      	blx	r3
 800704a:	3601      	adds	r6, #1
 800704c:	e7ee      	b.n	800702c <__libc_init_array+0xc>
 800704e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007052:	4798      	blx	r3
 8007054:	3601      	adds	r6, #1
 8007056:	e7f2      	b.n	800703e <__libc_init_array+0x1e>
 8007058:	08007260 	.word	0x08007260
 800705c:	08007260 	.word	0x08007260
 8007060:	08007260 	.word	0x08007260
 8007064:	08007264 	.word	0x08007264

08007068 <memcmp>:
 8007068:	b510      	push	{r4, lr}
 800706a:	3901      	subs	r1, #1
 800706c:	4402      	add	r2, r0
 800706e:	4290      	cmp	r0, r2
 8007070:	d101      	bne.n	8007076 <memcmp+0xe>
 8007072:	2000      	movs	r0, #0
 8007074:	e005      	b.n	8007082 <memcmp+0x1a>
 8007076:	7803      	ldrb	r3, [r0, #0]
 8007078:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800707c:	42a3      	cmp	r3, r4
 800707e:	d001      	beq.n	8007084 <memcmp+0x1c>
 8007080:	1b18      	subs	r0, r3, r4
 8007082:	bd10      	pop	{r4, pc}
 8007084:	3001      	adds	r0, #1
 8007086:	e7f2      	b.n	800706e <memcmp+0x6>

08007088 <memcpy>:
 8007088:	440a      	add	r2, r1
 800708a:	4291      	cmp	r1, r2
 800708c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007090:	d100      	bne.n	8007094 <memcpy+0xc>
 8007092:	4770      	bx	lr
 8007094:	b510      	push	{r4, lr}
 8007096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800709a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800709e:	4291      	cmp	r1, r2
 80070a0:	d1f9      	bne.n	8007096 <memcpy+0xe>
 80070a2:	bd10      	pop	{r4, pc}

080070a4 <memset>:
 80070a4:	4402      	add	r2, r0
 80070a6:	4603      	mov	r3, r0
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d100      	bne.n	80070ae <memset+0xa>
 80070ac:	4770      	bx	lr
 80070ae:	f803 1b01 	strb.w	r1, [r3], #1
 80070b2:	e7f9      	b.n	80070a8 <memset+0x4>

080070b4 <_init>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	bf00      	nop
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr

080070c0 <_fini>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	bf00      	nop
 80070c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c6:	bc08      	pop	{r3}
 80070c8:	469e      	mov	lr, r3
 80070ca:	4770      	bx	lr
