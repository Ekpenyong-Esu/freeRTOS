
BinarySemaphoreTimeBound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007138  08007138  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007140  08007140  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          0001448c  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b8  200144b8  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001494a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa0  00000000  00000000  000349a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00037948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c8  00000000  00000000  00038c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d24  00000000  00000000  00039e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001557c  00000000  00000000  0005fb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a60  00000000  00000000  00075100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015bb60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000505c  00000000  00000000  0015bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f84 	.word	0x08006f84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000030 	.word	0x20000030
 80001ec:	08006f84 	.word	0x08006f84

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e40 	.word	0x20012e40

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <GreenOn>:
#include "STM32_Disc1_Gpio.h"
#include "main.h"



void GreenOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);}
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <GreenOn+0x14>)
 8000594:	f000 fffc 	bl	8001590 <HAL_GPIO_WritePin>
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021800 	.word	0x40021800

080005a0 <GreenOff>:
void GreenOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);}
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <GreenOff+0x14>)
 80005ac:	f000 fff0 	bl	8001590 <HAL_GPIO_WritePin>
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021800 	.word	0x40021800

080005b8 <BlueOn>:
LED GreenLed = { GreenOn, GreenOff };   // initialize the GreenLed struct




void BlueOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);}
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <BlueOn+0x14>)
 80005c4:	f000 ffe4 	bl	8001590 <HAL_GPIO_WritePin>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021800 	.word	0x40021800

080005d0 <BlueOff>:
void BlueOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <BlueOff+0x14>)
 80005dc:	f000 ffd8 	bl	8001590 <HAL_GPIO_WritePin>
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021800 	.word	0x40021800

080005e8 <RedOn>:
LED BlueLed = { BlueOn, BlueOff }; // initialize the BlueLed struct




void RedOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);}
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4802      	ldr	r0, [pc, #8]	; (80005fc <RedOn+0x14>)
 80005f4:	f000 ffcc 	bl	8001590 <HAL_GPIO_WritePin>
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021800 	.word	0x40021800

08000600 <RedOff>:
void RedOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);}
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	4802      	ldr	r0, [pc, #8]	; (8000614 <RedOff+0x14>)
 800060c:	f000 ffc0 	bl	8001590 <HAL_GPIO_WritePin>
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021800 	.word	0x40021800

08000618 <StmRand>:
uint8_t ReadPushButton( void ){ return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);}



uint32_t StmRand( uint32_t Min, uint32_t Max )
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	return RNG->DR % Max + Min;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <StmRand+0x2c>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	fbb3 f2f2 	udiv	r2, r3, r2
 800062c:	6839      	ldr	r1, [r7, #0]
 800062e:	fb01 f202 	mul.w	r2, r1, r2
 8000632:	1a9a      	subs	r2, r3, r2
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4413      	add	r3, r2
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	50060800 	.word	0x50060800

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fccf 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f85b 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8c5 	bl	80007e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 800065a:	f006 fb1d 	bl	8006c98 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 800065e:	2003      	movs	r0, #3
 8000660:	f000 fdb5 	bl	80011ce <HAL_NVIC_SetPriorityGrouping>


  //create a semaphore using the FreeRTOS Heap
  semPtr = xSemaphoreCreateBinary();
 8000664:	2203      	movs	r2, #3
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f002 f82b 	bl	80026c4 <xQueueGenericCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <main+0xb0>)
 8000672:	6013      	str	r3, [r2, #0]
  configASSERT(semPtr != NULL);
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <main+0xb0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10a      	bne.n	8000692 <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000680:	f383 8811 	msr	BASEPRI, r3
 8000684:	f3bf 8f6f 	isb	sy
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800068e:	bf00      	nop
 8000690:	e7fe      	b.n	8000690 <main+0x48>


  //create TaskA as a higher priority than TaskB.  In this example, this isn't strictly necessary since the tasks
  //spend nearly all of their time blocked
  configASSERT(xTaskCreate(GreenTaskA, "GreenTaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 8000692:	2300      	movs	r3, #0
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2302      	movs	r3, #2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	4917      	ldr	r1, [pc, #92]	; (80006fc <main+0xb4>)
 80006a0:	4817      	ldr	r0, [pc, #92]	; (8000700 <main+0xb8>)
 80006a2:	f002 fe55 	bl	8003350 <xTaskCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d00a      	beq.n	80006c2 <main+0x7a>
        __asm volatile
 80006ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	60bb      	str	r3, [r7, #8]
    }
 80006be:	bf00      	nop
 80006c0:	e7fe      	b.n	80006c0 <main+0x78>


  //using an assert to ensure proper task creation
  configASSERT(xTaskCreate(BlueTaskB, "BlueTaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
 80006c2:	2300      	movs	r3, #0
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <main+0xbc>)
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <main+0xc0>)
 80006d2:	f002 fe3d 	bl	8003350 <xTaskCreate>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d00a      	beq.n	80006f2 <main+0xaa>
        __asm volatile
 80006dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	607b      	str	r3, [r7, #4]
    }
 80006ee:	bf00      	nop
 80006f0:	e7fe      	b.n	80006f0 <main+0xa8>


  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 80006f2:	f002 ffc9 	bl	8003688 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0xae>
 80006f8:	20000048 	.word	0x20000048
 80006fc:	08006f9c 	.word	0x08006f9c
 8000700:	08000cbd 	.word	0x08000cbd
 8000704:	08006fa8 	.word	0x08006fa8
 8000708:	08000d09 	.word	0x08000d09

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fc2a 	bl	8006f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <SystemClock_Config+0xd0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a28      	ldr	r2, [pc, #160]	; (80007dc <SystemClock_Config+0xd0>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <SystemClock_Config+0xd4>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000780:	2308      	movs	r3, #8
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000784:	2332      	movs	r3, #50	; 0x32
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000788:	2304      	movs	r3, #4
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800078c:	2307      	movs	r3, #7
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f000 ff15 	bl	80015c4 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a0:	f000 fb20 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 f976 	bl	8001ab4 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ce:	f000 fb09 	bl	8000de4 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
 80007fe:	4bb2      	ldr	r3, [pc, #712]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4ab1      	ldr	r2, [pc, #708]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4baf      	ldr	r3, [pc, #700]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	623b      	str	r3, [r7, #32]
 8000814:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	4bab      	ldr	r3, [pc, #684]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4aaa      	ldr	r2, [pc, #680]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4ba8      	ldr	r3, [pc, #672]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0320 	and.w	r3, r3, #32
 800082e:	61fb      	str	r3, [r7, #28]
 8000830:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4ba4      	ldr	r3, [pc, #656]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4aa3      	ldr	r2, [pc, #652]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4ba1      	ldr	r3, [pc, #644]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b9d      	ldr	r3, [pc, #628]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a9c      	ldr	r2, [pc, #624]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b9a      	ldr	r3, [pc, #616]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b96      	ldr	r3, [pc, #600]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a95      	ldr	r2, [pc, #596]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b93      	ldr	r3, [pc, #588]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b8f      	ldr	r3, [pc, #572]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a8e      	ldr	r2, [pc, #568]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b8c      	ldr	r3, [pc, #560]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b88      	ldr	r3, [pc, #544]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a87      	ldr	r2, [pc, #540]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b85      	ldr	r3, [pc, #532]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b81      	ldr	r3, [pc, #516]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a80      	ldr	r2, [pc, #512]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b7e      	ldr	r3, [pc, #504]	; (8000ac8 <MX_GPIO_Init+0x2e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2116      	movs	r1, #22
 80008de:	487b      	ldr	r0, [pc, #492]	; (8000acc <MX_GPIO_Init+0x2e8>)
 80008e0:	f000 fe56 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	4879      	ldr	r0, [pc, #484]	; (8000ad0 <MX_GPIO_Init+0x2ec>)
 80008ea:	f000 fe51 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008f4:	4877      	ldr	r0, [pc, #476]	; (8000ad4 <MX_GPIO_Init+0x2f0>)
 80008f6:	f000 fe4b 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000900:	4875      	ldr	r0, [pc, #468]	; (8000ad8 <MX_GPIO_Init+0x2f4>)
 8000902:	f000 fe45 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000906:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000918:	230c      	movs	r3, #12
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	486e      	ldr	r0, [pc, #440]	; (8000adc <MX_GPIO_Init+0x2f8>)
 8000924:	f000 fc88 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000928:	f44f 7360 	mov.w	r3, #896	; 0x380
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800093a:	2305      	movs	r3, #5
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	4865      	ldr	r0, [pc, #404]	; (8000adc <MX_GPIO_Init+0x2f8>)
 8000946:	f000 fc77 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800095c:	230e      	movs	r3, #14
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	485d      	ldr	r0, [pc, #372]	; (8000adc <MX_GPIO_Init+0x2f8>)
 8000968:	f000 fc66 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800096c:	2301      	movs	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800097c:	230c      	movs	r3, #12
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4851      	ldr	r0, [pc, #324]	; (8000acc <MX_GPIO_Init+0x2e8>)
 8000988:	f000 fc56 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800098c:	2316      	movs	r3, #22
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	484a      	ldr	r0, [pc, #296]	; (8000acc <MX_GPIO_Init+0x2e8>)
 80009a4:	f000 fc48 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009a8:	f248 0307 	movw	r3, #32775	; 0x8007
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4844      	ldr	r0, [pc, #272]	; (8000ad0 <MX_GPIO_Init+0x2ec>)
 80009c0:	f000 fc3a 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009c4:	f641 0358 	movw	r3, #6232	; 0x1858
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009d6:	230e      	movs	r3, #14
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	483b      	ldr	r0, [pc, #236]	; (8000ad0 <MX_GPIO_Init+0x2ec>)
 80009e2:	f000 fc29 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	4834      	ldr	r0, [pc, #208]	; (8000ad0 <MX_GPIO_Init+0x2ec>)
 80009fe:	f000 fc1b 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a02:	2320      	movs	r3, #32
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	482d      	ldr	r0, [pc, #180]	; (8000acc <MX_GPIO_Init+0x2e8>)
 8000a18:	f000 fc0e 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	482a      	ldr	r0, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0x2fc>)
 8000a38:	f000 fbfe 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <MX_GPIO_Init+0x2fc>)
 8000a50:	f000 fbf2 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a54:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a66:	230c      	movs	r3, #12
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <MX_GPIO_Init+0x2f4>)
 8000a72:	f000 fbe1 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a76:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a88:	230c      	movs	r3, #12
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000a94:	f000 fbd0 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aaa:	230e      	movs	r3, #14
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <MX_GPIO_Init+0x2fc>)
 8000ab6:	f000 fbbf 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000aba:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	e010      	b.n	8000ae8 <MX_GPIO_Init+0x304>
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40021400 	.word	0x40021400
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000af0:	230c      	movs	r3, #12
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	486b      	ldr	r0, [pc, #428]	; (8000ca8 <MX_GPIO_Init+0x4c4>)
 8000afc:	f000 fb9c 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4864      	ldr	r0, [pc, #400]	; (8000ca8 <MX_GPIO_Init+0x4c4>)
 8000b16:	f000 fb8f 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	485d      	ldr	r0, [pc, #372]	; (8000cac <MX_GPIO_Init+0x4c8>)
 8000b38:	f000 fb7e 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4856      	ldr	r0, [pc, #344]	; (8000cac <MX_GPIO_Init+0x4c8>)
 8000b52:	f000 fb71 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	484f      	ldr	r0, [pc, #316]	; (8000cac <MX_GPIO_Init+0x4c8>)
 8000b70:	f000 fb62 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b74:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b86:	230e      	movs	r3, #14
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4847      	ldr	r0, [pc, #284]	; (8000cb0 <MX_GPIO_Init+0x4cc>)
 8000b92:	f000 fb51 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b96:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba8:	230e      	movs	r3, #14
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4840      	ldr	r0, [pc, #256]	; (8000cb4 <MX_GPIO_Init+0x4d0>)
 8000bb4:	f000 fb40 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4837      	ldr	r0, [pc, #220]	; (8000cb4 <MX_GPIO_Init+0x4d0>)
 8000bd6:	f000 fb2f 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bec:	2304      	movs	r3, #4
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <MX_GPIO_Init+0x4d4>)
 8000bf8:	f000 fb1e 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <MX_GPIO_Init+0x4d4>)
 8000c1a:	f000 fb0d 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c1e:	2348      	movs	r3, #72	; 0x48
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c2e:	230e      	movs	r3, #14
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	481c      	ldr	r0, [pc, #112]	; (8000cac <MX_GPIO_Init+0x4c8>)
 8000c3a:	f000 fafd 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c50:	2309      	movs	r3, #9
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_GPIO_Init+0x4cc>)
 8000c5c:	f000 faec 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000c60:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_GPIO_Init+0x4cc>)
 8000c7a:	f000 fadd 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c7e:	2360      	movs	r3, #96	; 0x60
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_GPIO_Init+0x4c4>)
 8000c9a:	f000 facd 	bl	8001238 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	40021800 	.word	0x40021800
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <GreenTaskA>:
/* USER CODE BEGIN 4 */



void GreenTaskA( void* argument )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	uint_fast8_t count = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		uint8_t numLoops = StmRand(3,7);
 8000cc8:	2107      	movs	r1, #7
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f7ff fca4 	bl	8000618 <StmRand>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	72fb      	strb	r3, [r7, #11]
		if(++count >= numLoops)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d30b      	bcc.n	8000cfa <GreenTaskA+0x3e>
		{
			count = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
			SEGGER_SYSVIEW_PrintfHost("Task A (green LED) gives semPtr");
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <GreenTaskA+0x44>)
 8000ce8:	f005 ff58 	bl	8006b9c <SEGGER_SYSVIEW_PrintfHost>
			xSemaphoreGive(semPtr);
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <GreenTaskA+0x48>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f001 fd6d 	bl	80027d4 <xQueueGenericSend>
		}
		greenBlink();
 8000cfa:	f000 f82f 	bl	8000d5c <greenBlink>
	{
 8000cfe:	e7e3      	b.n	8000cc8 <GreenTaskA+0xc>
 8000d00:	08006fb4 	.word	0x08006fb4
 8000d04:	20000048 	.word	0x20000048

08000d08 <BlueTaskB>:

/**
 * wait to receive semPtr and triple blink the Blue LED
 */
void BlueTaskB( void* argument )
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//'take' the semaphore with a 500mS timeout
		SEGGER_SYSVIEW_PrintfHost("attempt to take semPtr");
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <BlueTaskB+0x40>)
 8000d12:	f005 ff43 	bl	8006b9c <SEGGER_SYSVIEW_PrintfHost>
		if(xSemaphoreTake(semPtr, 100/portTICK_PERIOD_MS) == pdPASS)
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <BlueTaskB+0x44>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2164      	movs	r1, #100	; 0x64
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 f84d 	bl	8002dbc <xQueueSemaphoreTake>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d108      	bne.n	8000d3a <BlueTaskB+0x32>
		{
			RedLed.Off();
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <BlueTaskB+0x48>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4798      	blx	r3
			SEGGER_SYSVIEW_PrintfHost("received semPtr");
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <BlueTaskB+0x4c>)
 8000d30:	f005 ff34 	bl	8006b9c <SEGGER_SYSVIEW_PrintfHost>
			blueTripleBlink();
 8000d34:	f000 f824 	bl	8000d80 <blueTripleBlink>
 8000d38:	e7ea      	b.n	8000d10 <BlueTaskB+0x8>
		}
		else
		{
			//this code is called when the semaphore wasn't taken in time
			SEGGER_SYSVIEW_PrintfHost("FAILED to receive semphr in time");
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <BlueTaskB+0x50>)
 8000d3c:	f005 ff2e 	bl	8006b9c <SEGGER_SYSVIEW_PrintfHost>
			RedLed.On();
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <BlueTaskB+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4798      	blx	r3
		SEGGER_SYSVIEW_PrintfHost("attempt to take semPtr");
 8000d46:	e7e3      	b.n	8000d10 <BlueTaskB+0x8>
 8000d48:	08006fd4 	.word	0x08006fd4
 8000d4c:	20000048 	.word	0x20000048
 8000d50:	20000010 	.word	0x20000010
 8000d54:	08006fec 	.word	0x08006fec
 8000d58:	08006ffc 	.word	0x08006ffc

08000d5c <greenBlink>:
/**
 * Blink the Green LED once using vTaskDelay
 */

static void greenBlink( void )
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	GreenLed.On();
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <greenBlink+0x20>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4798      	blx	r3
	vTaskDelay(100/portTICK_PERIOD_MS);
 8000d66:	2064      	movs	r0, #100	; 0x64
 8000d68:	f002 fc56 	bl	8003618 <vTaskDelay>
	GreenLed.Off();
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <greenBlink+0x20>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4798      	blx	r3
	vTaskDelay(100/portTICK_PERIOD_MS);
 8000d72:	2064      	movs	r0, #100	; 0x64
 8000d74:	f002 fc50 	bl	8003618 <vTaskDelay>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000

08000d80 <blueTripleBlink>:
/**
 * blink the Blue LED 3 times in rapid succession
 * using vtaskDelay
 */
static void blueTripleBlink( void )
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	//triple blink the Blue LED
	for(uint_fast8_t i = 0; i < 3; i++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	e00e      	b.n	8000daa <blueTripleBlink+0x2a>
	{
		BlueLed.On();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <blueTripleBlink+0x3c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4798      	blx	r3
		vTaskDelay(50/portTICK_PERIOD_MS);
 8000d92:	2032      	movs	r0, #50	; 0x32
 8000d94:	f002 fc40 	bl	8003618 <vTaskDelay>
		BlueLed.Off();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <blueTripleBlink+0x3c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4798      	blx	r3
		vTaskDelay(50/portTICK_PERIOD_MS);
 8000d9e:	2032      	movs	r0, #50	; 0x32
 8000da0:	f002 fc3a 	bl	8003618 <vTaskDelay>
	for(uint_fast8_t i = 0; i < 3; i++)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d9ed      	bls.n	8000d8c <blueTripleBlink+0xc>
	}
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dd2:	f000 f92f 	bl	8001034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40001000 	.word	0x40001000

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dec:	e7fe      	b.n	8000dec <Error_Handler+0x8>
	...

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e2e:	2007      	movs	r0, #7
 8000e30:	f000 f9cd 	bl	80011ce <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <HAL_InitTick+0xe4>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <HAL_InitTick+0xe4>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_InitTick+0xe4>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6c:	f107 0210 	add.w	r2, r7, #16
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f828 	bl	8001ecc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e86:	f001 f80d 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8000e8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000e8c:	e004      	b.n	8000e98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e8e:	f001 f809 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8000e92:	4603      	mov	r3, r0
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_InitTick+0xec>)
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_InitTick+0xec>)
 8000eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_InitTick+0xec>)
 8000eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_InitTick+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_InitTick+0xec>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_InitTick+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <HAL_InitTick+0xec>)
 8000ece:	f001 f82f 	bl	8001f30 <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d11b      	bne.n	8000f18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <HAL_InitTick+0xec>)
 8000ee2:	f001 f87f 	bl	8001fe4 <HAL_TIM_Base_Start_IT>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d111      	bne.n	8000f18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef4:	2036      	movs	r0, #54	; 0x36
 8000ef6:	f000 f991 	bl	800121c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d808      	bhi.n	8000f12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	2036      	movs	r0, #54	; 0x36
 8000f06:	f000 f96d 	bl	80011e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_InitTick+0xf4>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e002      	b.n	8000f18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3738      	adds	r7, #56	; 0x38
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	431bde83 	.word	0x431bde83
 8000f2c:	2000004c 	.word	0x2000004c
 8000f30:	40001000 	.word	0x40001000
 8000f34:	2000001c 	.word	0x2000001c

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM6_DAC_IRQHandler+0x10>)
 8000f6a:	f001 f8ab 	bl	80020c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000004c 	.word	0x2000004c

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc6:	f7ff ffd7 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f005 ff91 	bl	8006ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fb3b 	bl	8000648 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fd4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000fe0:	08007148 	.word	0x08007148
  ldr r2, =_sbss
 8000fe4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000fe8:	200144b8 	.word	0x200144b8

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f8d8 	bl	80011ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ff0e 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fee4 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000020 	.word	0x20000020
 8001058:	20000094 	.word	0x20000094

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000094 	.word	0x20000094

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff4c 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f6:	f7ff ff61 	bl	80010bc <__NVIC_GetPriorityGrouping>
 80011fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	6978      	ldr	r0, [r7, #20]
 8001202:	f7ff ffb1 	bl	8001168 <NVIC_EncodePriority>
 8001206:	4602      	mov	r2, r0
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff80 	bl	8001114 <__NVIC_SetPriority>
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff54 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e177      	b.n	8001544 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8166 	bne.w	800153e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	2b02      	cmp	r3, #2
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80c0 	beq.w	800153e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b66      	ldr	r3, [pc, #408]	; (800155c <HAL_GPIO_Init+0x324>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a65      	ldr	r2, [pc, #404]	; (800155c <HAL_GPIO_Init+0x324>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_GPIO_Init+0x324>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a61      	ldr	r2, [pc, #388]	; (8001560 <HAL_GPIO_Init+0x328>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a58      	ldr	r2, [pc, #352]	; (8001564 <HAL_GPIO_Init+0x32c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d037      	beq.n	8001476 <HAL_GPIO_Init+0x23e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a57      	ldr	r2, [pc, #348]	; (8001568 <HAL_GPIO_Init+0x330>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d031      	beq.n	8001472 <HAL_GPIO_Init+0x23a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a56      	ldr	r2, [pc, #344]	; (800156c <HAL_GPIO_Init+0x334>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d02b      	beq.n	800146e <HAL_GPIO_Init+0x236>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a55      	ldr	r2, [pc, #340]	; (8001570 <HAL_GPIO_Init+0x338>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x232>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a54      	ldr	r2, [pc, #336]	; (8001574 <HAL_GPIO_Init+0x33c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x22e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a53      	ldr	r2, [pc, #332]	; (8001578 <HAL_GPIO_Init+0x340>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x22a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a52      	ldr	r2, [pc, #328]	; (800157c <HAL_GPIO_Init+0x344>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x226>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a51      	ldr	r2, [pc, #324]	; (8001580 <HAL_GPIO_Init+0x348>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x222>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a50      	ldr	r2, [pc, #320]	; (8001584 <HAL_GPIO_Init+0x34c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x21e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4f      	ldr	r2, [pc, #316]	; (8001588 <HAL_GPIO_Init+0x350>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x21a>
 800144e:	2309      	movs	r3, #9
 8001450:	e012      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001452:	230a      	movs	r3, #10
 8001454:	e010      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001456:	2308      	movs	r3, #8
 8001458:	e00e      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800145a:	2307      	movs	r3, #7
 800145c:	e00c      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800145e:	2306      	movs	r3, #6
 8001460:	e00a      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001462:	2305      	movs	r3, #5
 8001464:	e008      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001466:	2304      	movs	r3, #4
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800146a:	2303      	movs	r3, #3
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001476:	2300      	movs	r3, #0
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001488:	4935      	ldr	r1, [pc, #212]	; (8001560 <HAL_GPIO_Init+0x328>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_GPIO_Init+0x354>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ba:	4a34      	ldr	r2, [pc, #208]	; (800158c <HAL_GPIO_Init+0x354>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_GPIO_Init+0x354>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e4:	4a29      	ldr	r2, [pc, #164]	; (800158c <HAL_GPIO_Init+0x354>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_GPIO_Init+0x354>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150e:	4a1f      	ldr	r2, [pc, #124]	; (800158c <HAL_GPIO_Init+0x354>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_GPIO_Init+0x354>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_GPIO_Init+0x354>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3301      	adds	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	f67f ae84 	bls.w	8001254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40013800 	.word	0x40013800
 8001564:	40020000 	.word	0x40020000
 8001568:	40020400 	.word	0x40020400
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	40021000 	.word	0x40021000
 8001578:	40021400 	.word	0x40021400
 800157c:	40021800 	.word	0x40021800
 8001580:	40021c00 	.word	0x40021c00
 8001584:	40022000 	.word	0x40022000
 8001588:	40022400 	.word	0x40022400
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e267      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d075      	beq.n	80016ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	4b88      	ldr	r3, [pc, #544]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d00c      	beq.n	8001608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b85      	ldr	r3, [pc, #532]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fa:	4b82      	ldr	r3, [pc, #520]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b7e      	ldr	r3, [pc, #504]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05b      	beq.n	80016cc <HAL_RCC_OscConfig+0x108>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d157      	bne.n	80016cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e242      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x74>
 800162a:	4b76      	ldr	r3, [pc, #472]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a75      	ldr	r2, [pc, #468]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6f      	ldr	r2, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b6d      	ldr	r3, [pc, #436]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a6c      	ldr	r2, [pc, #432]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a68      	ldr	r2, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b66      	ldr	r3, [pc, #408]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a65      	ldr	r2, [pc, #404]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fcee 	bl	800105c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fcea 	bl	800105c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e207      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xc0>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fcda 	bl	800105c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fcd6 	bl	800105c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1f3      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	4b51      	ldr	r3, [pc, #324]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0xe8>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d063      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d11c      	bne.n	800172c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d116      	bne.n	800172c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x152>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e1c7      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4937      	ldr	r1, [pc, #220]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e03a      	b.n	80017a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_RCC_OscConfig+0x244>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fc8f 	bl	800105c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff fc8b 	bl	800105c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e1a8      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4925      	ldr	r1, [pc, #148]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_OscConfig+0x244>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fc6e 	bl	800105c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fc6a 	bl	800105c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e187      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d036      	beq.n	800181c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d016      	beq.n	80017e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_RCC_OscConfig+0x248>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fc4e 	bl	800105c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fc4a 	bl	800105c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e167      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_OscConfig+0x240>)
 80017d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x200>
 80017e2:	e01b      	b.n	800181c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_OscConfig+0x248>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fc37 	bl	800105c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	e00e      	b.n	8001810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff fc33 	bl	800105c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d907      	bls.n	8001810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e150      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
 8001804:	40023800 	.word	0x40023800
 8001808:	42470000 	.word	0x42470000
 800180c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ea      	bne.n	80017f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8097 	beq.w	8001958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10f      	bne.n	800185a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b7d      	ldr	r3, [pc, #500]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a7c      	ldr	r2, [pc, #496]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b7a      	ldr	r3, [pc, #488]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001856:	2301      	movs	r3, #1
 8001858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <HAL_RCC_OscConfig+0x474>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d118      	bne.n	8001898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001866:	4b74      	ldr	r3, [pc, #464]	; (8001a38 <HAL_RCC_OscConfig+0x474>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a73      	ldr	r2, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x474>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7ff fbf3 	bl	800105c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187a:	f7ff fbef 	bl	800105c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e10c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x474>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d106      	bne.n	80018ae <HAL_RCC_OscConfig+0x2ea>
 80018a0:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a63      	ldr	r2, [pc, #396]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	e01c      	b.n	80018e8 <HAL_RCC_OscConfig+0x324>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x30c>
 80018b6:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	4a5e      	ldr	r2, [pc, #376]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6713      	str	r3, [r2, #112]	; 0x70
 80018c2:	4b5c      	ldr	r3, [pc, #368]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	4a5b      	ldr	r2, [pc, #364]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6713      	str	r3, [r2, #112]	; 0x70
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0x324>
 80018d0:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a57      	ldr	r2, [pc, #348]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a54      	ldr	r2, [pc, #336]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018e2:	f023 0304 	bic.w	r3, r3, #4
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d015      	beq.n	800191c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff fbb4 	bl	800105c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff fbb0 	bl	800105c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0cb      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0ee      	beq.n	80018f8 <HAL_RCC_OscConfig+0x334>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fb9e 	bl	800105c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fb9a 	bl	800105c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0b5      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ee      	bne.n	8001924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a38      	ldr	r2, [pc, #224]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a1 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001962:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b08      	cmp	r3, #8
 800196c:	d05c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d141      	bne.n	80019fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_OscConfig+0x478>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fb6e 	bl	800105c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff fb6a 	bl	800105c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e087      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	491b      	ldr	r1, [pc, #108]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_RCC_OscConfig+0x478>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fb43 	bl	800105c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff fb3f 	bl	800105c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e05c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x416>
 80019f8:	e054      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_RCC_OscConfig+0x478>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb2c 	bl	800105c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff fb28 	bl	800105c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e045      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x444>
 8001a26:	e03d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e038      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x4ec>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d028      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d121      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d11a      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a70:	4013      	ands	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d111      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	085b      	lsrs	r3, r3, #1
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0cc      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d90c      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b63      	ldr	r3, [pc, #396]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0b8      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b08:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	494d      	ldr	r1, [pc, #308]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d044      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d119      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e067      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4934      	ldr	r1, [pc, #208]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7ff fa5a 	bl	800105c <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7ff fa56 	bl	800105c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e04f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d20c      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e032      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4916      	ldr	r1, [pc, #88]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	490e      	ldr	r1, [pc, #56]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c3a:	f000 f821 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	490a      	ldr	r1, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f8f0 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023c00 	.word	0x40023c00
 8001c70:	40023800 	.word	0x40023800
 8001c74:	080070f8 	.word	0x080070f8
 8001c78:	20000018 	.word	0x20000018
 8001c7c:	2000001c 	.word	0x2000001c

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c84:	b094      	sub	sp, #80	; 0x50
 8001c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c90:	2300      	movs	r3, #0
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c98:	4b79      	ldr	r3, [pc, #484]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	f200 80e1 	bhi.w	8001e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x3a>
 8001cb2:	e0db      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb4:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cb8:	e0db      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cbe:	e0d8      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cca:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd6:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	2200      	movs	r2, #0
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
 8001cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	f04f 0000 	mov.w	r0, #0
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	0159      	lsls	r1, r3, #5
 8001d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d04:	0150      	lsls	r0, r2, #5
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	1a51      	subs	r1, r2, r1
 8001d0e:	6139      	str	r1, [r7, #16]
 8001d10:	4629      	mov	r1, r5
 8001d12:	eb63 0301 	sbc.w	r3, r3, r1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d24:	4659      	mov	r1, fp
 8001d26:	018b      	lsls	r3, r1, #6
 8001d28:	4651      	mov	r1, sl
 8001d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d2e:	4651      	mov	r1, sl
 8001d30:	018a      	lsls	r2, r1, #6
 8001d32:	4651      	mov	r1, sl
 8001d34:	ebb2 0801 	subs.w	r8, r2, r1
 8001d38:	4659      	mov	r1, fp
 8001d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d52:	4690      	mov	r8, r2
 8001d54:	4699      	mov	r9, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	eb18 0303 	adds.w	r3, r8, r3
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	462b      	mov	r3, r5
 8001d60:	eb49 0303 	adc.w	r3, r9, r3
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d72:	4629      	mov	r1, r5
 8001d74:	024b      	lsls	r3, r1, #9
 8001d76:	4621      	mov	r1, r4
 8001d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	024a      	lsls	r2, r1, #9
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d86:	2200      	movs	r2, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d90:	f7fe fa78 	bl	8000284 <__aeabi_uldivmod>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4613      	mov	r3, r2
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d9c:	e058      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	2200      	movs	r2, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	4611      	mov	r1, r2
 8001daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001db8:	4642      	mov	r2, r8
 8001dba:	464b      	mov	r3, r9
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	0159      	lsls	r1, r3, #5
 8001dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dca:	0150      	lsls	r0, r2, #5
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df0:	ebb2 040a 	subs.w	r4, r2, sl
 8001df4:	eb63 050b 	sbc.w	r5, r3, fp
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	00eb      	lsls	r3, r5, #3
 8001e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e06:	00e2      	lsls	r2, r4, #3
 8001e08:	4614      	mov	r4, r2
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	18e3      	adds	r3, r4, r3
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	464b      	mov	r3, r9
 8001e14:	eb45 0303 	adc.w	r3, r5, r3
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e26:	4629      	mov	r1, r5
 8001e28:	028b      	lsls	r3, r1, #10
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e30:	4621      	mov	r1, r4
 8001e32:	028a      	lsls	r2, r1, #10
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	61fa      	str	r2, [r7, #28]
 8001e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e44:	f7fe fa1e 	bl	8000284 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3750      	adds	r7, #80	; 0x50
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	007a1200 	.word	0x007a1200

08001e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000018 	.word	0x20000018

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0a9b      	lsrs	r3, r3, #10
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08007108 	.word	0x08007108

08001ecc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	220f      	movs	r2, #15
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_RCC_GetClockConfig+0x60>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 020f 	and.w	r2, r3, #15
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e041      	b.n	8001fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f839 	bl	8001fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f000 f9d8 	bl	8002324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d001      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e04e      	b.n	800209a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d022      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x80>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d01d      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x80>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_TIM_Base_Start_IT+0xc8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d018      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x80>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x80>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00e      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x80>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d009      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x80>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x80>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d111      	bne.n	8002088 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b06      	cmp	r3, #6
 8002074:	d010      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002086:	e007      	b.n	8002098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40000c00 	.word	0x40000c00
 80020b8:	40010400 	.word	0x40010400
 80020bc:	40014000 	.word	0x40014000
 80020c0:	40001800 	.word	0x40001800

080020c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0202 	mvn.w	r2, #2
 80020f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8ee 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8e0 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f8f1 	bl	80022fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b04      	cmp	r3, #4
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0204 	mvn.w	r2, #4
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8c4 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8b6 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f8c7 	bl	80022fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b08      	cmp	r3, #8
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0208 	mvn.w	r2, #8
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f89a 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f88c 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f89d 	bl	80022fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0210 	mvn.w	r2, #16
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2208      	movs	r2, #8
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f870 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f862 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f873 	bl	80022fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0201 	mvn.w	r2, #1
 8002240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fdbc 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	2b80      	cmp	r3, #128	; 0x80
 8002254:	d10e      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d107      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f902 	bl	8002478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d10e      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	2b40      	cmp	r3, #64	; 0x40
 800228e:	d107      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f838 	bl	8002310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0220 	mvn.w	r2, #32
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f8cc 	bl	8002464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a40      	ldr	r2, [pc, #256]	; (8002438 <TIM_Base_SetConfig+0x114>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d013      	beq.n	8002364 <TIM_Base_SetConfig+0x40>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d00f      	beq.n	8002364 <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3d      	ldr	r2, [pc, #244]	; (800243c <TIM_Base_SetConfig+0x118>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00b      	beq.n	8002364 <TIM_Base_SetConfig+0x40>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3c      	ldr	r2, [pc, #240]	; (8002440 <TIM_Base_SetConfig+0x11c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3b      	ldr	r2, [pc, #236]	; (8002444 <TIM_Base_SetConfig+0x120>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d003      	beq.n	8002364 <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <TIM_Base_SetConfig+0x124>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d108      	bne.n	8002376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <TIM_Base_SetConfig+0x114>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02b      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002384:	d027      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2c      	ldr	r2, [pc, #176]	; (800243c <TIM_Base_SetConfig+0x118>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d023      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <TIM_Base_SetConfig+0x11c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <TIM_Base_SetConfig+0x120>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01b      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a29      	ldr	r2, [pc, #164]	; (8002448 <TIM_Base_SetConfig+0x124>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d017      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a28      	ldr	r2, [pc, #160]	; (800244c <TIM_Base_SetConfig+0x128>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <TIM_Base_SetConfig+0x12c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00f      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a26      	ldr	r2, [pc, #152]	; (8002454 <TIM_Base_SetConfig+0x130>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00b      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a25      	ldr	r2, [pc, #148]	; (8002458 <TIM_Base_SetConfig+0x134>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d007      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <TIM_Base_SetConfig+0x138>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d003      	beq.n	80023d6 <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a23      	ldr	r2, [pc, #140]	; (8002460 <TIM_Base_SetConfig+0x13c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d108      	bne.n	80023e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <TIM_Base_SetConfig+0x114>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <TIM_Base_SetConfig+0xf8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <TIM_Base_SetConfig+0x124>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d103      	bne.n	8002424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	615a      	str	r2, [r3, #20]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40010000 	.word	0x40010000
 800243c:	40000400 	.word	0x40000400
 8002440:	40000800 	.word	0x40000800
 8002444:	40000c00 	.word	0x40000c00
 8002448:	40010400 	.word	0x40010400
 800244c:	40014000 	.word	0x40014000
 8002450:	40014400 	.word	0x40014400
 8002454:	40014800 	.word	0x40014800
 8002458:	40001800 	.word	0x40001800
 800245c:	40001c00 	.word	0x40001c00
 8002460:	40002000 	.word	0x40002000

08002464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f103 0208 	add.w	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f103 0208 	add.w	r2, r3, #8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f103 0208 	add.w	r2, r3, #8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d103      	bne.n	800254e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e00c      	b.n	8002568 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3308      	adds	r3, #8
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e002      	b.n	800255c <vListInsert+0x2e>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	d2f6      	bcs.n	8002556 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6852      	ldr	r2, [r2, #4]
 80025c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d103      	bne.n	80025d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	1e5a      	subs	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xQueueGenericReset+0x2a>
        __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	60bb      	str	r3, [r7, #8]
    }
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800261e:	f002 fafb 	bl	8004c18 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	441a      	add	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	3b01      	subs	r3, #1
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	441a      	add	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	22ff      	movs	r2, #255	; 0xff
 8002662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d114      	bne.n	800269e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01a      	beq.n	80026b2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3310      	adds	r3, #16
 8002680:	4618      	mov	r0, r3
 8002682:	f001 faab 	bl	8003bdc <xTaskRemoveFromEventList>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <xQueueGenericReset+0xcc>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	e009      	b.n	80026b2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3310      	adds	r3, #16
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fef2 	bl	800248c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3324      	adds	r3, #36	; 0x24
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff feed 	bl	800248c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80026b2:	f002 fae1 	bl	8004c78 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	e000ed04 	.word	0xe000ed04

080026c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <xQueueGenericCreate+0x2a>
        __asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	61bb      	str	r3, [r7, #24]
    }
 80026ea:	bf00      	nop
 80026ec:	e7fe      	b.n	80026ec <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <xQueueGenericCreate+0x48>
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	d101      	bne.n	8002710 <xQueueGenericCreate+0x4c>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <xQueueGenericCreate+0x4e>
 8002710:	2300      	movs	r3, #0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <xQueueGenericCreate+0x68>
        __asm volatile
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	617b      	str	r3, [r7, #20]
    }
 8002728:	bf00      	nop
 800272a:	e7fe      	b.n	800272a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002732:	d90a      	bls.n	800274a <xQueueGenericCreate+0x86>
        __asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	613b      	str	r3, [r7, #16]
    }
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	3350      	adds	r3, #80	; 0x50
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fb8c 	bl	8004e6c <pvPortMalloc>
 8002754:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3350      	adds	r3, #80	; 0x50
 8002764:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002766:	79fa      	ldrb	r2, [r7, #7]
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f805 	bl	8002782 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002778:	6a3b      	ldr	r3, [r7, #32]
    }
 800277a:	4618      	mov	r0, r3
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e002      	b.n	80027a4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027b0:	2101      	movs	r1, #1
 80027b2:	69b8      	ldr	r0, [r7, #24]
 80027b4:	f7ff ff1e 	bl	80025f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	2073      	movs	r0, #115	; 0x73
 80027c8:	f003 fb70 	bl	8005eac <SEGGER_SYSVIEW_RecordU32x3>
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b090      	sub	sp, #64	; 0x40
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027e2:	2300      	movs	r3, #0
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericSend+0x32>
        __asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <xQueueGenericSend+0x40>
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <xQueueGenericSend+0x44>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <xQueueGenericSend+0x46>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <xQueueGenericSend+0x60>
        __asm volatile
 800281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002830:	bf00      	nop
 8002832:	e7fe      	b.n	8002832 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d103      	bne.n	8002842 <xQueueGenericSend+0x6e>
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <xQueueGenericSend+0x72>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueGenericSend+0x74>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueGenericSend+0x8e>
        __asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	623b      	str	r3, [r7, #32]
    }
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002862:	f001 fb5b 	bl	8003f1c <xTaskGetSchedulerState>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <xQueueGenericSend+0x9e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueGenericSend+0xa2>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueGenericSend+0xa4>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xQueueGenericSend+0xbe>
        __asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	61fb      	str	r3, [r7, #28]
    }
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002892:	f002 f9c1 	bl	8004c18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <xQueueGenericSend+0xd4>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d136      	bne.n	8002916 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 f88a 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	460b      	mov	r3, r1
 80028ba:	4601      	mov	r1, r0
 80028bc:	205a      	movs	r0, #90	; 0x5a
 80028be:	f003 fb6b 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028c8:	f000 fbcc 	bl	8003064 <prvCopyDataToQueue>
 80028cc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d010      	beq.n	80028f8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	3324      	adds	r3, #36	; 0x24
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f97e 	bl	8003bdc <xTaskRemoveFromEventList>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d013      	beq.n	800290e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <xQueueGenericSend+0x248>)
 80028e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	e00a      	b.n	800290e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <xQueueGenericSend+0x248>)
 8002900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800290e:	f002 f9b3 	bl	8004c78 <vPortExitCritical>
                return pdPASS;
 8002912:	2301      	movs	r3, #1
 8002914:	e07d      	b.n	8002a12 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d110      	bne.n	800293e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800291c:	f002 f9ac 	bl	8004c78 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	4618      	mov	r0, r3
 8002924:	f004 f84e 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	460b      	mov	r3, r1
 8002932:	4601      	mov	r1, r0
 8002934:	205a      	movs	r0, #90	; 0x5a
 8002936:	f003 fb2f 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800293a:	2300      	movs	r3, #0
 800293c:	e069      	b.n	8002a12 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4618      	mov	r0, r3
 800294a:	f001 f9ad 	bl	8003ca8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800294e:	2301      	movs	r3, #1
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002952:	f002 f991 	bl	8004c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002956:	f000 fef9 	bl	800374c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800295a:	f002 f95d 	bl	8004c18 <vPortEnterCritical>
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002964:	b25b      	sxtb	r3, r3
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d103      	bne.n	8002974 <xQueueGenericSend+0x1a0>
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800297a:	b25b      	sxtb	r3, r3
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d103      	bne.n	800298a <xQueueGenericSend+0x1b6>
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800298a:	f002 f975 	bl	8004c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800298e:	1d3a      	adds	r2, r7, #4
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f001 f99c 	bl	8003cd4 <xTaskCheckForTimeOut>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d124      	bne.n	80029ec <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029a4:	f000 fc56 	bl	8003254 <prvIsQueueFull>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	3310      	adds	r3, #16
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f8be 	bl	8003b38 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80029bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029be:	f000 fbe1 	bl	8003184 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80029c2:	f000 fed1 	bl	8003768 <xTaskResumeAll>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f47f af62 	bne.w	8002892 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <xQueueGenericSend+0x248>)
 80029d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	e758      	b.n	8002892 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029e2:	f000 fbcf 	bl	8003184 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029e6:	f000 febf 	bl	8003768 <xTaskResumeAll>
 80029ea:	e752      	b.n	8002892 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ee:	f000 fbc9 	bl	8003184 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029f2:	f000 feb9 	bl	8003768 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 ffe3 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	460b      	mov	r3, r1
 8002a08:	4601      	mov	r1, r0
 8002a0a:	205a      	movs	r0, #90	; 0x5a
 8002a0c:	f003 fac4 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002a10:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3738      	adds	r7, #56	; 0x38
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000ed04 	.word	0xe000ed04

08002a20 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b090      	sub	sp, #64	; 0x40
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a4a:	bf00      	nop
 8002a4c:	e7fe      	b.n	8002a4c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <xQueueGenericSendFromISR+0x3c>
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <xQueueGenericSendFromISR+0x40>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <xQueueGenericSendFromISR+0x42>
 8002a60:	2300      	movs	r3, #0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a78:	bf00      	nop
 8002a7a:	e7fe      	b.n	8002a7a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d103      	bne.n	8002a8a <xQueueGenericSendFromISR+0x6a>
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <xQueueGenericSendFromISR+0x6e>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueGenericSendFromISR+0x70>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	623b      	str	r3, [r7, #32]
    }
 8002aa6:	bf00      	nop
 8002aa8:	e7fe      	b.n	8002aa8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aaa:	f002 f99f 	bl	8004dec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002aae:	f3ef 8211 	mrs	r2, BASEPRI
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	61fa      	str	r2, [r7, #28]
 8002ac4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d302      	bcc.n	8002adc <xQueueGenericSendFromISR+0xbc>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d148      	bne.n	8002b6e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 ff68 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002af4:	4601      	mov	r1, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	461a      	mov	r2, r3
 8002afa:	2060      	movs	r0, #96	; 0x60
 8002afc:	f003 f97c 	bl	8005df8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b06:	f000 faad 	bl	8003064 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002b0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d112      	bne.n	8002b3a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d025      	beq.n	8002b68 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	3324      	adds	r3, #36	; 0x24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f001 f85b 	bl	8003bdc <xTaskRemoveFromEventList>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01d      	beq.n	8002b68 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e016      	b.n	8002b68 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b40:	d10a      	bne.n	8002b58 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	617b      	str	r3, [r7, #20]
    }
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	b25a      	sxtb	r2, r3
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b6c:	e00b      	b.n	8002b86 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 ff27 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002b76:	4601      	mov	r1, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2060      	movs	r0, #96	; 0x60
 8002b7e:	f003 f93b 	bl	8005df8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b88:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b90:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3740      	adds	r7, #64	; 0x40
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b08f      	sub	sp, #60	; 0x3c
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <xQueueReceive+0x30>
        __asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	623b      	str	r3, [r7, #32]
    }
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <xQueueReceive+0x3e>
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <xQueueReceive+0x42>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <xQueueReceive+0x44>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <xQueueReceive+0x5e>
        __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	61fb      	str	r3, [r7, #28]
    }
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bfa:	f001 f98f 	bl	8003f1c <xTaskGetSchedulerState>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <xQueueReceive+0x6e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <xQueueReceive+0x72>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xQueueReceive+0x74>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueReceive+0x8e>
        __asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	61bb      	str	r3, [r7, #24]
    }
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c2a:	f001 fff5 	bl	8004c18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02f      	beq.n	8002c9a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c3e:	f000 fa7b 	bl	8003138 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 febd 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f003 feb9 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2101      	movs	r1, #1
 8002c58:	9100      	str	r1, [sp, #0]
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	205c      	movs	r0, #92	; 0x5c
 8002c5e:	f003 f99b 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1e5a      	subs	r2, r3, #1
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00f      	beq.n	8002c92 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	3310      	adds	r3, #16
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 ffb0 	bl	8003bdc <xTaskRemoveFromEventList>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c82:	4b4d      	ldr	r3, [pc, #308]	; (8002db8 <xQueueReceive+0x21c>)
 8002c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c92:	f001 fff1 	bl	8004c78 <vPortExitCritical>
                return pdPASS;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e08a      	b.n	8002db0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d113      	bne.n	8002cc8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ca0:	f001 ffea 	bl	8004c78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fe8c 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002cac:	4604      	mov	r4, r0
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f003 fe88 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	9100      	str	r1, [sp, #0]
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	205c      	movs	r0, #92	; 0x5c
 8002cc0:	f003 f96a 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e073      	b.n	8002db0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 ffe8 	bl	8003ca8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cdc:	f001 ffcc 	bl	8004c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ce0:	f000 fd34 	bl	800374c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ce4:	f001 ff98 	bl	8004c18 <vPortEnterCritical>
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d103      	bne.n	8002cfe <xQueueReceive+0x162>
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d103      	bne.n	8002d14 <xQueueReceive+0x178>
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d14:	f001 ffb0 	bl	8004c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d18:	1d3a      	adds	r2, r7, #4
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 ffd7 	bl	8003cd4 <xTaskCheckForTimeOut>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d124      	bne.n	8002d76 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d2e:	f000 fa7b 	bl	8003228 <prvIsQueueEmpty>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d018      	beq.n	8002d6a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	3324      	adds	r3, #36	; 0x24
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fef9 	bl	8003b38 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d48:	f000 fa1c 	bl	8003184 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d4c:	f000 fd0c 	bl	8003768 <xTaskResumeAll>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f47f af69 	bne.w	8002c2a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d58:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <xQueueReceive+0x21c>)
 8002d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	e75f      	b.n	8002c2a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d6c:	f000 fa0a 	bl	8003184 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d70:	f000 fcfa 	bl	8003768 <xTaskResumeAll>
 8002d74:	e759      	b.n	8002c2a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d78:	f000 fa04 	bl	8003184 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d7c:	f000 fcf4 	bl	8003768 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d82:	f000 fa51 	bl	8003228 <prvIsQueueEmpty>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f43f af4e 	beq.w	8002c2a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 fe17 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002d96:	4604      	mov	r4, r0
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f003 fe13 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2101      	movs	r1, #1
 8002da4:	9100      	str	r1, [sp, #0]
 8002da6:	4621      	mov	r1, r4
 8002da8:	205c      	movs	r0, #92	; 0x5c
 8002daa:	f003 f8f5 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002dae:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3734      	adds	r7, #52	; 0x34
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}
 8002db8:	e000ed04 	.word	0xe000ed04

08002dbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b091      	sub	sp, #68	; 0x44
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	623b      	str	r3, [r7, #32]
    }
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	61fb      	str	r3, [r7, #28]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e0c:	f001 f886 	bl	8003f1c <xTaskGetSchedulerState>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <xQueueSemaphoreTake+0x60>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <xQueueSemaphoreTake+0x64>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <xQueueSemaphoreTake+0x66>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	61bb      	str	r3, [r7, #24]
    }
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e3c:	f001 feec 	bl	8004c18 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d034      	beq.n	8002eb6 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 fdb8 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002e54:	4604      	mov	r4, r0
 8002e56:	2000      	movs	r0, #0
 8002e58:	f003 fdb4 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	9100      	str	r1, [sp, #0]
 8002e64:	4621      	mov	r1, r4
 8002e66:	205c      	movs	r0, #92	; 0x5c
 8002e68:	f003 f896 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	1e5a      	subs	r2, r3, #1
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002e7c:	f001 f9fe 	bl	800427c <pvTaskIncrementMutexHeldCount>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00f      	beq.n	8002eae <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	3310      	adds	r3, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fea2 	bl	8003bdc <xTaskRemoveFromEventList>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e9e:	4b64      	ldr	r3, [pc, #400]	; (8003030 <xQueueSemaphoreTake+0x274>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002eae:	f001 fee3 	bl	8004c78 <vPortExitCritical>
                return pdPASS;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0b7      	b.n	8003026 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d121      	bne.n	8002f00 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	617b      	str	r3, [r7, #20]
    }
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002ed8:	f001 fece 	bl	8004c78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 fd70 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f003 fd6c 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8002eec:	4602      	mov	r2, r0
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	9100      	str	r1, [sp, #0]
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	205c      	movs	r0, #92	; 0x5c
 8002ef8:	f003 f84e 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e092      	b.n	8003026 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f06:	f107 030c 	add.w	r3, r7, #12
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fecc 	bl	8003ca8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f14:	f001 feb0 	bl	8004c78 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f18:	f000 fc18 	bl	800374c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f1c:	f001 fe7c 	bl	8004c18 <vPortEnterCritical>
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d103      	bne.n	8002f36 <xQueueSemaphoreTake+0x17a>
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d103      	bne.n	8002f4c <xQueueSemaphoreTake+0x190>
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4c:	f001 fe94 	bl	8004c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f50:	463a      	mov	r2, r7
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 febb 	bl	8003cd4 <xTaskCheckForTimeOut>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d132      	bne.n	8002fca <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f66:	f000 f95f 	bl	8003228 <prvIsQueueEmpty>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d026      	beq.n	8002fbe <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8002f78:	f001 fe4e 	bl	8004c18 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 ffe9 	bl	8003f58 <xTaskPriorityInherit>
 8002f86:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8002f88:	f001 fe76 	bl	8004c78 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	3324      	adds	r3, #36	; 0x24
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fdcf 	bl	8003b38 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f9c:	f000 f8f2 	bl	8003184 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002fa0:	f000 fbe2 	bl	8003768 <xTaskResumeAll>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f47f af48 	bne.w	8002e3c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <xQueueSemaphoreTake+0x274>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	e73e      	b.n	8002e3c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fc0:	f000 f8e0 	bl	8003184 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002fc4:	f000 fbd0 	bl	8003768 <xTaskResumeAll>
 8002fc8:	e738      	b.n	8002e3c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fcc:	f000 f8da 	bl	8003184 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002fd0:	f000 fbca 	bl	8003768 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fd6:	f000 f927 	bl	8003228 <prvIsQueueEmpty>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f43f af2d 	beq.w	8002e3c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8002fe8:	f001 fe16 	bl	8004c18 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fee:	f000 f821 	bl	8003034 <prvGetDisinheritPriorityAfterTimeout>
 8002ff2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f001 f8a6 	bl	800414c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003000:	f001 fe3a 	bl	8004c78 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fcdc 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 800300c:	4604      	mov	r4, r0
 800300e:	2000      	movs	r0, #0
 8003010:	f003 fcd8 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 8003014:	4602      	mov	r2, r0
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	9100      	str	r1, [sp, #0]
 800301c:	4621      	mov	r1, r4
 800301e:	205c      	movs	r0, #92	; 0x5c
 8003020:	f002 ffba 	bl	8005f98 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003024:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003026:	4618      	mov	r0, r3
 8003028:	373c      	adds	r7, #60	; 0x3c
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}
 800302e:	bf00      	nop
 8003030:	e000ed04 	.word	0xe000ed04

08003034 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1c3 0305 	rsb	r3, r3, #5
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e001      	b.n	8003056 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003056:	68fb      	ldr	r3, [r7, #12]
    }
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10d      	bne.n	800309e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d14d      	bne.n	8003126 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 ffdc 	bl	800404c <xTaskPriorityDisinherit>
 8003094:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	e043      	b.n	8003126 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d119      	bne.n	80030d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6858      	ldr	r0, [r3, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	461a      	mov	r2, r3
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	f003 ff52 	bl	8006f58 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	441a      	add	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d32b      	bcc.n	8003126 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	e026      	b.n	8003126 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68d8      	ldr	r0, [r3, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	461a      	mov	r2, r3
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	f003 ff38 	bl	8006f58 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	425b      	negs	r3, r3
 80030f2:	441a      	add	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	425b      	negs	r3, r3
 800310e:	441a      	add	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d105      	bne.n	8003126 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	3b01      	subs	r3, #1
 8003124:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800312e:	697b      	ldr	r3, [r7, #20]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d018      	beq.n	800317c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	441a      	add	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	429a      	cmp	r2, r3
 8003162:	d303      	bcc.n	800316c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68d9      	ldr	r1, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	461a      	mov	r2, r3
 8003176:	6838      	ldr	r0, [r7, #0]
 8003178:	f003 feee 	bl	8006f58 <memcpy>
    }
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800318c:	f001 fd44 	bl	8004c18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003196:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003198:	e011      	b.n	80031be <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3324      	adds	r3, #36	; 0x24
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fd18 	bl	8003bdc <xTaskRemoveFromEventList>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80031b2:	f000 fdf5 	bl	8003da0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80031be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dce9      	bgt.n	800319a <prvUnlockQueue+0x16>
 80031c6:	e000      	b.n	80031ca <prvUnlockQueue+0x46>
                        break;
 80031c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	22ff      	movs	r2, #255	; 0xff
 80031ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80031d2:	f001 fd51 	bl	8004c78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80031d6:	f001 fd1f 	bl	8004c18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80031e2:	e011      	b.n	8003208 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d012      	beq.n	8003212 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3310      	adds	r3, #16
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fcf3 	bl	8003bdc <xTaskRemoveFromEventList>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80031fc:	f000 fdd0 	bl	8003da0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	3b01      	subs	r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800320c:	2b00      	cmp	r3, #0
 800320e:	dce9      	bgt.n	80031e4 <prvUnlockQueue+0x60>
 8003210:	e000      	b.n	8003214 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003212:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	22ff      	movs	r2, #255	; 0xff
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800321c:	f001 fd2c 	bl	8004c78 <vPortExitCritical>
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003230:	f001 fcf2 	bl	8004c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800323c:	2301      	movs	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e001      	b.n	8003246 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003246:	f001 fd17 	bl	8004c78 <vPortExitCritical>

    return xReturn;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800325c:	f001 fcdc 	bl	8004c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	429a      	cmp	r2, r3
 800326a:	d102      	bne.n	8003272 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800326c:	2301      	movs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e001      	b.n	8003276 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003276:	f001 fcff 	bl	8004c78 <vPortExitCritical>

    return xReturn;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e01e      	b.n	80032d2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003294:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <vQueueAddToRegistry+0x60>)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d115      	bne.n	80032cc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032a0:	4910      	ldr	r1, [pc, #64]	; (80032e4 <vQueueAddToRegistry+0x60>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <vQueueAddToRegistry+0x60>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fb83 	bl	80069c4 <SEGGER_SYSVIEW_ShrinkId>
 80032be:	4601      	mov	r1, r0
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	2071      	movs	r0, #113	; 0x71
 80032c6:	f002 fd97 	bl	8005df8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80032ca:	e006      	b.n	80032da <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b07      	cmp	r3, #7
 80032d6:	d9dd      	bls.n	8003294 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000098 	.word	0x20000098

080032e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80032f8:	f001 fc8e 	bl	8004c18 <vPortEnterCritical>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d103      	bne.n	8003312 <vQueueWaitForMessageRestricted+0x2a>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003318:	b25b      	sxtb	r3, r3
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d103      	bne.n	8003328 <vQueueWaitForMessageRestricted+0x40>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003328:	f001 fca6 	bl	8004c78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fc1f 	bl	8003b80 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff ff1e 	bl	8003184 <prvUnlockQueue>
    }
 8003348:	bf00      	nop
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	; 0x30
 8003354:	af04      	add	r7, sp, #16
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fd81 	bl	8004e6c <pvPortMalloc>
 800336a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003372:	2058      	movs	r0, #88	; 0x58
 8003374:	f001 fd7a 	bl	8004e6c <pvPortMalloc>
 8003378:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
 8003386:	e005      	b.n	8003394 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003388:	6978      	ldr	r0, [r7, #20]
 800338a:	f001 fe4f 	bl	800502c <vPortFree>
 800338e:	e001      	b.n	8003394 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d013      	beq.n	80033c2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	2300      	movs	r3, #0
 800339e:	9303      	str	r3, [sp, #12]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	9302      	str	r3, [sp, #8]
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f80e 	bl	80033d2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80033b6:	69f8      	ldr	r0, [r7, #28]
 80033b8:	f000 f8a2 	bl	8003500 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80033bc:	2301      	movs	r3, #1
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	e002      	b.n	80033c8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80033c8:	69bb      	ldr	r3, [r7, #24]
    }
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b088      	sub	sp, #32
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	461a      	mov	r2, r3
 80033ea:	21a5      	movs	r1, #165	; 0xa5
 80033ec:	f003 fdc2 	bl	8006f74 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033fa:	3b01      	subs	r3, #1
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f023 0307 	bic.w	r3, r3, #7
 8003408:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	617b      	str	r3, [r7, #20]
    }
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01f      	beq.n	8003470 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	e012      	b.n	800345c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	7819      	ldrb	r1, [r3, #0]
 800343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	3334      	adds	r3, #52	; 0x34
 8003446:	460a      	mov	r2, r1
 8003448:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3301      	adds	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b09      	cmp	r3, #9
 8003460:	d9e9      	bls.n	8003436 <prvInitialiseNewTask+0x64>
 8003462:	e000      	b.n	8003466 <prvInitialiseNewTask+0x94>
            {
                break;
 8003464:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800346e:	e003      	b.n	8003478 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	2b04      	cmp	r3, #4
 800347c:	d901      	bls.n	8003482 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800347e:	2304      	movs	r3, #4
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800348c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	2200      	movs	r2, #0
 8003492:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	3304      	adds	r3, #4
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff f817 	bl	80024cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	3318      	adds	r3, #24
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f812 	bl	80024cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	f1c3 0205 	rsb	r2, r3, #5
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	3350      	adds	r3, #80	; 0x50
 80034c2:	2204      	movs	r2, #4
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fd54 	bl	8006f74 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	3354      	adds	r3, #84	; 0x54
 80034d0:	2201      	movs	r2, #1
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 fd4d 	bl	8006f74 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	69b8      	ldr	r0, [r7, #24]
 80034e0:	f001 fa6a 	bl	80049b8 <pxPortInitialiseStack>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034f6:	bf00      	nop
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af02      	add	r7, sp, #8
 8003506:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003508:	f001 fb86 	bl	8004c18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <prvAddNewTaskToReadyList+0xfc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	4a3a      	ldr	r2, [pc, #232]	; (80035fc <prvAddNewTaskToReadyList+0xfc>)
 8003514:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003516:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <prvAddNewTaskToReadyList+0x100>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800351e:	4a38      	ldr	r2, [pc, #224]	; (8003600 <prvAddNewTaskToReadyList+0x100>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003524:	4b35      	ldr	r3, [pc, #212]	; (80035fc <prvAddNewTaskToReadyList+0xfc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d110      	bne.n	800354e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800352c:	f000 fc5c 	bl	8003de8 <prvInitialiseTaskLists>
 8003530:	e00d      	b.n	800354e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <prvAddNewTaskToReadyList+0x104>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <prvAddNewTaskToReadyList+0x100>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d802      	bhi.n	800354e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003548:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <prvAddNewTaskToReadyList+0x100>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800354e:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <prvAddNewTaskToReadyList+0x108>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <prvAddNewTaskToReadyList+0x108>)
 8003556:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <prvAddNewTaskToReadyList+0x108>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <prvAddNewTaskToReadyList+0x94>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	f003 f905 	bl	8006778 <SEGGER_SYSVIEW_OnTaskCreate>
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	461d      	mov	r5, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461c      	mov	r4, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	1ae3      	subs	r3, r4, r3
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	462b      	mov	r3, r5
 8003590:	f003 fc24 	bl	8006ddc <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4618      	mov	r0, r3
 8003598:	f003 f972 	bl	8006880 <SEGGER_SYSVIEW_OnTaskStartReady>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <prvAddNewTaskToReadyList+0x10c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <prvAddNewTaskToReadyList+0x10c>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <prvAddNewTaskToReadyList+0x110>)
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7fe ff8e 	bl	80024e6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80035ca:	f001 fb55 	bl	8004c78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <prvAddNewTaskToReadyList+0x104>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00e      	beq.n	80035f4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <prvAddNewTaskToReadyList+0x100>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d207      	bcs.n	80035f4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <prvAddNewTaskToReadyList+0x114>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bdb0      	pop	{r4, r5, r7, pc}
 80035fc:	200001b0 	.word	0x200001b0
 8003600:	200000d8 	.word	0x200000d8
 8003604:	200001bc 	.word	0x200001bc
 8003608:	200001cc 	.word	0x200001cc
 800360c:	200001b8 	.word	0x200001b8
 8003610:	200000dc 	.word	0x200000dc
 8003614:	e000ed04 	.word	0xe000ed04

08003618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01b      	beq.n	8003662 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <vTaskDelay+0x68>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <vTaskDelay+0x30>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60bb      	str	r3, [r7, #8]
    }
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003648:	f000 f880 	bl	800374c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	2023      	movs	r0, #35	; 0x23
 8003650:	f002 fb96 	bl	8005d80 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003654:	2100      	movs	r1, #0
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fe24 	bl	80042a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800365c:	f000 f884 	bl	8003768 <xTaskResumeAll>
 8003660:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <vTaskDelay+0x6c>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200001d8 	.word	0x200001d8
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <vTaskStartScheduler+0xa4>)
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	2300      	movs	r3, #0
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	2282      	movs	r2, #130	; 0x82
 800369a:	4925      	ldr	r1, [pc, #148]	; (8003730 <vTaskStartScheduler+0xa8>)
 800369c:	4825      	ldr	r0, [pc, #148]	; (8003734 <vTaskStartScheduler+0xac>)
 800369e:	f7ff fe57 	bl	8003350 <xTaskCreate>
 80036a2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80036aa:	f000 fe73 	bl	8004394 <xTimerCreateTimerTask>
 80036ae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d124      	bne.n	8003700 <vTaskStartScheduler+0x78>
        __asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	60bb      	str	r3, [r7, #8]
    }
 80036c8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <vTaskStartScheduler+0xb0>)
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <vTaskStartScheduler+0xb4>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <vTaskStartScheduler+0xb8>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <vTaskStartScheduler+0xbc>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <vTaskStartScheduler+0xa4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d102      	bne.n	80036f0 <vTaskStartScheduler+0x68>
 80036ea:	f003 f829 	bl	8006740 <SEGGER_SYSVIEW_OnIdle>
 80036ee:	e004      	b.n	80036fa <vTaskStartScheduler+0x72>
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <vTaskStartScheduler+0xbc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 f881 	bl	80067fc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80036fa:	f001 f9eb 	bl	8004ad4 <xPortStartScheduler>
 80036fe:	e00e      	b.n	800371e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d10a      	bne.n	800371e <vTaskStartScheduler+0x96>
        __asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	607b      	str	r3, [r7, #4]
    }
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <vTaskStartScheduler+0xc0>)
 8003720:	681b      	ldr	r3, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200001d4 	.word	0x200001d4
 8003730:	08007020 	.word	0x08007020
 8003734:	08003db9 	.word	0x08003db9
 8003738:	200001d0 	.word	0x200001d0
 800373c:	200001bc 	.word	0x200001bc
 8003740:	200001b4 	.word	0x200001b4
 8003744:	200000d8 	.word	0x200000d8
 8003748:	20000024 	.word	0x20000024

0800374c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <vTaskSuspendAll+0x18>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	4a03      	ldr	r2, [pc, #12]	; (8003764 <vTaskSuspendAll+0x18>)
 8003758:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	200001d8 	.word	0x200001d8

08003768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <xTaskResumeAll+0x11c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <xTaskResumeAll+0x2c>
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	603b      	str	r3, [r7, #0]
    }
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003794:	f001 fa40 	bl	8004c18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <xTaskResumeAll+0x11c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3b01      	subs	r3, #1
 800379e:	4a39      	ldr	r2, [pc, #228]	; (8003884 <xTaskResumeAll+0x11c>)
 80037a0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <xTaskResumeAll+0x11c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d165      	bne.n	8003876 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037aa:	4b37      	ldr	r3, [pc, #220]	; (8003888 <xTaskResumeAll+0x120>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d061      	beq.n	8003876 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037b2:	e032      	b.n	800381a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <xTaskResumeAll+0x124>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3318      	adds	r3, #24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe feed 	bl	80025a0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fee8 	bl	80025a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 f854 	bl	8006880 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2201      	movs	r2, #1
 80037de:	409a      	lsls	r2, r3
 80037e0:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <xTaskResumeAll+0x128>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <xTaskResumeAll+0x128>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4a27      	ldr	r2, [pc, #156]	; (8003894 <xTaskResumeAll+0x12c>)
 80037f8:	441a      	add	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f7fe fe70 	bl	80024e6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	4b23      	ldr	r3, [pc, #140]	; (8003898 <xTaskResumeAll+0x130>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <xTaskResumeAll+0x134>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800381a:	4b1c      	ldr	r3, [pc, #112]	; (800388c <xTaskResumeAll+0x124>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1c8      	bne.n	80037b4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003828:	f000 fb5c 	bl	8003ee4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <xTaskResumeAll+0x138>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d010      	beq.n	800385a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003838:	f000 f858 	bl	80038ec <xTaskIncrementTick>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <xTaskResumeAll+0x134>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f1      	bne.n	8003838 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <xTaskResumeAll+0x138>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <xTaskResumeAll+0x134>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003862:	2301      	movs	r3, #1
 8003864:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <xTaskResumeAll+0x13c>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003876:	f001 f9ff 	bl	8004c78 <vPortExitCritical>

    return xAlreadyYielded;
 800387a:	68bb      	ldr	r3, [r7, #8]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200001d8 	.word	0x200001d8
 8003888:	200001b0 	.word	0x200001b0
 800388c:	20000170 	.word	0x20000170
 8003890:	200001b8 	.word	0x200001b8
 8003894:	200000dc 	.word	0x200000dc
 8003898:	200000d8 	.word	0x200000d8
 800389c:	200001c4 	.word	0x200001c4
 80038a0:	200001c0 	.word	0x200001c0
 80038a4:	e000ed04 	.word	0xe000ed04

080038a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <xTaskGetTickCount+0x1c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80038b4:	687b      	ldr	r3, [r7, #4]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	200001b4 	.word	0x200001b4

080038c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ce:	f001 fa8d 	bl	8004dec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <xTaskGetTickCountFromISR+0x20>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80038dc:	683b      	ldr	r3, [r7, #0]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200001b4 	.word	0x200001b4

080038ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f6:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <xTaskIncrementTick+0x14c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 8092 	bne.w	8003a24 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003900:	4b4e      	ldr	r3, [pc, #312]	; (8003a3c <xTaskIncrementTick+0x150>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <xTaskIncrementTick+0x150>)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d120      	bne.n	8003956 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003914:	4b4a      	ldr	r3, [pc, #296]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <xTaskIncrementTick+0x48>
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	603b      	str	r3, [r7, #0]
    }
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xTaskIncrementTick+0x46>
 8003934:	4b42      	ldr	r3, [pc, #264]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <xTaskIncrementTick+0x158>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a40      	ldr	r2, [pc, #256]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <xTaskIncrementTick+0x158>)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <xTaskIncrementTick+0x15c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	4a3e      	ldr	r2, [pc, #248]	; (8003a48 <xTaskIncrementTick+0x15c>)
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	f000 fac7 	bl	8003ee4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003956:	4b3d      	ldr	r3, [pc, #244]	; (8003a4c <xTaskIncrementTick+0x160>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d34c      	bcc.n	80039fa <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003960:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396a:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <xTaskIncrementTick+0x160>)
 800396c:	f04f 32ff 	mov.w	r2, #4294967295
 8003970:	601a      	str	r2, [r3, #0]
                    break;
 8003972:	e042      	b.n	80039fa <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	4b32      	ldr	r3, [pc, #200]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d203      	bcs.n	8003994 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <xTaskIncrementTick+0x160>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003992:	e032      	b.n	80039fa <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fe01 	bl	80025a0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3318      	adds	r3, #24
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fdf8 	bl	80025a0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f002 ff64 	bl	8006880 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <xTaskIncrementTick+0x164>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <xTaskIncrementTick+0x164>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <xTaskIncrementTick+0x168>)
 80039d8:	441a      	add	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fe fd80 	bl	80024e6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <xTaskIncrementTick+0x16c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3b5      	bcc.n	8003960 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f8:	e7b2      	b.n	8003960 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <xTaskIncrementTick+0x16c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4914      	ldr	r1, [pc, #80]	; (8003a54 <xTaskIncrementTick+0x168>)
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d901      	bls.n	8003a16 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <xTaskIncrementTick+0x170>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e004      	b.n	8003a2e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <xTaskIncrementTick+0x174>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <xTaskIncrementTick+0x174>)
 8003a2c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003a2e:	697b      	ldr	r3, [r7, #20]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	200001d8 	.word	0x200001d8
 8003a3c:	200001b4 	.word	0x200001b4
 8003a40:	20000168 	.word	0x20000168
 8003a44:	2000016c 	.word	0x2000016c
 8003a48:	200001c8 	.word	0x200001c8
 8003a4c:	200001d0 	.word	0x200001d0
 8003a50:	200001b8 	.word	0x200001b8
 8003a54:	200000dc 	.word	0x200000dc
 8003a58:	200000d8 	.word	0x200000d8
 8003a5c:	200001c4 	.word	0x200001c4
 8003a60:	200001c0 	.word	0x200001c0

08003a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <vTaskSwitchContext+0xbc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a72:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <vTaskSwitchContext+0xc0>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003a78:	e04d      	b.n	8003b16 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <vTaskSwitchContext+0xc0>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <vTaskSwitchContext+0xc4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	f1c3 031f 	rsb	r3, r3, #31
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	4925      	ldr	r1, [pc, #148]	; (8003b2c <vTaskSwitchContext+0xc8>)
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	607b      	str	r3, [r7, #4]
    }
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <vTaskSwitchContext+0x5a>
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <vTaskSwitchContext+0xc8>)
 8003acc:	4413      	add	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d104      	bne.n	8003af0 <vTaskSwitchContext+0x8c>
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	4a0e      	ldr	r2, [pc, #56]	; (8003b30 <vTaskSwitchContext+0xcc>)
 8003af8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <vTaskSwitchContext+0xcc>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <vTaskSwitchContext+0xd0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d102      	bne.n	8003b0c <vTaskSwitchContext+0xa8>
 8003b06:	f002 fe1b 	bl	8006740 <SEGGER_SYSVIEW_OnIdle>
}
 8003b0a:	e004      	b.n	8003b16 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <vTaskSwitchContext+0xcc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fe73 	bl	80067fc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003b16:	bf00      	nop
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200001d8 	.word	0x200001d8
 8003b24:	200001c4 	.word	0x200001c4
 8003b28:	200001b8 	.word	0x200001b8
 8003b2c:	200000dc 	.word	0x200000dc
 8003b30:	200000d8 	.word	0x200000d8
 8003b34:	200001d4 	.word	0x200001d4

08003b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60fb      	str	r3, [r7, #12]
    }
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <vTaskPlaceOnEventList+0x44>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3318      	adds	r3, #24
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe fce1 	bl	800252e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f000 fb98 	bl	80042a4 <prvAddCurrentTaskToDelayedList>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	200000d8 	.word	0x200000d8

08003b80 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	617b      	str	r3, [r7, #20]
    }
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <vTaskPlaceOnEventListRestricted+0x58>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3318      	adds	r3, #24
 8003bae:	4619      	mov	r1, r3
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7fe fc98 	bl	80024e6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003bc2:	2024      	movs	r0, #36	; 0x24
 8003bc4:	f002 f8be 	bl	8005d44 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	68b8      	ldr	r0, [r7, #8]
 8003bcc:	f000 fb6a 	bl	80042a4 <prvAddCurrentTaskToDelayedList>
    }
 8003bd0:	bf00      	nop
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200000d8 	.word	0x200000d8

08003bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	60fb      	str	r3, [r7, #12]
    }
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	3318      	adds	r3, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fcc7 	bl	80025a0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <xTaskRemoveFromEventList+0xb4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d120      	bne.n	8003c5c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fcbe 	bl	80025a0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f002 fe2a 	bl	8006880 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <xTaskRemoveFromEventList+0xb8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <xTaskRemoveFromEventList+0xb8>)
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <xTaskRemoveFromEventList+0xbc>)
 8003c4c:	441a      	add	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe fc46 	bl	80024e6 <vListInsertEnd>
 8003c5a:	e005      	b.n	8003c68 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	3318      	adds	r3, #24
 8003c60:	4619      	mov	r1, r3
 8003c62:	480e      	ldr	r0, [pc, #56]	; (8003c9c <xTaskRemoveFromEventList+0xc0>)
 8003c64:	f7fe fc3f 	bl	80024e6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <xTaskRemoveFromEventList+0xc4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d905      	bls.n	8003c82 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003c76:	2301      	movs	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <xTaskRemoveFromEventList+0xc8>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e001      	b.n	8003c86 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003c86:	697b      	ldr	r3, [r7, #20]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	200001d8 	.word	0x200001d8
 8003c94:	200001b8 	.word	0x200001b8
 8003c98:	200000dc 	.word	0x200000dc
 8003c9c:	20000170 	.word	0x20000170
 8003ca0:	200000d8 	.word	0x200000d8
 8003ca4:	200001c4 	.word	0x200001c4

08003ca8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <vTaskInternalSetTimeOutState+0x24>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <vTaskInternalSetTimeOutState+0x28>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	605a      	str	r2, [r3, #4]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	200001c8 	.word	0x200001c8
 8003cd0:	200001b4 	.word	0x200001b4

08003cd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	613b      	str	r3, [r7, #16]
    }
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
    }
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003d16:	f000 ff7f 	bl	8004c18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d1a:	4b1f      	ldr	r3, [pc, #124]	; (8003d98 <xTaskCheckForTimeOut+0xc4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d102      	bne.n	8003d3a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	e026      	b.n	8003d88 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <xTaskCheckForTimeOut+0xc8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d00a      	beq.n	8003d5c <xTaskCheckForTimeOut+0x88>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d305      	bcc.n	8003d5c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e015      	b.n	8003d88 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d20b      	bcs.n	8003d7e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff98 	bl	8003ca8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e004      	b.n	8003d88 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003d88:	f000 ff76 	bl	8004c78 <vPortExitCritical>

    return xReturn;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200001b4 	.word	0x200001b4
 8003d9c:	200001c8 	.word	0x200001c8

08003da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <vTaskMissedYield+0x14>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	200001c4 	.word	0x200001c4

08003db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003dc0:	f000 f852 	bl	8003e68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <prvIdleTask+0x28>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d9f9      	bls.n	8003dc0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <prvIdleTask+0x2c>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ddc:	e7f0      	b.n	8003dc0 <prvIdleTask+0x8>
 8003dde:	bf00      	nop
 8003de0:	200000dc 	.word	0x200000dc
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	e00c      	b.n	8003e0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <prvInitialiseTaskLists+0x60>)
 8003e00:	4413      	add	r3, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fb42 	bl	800248c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d9ef      	bls.n	8003df4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e14:	480d      	ldr	r0, [pc, #52]	; (8003e4c <prvInitialiseTaskLists+0x64>)
 8003e16:	f7fe fb39 	bl	800248c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e1a:	480d      	ldr	r0, [pc, #52]	; (8003e50 <prvInitialiseTaskLists+0x68>)
 8003e1c:	f7fe fb36 	bl	800248c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e20:	480c      	ldr	r0, [pc, #48]	; (8003e54 <prvInitialiseTaskLists+0x6c>)
 8003e22:	f7fe fb33 	bl	800248c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003e26:	480c      	ldr	r0, [pc, #48]	; (8003e58 <prvInitialiseTaskLists+0x70>)
 8003e28:	f7fe fb30 	bl	800248c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003e2c:	480b      	ldr	r0, [pc, #44]	; (8003e5c <prvInitialiseTaskLists+0x74>)
 8003e2e:	f7fe fb2d 	bl	800248c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <prvInitialiseTaskLists+0x78>)
 8003e34:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <prvInitialiseTaskLists+0x64>)
 8003e36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <prvInitialiseTaskLists+0x7c>)
 8003e3a:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <prvInitialiseTaskLists+0x68>)
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200000dc 	.word	0x200000dc
 8003e4c:	20000140 	.word	0x20000140
 8003e50:	20000154 	.word	0x20000154
 8003e54:	20000170 	.word	0x20000170
 8003e58:	20000184 	.word	0x20000184
 8003e5c:	2000019c 	.word	0x2000019c
 8003e60:	20000168 	.word	0x20000168
 8003e64:	2000016c 	.word	0x2000016c

08003e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e6e:	e019      	b.n	8003ea4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003e70:	f000 fed2 	bl	8004c18 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <prvCheckTasksWaitingTermination+0x50>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fb8d 	bl	80025a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <prvCheckTasksWaitingTermination+0x54>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <prvCheckTasksWaitingTermination+0x54>)
 8003e8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <prvCheckTasksWaitingTermination+0x58>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <prvCheckTasksWaitingTermination+0x58>)
 8003e98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003e9a:	f000 feed 	bl	8004c78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f810 	bl	8003ec4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <prvCheckTasksWaitingTermination+0x58>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e1      	bne.n	8003e70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000184 	.word	0x20000184
 8003ebc:	200001b0 	.word	0x200001b0
 8003ec0:	20000198 	.word	0x20000198

08003ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f8ab 	bl	800502c <vPortFree>
                vPortFree( pxTCB );
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f001 f8a8 	bl	800502c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <prvResetNextTaskUnblockTime+0x30>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <prvResetNextTaskUnblockTime+0x34>)
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003efa:	e005      	b.n	8003f08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <prvResetNextTaskUnblockTime+0x30>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <prvResetNextTaskUnblockTime+0x34>)
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000168 	.word	0x20000168
 8003f18:	200001d0 	.word	0x200001d0

08003f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <xTaskGetSchedulerState+0x34>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	e008      	b.n	8003f42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <xTaskGetSchedulerState+0x38>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	e001      	b.n	8003f42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003f42:	687b      	ldr	r3, [r7, #4]
    }
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	200001bc 	.word	0x200001bc
 8003f54:	200001d8 	.word	0x200001d8

08003f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d063      	beq.n	8004036 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	4b33      	ldr	r3, [pc, #204]	; (8004040 <xTaskPriorityInherit+0xe8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d253      	bcs.n	8004024 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	db06      	blt.n	8003f92 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <xTaskPriorityInherit+0xe8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	f1c3 0205 	rsb	r2, r3, #5
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6959      	ldr	r1, [r3, #20]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a28      	ldr	r2, [pc, #160]	; (8004044 <xTaskPriorityInherit+0xec>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4299      	cmp	r1, r3
 8003fa8:	d12f      	bne.n	800400a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe faf6 	bl	80025a0 <uxListRemove>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <xTaskPriorityInherit+0xf0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <xTaskPriorityInherit+0xf0>)
 8003fce:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <xTaskPriorityInherit+0xe8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	2201      	movs	r2, #1
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <xTaskPriorityInherit+0xf0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	4a17      	ldr	r2, [pc, #92]	; (8004048 <xTaskPriorityInherit+0xf0>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <xTaskPriorityInherit+0xec>)
 8003ffa:	441a      	add	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fe fa6f 	bl	80024e6 <vListInsertEnd>
 8004008:	e004      	b.n	8004014 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <xTaskPriorityInherit+0xe8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4619      	mov	r1, r3
 8004018:	2049      	movs	r0, #73	; 0x49
 800401a:	f001 feb1 	bl	8005d80 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800401e:	2301      	movs	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e008      	b.n	8004036 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <xTaskPriorityInherit+0xe8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	429a      	cmp	r2, r3
 8004030:	d201      	bcs.n	8004036 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004032:	2301      	movs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004036:	68fb      	ldr	r3, [r7, #12]
    }
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200000d8 	.word	0x200000d8
 8004044:	200000dc 	.word	0x200000dc
 8004048:	200001b8 	.word	0x200001b8

0800404c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d068      	beq.n	8004134 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004062:	4b37      	ldr	r3, [pc, #220]	; (8004140 <xTaskPriorityDisinherit+0xf4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d00a      	beq.n	8004082 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
    }
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60bb      	str	r3, [r7, #8]
    }
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d03e      	beq.n	8004134 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d13a      	bne.n	8004134 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fa6c 	bl	80025a0 <uxListRemove>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	2201      	movs	r2, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43da      	mvns	r2, r3
 80040da:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <xTaskPriorityDisinherit+0xf8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4013      	ands	r3, r2
 80040e0:	4a18      	ldr	r2, [pc, #96]	; (8004144 <xTaskPriorityDisinherit+0xf8>)
 80040e2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4619      	mov	r1, r3
 80040e8:	204a      	movs	r0, #74	; 0x4a
 80040ea:	f001 fe49 	bl	8005d80 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f1c3 0205 	rsb	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	2201      	movs	r2, #1
 8004108:	409a      	lsls	r2, r3
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <xTaskPriorityDisinherit+0xf8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <xTaskPriorityDisinherit+0xf8>)
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <xTaskPriorityDisinherit+0xfc>)
 8004122:	441a      	add	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f7fe f9db 	bl	80024e6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004134:	697b      	ldr	r3, [r7, #20]
    }
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200000d8 	.word	0x200000d8
 8004144:	200001b8 	.word	0x200001b8
 8004148:	200000dc 	.word	0x200000dc

0800414c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800415a:	2301      	movs	r3, #1
 800415c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8081 	beq.w	8004268 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	60fb      	str	r3, [r7, #12]
    }
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d902      	bls.n	8004194 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e002      	b.n	800419a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004198:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d061      	beq.n	8004268 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d15c      	bne.n	8004268 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80041ae:	4b30      	ldr	r3, [pc, #192]	; (8004270 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d10a      	bne.n	80041ce <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60bb      	str	r3, [r7, #8]
    }
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4619      	mov	r1, r3
 80041d2:	204a      	movs	r0, #74	; 0x4a
 80041d4:	f001 fdd4 	bl	8005d80 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db04      	blt.n	80041f6 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f1c3 0205 	rsb	r2, r3, #5
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	6959      	ldr	r1, [r3, #20]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004206:	4413      	add	r3, r2
 8004208:	4299      	cmp	r1, r3
 800420a:	d12d      	bne.n	8004268 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3304      	adds	r3, #4
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe f9c5 	bl	80025a0 <uxListRemove>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	2201      	movs	r2, #1
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4013      	ands	r3, r2
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004230:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4618      	mov	r0, r3
 8004236:	f002 fb23 	bl	8006880 <SEGGER_SYSVIEW_OnTaskStartReady>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	2201      	movs	r2, #1
 8004240:	409a      	lsls	r2, r3
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4313      	orrs	r3, r2
 8004248:	4a0b      	ldr	r2, [pc, #44]	; (8004278 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4a06      	ldr	r2, [pc, #24]	; (8004274 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800425a:	441a      	add	r2, r3
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe f93f 	bl	80024e6 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004268:	bf00      	nop
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	200000d8 	.word	0x200000d8
 8004274:	200000dc 	.word	0x200000dc
 8004278:	200001b8 	.word	0x200001b8

0800427c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800428e:	3201      	adds	r2, #1
 8004290:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004292:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004294:	681b      	ldr	r3, [r3, #0]
    }
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	200000d8 	.word	0x200000d8

080042a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80042ae:	4b32      	ldr	r3, [pc, #200]	; (8004378 <prvAddCurrentTaskToDelayedList+0xd4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe f970 	bl	80025a0 <uxListRemove>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	2201      	movs	r2, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	4b2a      	ldr	r3, [pc, #168]	; (8004380 <prvAddCurrentTaskToDelayedList+0xdc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4013      	ands	r3, r2
 80042da:	4a29      	ldr	r2, [pc, #164]	; (8004380 <prvAddCurrentTaskToDelayedList+0xdc>)
 80042dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d110      	bne.n	8004308 <prvAddCurrentTaskToDelayedList+0x64>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	211b      	movs	r1, #27
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 fb06 	bl	8006904 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4820      	ldr	r0, [pc, #128]	; (8004384 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004302:	f7fe f8f0 	bl	80024e6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004306:	e032      	b.n	800436e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d20f      	bcs.n	8004340 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004320:	4b16      	ldr	r3, [pc, #88]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2104      	movs	r1, #4
 8004326:	4618      	mov	r0, r3
 8004328:	f002 faec 	bl	8006904 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <prvAddCurrentTaskToDelayedList+0xe4>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe f8f8 	bl	800252e <vListInsert>
}
 800433e:	e016      	b.n	800436e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2104      	movs	r1, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f002 fadc 	bl	8006904 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <prvAddCurrentTaskToDelayedList+0xe8>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fe f8e8 	bl	800252e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <prvAddCurrentTaskToDelayedList+0xec>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	d202      	bcs.n	800436e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004368:	4a09      	ldr	r2, [pc, #36]	; (8004390 <prvAddCurrentTaskToDelayedList+0xec>)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6013      	str	r3, [r2, #0]
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	200001b4 	.word	0x200001b4
 800437c:	200000d8 	.word	0x200000d8
 8004380:	200001b8 	.word	0x200001b8
 8004384:	2000019c 	.word	0x2000019c
 8004388:	2000016c 	.word	0x2000016c
 800438c:	20000168 	.word	0x20000168
 8004390:	200001d0 	.word	0x200001d0

08004394 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800439e:	f000 fad5 	bl	800494c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <xTimerCreateTimerTask+0x54>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <xTimerCreateTimerTask+0x58>)
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2302      	movs	r3, #2
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043b8:	490d      	ldr	r1, [pc, #52]	; (80043f0 <xTimerCreateTimerTask+0x5c>)
 80043ba:	480e      	ldr	r0, [pc, #56]	; (80043f4 <xTimerCreateTimerTask+0x60>)
 80043bc:	f7fe ffc8 	bl	8003350 <xTaskCreate>
 80043c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	603b      	str	r3, [r7, #0]
    }
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80043de:	687b      	ldr	r3, [r7, #4]
    }
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	2000020c 	.word	0x2000020c
 80043ec:	20000210 	.word	0x20000210
 80043f0:	08007028 	.word	0x08007028
 80043f4:	0800452d 	.word	0x0800452d

080043f8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	623b      	str	r3, [r7, #32]
    }
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <xTimerGenericCommand+0x98>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02a      	beq.n	8004484 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	dc18      	bgt.n	8004472 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004440:	f7ff fd6c 	bl	8003f1c <xTaskGetSchedulerState>
 8004444:	4603      	mov	r3, r0
 8004446:	2b02      	cmp	r3, #2
 8004448:	d109      	bne.n	800445e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <xTimerGenericCommand+0x98>)
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f107 0114 	add.w	r1, r7, #20
 8004452:	2300      	movs	r3, #0
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	f7fe f9bd 	bl	80027d4 <xQueueGenericSend>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24
 800445c:	e012      	b.n	8004484 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <xTimerGenericCommand+0x98>)
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	f107 0114 	add.w	r1, r7, #20
 8004466:	2300      	movs	r3, #0
 8004468:	2200      	movs	r2, #0
 800446a:	f7fe f9b3 	bl	80027d4 <xQueueGenericSend>
 800446e:	6278      	str	r0, [r7, #36]	; 0x24
 8004470:	e008      	b.n	8004484 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <xTimerGenericCommand+0x98>)
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f107 0114 	add.w	r1, r7, #20
 800447a:	2300      	movs	r3, #0
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	f7fe facf 	bl	8002a20 <xQueueGenericSendFromISR>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004486:	4618      	mov	r0, r3
 8004488:	3728      	adds	r7, #40	; 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2000020c 	.word	0x2000020c

08004494 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af02      	add	r7, sp, #8
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449e:	4b22      	ldr	r3, [pc, #136]	; (8004528 <prvProcessExpiredTimer+0x94>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe f877 	bl	80025a0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d022      	beq.n	8004506 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	699a      	ldr	r2, [r3, #24]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	18d1      	adds	r1, r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f000 f8d1 	bl	8004674 <prvInsertTimerInActiveList>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01f      	beq.n	8004518 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044d8:	2300      	movs	r3, #0
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	2300      	movs	r3, #0
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	2100      	movs	r1, #0
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f7ff ff88 	bl	80043f8 <xTimerGenericCommand>
 80044e8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d113      	bne.n	8004518 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	60fb      	str	r3, [r7, #12]
    }
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	b2da      	uxtb	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	4798      	blx	r3
    }
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000204 	.word	0x20000204

0800452c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004534:	f107 0308 	add.w	r3, r7, #8
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f857 	bl	80045ec <prvGetNextExpireTime>
 800453e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f803 	bl	8004550 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800454a:	f000 f8d5 	bl	80046f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800454e:	e7f1      	b.n	8004534 <prvTimerTask+0x8>

08004550 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800455a:	f7ff f8f7 	bl	800374c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800455e:	f107 0308 	add.w	r3, r7, #8
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f866 	bl	8004634 <prvSampleTimeNow>
 8004568:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d130      	bne.n	80045d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <prvProcessTimerOrBlockTask+0x3c>
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	429a      	cmp	r2, r3
 800457c:	d806      	bhi.n	800458c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800457e:	f7ff f8f3 	bl	8003768 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff85 	bl	8004494 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800458a:	e024      	b.n	80045d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <prvProcessTimerOrBlockTask+0x90>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <prvProcessTimerOrBlockTask+0x50>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <prvProcessTimerOrBlockTask+0x52>
 80045a0:	2300      	movs	r3, #0
 80045a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <prvProcessTimerOrBlockTask+0x94>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7fe fe99 	bl	80032e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80045b6:	f7ff f8d7 	bl	8003768 <xTaskResumeAll>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <prvProcessTimerOrBlockTask+0x98>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
    }
 80045d0:	e001      	b.n	80045d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80045d2:	f7ff f8c9 	bl	8003768 <xTaskResumeAll>
    }
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000208 	.word	0x20000208
 80045e4:	2000020c 	.word	0x2000020c
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <prvGetNextExpireTime+0x44>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <prvGetNextExpireTime+0x16>
 80045fe:	2201      	movs	r2, #1
 8004600:	e000      	b.n	8004604 <prvGetNextExpireTime+0x18>
 8004602:	2200      	movs	r2, #0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <prvGetNextExpireTime+0x44>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e001      	b.n	8004620 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004620:	68fb      	ldr	r3, [r7, #12]
    }
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000204 	.word	0x20000204

08004634 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800463c:	f7ff f934 	bl	80038a8 <xTaskGetTickCount>
 8004640:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <prvSampleTimeNow+0x3c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d205      	bcs.n	8004658 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800464c:	f000 f91a 	bl	8004884 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e002      	b.n	800465e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <prvSampleTimeNow+0x3c>)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004664:	68fb      	ldr	r3, [r7, #12]
    }
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000214 	.word	0x20000214

08004674 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d812      	bhi.n	80046c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e01b      	b.n	80046e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <prvInsertTimerInActiveList+0x7c>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fd ff38 	bl	800252e <vListInsert>
 80046be:	e012      	b.n	80046e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d206      	bcs.n	80046d6 <prvInsertTimerInActiveList+0x62>
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e007      	b.n	80046e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <prvInsertTimerInActiveList+0x80>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7fd ff24 	bl	800252e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80046e6:	697b      	ldr	r3, [r7, #20]
    }
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000208 	.word	0x20000208
 80046f4:	20000204 	.word	0x20000204

080046f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	; 0x30
 80046fc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046fe:	e0ae      	b.n	800485e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f2c0 80aa 	blt.w	800485c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	3304      	adds	r3, #4
 8004718:	4618      	mov	r0, r3
 800471a:	f7fd ff41 	bl	80025a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800471e:	1d3b      	adds	r3, r7, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff87 	bl	8004634 <prvSampleTimeNow>
 8004726:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b09      	cmp	r3, #9
 800472c:	f200 8097 	bhi.w	800485e <prvProcessReceivedCommands+0x166>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <prvProcessReceivedCommands+0x40>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004761 	.word	0x08004761
 800473c:	08004761 	.word	0x08004761
 8004740:	08004761 	.word	0x08004761
 8004744:	080047d5 	.word	0x080047d5
 8004748:	080047e9 	.word	0x080047e9
 800474c:	08004833 	.word	0x08004833
 8004750:	08004761 	.word	0x08004761
 8004754:	08004761 	.word	0x08004761
 8004758:	080047d5 	.word	0x080047d5
 800475c:	080047e9 	.word	0x080047e9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	18d1      	adds	r1, r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004780:	f7ff ff78 	bl	8004674 <prvInsertTimerInActiveList>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d069      	beq.n	800485e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004790:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05e      	beq.n	800485e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	441a      	add	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	2100      	movs	r1, #0
 80047b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b2:	f7ff fe21 	bl	80043f8 <xTimerGenericCommand>
 80047b6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d14f      	bne.n	800485e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61bb      	str	r3, [r7, #24]
    }
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80047e6:	e03a      	b.n	800485e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	617b      	str	r3, [r7, #20]
    }
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	18d1      	adds	r1, r2, r3
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800482c:	f7ff ff22 	bl	8004674 <prvInsertTimerInActiveList>
                        break;
 8004830:	e015      	b.n	800485e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d103      	bne.n	8004848 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004842:	f000 fbf3 	bl	800502c <vPortFree>
 8004846:	e00a      	b.n	800485e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800485a:	e000      	b.n	800485e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800485c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <prvProcessReceivedCommands+0x188>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f107 0108 	add.w	r1, r7, #8
 8004866:	2200      	movs	r2, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe f997 	bl	8002b9c <xQueueReceive>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f af45 	bne.w	8004700 <prvProcessReceivedCommands+0x8>
        }
    }
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	3728      	adds	r7, #40	; 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000020c 	.word	0x2000020c

08004884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800488a:	e048      	b.n	800491e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <prvSwitchTimerLists+0xc0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004896:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <prvSwitchTimerLists+0xc0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fd fe7b 	bl	80025a0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02e      	beq.n	800491e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4413      	add	r3, r2
 80048c8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d90e      	bls.n	80048f0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048de:	4b19      	ldr	r3, [pc, #100]	; (8004944 <prvSwitchTimerLists+0xc0>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fd fe20 	bl	800252e <vListInsert>
 80048ee:	e016      	b.n	800491e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	2100      	movs	r1, #0
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fd7c 	bl	80043f8 <xTimerGenericCommand>
 8004900:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	603b      	str	r3, [r7, #0]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <prvSwitchTimerLists+0xc0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1b1      	bne.n	800488c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <prvSwitchTimerLists+0xc0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <prvSwitchTimerLists+0xc4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a04      	ldr	r2, [pc, #16]	; (8004944 <prvSwitchTimerLists+0xc0>)
 8004934:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <prvSwitchTimerLists+0xc4>)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	6013      	str	r3, [r2, #0]
    }
 800493c:	bf00      	nop
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000204 	.word	0x20000204
 8004948:	20000208 	.word	0x20000208

0800494c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004950:	f000 f962 	bl	8004c18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <prvCheckForValidListAndQueue+0x54>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11d      	bne.n	8004998 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800495c:	4811      	ldr	r0, [pc, #68]	; (80049a4 <prvCheckForValidListAndQueue+0x58>)
 800495e:	f7fd fd95 	bl	800248c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004962:	4811      	ldr	r0, [pc, #68]	; (80049a8 <prvCheckForValidListAndQueue+0x5c>)
 8004964:	f7fd fd92 	bl	800248c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004968:	4b10      	ldr	r3, [pc, #64]	; (80049ac <prvCheckForValidListAndQueue+0x60>)
 800496a:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <prvCheckForValidListAndQueue+0x58>)
 800496c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <prvCheckForValidListAndQueue+0x64>)
 8004970:	4a0d      	ldr	r2, [pc, #52]	; (80049a8 <prvCheckForValidListAndQueue+0x5c>)
 8004972:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004974:	2200      	movs	r2, #0
 8004976:	210c      	movs	r1, #12
 8004978:	200a      	movs	r0, #10
 800497a:	f7fd fea3 	bl	80026c4 <xQueueGenericCreate>
 800497e:	4603      	mov	r3, r0
 8004980:	4a07      	ldr	r2, [pc, #28]	; (80049a0 <prvCheckForValidListAndQueue+0x54>)
 8004982:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <prvCheckForValidListAndQueue+0x54>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <prvCheckForValidListAndQueue+0x54>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4908      	ldr	r1, [pc, #32]	; (80049b4 <prvCheckForValidListAndQueue+0x68>)
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe fc76 	bl	8003284 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004998:	f000 f96e 	bl	8004c78 <vPortExitCritical>
    }
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	2000020c 	.word	0x2000020c
 80049a4:	200001dc 	.word	0x200001dc
 80049a8:	200001f0 	.word	0x200001f0
 80049ac:	20000204 	.word	0x20000204
 80049b0:	20000208 	.word	0x20000208
 80049b4:	08007030 	.word	0x08007030

080049b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b04      	subs	r3, #4
 80049c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3b04      	subs	r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <pxPortInitialiseStack+0x64>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b14      	subs	r3, #20
 80049f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3b04      	subs	r3, #4
 80049fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f06f 0202 	mvn.w	r2, #2
 8004a06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b20      	subs	r3, #32
 8004a0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	08004a21 	.word	0x08004a21

08004a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <prvTaskExitError+0x54>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d00a      	beq.n	8004a4a <prvTaskExitError+0x2a>
        __asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
    }
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <prvTaskExitError+0x28>
        __asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60bb      	str	r3, [r7, #8]
    }
 8004a5c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004a5e:	bf00      	nop
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0fc      	beq.n	8004a60 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000028 	.word	0x20000028
	...

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
 8004aca:	0000      	.short	0x0000
 8004acc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop

08004ad4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ada:	4b46      	ldr	r3, [pc, #280]	; (8004bf4 <xPortStartScheduler+0x120>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a46      	ldr	r2, [pc, #280]	; (8004bf8 <xPortStartScheduler+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d10a      	bne.n	8004afa <xPortStartScheduler+0x26>
        __asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	613b      	str	r3, [r7, #16]
    }
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004afa:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <xPortStartScheduler+0x120>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a3f      	ldr	r2, [pc, #252]	; (8004bfc <xPortStartScheduler+0x128>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10a      	bne.n	8004b1a <xPortStartScheduler+0x46>
        __asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	60fb      	str	r3, [r7, #12]
    }
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b1a:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <xPortStartScheduler+0x12c>)
 8004b1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <xPortStartScheduler+0x130>)
 8004b40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <xPortStartScheduler+0x134>)
 8004b44:	2207      	movs	r2, #7
 8004b46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b48:	e009      	b.n	8004b5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	; (8004c08 <xPortStartScheduler+0x134>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	4a2d      	ldr	r2, [pc, #180]	; (8004c08 <xPortStartScheduler+0x134>)
 8004b52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d0ef      	beq.n	8004b4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b6a:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <xPortStartScheduler+0x134>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1c3 0307 	rsb	r3, r3, #7
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d00a      	beq.n	8004b8c <xPortStartScheduler+0xb8>
        __asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60bb      	str	r3, [r7, #8]
    }
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <xPortStartScheduler+0x134>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <xPortStartScheduler+0x134>)
 8004b94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b96:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <xPortStartScheduler+0x134>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9e:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <xPortStartScheduler+0x134>)
 8004ba0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <xPortStartScheduler+0x138>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <xPortStartScheduler+0x138>)
 8004bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <xPortStartScheduler+0x138>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <xPortStartScheduler+0x138>)
 8004bbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004bc2:	f000 f8e3 	bl	8004d8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <xPortStartScheduler+0x13c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004bcc:	f000 f902 	bl	8004dd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <xPortStartScheduler+0x140>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0f      	ldr	r2, [pc, #60]	; (8004c14 <xPortStartScheduler+0x140>)
 8004bd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004bdc:	f7ff ff64 	bl	8004aa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004be0:	f7fe ff40 	bl	8003a64 <vTaskSwitchContext>
    prvTaskExitError();
 8004be4:	f7ff ff1c 	bl	8004a20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000ed00 	.word	0xe000ed00
 8004bf8:	410fc271 	.word	0x410fc271
 8004bfc:	410fc270 	.word	0x410fc270
 8004c00:	e000e400 	.word	0xe000e400
 8004c04:	20000218 	.word	0x20000218
 8004c08:	2000021c 	.word	0x2000021c
 8004c0c:	e000ed20 	.word	0xe000ed20
 8004c10:	20000028 	.word	0x20000028
 8004c14:	e000ef34 	.word	0xe000ef34

08004c18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
    }
 8004c30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <vPortEnterCritical+0x58>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <vPortEnterCritical+0x58>)
 8004c3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <vPortEnterCritical+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d10f      	bne.n	8004c64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <vPortEnterCritical+0x5c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	603b      	str	r3, [r7, #0]
    }
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <vPortEnterCritical+0x4a>
    }
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000028 	.word	0x20000028
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <vPortExitCritical+0x50>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <vPortExitCritical+0x24>
        __asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	607b      	str	r3, [r7, #4]
    }
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <vPortExitCritical+0x50>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <vPortExitCritical+0x50>)
 8004ca4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <vPortExitCritical+0x50>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <vPortExitCritical+0x42>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f383 8811 	msr	BASEPRI, r3
    }
 8004cb8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000028 	.word	0x20000028
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7fe feb0 	bl	8003a64 <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
    }
 8004d50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d52:	f001 fc7b 	bl	800664c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d56:	f7fe fdc9 	bl	80038ec <xTaskIncrementTick>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004d60:	f001 fcd2 	bl	8006708 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <SysTick_Handler+0x50>)
 8004d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e001      	b.n	8004d72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004d6e:	f001 fcaf 	bl	80066d0 <SEGGER_SYSVIEW_RecordExitISR>
 8004d72:	2300      	movs	r3, #0
 8004d74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	f383 8811 	msr	BASEPRI, r3
    }
 8004d7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <vPortSetupTimerInterrupt+0x34>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <vPortSetupTimerInterrupt+0x38>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <vPortSetupTimerInterrupt+0x3c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <vPortSetupTimerInterrupt+0x40>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <vPortSetupTimerInterrupt+0x44>)
 8004daa:	3b01      	subs	r3, #1
 8004dac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dae:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <vPortSetupTimerInterrupt+0x34>)
 8004db0:	2207      	movs	r2, #7
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000e010 	.word	0xe000e010
 8004dc4:	e000e018 	.word	0xe000e018
 8004dc8:	20000018 	.word	0x20000018
 8004dcc:	10624dd3 	.word	0x10624dd3
 8004dd0:	e000e014 	.word	0xe000e014

08004dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004de4 <vPortEnableVFP+0x10>
 8004dd8:	6801      	ldr	r1, [r0, #0]
 8004dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dde:	6001      	str	r1, [r0, #0]
 8004de0:	4770      	bx	lr
 8004de2:	0000      	.short	0x0000
 8004de4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop

08004dec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004df2:	f3ef 8305 	mrs	r3, IPSR
 8004df6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b0f      	cmp	r3, #15
 8004dfc:	d914      	bls.n	8004e28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dfe:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <vPortValidateInterruptPriority+0x70>)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <vPortValidateInterruptPriority+0x74>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	7afa      	ldrb	r2, [r7, #11]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d20a      	bcs.n	8004e28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
    }
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <vPortValidateInterruptPriority+0x78>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e30:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <vPortValidateInterruptPriority+0x7c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d90a      	bls.n	8004e4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	603b      	str	r3, [r7, #0]
    }
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <vPortValidateInterruptPriority+0x60>
    }
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000e3f0 	.word	0xe000e3f0
 8004e60:	20000218 	.word	0x20000218
 8004e64:	e000ed0c 	.word	0xe000ed0c
 8004e68:	2000021c 	.word	0x2000021c

08004e6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e78:	f7fe fc68 	bl	800374c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e7c:	4b65      	ldr	r3, [pc, #404]	; (8005014 <pvPortMalloc+0x1a8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e84:	f000 f934 	bl	80050f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e88:	4b63      	ldr	r3, [pc, #396]	; (8005018 <pvPortMalloc+0x1ac>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 80a7 	bne.w	8004fe4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02d      	beq.n	8004ef8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d227      	bcs.n	8004ef8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d021      	beq.n	8004efe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f023 0307 	bic.w	r3, r3, #7
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d214      	bcs.n	8004ef2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	3308      	adds	r3, #8
 8004ed0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <pvPortMalloc+0x92>
        __asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	617b      	str	r3, [r7, #20]
    }
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ef6:	e002      	b.n	8004efe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	e000      	b.n	8004f00 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004efe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d06e      	beq.n	8004fe4 <pvPortMalloc+0x178>
 8004f06:	4b45      	ldr	r3, [pc, #276]	; (800501c <pvPortMalloc+0x1b0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d869      	bhi.n	8004fe4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f10:	4b43      	ldr	r3, [pc, #268]	; (8005020 <pvPortMalloc+0x1b4>)
 8004f12:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f14:	4b42      	ldr	r3, [pc, #264]	; (8005020 <pvPortMalloc+0x1b4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1a:	e004      	b.n	8004f26 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d903      	bls.n	8004f38 <pvPortMalloc+0xcc>
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f1      	bne.n	8004f1c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f38:	4b36      	ldr	r3, [pc, #216]	; (8005014 <pvPortMalloc+0x1a8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d050      	beq.n	8004fe4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2208      	movs	r2, #8
 8004f48:	4413      	add	r3, r2
 8004f4a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d91f      	bls.n	8004fa4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4413      	add	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <pvPortMalloc+0x120>
        __asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	613b      	str	r3, [r7, #16]
    }
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f9e:	69b8      	ldr	r0, [r7, #24]
 8004fa0:	f000 f908 	bl	80051b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <pvPortMalloc+0x1b0>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	4a1b      	ldr	r2, [pc, #108]	; (800501c <pvPortMalloc+0x1b0>)
 8004fb0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <pvPortMalloc+0x1b0>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <pvPortMalloc+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d203      	bcs.n	8004fc6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fbe:	4b17      	ldr	r3, [pc, #92]	; (800501c <pvPortMalloc+0x1b0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	; (8005024 <pvPortMalloc+0x1b8>)
 8004fc4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <pvPortMalloc+0x1ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <pvPortMalloc+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4a11      	ldr	r2, [pc, #68]	; (8005028 <pvPortMalloc+0x1bc>)
 8004fe2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fe4:	f7fe fbc0 	bl	8003768 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <pvPortMalloc+0x19c>
        __asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60fb      	str	r3, [r7, #12]
    }
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <pvPortMalloc+0x19a>
    return pvReturn;
 8005008:	69fb      	ldr	r3, [r7, #28]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20012e28 	.word	0x20012e28
 8005018:	20012e3c 	.word	0x20012e3c
 800501c:	20012e2c 	.word	0x20012e2c
 8005020:	20012e20 	.word	0x20012e20
 8005024:	20012e30 	.word	0x20012e30
 8005028:	20012e34 	.word	0x20012e34

0800502c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d04d      	beq.n	80050da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800503e:	2308      	movs	r3, #8
 8005040:	425b      	negs	r3, r3
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4413      	add	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <vPortFree+0xb8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <vPortFree+0x44>
        __asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	60fb      	str	r3, [r7, #12]
    }
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <vPortFree+0x62>
        __asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60bb      	str	r3, [r7, #8]
    }
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <vPortFree+0xb8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01e      	beq.n	80050da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11a      	bne.n	80050da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <vPortFree+0xb8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80050b4:	f7fe fb4a 	bl	800374c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortFree+0xbc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <vPortFree+0xbc>)
 80050c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050c6:	6938      	ldr	r0, [r7, #16]
 80050c8:	f000 f874 	bl	80051b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050cc:	4b07      	ldr	r3, [pc, #28]	; (80050ec <vPortFree+0xc0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	4a06      	ldr	r2, [pc, #24]	; (80050ec <vPortFree+0xc0>)
 80050d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80050d6:	f7fe fb47 	bl	8003768 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050da:	bf00      	nop
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20012e3c 	.word	0x20012e3c
 80050e8:	20012e2c 	.word	0x20012e2c
 80050ec:	20012e38 	.word	0x20012e38

080050f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80050fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80050fc:	4b27      	ldr	r3, [pc, #156]	; (800519c <prvHeapInit+0xac>)
 80050fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3307      	adds	r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0307 	bic.w	r3, r3, #7
 8005116:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	4a1f      	ldr	r2, [pc, #124]	; (800519c <prvHeapInit+0xac>)
 8005120:	4413      	add	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <prvHeapInit+0xb0>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800512e:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <prvHeapInit+0xb0>)
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4413      	add	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800513c:	2208      	movs	r2, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0307 	bic.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <prvHeapInit+0xb4>)
 8005150:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <prvHeapInit+0xb4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <prvHeapInit+0xb4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <prvHeapInit+0xb4>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <prvHeapInit+0xb8>)
 800517e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a09      	ldr	r2, [pc, #36]	; (80051ac <prvHeapInit+0xbc>)
 8005186:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <prvHeapInit+0xc0>)
 800518a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800518e:	601a      	str	r2, [r3, #0]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	20000220 	.word	0x20000220
 80051a0:	20012e20 	.word	0x20012e20
 80051a4:	20012e28 	.word	0x20012e28
 80051a8:	20012e30 	.word	0x20012e30
 80051ac:	20012e2c 	.word	0x20012e2c
 80051b0:	20012e3c 	.word	0x20012e3c

080051b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051bc:	4b28      	ldr	r3, [pc, #160]	; (8005260 <prvInsertBlockIntoFreeList+0xac>)
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e002      	b.n	80051c8 <prvInsertBlockIntoFreeList+0x14>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d8f7      	bhi.n	80051c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d108      	bne.n	80051f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	441a      	add	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d118      	bne.n	800523c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <prvInsertBlockIntoFreeList+0xb0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d00d      	beq.n	8005232 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	441a      	add	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e008      	b.n	8005244 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <prvInsertBlockIntoFreeList+0xb0>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e003      	b.n	8005244 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	d002      	beq.n	8005252 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20012e20 	.word	0x20012e20
 8005264:	20012e28 	.word	0x20012e28

08005268 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <_DoInit+0xa0>)
 8005270:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005272:	22a8      	movs	r2, #168	; 0xa8
 8005274:	2100      	movs	r1, #0
 8005276:	6838      	ldr	r0, [r7, #0]
 8005278:	f001 fe7c 	bl	8006f74 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2203      	movs	r2, #3
 8005280:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2203      	movs	r2, #3
 8005286:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <_DoInit+0xa4>)
 800528c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <_DoInit+0xa8>)
 8005292:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800529a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	4a16      	ldr	r2, [pc, #88]	; (800530c <_DoInit+0xa4>)
 80052b2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4a17      	ldr	r2, [pc, #92]	; (8005314 <_DoInit+0xac>)
 80052b8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2210      	movs	r2, #16
 80052be:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2200      	movs	r2, #0
 80052d0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80052d2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	e00c      	b.n	80052f6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1c3 030f 	rsb	r3, r3, #15
 80052e2:	4a0d      	ldr	r2, [pc, #52]	; (8005318 <_DoInit+0xb0>)
 80052e4:	5cd1      	ldrb	r1, [r2, r3]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4413      	add	r3, r2
 80052ec:	460a      	mov	r2, r1
 80052ee:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3301      	adds	r3, #1
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d9ef      	bls.n	80052dc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80052fc:	f3bf 8f5f 	dmb	sy
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20012e40 	.word	0x20012e40
 800530c:	08007038 	.word	0x08007038
 8005310:	20012ee8 	.word	0x20012ee8
 8005314:	200132e8 	.word	0x200132e8
 8005318:	08007110 	.word	0x08007110

0800531c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	; 0x30
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005328:	4b3e      	ldr	r3, [pc, #248]	; (8005424 <SEGGER_RTT_ReadNoLock+0x108>)
 800532a:	623b      	str	r3, [r7, #32]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <SEGGER_RTT_ReadNoLock+0x1e>
 8005336:	f7ff ff97 	bl	8005268 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	3360      	adds	r3, #96	; 0x60
 8005346:	4a37      	ldr	r2, [pc, #220]	; (8005424 <SEGGER_RTT_ReadNoLock+0x108>)
 8005348:	4413      	add	r3, r2
 800534a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800535c:	2300      	movs	r3, #0
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	429a      	cmp	r2, r3
 8005366:	d92b      	bls.n	80053c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4293      	cmp	r3, r2
 8005378:	bf28      	it	cs
 800537a:	4613      	movcs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	4413      	add	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	6939      	ldr	r1, [r7, #16]
 800538c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800538e:	f001 fde3 	bl	8006f58 <memcpy>
    NumBytesRead += NumBytesRem;
 8005392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d101      	bne.n	80053c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053bc:	2300      	movs	r3, #0
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4293      	cmp	r3, r2
 80053ce:	bf28      	it	cs
 80053d0:	4613      	movcs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d019      	beq.n	800540e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	4413      	add	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	6939      	ldr	r1, [r7, #16]
 80053e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ea:	f001 fdb5 	bl	8006f58 <memcpy>
    NumBytesRead += NumBytesRem;
 80053ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4413      	add	r3, r2
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4413      	add	r3, r2
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005418:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800541c:	4618      	mov	r0, r3
 800541e:	3730      	adds	r7, #48	; 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20012e40 	.word	0x20012e40

08005428 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005436:	4b3d      	ldr	r3, [pc, #244]	; (800552c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005444:	f7ff ff10 	bl	8005268 <_DoInit>
  SEGGER_RTT_LOCK();
 8005448:	f3ef 8311 	mrs	r3, BASEPRI
 800544c:	f04f 0120 	mov.w	r1, #32
 8005450:	f381 8811 	msr	BASEPRI, r1
 8005454:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005456:	4b35      	ldr	r3, [pc, #212]	; (800552c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005458:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800545e:	6939      	ldr	r1, [r7, #16]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	4613      	mov	r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	440b      	add	r3, r1
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3301      	adds	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	429a      	cmp	r2, r3
 8005484:	dbeb      	blt.n	800545e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005486:	e000      	b.n	800548a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005488:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	429a      	cmp	r2, r3
 8005492:	da3f      	bge.n	8005514 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005494:	6939      	ldr	r1, [r7, #16]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80054a8:	6939      	ldr	r1, [r7, #16]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	4613      	mov	r3, r2
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	3304      	adds	r3, #4
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80054be:	6939      	ldr	r1, [r7, #16]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	440b      	add	r3, r1
 80054cc:	3320      	adds	r3, #32
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80054d2:	6939      	ldr	r1, [r7, #16]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	4613      	mov	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	4413      	add	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	440b      	add	r3, r1
 80054e0:	3328      	adds	r3, #40	; 0x28
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80054e6:	6939      	ldr	r1, [r7, #16]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	440b      	add	r3, r1
 80054f4:	3324      	adds	r3, #36	; 0x24
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80054fa:	6939      	ldr	r1, [r7, #16]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	4613      	mov	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	440b      	add	r3, r1
 8005508:	332c      	adds	r3, #44	; 0x2c
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800550e:	f3bf 8f5f 	dmb	sy
 8005512:	e002      	b.n	800551a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295
 8005518:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005520:	69fb      	ldr	r3, [r7, #28]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20012e40 	.word	0x20012e40

08005530 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800554c:	f7ff fe8c 	bl	8005268 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005550:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005552:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d82c      	bhi.n	80055b4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800555a:	f3ef 8311 	mrs	r3, BASEPRI
 800555e:	f04f 0120 	mov.w	r1, #32
 8005562:	f381 8811 	msr	BASEPRI, r1
 8005566:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4613      	mov	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	3360      	adds	r3, #96	; 0x60
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2200      	movs	r2, #0
 8005596:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2200      	movs	r2, #0
 800559c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	e002      	b.n	80055ba <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3728      	adds	r7, #40	; 0x28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20012e40 	.word	0x20012e40

080055c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00f      	beq.n	80055fe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80055de:	e002      	b.n	80055e6 <_EncodeStr+0x1e>
      Len++;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	3301      	adds	r3, #1
 80055e4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f6      	bne.n	80055e0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d901      	bls.n	80055fe <_EncodeStr+0x36>
      Len = Limit;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2bfe      	cmp	r3, #254	; 0xfe
 8005602:	d806      	bhi.n	8005612 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	60fa      	str	r2, [r7, #12]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e011      	b.n	8005636 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	60fa      	str	r2, [r7, #12]
 8005618:	22ff      	movs	r2, #255	; 0xff
 800561a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	60fa      	str	r2, [r7, #12]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	0a19      	lsrs	r1, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	60fa      	str	r2, [r7, #12]
 8005632:	b2ca      	uxtb	r2, r1
 8005634:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800563a:	e00a      	b.n	8005652 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	1c53      	adds	r3, r2, #1
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	60f9      	str	r1, [r7, #12]
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	701a      	strb	r2, [r3, #0]
    n++;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3301      	adds	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	429a      	cmp	r2, r3
 8005658:	d3f0      	bcc.n	800563c <_EncodeStr+0x74>
  }
  return pPayload;
 800565a:	68fb      	ldr	r3, [r7, #12]
}
 800565c:	4618      	mov	r0, r3
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3307      	adds	r3, #7
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005686:	4b35      	ldr	r3, [pc, #212]	; (800575c <_HandleIncomingPacket+0xdc>)
 8005688:	7e1b      	ldrb	r3, [r3, #24]
 800568a:	4618      	mov	r0, r3
 800568c:	1cfb      	adds	r3, r7, #3
 800568e:	2201      	movs	r2, #1
 8005690:	4619      	mov	r1, r3
 8005692:	f7ff fe43 	bl	800531c <SEGGER_RTT_ReadNoLock>
 8005696:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d052      	beq.n	8005744 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	d031      	beq.n	8005708 <_HandleIncomingPacket+0x88>
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	dc40      	bgt.n	800572a <_HandleIncomingPacket+0xaa>
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	dc15      	bgt.n	80056d8 <_HandleIncomingPacket+0x58>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dd3c      	ble.n	800572a <_HandleIncomingPacket+0xaa>
 80056b0:	3b01      	subs	r3, #1
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	d839      	bhi.n	800572a <_HandleIncomingPacket+0xaa>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <_HandleIncomingPacket+0x3c>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056df 	.word	0x080056df
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056eb 	.word	0x080056eb
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f7 	.word	0x080056f7
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	08005703 	.word	0x08005703
 80056d8:	2b7f      	cmp	r3, #127	; 0x7f
 80056da:	d035      	beq.n	8005748 <_HandleIncomingPacket+0xc8>
 80056dc:	e025      	b.n	800572a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80056de:	f000 fced 	bl	80060bc <SEGGER_SYSVIEW_Start>
      break;
 80056e2:	e036      	b.n	8005752 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80056e4:	f000 fda4 	bl	8006230 <SEGGER_SYSVIEW_Stop>
      break;
 80056e8:	e033      	b.n	8005752 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80056ea:	f000 ff7d 	bl	80065e8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80056ee:	e030      	b.n	8005752 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80056f0:	f000 ff42 	bl	8006578 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80056f4:	e02d      	b.n	8005752 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80056f6:	f000 fdc1 	bl	800627c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80056fa:	e02a      	b.n	8005752 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80056fc:	f001 fa10 	bl	8006b20 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005700:	e027      	b.n	8005752 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005702:	f001 f9ef 	bl	8006ae4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005706:	e024      	b.n	8005752 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005708:	4b14      	ldr	r3, [pc, #80]	; (800575c <_HandleIncomingPacket+0xdc>)
 800570a:	7e1b      	ldrb	r3, [r3, #24]
 800570c:	4618      	mov	r0, r3
 800570e:	1cfb      	adds	r3, r7, #3
 8005710:	2201      	movs	r2, #1
 8005712:	4619      	mov	r1, r3
 8005714:	f7ff fe02 	bl	800531c <SEGGER_RTT_ReadNoLock>
 8005718:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d015      	beq.n	800574c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	4618      	mov	r0, r3
 8005724:	f001 f95e 	bl	80069e4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005728:	e010      	b.n	800574c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	b25b      	sxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	da0e      	bge.n	8005750 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005732:	4b0a      	ldr	r3, [pc, #40]	; (800575c <_HandleIncomingPacket+0xdc>)
 8005734:	7e1b      	ldrb	r3, [r3, #24]
 8005736:	4618      	mov	r0, r3
 8005738:	1cfb      	adds	r3, r7, #3
 800573a:	2201      	movs	r2, #1
 800573c:	4619      	mov	r1, r3
 800573e:	f7ff fded 	bl	800531c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005742:	e005      	b.n	8005750 <_HandleIncomingPacket+0xd0>
    }
  }
 8005744:	bf00      	nop
 8005746:	e004      	b.n	8005752 <_HandleIncomingPacket+0xd2>
      break;
 8005748:	bf00      	nop
 800574a:	e002      	b.n	8005752 <_HandleIncomingPacket+0xd2>
      break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <_HandleIncomingPacket+0xd2>
      break;
 8005750:	bf00      	nop
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20014300 	.word	0x20014300

08005760 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005766:	2301      	movs	r3, #1
 8005768:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005774:	4b31      	ldr	r3, [pc, #196]	; (800583c <_TrySendOverflowPacket+0xdc>)
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
 800577a:	e00b      	b.n	8005794 <_TrySendOverflowPacket+0x34>
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	b2da      	uxtb	r2, r3
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	2b7f      	cmp	r3, #127	; 0x7f
 8005798:	d8f0      	bhi.n	800577c <_TrySendOverflowPacket+0x1c>
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057aa:	4b25      	ldr	r3, [pc, #148]	; (8005840 <_TrySendOverflowPacket+0xe0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057b0:	4b22      	ldr	r3, [pc, #136]	; (800583c <_TrySendOverflowPacket+0xdc>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	e00b      	b.n	80057dc <_TrySendOverflowPacket+0x7c>
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1c59      	adds	r1, r3, #1
 80057cc:	6279      	str	r1, [r7, #36]	; 0x24
 80057ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	09db      	lsrs	r3, r3, #7
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	2b7f      	cmp	r3, #127	; 0x7f
 80057e0:	d8f0      	bhi.n	80057c4 <_TrySendOverflowPacket+0x64>
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	627a      	str	r2, [r7, #36]	; 0x24
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <_TrySendOverflowPacket+0xdc>)
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	4618      	mov	r0, r3
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	1d3b      	adds	r3, r7, #4
 8005802:	4619      	mov	r1, r3
 8005804:	f7fa fcf4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005808:	4603      	mov	r3, r0
 800580a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005812:	4a0a      	ldr	r2, [pc, #40]	; (800583c <_TrySendOverflowPacket+0xdc>)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005818:	4b08      	ldr	r3, [pc, #32]	; (800583c <_TrySendOverflowPacket+0xdc>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	3b01      	subs	r3, #1
 800581e:	b2da      	uxtb	r2, r3
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <_TrySendOverflowPacket+0xdc>)
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	e004      	b.n	8005830 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <_TrySendOverflowPacket+0xdc>)
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	4a03      	ldr	r2, [pc, #12]	; (800583c <_TrySendOverflowPacket+0xdc>)
 800582e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005830:	693b      	ldr	r3, [r7, #16]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3730      	adds	r7, #48	; 0x30
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20014300 	.word	0x20014300
 8005840:	e0001004 	.word	0xe0001004

08005844 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005850:	4b98      	ldr	r3, [pc, #608]	; (8005ab4 <_SendPacket+0x270>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d010      	beq.n	800587a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005858:	4b96      	ldr	r3, [pc, #600]	; (8005ab4 <_SendPacket+0x270>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 812d 	beq.w	8005abc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005862:	4b94      	ldr	r3, [pc, #592]	; (8005ab4 <_SendPacket+0x270>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d109      	bne.n	800587e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800586a:	f7ff ff79 	bl	8005760 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800586e:	4b91      	ldr	r3, [pc, #580]	; (8005ab4 <_SendPacket+0x270>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b01      	cmp	r3, #1
 8005874:	f040 8124 	bne.w	8005ac0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005878:	e001      	b.n	800587e <_SendPacket+0x3a>
    goto Send;
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <_SendPacket+0x3c>
Send:
 800587e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b1f      	cmp	r3, #31
 8005884:	d809      	bhi.n	800589a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005886:	4b8b      	ldr	r3, [pc, #556]	; (8005ab4 <_SendPacket+0x270>)
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	f040 8115 	bne.w	8005ac4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b17      	cmp	r3, #23
 800589e:	d807      	bhi.n	80058b0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e0c4      	b.n	8005a3a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b7f      	cmp	r3, #127	; 0x7f
 80058bc:	d912      	bls.n	80058e4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	09da      	lsrs	r2, r3, #7
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	3a01      	subs	r2, #1
 80058d6:	60fa      	str	r2, [r7, #12]
 80058d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e006      	b.n	80058f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b7e      	cmp	r3, #126	; 0x7e
 80058f6:	d807      	bhi.n	8005908 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e098      	b.n	8005a3a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800590e:	d212      	bcs.n	8005936 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	09da      	lsrs	r2, r3, #7
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3b01      	subs	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	3a01      	subs	r2, #1
 8005928:	60fa      	str	r2, [r7, #12]
 800592a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e081      	b.n	8005a3a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800593c:	d21d      	bcs.n	800597a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0b9a      	lsrs	r2, r3, #14
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3b01      	subs	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	09db      	lsrs	r3, r3, #7
 8005952:	b2db      	uxtb	r3, r3
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	3a01      	subs	r2, #1
 8005958:	60fa      	str	r2, [r7, #12]
 800595a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	3a01      	subs	r2, #1
 800596c:	60fa      	str	r2, [r7, #12]
 800596e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005972:	b2da      	uxtb	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e05f      	b.n	8005a3a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005980:	d228      	bcs.n	80059d4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	0d5a      	lsrs	r2, r3, #21
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3b01      	subs	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	0b9b      	lsrs	r3, r3, #14
 8005996:	b2db      	uxtb	r3, r3
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	3a01      	subs	r2, #1
 800599c:	60fa      	str	r2, [r7, #12]
 800599e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	3a01      	subs	r2, #1
 80059b2:	60fa      	str	r2, [r7, #12]
 80059b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	3a01      	subs	r2, #1
 80059c6:	60fa      	str	r2, [r7, #12]
 80059c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e032      	b.n	8005a3a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0f1a      	lsrs	r2, r3, #28
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3b01      	subs	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0d5b      	lsrs	r3, r3, #21
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	3a01      	subs	r2, #1
 80059ee:	60fa      	str	r2, [r7, #12]
 80059f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0b9b      	lsrs	r3, r3, #14
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	3a01      	subs	r2, #1
 8005a04:	60fa      	str	r2, [r7, #12]
 8005a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	09db      	lsrs	r3, r3, #7
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	60fa      	str	r2, [r7, #12]
 8005a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	3a01      	subs	r2, #1
 8005a2e:	60fa      	str	r2, [r7, #12]
 8005a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <_SendPacket+0x274>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a40:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <_SendPacket+0x270>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	e00b      	b.n	8005a6c <_SendPacket+0x228>
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	1c59      	adds	r1, r3, #1
 8005a5c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	09db      	lsrs	r3, r3, #7
 8005a6a:	623b      	str	r3, [r7, #32]
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a70:	d8f0      	bhi.n	8005a54 <_SendPacket+0x210>
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	627a      	str	r2, [r7, #36]	; 0x24
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <_SendPacket+0x270>)
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	4618      	mov	r0, r3
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	f7fa fbad 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a96:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a9e:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <_SendPacket+0x270>)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	60d3      	str	r3, [r2, #12]
 8005aa4:	e00f      	b.n	8005ac6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005aa6:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <_SendPacket+0x270>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b01      	ldr	r3, [pc, #4]	; (8005ab4 <_SendPacket+0x270>)
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	e008      	b.n	8005ac6 <_SendPacket+0x282>
 8005ab4:	20014300 	.word	0x20014300
 8005ab8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005abc:	bf00      	nop
 8005abe:	e002      	b.n	8005ac6 <_SendPacket+0x282>
      goto SendDone;
 8005ac0:	bf00      	nop
 8005ac2:	e000      	b.n	8005ac6 <_SendPacket+0x282>
      goto SendDone;
 8005ac4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ac6:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <_SendPacket+0x2d4>)
 8005ac8:	7e1b      	ldrb	r3, [r3, #24]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <_SendPacket+0x2d8>)
 8005ace:	460b      	mov	r3, r1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	440b      	add	r3, r1
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	336c      	adds	r3, #108	; 0x6c
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <_SendPacket+0x2d4>)
 8005ade:	7e1b      	ldrb	r3, [r3, #24]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	490e      	ldr	r1, [pc, #56]	; (8005b1c <_SendPacket+0x2d8>)
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	4403      	add	r3, r0
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	440b      	add	r3, r1
 8005aee:	3370      	adds	r3, #112	; 0x70
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d00b      	beq.n	8005b0e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005af6:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <_SendPacket+0x2d4>)
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <_SendPacket+0x2d4>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b04:	f7ff fdbc 	bl	8005680 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b08:	4b03      	ldr	r3, [pc, #12]	; (8005b18 <_SendPacket+0x2d4>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b0e:	bf00      	nop
 8005b10:	3728      	adds	r7, #40	; 0x28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20014300 	.word	0x20014300
 8005b1c:	20012e40 	.word	0x20012e40

08005b20 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b0a2      	sub	sp, #136	; 0x88
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8005b36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8005b42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01d      	beq.n	8005b86 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8005b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b4e:	2b25      	cmp	r3, #37	; 0x25
 8005b50:	d1f1      	bne.n	8005b36 <_VPrintHost+0x16>
      c = *p;
 8005b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1d19      	adds	r1, r3, #4
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6011      	str	r1, [r2, #0]
 8005b64:	6819      	ldr	r1, [r3, #0]
 8005b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b70:	460a      	mov	r2, r1
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	3388      	adds	r3, #136	; 0x88
 8005b76:	443b      	add	r3, r7
 8005b78:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8005b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d002      	beq.n	8005b8a <_VPrintHost+0x6a>
    c = *p++;
 8005b84:	e7d7      	b.n	8005b36 <_VPrintHost+0x16>
      break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <_VPrintHost+0x6c>
        break;
 8005b8a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8005b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b90:	f04f 0120 	mov.w	r1, #32
 8005b94:	f381 8811 	msr	BASEPRI, r1
 8005b98:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b9a:	483f      	ldr	r0, [pc, #252]	; (8005c98 <_VPrintHost+0x178>)
 8005b9c:	f7ff fd64 	bl	8005668 <_PreparePacket>
 8005ba0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	68f9      	ldr	r1, [r7, #12]
 8005ba6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ba8:	f7ff fd0e 	bl	80055c8 <_EncodeStr>
 8005bac:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8005bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb0:	677b      	str	r3, [r7, #116]	; 0x74
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb6:	e00b      	b.n	8005bd0 <_VPrintHost+0xb0>
 8005bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbe:	1c59      	adds	r1, r3, #1
 8005bc0:	6779      	str	r1, [r7, #116]	; 0x74
 8005bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bcc:	09db      	lsrs	r3, r3, #7
 8005bce:	673b      	str	r3, [r7, #112]	; 0x70
 8005bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd4:	d8f0      	bhi.n	8005bb8 <_VPrintHost+0x98>
 8005bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	677a      	str	r2, [r7, #116]	; 0x74
 8005bdc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8005be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bf0:	e00b      	b.n	8005c0a <_VPrintHost+0xea>
 8005bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf8:	1c59      	adds	r1, r3, #1
 8005bfa:	66f9      	str	r1, [r7, #108]	; 0x6c
 8005bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0e:	d8f0      	bhi.n	8005bf2 <_VPrintHost+0xd2>
 8005c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005c28:	e022      	b.n	8005c70 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8005c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c2c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	663b      	str	r3, [r7, #96]	; 0x60
 8005c36:	e00b      	b.n	8005c50 <_VPrintHost+0x130>
 8005c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	6679      	str	r1, [r7, #100]	; 0x64
 8005c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4c:	09db      	lsrs	r3, r3, #7
 8005c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c52:	2b7f      	cmp	r3, #127	; 0x7f
 8005c54:	d8f0      	bhi.n	8005c38 <_VPrintHost+0x118>
 8005c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	667a      	str	r2, [r7, #100]	; 0x64
 8005c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c64:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8005c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1d5      	bne.n	8005c2a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c7e:	221a      	movs	r2, #26
 8005c80:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005c82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005c84:	f7ff fdde 	bl	8005844 <_SendPacket>
    RECORD_END();
 8005c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c8a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3788      	adds	r7, #136	; 0x88
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20014330 	.word	0x20014330

08005c9c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005caa:	2300      	movs	r3, #0
 8005cac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cb0:	4917      	ldr	r1, [pc, #92]	; (8005d10 <SEGGER_SYSVIEW_Init+0x74>)
 8005cb2:	4818      	ldr	r0, [pc, #96]	; (8005d14 <SEGGER_SYSVIEW_Init+0x78>)
 8005cb4:	f7ff fbb8 	bl	8005428 <SEGGER_RTT_AllocUpBuffer>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cbe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005cc0:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cc2:	785a      	ldrb	r2, [r3, #1]
 8005cc4:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cc6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005cc8:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cca:	7e1b      	ldrb	r3, [r3, #24]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <SEGGER_SYSVIEW_Init+0x80>)
 8005cd6:	490f      	ldr	r1, [pc, #60]	; (8005d14 <SEGGER_SYSVIEW_Init+0x78>)
 8005cd8:	f7ff fc2a 	bl	8005530 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <SEGGER_SYSVIEW_Init+0x84>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ce8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005cea:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005cf0:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005cf6:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005cfc:	4a06      	ldr	r2, [pc, #24]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200132f8 	.word	0x200132f8
 8005d14:	08007044 	.word	0x08007044
 8005d18:	20014300 	.word	0x20014300
 8005d1c:	200142f8 	.word	0x200142f8
 8005d20:	e0001004 	.word	0xe0001004

08005d24 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005d2c:	4a04      	ldr	r2, [pc, #16]	; (8005d40 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6113      	str	r3, [r2, #16]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20014300 	.word	0x20014300

08005d44 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d50:	f04f 0120 	mov.w	r1, #32
 8005d54:	f381 8811 	msr	BASEPRI, r1
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	4808      	ldr	r0, [pc, #32]	; (8005d7c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005d5c:	f7ff fc84 	bl	8005668 <_PreparePacket>
 8005d60:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	f7ff fd6c 	bl	8005844 <_SendPacket>
  RECORD_END();
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f383 8811 	msr	BASEPRI, r3
}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20014330 	.word	0x20014330

08005d80 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8e:	f04f 0120 	mov.w	r1, #32
 8005d92:	f381 8811 	msr	BASEPRI, r1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	4816      	ldr	r0, [pc, #88]	; (8005df4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005d9a:	f7ff fc65 	bl	8005668 <_PreparePacket>
 8005d9e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e00b      	b.n	8005dc6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1c59      	adds	r1, r3, #1
 8005db6:	61f9      	str	r1, [r7, #28]
 8005db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	09db      	lsrs	r3, r3, #7
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dca:	d8f0      	bhi.n	8005dae <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	61fa      	str	r2, [r7, #28]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	6938      	ldr	r0, [r7, #16]
 8005de2:	f7ff fd2f 	bl	8005844 <_SendPacket>
  RECORD_END();
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f383 8811 	msr	BASEPRI, r3
}
 8005dec:	bf00      	nop
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20014330 	.word	0x20014330

08005df8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	; 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e04:	f3ef 8311 	mrs	r3, BASEPRI
 8005e08:	f04f 0120 	mov.w	r1, #32
 8005e0c:	f381 8811 	msr	BASEPRI, r1
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	4825      	ldr	r0, [pc, #148]	; (8005ea8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005e14:	f7ff fc28 	bl	8005668 <_PreparePacket>
 8005e18:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e26:	e00b      	b.n	8005e40 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	09db      	lsrs	r3, r3, #7
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	2b7f      	cmp	r3, #127	; 0x7f
 8005e44:	d8f0      	bhi.n	8005e28 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	e00b      	b.n	8005e78 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	6279      	str	r1, [r7, #36]	; 0x24
 8005e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	09db      	lsrs	r3, r3, #7
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e7c:	d8f0      	bhi.n	8005e60 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	627a      	str	r2, [r7, #36]	; 0x24
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	6979      	ldr	r1, [r7, #20]
 8005e92:	69b8      	ldr	r0, [r7, #24]
 8005e94:	f7ff fcd6 	bl	8005844 <_SendPacket>
  RECORD_END();
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
 8005ea0:	3730      	adds	r7, #48	; 0x30
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20014330 	.word	0x20014330

08005eac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	; 0x38
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005eba:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebe:	f04f 0120 	mov.w	r1, #32
 8005ec2:	f381 8811 	msr	BASEPRI, r1
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	4832      	ldr	r0, [pc, #200]	; (8005f94 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005eca:	f7ff fbcd 	bl	8005668 <_PreparePacket>
 8005ece:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
 8005edc:	e00b      	b.n	8005ef6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	1c59      	adds	r1, r3, #1
 8005ee6:	6379      	str	r1, [r7, #52]	; 0x34
 8005ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	09db      	lsrs	r3, r3, #7
 8005ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8005efa:	d8f0      	bhi.n	8005ede <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	637a      	str	r2, [r7, #52]	; 0x34
 8005f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f14:	e00b      	b.n	8005f2e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	09db      	lsrs	r3, r3, #7
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	2b7f      	cmp	r3, #127	; 0x7f
 8005f32:	d8f0      	bhi.n	8005f16 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	623b      	str	r3, [r7, #32]
 8005f4c:	e00b      	b.n	8005f66 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	1c59      	adds	r1, r3, #1
 8005f56:	6279      	str	r1, [r7, #36]	; 0x24
 8005f58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	09db      	lsrs	r3, r3, #7
 8005f64:	623b      	str	r3, [r7, #32]
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6a:	d8f0      	bhi.n	8005f4e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	627a      	str	r2, [r7, #36]	; 0x24
 8005f72:	6a3a      	ldr	r2, [r7, #32]
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	6979      	ldr	r1, [r7, #20]
 8005f80:	69b8      	ldr	r0, [r7, #24]
 8005f82:	f7ff fc5f 	bl	8005844 <_SendPacket>
  RECORD_END();
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f383 8811 	msr	BASEPRI, r3
}
 8005f8c:	bf00      	nop
 8005f8e:	3738      	adds	r7, #56	; 0x38
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20014330 	.word	0x20014330

08005f98 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b090      	sub	sp, #64	; 0x40
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	f04f 0120 	mov.w	r1, #32
 8005fae:	f381 8811 	msr	BASEPRI, r1
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	4840      	ldr	r0, [pc, #256]	; (80060b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005fb6:	f7ff fb57 	bl	8005668 <_PreparePacket>
 8005fba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc8:	e00b      	b.n	8005fe2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	1c59      	adds	r1, r3, #1
 8005fd2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	09db      	lsrs	r3, r3, #7
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe6:	d8f0      	bhi.n	8005fca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8006000:	e00b      	b.n	800601a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	b2da      	uxtb	r2, r3
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	1c59      	adds	r1, r3, #1
 800600a:	6379      	str	r1, [r7, #52]	; 0x34
 800600c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	09db      	lsrs	r3, r3, #7
 8006018:	633b      	str	r3, [r7, #48]	; 0x30
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	2b7f      	cmp	r3, #127	; 0x7f
 800601e:	d8f0      	bhi.n	8006002 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	637a      	str	r2, [r7, #52]	; 0x34
 8006026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
 8006038:	e00b      	b.n	8006052 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	b2da      	uxtb	r2, r3
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	2b7f      	cmp	r3, #127	; 0x7f
 8006056:	d8f0      	bhi.n	800603a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800605e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
 800606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606e:	623b      	str	r3, [r7, #32]
 8006070:	e00b      	b.n	800608a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	1c59      	adds	r1, r3, #1
 800607a:	6279      	str	r1, [r7, #36]	; 0x24
 800607c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	2b7f      	cmp	r3, #127	; 0x7f
 800608e:	d8f0      	bhi.n	8006072 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	627a      	str	r2, [r7, #36]	; 0x24
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	69b8      	ldr	r0, [r7, #24]
 80060a6:	f7ff fbcd 	bl	8005844 <_SendPacket>
  RECORD_END();
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	f383 8811 	msr	BASEPRI, r3
}
 80060b0:	bf00      	nop
 80060b2:	3740      	adds	r7, #64	; 0x40
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20014330 	.word	0x20014330

080060bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	; 0x30
 80060c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80060c2:	4b58      	ldr	r3, [pc, #352]	; (8006224 <SEGGER_SYSVIEW_Start+0x168>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80060c8:	f3ef 8311 	mrs	r3, BASEPRI
 80060cc:	f04f 0120 	mov.w	r1, #32
 80060d0:	f381 8811 	msr	BASEPRI, r1
 80060d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80060d6:	4b53      	ldr	r3, [pc, #332]	; (8006224 <SEGGER_SYSVIEW_Start+0x168>)
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	220a      	movs	r2, #10
 80060dc:	4952      	ldr	r1, [pc, #328]	; (8006228 <SEGGER_SYSVIEW_Start+0x16c>)
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa f886 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80060ea:	200a      	movs	r0, #10
 80060ec:	f7ff fe2a 	bl	8005d44 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060f0:	f3ef 8311 	mrs	r3, BASEPRI
 80060f4:	f04f 0120 	mov.w	r1, #32
 80060f8:	f381 8811 	msr	BASEPRI, r1
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	484b      	ldr	r0, [pc, #300]	; (800622c <SEGGER_SYSVIEW_Start+0x170>)
 8006100:	f7ff fab2 	bl	8005668 <_PreparePacket>
 8006104:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800610e:	4b45      	ldr	r3, [pc, #276]	; (8006224 <SEGGER_SYSVIEW_Start+0x168>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
 8006114:	e00b      	b.n	800612e <SEGGER_SYSVIEW_Start+0x72>
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	1c59      	adds	r1, r3, #1
 800611e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006120:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	09db      	lsrs	r3, r3, #7
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	2b7f      	cmp	r3, #127	; 0x7f
 8006132:	d8f0      	bhi.n	8006116 <SEGGER_SYSVIEW_Start+0x5a>
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800613a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
 8006148:	4b36      	ldr	r3, [pc, #216]	; (8006224 <SEGGER_SYSVIEW_Start+0x168>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	e00b      	b.n	8006168 <SEGGER_SYSVIEW_Start+0xac>
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	1c59      	adds	r1, r3, #1
 8006158:	6279      	str	r1, [r7, #36]	; 0x24
 800615a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	09db      	lsrs	r3, r3, #7
 8006166:	623b      	str	r3, [r7, #32]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b7f      	cmp	r3, #127	; 0x7f
 800616c:	d8f0      	bhi.n	8006150 <SEGGER_SYSVIEW_Start+0x94>
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	627a      	str	r2, [r7, #36]	; 0x24
 8006174:	6a3a      	ldr	r2, [r7, #32]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	4b28      	ldr	r3, [pc, #160]	; (8006224 <SEGGER_SYSVIEW_Start+0x168>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	e00b      	b.n	80061a2 <SEGGER_SYSVIEW_Start+0xe6>
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	1c59      	adds	r1, r3, #1
 8006192:	61f9      	str	r1, [r7, #28]
 8006194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	09db      	lsrs	r3, r3, #7
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b7f      	cmp	r3, #127	; 0x7f
 80061a6:	d8f0      	bhi.n	800618a <SEGGER_SYSVIEW_Start+0xce>
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	61fa      	str	r2, [r7, #28]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	e00b      	b.n	80061da <SEGGER_SYSVIEW_Start+0x11e>
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1c59      	adds	r1, r3, #1
 80061ca:	6179      	str	r1, [r7, #20]
 80061cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	09db      	lsrs	r3, r3, #7
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b7f      	cmp	r3, #127	; 0x7f
 80061de:	d8f0      	bhi.n	80061c2 <SEGGER_SYSVIEW_Start+0x106>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	617a      	str	r2, [r7, #20]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80061f0:	2218      	movs	r2, #24
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fb25 	bl	8005844 <_SendPacket>
      RECORD_END();
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006200:	4b08      	ldr	r3, [pc, #32]	; (8006224 <SEGGER_SYSVIEW_Start+0x168>)
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <SEGGER_SYSVIEW_Start+0x168>)
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800620e:	f000 f9eb 	bl	80065e8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006212:	f000 f9b1 	bl	8006578 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006216:	f000 fc83 	bl	8006b20 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800621a:	bf00      	nop
 800621c:	3730      	adds	r7, #48	; 0x30
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20014300 	.word	0x20014300
 8006228:	08007124 	.word	0x08007124
 800622c:	20014330 	.word	0x20014330

08006230 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006236:	f3ef 8311 	mrs	r3, BASEPRI
 800623a:	f04f 0120 	mov.w	r1, #32
 800623e:	f381 8811 	msr	BASEPRI, r1
 8006242:	607b      	str	r3, [r7, #4]
 8006244:	480b      	ldr	r0, [pc, #44]	; (8006274 <SEGGER_SYSVIEW_Stop+0x44>)
 8006246:	f7ff fa0f 	bl	8005668 <_PreparePacket>
 800624a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <SEGGER_SYSVIEW_Stop+0x48>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006254:	220b      	movs	r2, #11
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f7ff faf3 	bl	8005844 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <SEGGER_SYSVIEW_Stop+0x48>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f383 8811 	msr	BASEPRI, r3
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20014330 	.word	0x20014330
 8006278:	20014300 	.word	0x20014300

0800627c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	; 0x30
 8006280:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006282:	f3ef 8311 	mrs	r3, BASEPRI
 8006286:	f04f 0120 	mov.w	r1, #32
 800628a:	f381 8811 	msr	BASEPRI, r1
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	4845      	ldr	r0, [pc, #276]	; (80063a8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006292:	f7ff f9e9 	bl	8005668 <_PreparePacket>
 8006296:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a0:	4b42      	ldr	r3, [pc, #264]	; (80063ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a6:	e00b      	b.n	80062c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	09db      	lsrs	r3, r3, #7
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	2b7f      	cmp	r3, #127	; 0x7f
 80062c4:	d8f0      	bhi.n	80062a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
 80062da:	4b34      	ldr	r3, [pc, #208]	; (80063ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	e00b      	b.n	80062fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	6279      	str	r1, [r7, #36]	; 0x24
 80062ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	2b7f      	cmp	r3, #127	; 0x7f
 80062fe:	d8f0      	bhi.n	80062e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	627a      	str	r2, [r7, #36]	; 0x24
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e00b      	b.n	8006334 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	b2da      	uxtb	r2, r3
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	61f9      	str	r1, [r7, #28]
 8006326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	09db      	lsrs	r3, r3, #7
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b7f      	cmp	r3, #127	; 0x7f
 8006338:	d8f0      	bhi.n	800631c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	61fa      	str	r2, [r7, #28]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	e00b      	b.n	800636c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1c59      	adds	r1, r3, #1
 800635c:	6179      	str	r1, [r7, #20]
 800635e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	09db      	lsrs	r3, r3, #7
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b7f      	cmp	r3, #127	; 0x7f
 8006370:	d8f0      	bhi.n	8006354 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	617a      	str	r2, [r7, #20]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006382:	2218      	movs	r2, #24
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	68b8      	ldr	r0, [r7, #8]
 8006388:	f7ff fa5c 	bl	8005844 <_SendPacket>
  RECORD_END();
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800639a:	4b04      	ldr	r3, [pc, #16]	; (80063ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	4798      	blx	r3
  }
}
 80063a0:	bf00      	nop
 80063a2:	3730      	adds	r7, #48	; 0x30
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20014330 	.word	0x20014330
 80063ac:	20014300 	.word	0x20014300

080063b0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b092      	sub	sp, #72	; 0x48
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80063b8:	f3ef 8311 	mrs	r3, BASEPRI
 80063bc:	f04f 0120 	mov.w	r1, #32
 80063c0:	f381 8811 	msr	BASEPRI, r1
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	486a      	ldr	r0, [pc, #424]	; (8006570 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80063c8:	f7ff f94e 	bl	8005668 <_PreparePacket>
 80063cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	647b      	str	r3, [r7, #68]	; 0x44
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b66      	ldr	r3, [pc, #408]	; (8006574 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
 80063e2:	e00b      	b.n	80063fc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80063e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	6479      	str	r1, [r7, #68]	; 0x44
 80063ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f8:	09db      	lsrs	r3, r3, #7
 80063fa:	643b      	str	r3, [r7, #64]	; 0x40
 80063fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006400:	d8f0      	bhi.n	80063e4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	647a      	str	r2, [r7, #68]	; 0x44
 8006408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006410:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
 800641c:	e00b      	b.n	8006436 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	b2da      	uxtb	r2, r3
 8006422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006428:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	09db      	lsrs	r3, r3, #7
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	2b7f      	cmp	r3, #127	; 0x7f
 800643a:	d8f0      	bhi.n	800641e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800643c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	4619      	mov	r1, r3
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff f8b7 	bl	80055c8 <_EncodeStr>
 800645a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800645c:	2209      	movs	r2, #9
 800645e:	68f9      	ldr	r1, [r7, #12]
 8006460:	6938      	ldr	r0, [r7, #16]
 8006462:	f7ff f9ef 	bl	8005844 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b40      	ldr	r3, [pc, #256]	; (8006574 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	633b      	str	r3, [r7, #48]	; 0x30
 800647a:	e00b      	b.n	8006494 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	b2da      	uxtb	r2, r3
 8006480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006482:	1c59      	adds	r1, r3, #1
 8006484:	6379      	str	r1, [r7, #52]	; 0x34
 8006486:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	09db      	lsrs	r3, r3, #7
 8006492:	633b      	str	r3, [r7, #48]	; 0x30
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	2b7f      	cmp	r3, #127	; 0x7f
 8006498:	d8f0      	bhi.n	800647c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	637a      	str	r2, [r7, #52]	; 0x34
 80064a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b4:	e00b      	b.n	80064ce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	1c59      	adds	r1, r3, #1
 80064be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	09db      	lsrs	r3, r3, #7
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	2b7f      	cmp	r3, #127	; 0x7f
 80064d2:	d8f0      	bhi.n	80064b6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	623b      	str	r3, [r7, #32]
 80064ee:	e00b      	b.n	8006508 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	6279      	str	r1, [r7, #36]	; 0x24
 80064fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	09db      	lsrs	r3, r3, #7
 8006506:	623b      	str	r3, [r7, #32]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2b7f      	cmp	r3, #127	; 0x7f
 800650c:	d8f0      	bhi.n	80064f0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	627a      	str	r2, [r7, #36]	; 0x24
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	e00b      	b.n	8006540 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1c59      	adds	r1, r3, #1
 8006530:	61f9      	str	r1, [r7, #28]
 8006532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	09db      	lsrs	r3, r3, #7
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b7f      	cmp	r3, #127	; 0x7f
 8006544:	d8f0      	bhi.n	8006528 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	61fa      	str	r2, [r7, #28]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006556:	2215      	movs	r2, #21
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f7ff f972 	bl	8005844 <_SendPacket>
  RECORD_END();
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f383 8811 	msr	BASEPRI, r3
}
 8006566:	bf00      	nop
 8006568:	3748      	adds	r7, #72	; 0x48
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20014330 	.word	0x20014330
 8006574:	20014300 	.word	0x20014300

08006578 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800657c:	4b07      	ldr	r3, [pc, #28]	; (800659c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800658e:	4b03      	ldr	r3, [pc, #12]	; (800659c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4798      	blx	r3
  }
}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20014300 	.word	0x20014300

080065a0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065a8:	f3ef 8311 	mrs	r3, BASEPRI
 80065ac:	f04f 0120 	mov.w	r1, #32
 80065b0:	f381 8811 	msr	BASEPRI, r1
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	480b      	ldr	r0, [pc, #44]	; (80065e4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80065b8:	f7ff f856 	bl	8005668 <_PreparePacket>
 80065bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f7ff f800 	bl	80055c8 <_EncodeStr>
 80065c8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80065ca:	220e      	movs	r2, #14
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	6938      	ldr	r0, [r7, #16]
 80065d0:	f7ff f938 	bl	8005844 <_SendPacket>
  RECORD_END();
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f383 8811 	msr	BASEPRI, r3
}
 80065da:	bf00      	nop
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20014330 	.word	0x20014330

080065e8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80065ee:	4b15      	ldr	r3, [pc, #84]	; (8006644 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01a      	beq.n	800662c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d015      	beq.n	800662c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006600:	4b10      	ldr	r3, [pc, #64]	; (8006644 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4798      	blx	r3
 8006608:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800660c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800660e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	000a      	movs	r2, r1
 800661c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800661e:	4613      	mov	r3, r2
 8006620:	461a      	mov	r2, r3
 8006622:	4621      	mov	r1, r4
 8006624:	200d      	movs	r0, #13
 8006626:	f7ff fbe7 	bl	8005df8 <SEGGER_SYSVIEW_RecordU32x2>
 800662a:	e006      	b.n	800663a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4619      	mov	r1, r3
 8006632:	200c      	movs	r0, #12
 8006634:	f7ff fba4 	bl	8005d80 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bd90      	pop	{r4, r7, pc}
 8006642:	bf00      	nop
 8006644:	20014300 	.word	0x20014300
 8006648:	e0001004 	.word	0xe0001004

0800664c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006652:	f3ef 8311 	mrs	r3, BASEPRI
 8006656:	f04f 0120 	mov.w	r1, #32
 800665a:	f381 8811 	msr	BASEPRI, r1
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	4819      	ldr	r0, [pc, #100]	; (80066c8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006662:	f7ff f801 	bl	8005668 <_PreparePacket>
 8006666:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800666c:	4b17      	ldr	r3, [pc, #92]	; (80066cc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006674:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	e00b      	b.n	8006698 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	6179      	str	r1, [r7, #20]
 800668a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	09db      	lsrs	r3, r3, #7
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b7f      	cmp	r3, #127	; 0x7f
 800669c:	d8f0      	bhi.n	8006680 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	617a      	str	r2, [r7, #20]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80066ae:	2202      	movs	r2, #2
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	68b8      	ldr	r0, [r7, #8]
 80066b4:	f7ff f8c6 	bl	8005844 <_SendPacket>
  RECORD_END();
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f383 8811 	msr	BASEPRI, r3
}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20014330 	.word	0x20014330
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066d6:	f3ef 8311 	mrs	r3, BASEPRI
 80066da:	f04f 0120 	mov.w	r1, #32
 80066de:	f381 8811 	msr	BASEPRI, r1
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	4807      	ldr	r0, [pc, #28]	; (8006704 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80066e6:	f7fe ffbf 	bl	8005668 <_PreparePacket>
 80066ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80066ec:	2203      	movs	r2, #3
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6838      	ldr	r0, [r7, #0]
 80066f2:	f7ff f8a7 	bl	8005844 <_SendPacket>
  RECORD_END();
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f383 8811 	msr	BASEPRI, r3
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20014330 	.word	0x20014330

08006708 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800670e:	f3ef 8311 	mrs	r3, BASEPRI
 8006712:	f04f 0120 	mov.w	r1, #32
 8006716:	f381 8811 	msr	BASEPRI, r1
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	4807      	ldr	r0, [pc, #28]	; (800673c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800671e:	f7fe ffa3 	bl	8005668 <_PreparePacket>
 8006722:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006724:	2212      	movs	r2, #18
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6838      	ldr	r0, [r7, #0]
 800672a:	f7ff f88b 	bl	8005844 <_SendPacket>
  RECORD_END();
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f383 8811 	msr	BASEPRI, r3
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20014330 	.word	0x20014330

08006740 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006746:	f3ef 8311 	mrs	r3, BASEPRI
 800674a:	f04f 0120 	mov.w	r1, #32
 800674e:	f381 8811 	msr	BASEPRI, r1
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	4807      	ldr	r0, [pc, #28]	; (8006774 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006756:	f7fe ff87 	bl	8005668 <_PreparePacket>
 800675a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800675c:	2211      	movs	r2, #17
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6838      	ldr	r0, [r7, #0]
 8006762:	f7ff f86f 	bl	8005844 <_SendPacket>
  RECORD_END();
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f383 8811 	msr	BASEPRI, r3
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20014330 	.word	0x20014330

08006778 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006780:	f3ef 8311 	mrs	r3, BASEPRI
 8006784:	f04f 0120 	mov.w	r1, #32
 8006788:	f381 8811 	msr	BASEPRI, r1
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	4819      	ldr	r0, [pc, #100]	; (80067f4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006790:	f7fe ff6a 	bl	8005668 <_PreparePacket>
 8006794:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800679a:	4b17      	ldr	r3, [pc, #92]	; (80067f8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	e00b      	b.n	80067c6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	1c59      	adds	r1, r3, #1
 80067b6:	61f9      	str	r1, [r7, #28]
 80067b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	09db      	lsrs	r3, r3, #7
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b7f      	cmp	r3, #127	; 0x7f
 80067ca:	d8f0      	bhi.n	80067ae <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	61fa      	str	r2, [r7, #28]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80067dc:	2208      	movs	r2, #8
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	6938      	ldr	r0, [r7, #16]
 80067e2:	f7ff f82f 	bl	8005844 <_SendPacket>
  RECORD_END();
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f383 8811 	msr	BASEPRI, r3
}
 80067ec:	bf00      	nop
 80067ee:	3720      	adds	r7, #32
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20014330 	.word	0x20014330
 80067f8:	20014300 	.word	0x20014300

080067fc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006804:	f3ef 8311 	mrs	r3, BASEPRI
 8006808:	f04f 0120 	mov.w	r1, #32
 800680c:	f381 8811 	msr	BASEPRI, r1
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	4819      	ldr	r0, [pc, #100]	; (8006878 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006814:	f7fe ff28 	bl	8005668 <_PreparePacket>
 8006818:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800681e:	4b17      	ldr	r3, [pc, #92]	; (800687c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	e00b      	b.n	800684a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	b2da      	uxtb	r2, r3
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	1c59      	adds	r1, r3, #1
 800683a:	61f9      	str	r1, [r7, #28]
 800683c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	09db      	lsrs	r3, r3, #7
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b7f      	cmp	r3, #127	; 0x7f
 800684e:	d8f0      	bhi.n	8006832 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	61fa      	str	r2, [r7, #28]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006860:	2204      	movs	r2, #4
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	6938      	ldr	r0, [r7, #16]
 8006866:	f7fe ffed 	bl	8005844 <_SendPacket>
  RECORD_END();
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f383 8811 	msr	BASEPRI, r3
}
 8006870:	bf00      	nop
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20014330 	.word	0x20014330
 800687c:	20014300 	.word	0x20014300

08006880 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006888:	f3ef 8311 	mrs	r3, BASEPRI
 800688c:	f04f 0120 	mov.w	r1, #32
 8006890:	f381 8811 	msr	BASEPRI, r1
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	4819      	ldr	r0, [pc, #100]	; (80068fc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006898:	f7fe fee6 	bl	8005668 <_PreparePacket>
 800689c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068a2:	4b17      	ldr	r3, [pc, #92]	; (8006900 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	e00b      	b.n	80068ce <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	1c59      	adds	r1, r3, #1
 80068be:	61f9      	str	r1, [r7, #28]
 80068c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	09db      	lsrs	r3, r3, #7
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b7f      	cmp	r3, #127	; 0x7f
 80068d2:	d8f0      	bhi.n	80068b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	61fa      	str	r2, [r7, #28]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80068e4:	2206      	movs	r2, #6
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	6938      	ldr	r0, [r7, #16]
 80068ea:	f7fe ffab 	bl	8005844 <_SendPacket>
  RECORD_END();
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f383 8811 	msr	BASEPRI, r3
}
 80068f4:	bf00      	nop
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20014330 	.word	0x20014330
 8006900:	20014300 	.word	0x20014300

08006904 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800690e:	f3ef 8311 	mrs	r3, BASEPRI
 8006912:	f04f 0120 	mov.w	r1, #32
 8006916:	f381 8811 	msr	BASEPRI, r1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	4827      	ldr	r0, [pc, #156]	; (80069bc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800691e:	f7fe fea3 	bl	8005668 <_PreparePacket>
 8006922:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006928:	4b25      	ldr	r3, [pc, #148]	; (80069c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	623b      	str	r3, [r7, #32]
 800693a:	e00b      	b.n	8006954 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	1c59      	adds	r1, r3, #1
 8006944:	6279      	str	r1, [r7, #36]	; 0x24
 8006946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	09db      	lsrs	r3, r3, #7
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	2b7f      	cmp	r3, #127	; 0x7f
 8006958:	d8f0      	bhi.n	800693c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	627a      	str	r2, [r7, #36]	; 0x24
 8006960:	6a3a      	ldr	r2, [r7, #32]
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e00b      	b.n	800698c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	1c59      	adds	r1, r3, #1
 800697c:	61f9      	str	r1, [r7, #28]
 800697e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	09db      	lsrs	r3, r3, #7
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b7f      	cmp	r3, #127	; 0x7f
 8006990:	d8f0      	bhi.n	8006974 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	61fa      	str	r2, [r7, #28]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80069a2:	2207      	movs	r2, #7
 80069a4:	68f9      	ldr	r1, [r7, #12]
 80069a6:	6938      	ldr	r0, [r7, #16]
 80069a8:	f7fe ff4c 	bl	8005844 <_SendPacket>
  RECORD_END();
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f383 8811 	msr	BASEPRI, r3
}
 80069b2:	bf00      	nop
 80069b4:	3728      	adds	r7, #40	; 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20014330 	.word	0x20014330
 80069c0:	20014300 	.word	0x20014300

080069c4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	1ad3      	subs	r3, r2, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20014300 	.word	0x20014300

080069e4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08c      	sub	sp, #48	; 0x30
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80069ee:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d06d      	beq.n	8006ad2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80069f6:	4b39      	ldr	r3, [pc, #228]	; (8006adc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80069fc:	2300      	movs	r3, #0
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a00:	e008      	b.n	8006a14 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	3301      	adds	r3, #1
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d3f2      	bcc.n	8006a02 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006a1c:	e000      	b.n	8006a20 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006a1e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d055      	beq.n	8006ad2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a26:	f3ef 8311 	mrs	r3, BASEPRI
 8006a2a:	f04f 0120 	mov.w	r1, #32
 8006a2e:	f381 8811 	msr	BASEPRI, r1
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	482a      	ldr	r0, [pc, #168]	; (8006ae0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006a36:	f7fe fe17 	bl	8005668 <_PreparePacket>
 8006a3a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	623b      	str	r3, [r7, #32]
 8006a48:	e00b      	b.n	8006a62 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	1c59      	adds	r1, r3, #1
 8006a52:	6279      	str	r1, [r7, #36]	; 0x24
 8006a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	2b7f      	cmp	r3, #127	; 0x7f
 8006a66:	d8f0      	bhi.n	8006a4a <SEGGER_SYSVIEW_SendModule+0x66>
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	e00b      	b.n	8006a9c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	1c59      	adds	r1, r3, #1
 8006a8c:	61f9      	str	r1, [r7, #28]
 8006a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	09db      	lsrs	r3, r3, #7
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa0:	d8f0      	bhi.n	8006a84 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	61fa      	str	r2, [r7, #28]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	4619      	mov	r1, r3
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7fe fd84 	bl	80055c8 <_EncodeStr>
 8006ac0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006ac2:	2216      	movs	r2, #22
 8006ac4:	68f9      	ldr	r1, [r7, #12]
 8006ac6:	6938      	ldr	r0, [r7, #16]
 8006ac8:	f7fe febc 	bl	8005844 <_SendPacket>
      RECORD_END();
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3730      	adds	r7, #48	; 0x30
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20014328 	.word	0x20014328
 8006ae0:	20014330 	.word	0x20014330

08006ae4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00f      	beq.n	8006b12 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f2      	bne.n	8006af8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20014328 	.word	0x20014328

08006b20 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006b26:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2a:	f04f 0120 	mov.w	r1, #32
 8006b2e:	f381 8811 	msr	BASEPRI, r1
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	4817      	ldr	r0, [pc, #92]	; (8006b94 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b36:	f7fe fd97 	bl	8005668 <_PreparePacket>
 8006b3a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	e00b      	b.n	8006b64 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	1c59      	adds	r1, r3, #1
 8006b54:	6179      	str	r1, [r7, #20]
 8006b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	09db      	lsrs	r3, r3, #7
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b7f      	cmp	r3, #127	; 0x7f
 8006b68:	d8f0      	bhi.n	8006b4c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	617a      	str	r2, [r7, #20]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b7a:	221b      	movs	r2, #27
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	68b8      	ldr	r0, [r7, #8]
 8006b80:	f7fe fe60 	bl	8005844 <_SendPacket>
  RECORD_END();
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f383 8811 	msr	BASEPRI, r3
}
 8006b8a:	bf00      	nop
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20014330 	.word	0x20014330
 8006b98:	2001432c 	.word	0x2001432c

08006b9c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8006b9c:	b40f      	push	{r0, r1, r2, r3}
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8006ba4:	f107 0314 	add.w	r3, r7, #20
 8006ba8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	461a      	mov	r2, r3
 8006bae:	2100      	movs	r1, #0
 8006bb0:	6938      	ldr	r0, [r7, #16]
 8006bb2:	f7fe ffb5 	bl	8005b20 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc0:	b004      	add	sp, #16
 8006bc2:	4770      	bx	lr

08006bc4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd0:	f04f 0120 	mov.w	r1, #32
 8006bd4:	f381 8811 	msr	BASEPRI, r1
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	4827      	ldr	r0, [pc, #156]	; (8006c78 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006bdc:	f7fe fd44 	bl	8005668 <_PreparePacket>
 8006be0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006be2:	2280      	movs	r2, #128	; 0x80
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	6938      	ldr	r0, [r7, #16]
 8006be8:	f7fe fcee 	bl	80055c8 <_EncodeStr>
 8006bec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	623b      	str	r3, [r7, #32]
 8006bf6:	e00b      	b.n	8006c10 <SEGGER_SYSVIEW_Warn+0x4c>
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	6279      	str	r1, [r7, #36]	; 0x24
 8006c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	09db      	lsrs	r3, r3, #7
 8006c0e:	623b      	str	r3, [r7, #32]
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	2b7f      	cmp	r3, #127	; 0x7f
 8006c14:	d8f0      	bhi.n	8006bf8 <SEGGER_SYSVIEW_Warn+0x34>
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c1c:	6a3a      	ldr	r2, [r7, #32]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	e00b      	b.n	8006c48 <SEGGER_SYSVIEW_Warn+0x84>
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	1c59      	adds	r1, r3, #1
 8006c38:	61f9      	str	r1, [r7, #28]
 8006c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	09db      	lsrs	r3, r3, #7
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4c:	d8f0      	bhi.n	8006c30 <SEGGER_SYSVIEW_Warn+0x6c>
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	61fa      	str	r2, [r7, #28]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c5e:	221a      	movs	r2, #26
 8006c60:	68f9      	ldr	r1, [r7, #12]
 8006c62:	6938      	ldr	r0, [r7, #16]
 8006c64:	f7fe fdee 	bl	8005844 <_SendPacket>
  RECORD_END();
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f383 8811 	msr	BASEPRI, r3
}
 8006c6e:	bf00      	nop
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20014330 	.word	0x20014330

08006c7c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006c80:	4803      	ldr	r0, [pc, #12]	; (8006c90 <_cbSendSystemDesc+0x14>)
 8006c82:	f7ff fc8d 	bl	80065a0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006c86:	4803      	ldr	r0, [pc, #12]	; (8006c94 <_cbSendSystemDesc+0x18>)
 8006c88:	f7ff fc8a 	bl	80065a0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006c8c:	bf00      	nop
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	0800704c 	.word	0x0800704c
 8006c94:	08007090 	.word	0x08007090

08006c98 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <SEGGER_SYSVIEW_Conf+0x24>)
 8006ca6:	4a06      	ldr	r2, [pc, #24]	; (8006cc0 <SEGGER_SYSVIEW_Conf+0x28>)
 8006ca8:	f7fe fff8 	bl	8005c9c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006cac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006cb0:	f7ff f838 	bl	8005d24 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006cb4:	bf00      	nop
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20000018 	.word	0x20000018
 8006cbc:	08006c7d 	.word	0x08006c7d
 8006cc0:	08007130 	.word	0x08007130

08006cc4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
 8006cce:	e033      	b.n	8006d38 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006cd0:	491e      	ldr	r1, [pc, #120]	; (8006d4c <_cbSendTaskList+0x88>)
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	491a      	ldr	r1, [pc, #104]	; (8006d4c <_cbSendTaskList+0x88>)
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	3304      	adds	r3, #4
 8006cf0:	6819      	ldr	r1, [r3, #0]
 8006cf2:	4c16      	ldr	r4, [pc, #88]	; (8006d4c <_cbSendTaskList+0x88>)
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4423      	add	r3, r4
 8006d00:	3308      	adds	r3, #8
 8006d02:	681c      	ldr	r4, [r3, #0]
 8006d04:	4d11      	ldr	r5, [pc, #68]	; (8006d4c <_cbSendTaskList+0x88>)
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	442b      	add	r3, r5
 8006d12:	330c      	adds	r3, #12
 8006d14:	681d      	ldr	r5, [r3, #0]
 8006d16:	4e0d      	ldr	r6, [pc, #52]	; (8006d4c <_cbSendTaskList+0x88>)
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4433      	add	r3, r6
 8006d24:	3310      	adds	r3, #16
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	f000 f8bd 	bl	8006eac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3301      	adds	r3, #1
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <_cbSendTaskList+0x8c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3c6      	bcc.n	8006cd0 <_cbSendTaskList+0xc>
  }
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4c:	20014414 	.word	0x20014414
 8006d50:	200144b4 	.word	0x200144b4

08006d54 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006d5c:	f7fc fdb4 	bl	80038c8 <xTaskGetTickCountFromISR>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2200      	movs	r2, #0
 8006d64:	469a      	mov	sl, r3
 8006d66:	4693      	mov	fp, r2
 8006d68:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	f04f 0a00 	mov.w	sl, #0
 8006d78:	f04f 0b00 	mov.w	fp, #0
 8006d7c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006d80:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006d84:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006d88:	4652      	mov	r2, sl
 8006d8a:	465b      	mov	r3, fp
 8006d8c:	1a14      	subs	r4, r2, r0
 8006d8e:	eb63 0501 	sbc.w	r5, r3, r1
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	00ab      	lsls	r3, r5, #2
 8006d9c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006da0:	00a2      	lsls	r2, r4, #2
 8006da2:	4614      	mov	r4, r2
 8006da4:	461d      	mov	r5, r3
 8006da6:	eb14 0800 	adds.w	r8, r4, r0
 8006daa:	eb45 0901 	adc.w	r9, r5, r1
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dc2:	4690      	mov	r8, r2
 8006dc4:	4699      	mov	r9, r3
 8006dc6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006dca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006ddc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006dea:	2205      	movs	r2, #5
 8006dec:	492b      	ldr	r1, [pc, #172]	; (8006e9c <SYSVIEW_AddTask+0xc0>)
 8006dee:	68b8      	ldr	r0, [r7, #8]
 8006df0:	f000 f8a2 	bl	8006f38 <memcmp>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d04b      	beq.n	8006e92 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006dfa:	4b29      	ldr	r3, [pc, #164]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b07      	cmp	r3, #7
 8006e00:	d903      	bls.n	8006e0a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006e02:	4828      	ldr	r0, [pc, #160]	; (8006ea4 <SYSVIEW_AddTask+0xc8>)
 8006e04:	f7ff fede 	bl	8006bc4 <SEGGER_SYSVIEW_Warn>
    return;
 8006e08:	e044      	b.n	8006e94 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006e0a:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4926      	ldr	r1, [pc, #152]	; (8006ea8 <SYSVIEW_AddTask+0xcc>)
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006e1e:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4921      	ldr	r1, [pc, #132]	; (8006ea8 <SYSVIEW_AddTask+0xcc>)
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3304      	adds	r3, #4
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006e34:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	491b      	ldr	r1, [pc, #108]	; (8006ea8 <SYSVIEW_AddTask+0xcc>)
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	3308      	adds	r3, #8
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4916      	ldr	r1, [pc, #88]	; (8006ea8 <SYSVIEW_AddTask+0xcc>)
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006e60:	4b0f      	ldr	r3, [pc, #60]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4910      	ldr	r1, [pc, #64]	; (8006ea8 <SYSVIEW_AddTask+0xcc>)
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	3310      	adds	r3, #16
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <SYSVIEW_AddTask+0xc4>)
 8006e7e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f80e 	bl	8006eac <SYSVIEW_SendTaskInfo>
 8006e90:	e000      	b.n	8006e94 <SYSVIEW_AddTask+0xb8>
    return;
 8006e92:	bf00      	nop

}
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	080070a0 	.word	0x080070a0
 8006ea0:	200144b4 	.word	0x200144b4
 8006ea4:	080070a8 	.word	0x080070a8
 8006ea8:	20014414 	.word	0x20014414

08006eac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	; 0x28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006eba:	f107 0314 	add.w	r3, r7, #20
 8006ebe:	2214      	movs	r2, #20
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 f856 	bl	8006f74 <memset>
  TaskInfo.TaskID     = TaskID;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006edc:	f107 0314 	add.w	r3, r7, #20
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fa65 	bl	80063b0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006ee6:	bf00      	nop
 8006ee8:	3728      	adds	r7, #40	; 0x28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <__libc_init_array>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	4d0d      	ldr	r5, [pc, #52]	; (8006f28 <__libc_init_array+0x38>)
 8006ef4:	4c0d      	ldr	r4, [pc, #52]	; (8006f2c <__libc_init_array+0x3c>)
 8006ef6:	1b64      	subs	r4, r4, r5
 8006ef8:	10a4      	asrs	r4, r4, #2
 8006efa:	2600      	movs	r6, #0
 8006efc:	42a6      	cmp	r6, r4
 8006efe:	d109      	bne.n	8006f14 <__libc_init_array+0x24>
 8006f00:	4d0b      	ldr	r5, [pc, #44]	; (8006f30 <__libc_init_array+0x40>)
 8006f02:	4c0c      	ldr	r4, [pc, #48]	; (8006f34 <__libc_init_array+0x44>)
 8006f04:	f000 f83e 	bl	8006f84 <_init>
 8006f08:	1b64      	subs	r4, r4, r5
 8006f0a:	10a4      	asrs	r4, r4, #2
 8006f0c:	2600      	movs	r6, #0
 8006f0e:	42a6      	cmp	r6, r4
 8006f10:	d105      	bne.n	8006f1e <__libc_init_array+0x2e>
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f18:	4798      	blx	r3
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7ee      	b.n	8006efc <__libc_init_array+0xc>
 8006f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f22:	4798      	blx	r3
 8006f24:	3601      	adds	r6, #1
 8006f26:	e7f2      	b.n	8006f0e <__libc_init_array+0x1e>
 8006f28:	08007140 	.word	0x08007140
 8006f2c:	08007140 	.word	0x08007140
 8006f30:	08007140 	.word	0x08007140
 8006f34:	08007144 	.word	0x08007144

08006f38 <memcmp>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	3901      	subs	r1, #1
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4290      	cmp	r0, r2
 8006f40:	d101      	bne.n	8006f46 <memcmp+0xe>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e005      	b.n	8006f52 <memcmp+0x1a>
 8006f46:	7803      	ldrb	r3, [r0, #0]
 8006f48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d001      	beq.n	8006f54 <memcmp+0x1c>
 8006f50:	1b18      	subs	r0, r3, r4
 8006f52:	bd10      	pop	{r4, pc}
 8006f54:	3001      	adds	r0, #1
 8006f56:	e7f2      	b.n	8006f3e <memcmp+0x6>

08006f58 <memcpy>:
 8006f58:	440a      	add	r2, r1
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f60:	d100      	bne.n	8006f64 <memcpy+0xc>
 8006f62:	4770      	bx	lr
 8006f64:	b510      	push	{r4, lr}
 8006f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	d1f9      	bne.n	8006f66 <memcpy+0xe>
 8006f72:	bd10      	pop	{r4, pc}

08006f74 <memset>:
 8006f74:	4402      	add	r2, r0
 8006f76:	4603      	mov	r3, r0
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d100      	bne.n	8006f7e <memset+0xa>
 8006f7c:	4770      	bx	lr
 8006f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f82:	e7f9      	b.n	8006f78 <memset+0x4>

08006f84 <_init>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr

08006f90 <_fini>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr
