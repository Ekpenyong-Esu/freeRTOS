
queuesTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b234  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800b3e4  0800b3e4  0001b3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b964  0800b964  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b96c  0800b96c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b96c  0800b96c  0001b96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00014590  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001461c  2001461c  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8e3  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000421b  00000000  00000000  0003d99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f0  00000000  00000000  00041bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001708  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000297ec  00000000  00000000  00044bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e3db  00000000  00000000  0006e3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1750  00000000  00000000  0008c77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017decf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070bc  00000000  00000000  0017df20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b3cc 	.word	0x0800b3cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800b3cc 	.word	0x0800b3cc

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012f94 	.word	0x20012f94

08000284 <strcmp>:
 8000284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800028c:	2a01      	cmp	r2, #1
 800028e:	bf28      	it	cs
 8000290:	429a      	cmpcs	r2, r3
 8000292:	d0f7      	beq.n	8000284 <strcmp>
 8000294:	1ad0      	subs	r0, r2, r3
 8000296:	4770      	bx	lr

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <led_effect_stop>:

#include "main.h"


void led_effect_stop(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e00e      	b.n	800067e <led_effect_stop+0x2a>
	{
		xTimerStop(handle_led_timer[i],portMAX_DELAY); // We just stop the timer
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <led_effect_stop+0x3c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2200      	movs	r2, #0
 8000672:	2103      	movs	r1, #3
 8000674:	f006 fe20 	bl	80072b8 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b03      	cmp	r3, #3
 8000682:	dded      	ble.n	8000660 <led_effect_stop+0xc>
	}
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000134 	.word	0x20000134

08000694 <led_effect>:

// The led effect first stop the led effect and then start the timer depending on the number we place inside the led_effec function
void led_effect(int n )
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af02      	add	r7, sp, #8
 800069a:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 800069c:	f7ff ffda 	bl	8000654 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <led_effect+0x34>)
 80006a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80006aa:	f005 fe97 	bl	80063dc <xTaskGetTickCount>
 80006ae:	4602      	mov	r2, r0
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	4620      	mov	r0, r4
 80006bc:	f006 fdfc 	bl	80072b8 <xTimerGenericCommand>

}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	20000134 	.word	0x20000134

080006cc <turn_off_all_leds>:




void turn_off_all_leds(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,  LED_RED ,GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <turn_off_all_leds+0x38>)
 80006d8:	f002 f844 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,  LED_YELLOW,GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <turn_off_all_leds+0x38>)
 80006e4:	f002 f83e 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port,   LED_GREEN,GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <turn_off_all_leds+0x38>)
 80006f0:	f002 f838 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port,   LED_BLUE,GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4802      	ldr	r0, [pc, #8]	; (8000704 <turn_off_all_leds+0x38>)
 80006fc:	f002 f832 	bl	8002764 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021800 	.word	0x40021800

08000708 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED_RED,GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <turn_on_all_leds+0x38>)
 8000714:	f002 f826 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED_YELLOW,GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <turn_on_all_leds+0x38>)
 8000720:	f002 f820 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port,  LED_GREEN,GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <turn_on_all_leds+0x38>)
 800072c:	f002 f81a 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED_BLUE,GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	4802      	ldr	r0, [pc, #8]	; (8000740 <turn_on_all_leds+0x38>)
 8000738:	f002 f814 	bl	8002764 <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021800 	.word	0x40021800

08000744 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED_RED,GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <turn_on_odd_leds+0x38>)
 8000750:	f002 f808 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED_YELLOW,GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <turn_on_odd_leds+0x38>)
 800075c:	f002 f802 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port,  LED_GREEN,GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <turn_on_odd_leds+0x38>)
 8000768:	f001 fffc 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port,  LED_BLUE,GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <turn_on_odd_leds+0x38>)
 8000774:	f001 fff6 	bl	8002764 <HAL_GPIO_WritePin>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021800 	.word	0x40021800

08000780 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED_RED,GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <turn_on_even_leds+0x38>)
 800078c:	f001 ffea 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED_YELLOW,GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <turn_on_even_leds+0x38>)
 8000798:	f001 ffe4 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port,  LED_GREEN,GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <turn_on_even_leds+0x38>)
 80007a4:	f001 ffde 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port,  LED_BLUE,GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <turn_on_even_leds+0x38>)
 80007b0:	f001 ffd8 	bl	8002764 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021800 	.word	0x40021800

080007bc <LED_control>:




void LED_control( int value )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	for(int i = 0 ; i < 4 ; i++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	e014      	b.n	80007f4 <LED_control+0x38>
		HAL_GPIO_WritePin(LED1_GPIO_Port, (LED_RED << i), ((value >> i)& 0x1));
 80007ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	b299      	uxth	r1, r3
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fa42 f303 	asr.w	r3, r2, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <LED_control+0x48>)
 80007ea:	f001 ffbb 	bl	8002764 <HAL_GPIO_WritePin>
	for(int i = 0 ; i < 4 ; i++)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	dde7      	ble.n	80007ca <LED_control+0xe>
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021800 	.word	0x40021800

08000808 <LED_effect1>:




void LED_effect1(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <LED_effect1+0x28>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f083 0301 	eor.w	r3, r3, #1
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <LED_effect1+0x28>)
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <LED_effect1+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <LED_effect1+0x1e>
 8000820:	f7ff ff54 	bl	80006cc <turn_off_all_leds>
}
 8000824:	e001      	b.n	800082a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000826:	f7ff ff6f 	bl	8000708 <turn_on_all_leds>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000000 	.word	0x20000000

08000834 <LED_effect2>:


void LED_effect2(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <LED_effect2+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f083 0301 	eor.w	r3, r3, #1
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <LED_effect2+0x28>)
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <LED_effect2+0x28>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <LED_effect2+0x1e>
 800084c:	f7ff ff98 	bl	8000780 <turn_on_even_leds>
}
 8000850:	e001      	b.n	8000856 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000852:	f7ff ff77 	bl	8000744 <turn_on_odd_leds>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000004 	.word	0x20000004

08000860 <LED_effect3>:

void LED_effect3(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <LED_effect3+0x2c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <LED_effect3+0x2c>)
 800086c:	600a      	str	r2, [r1, #0]
 800086e:	425a      	negs	r2, r3
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	f002 0203 	and.w	r2, r2, #3
 8000878:	bf58      	it	pl
 800087a:	4253      	negpl	r3, r2
 800087c:	2201      	movs	r2, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff9a 	bl	80007bc <LED_control>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200000a8 	.word	0x200000a8

08000890 <LED_effect4>:


void LED_effect4(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <LED_effect4+0x2c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <LED_effect4+0x2c>)
 800089c:	600a      	str	r2, [r1, #0]
 800089e:	425a      	negs	r2, r3
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	f002 0203 	and.w	r2, r2, #3
 80008a8:	bf58      	it	pl
 80008aa:	4253      	negpl	r3, r2
 80008ac:	2208      	movs	r2, #8
 80008ae:	fa42 f303 	asr.w	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff82 	bl	80007bc <LED_control>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000ac 	.word	0x200000ac

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f001 fbeb 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f913 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f000 f9cf 	bl	8000c70 <MX_GPIO_Init>
  MX_RTC_Init();
 80008d2:	f000 f97d 	bl	8000bd0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80008d6:	f000 f9a1 	bl	8000c1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 80008da:	f009 fab1 	bl	8009e40 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start();

  // Task creation
  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80008de:	4b6c      	ldr	r3, [pc, #432]	; (8000a90 <main+0x1d0>)
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	2302      	movs	r3, #2
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2300      	movs	r3, #0
 80008e8:	22fa      	movs	r2, #250	; 0xfa
 80008ea:	496a      	ldr	r1, [pc, #424]	; (8000a94 <main+0x1d4>)
 80008ec:	486a      	ldr	r0, [pc, #424]	; (8000a98 <main+0x1d8>)
 80008ee:	f005 fb01 	bl	8005ef4 <xTaskCreate>
 80008f2:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00a      	beq.n	8000910 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800090c:	bf00      	nop
 800090e:	e7fe      	b.n	800090e <main+0x4e>

  status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <main+0x1dc>)
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	2302      	movs	r3, #2
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	22fa      	movs	r2, #250	; 0xfa
 800091c:	4960      	ldr	r1, [pc, #384]	; (8000aa0 <main+0x1e0>)
 800091e:	4861      	ldr	r0, [pc, #388]	; (8000aa4 <main+0x1e4>)
 8000920:	f005 fae8 	bl	8005ef4 <xTaskCreate>
 8000924:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d00a      	beq.n	8000942 <main+0x82>
        __asm volatile
 800092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000930:	f383 8811 	msr	BASEPRI, r3
 8000934:	f3bf 8f6f 	isb	sy
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	61bb      	str	r3, [r7, #24]
    }
 800093e:	bf00      	nop
 8000940:	e7fe      	b.n	8000940 <main+0x80>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000942:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <main+0x1e8>)
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	2302      	movs	r3, #2
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	22fa      	movs	r2, #250	; 0xfa
 800094e:	4957      	ldr	r1, [pc, #348]	; (8000aac <main+0x1ec>)
 8000950:	4857      	ldr	r0, [pc, #348]	; (8000ab0 <main+0x1f0>)
 8000952:	f005 facf 	bl	8005ef4 <xTaskCreate>
 8000956:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d00a      	beq.n	8000974 <main+0xb4>
        __asm volatile
 800095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	617b      	str	r3, [r7, #20]
    }
 8000970:	bf00      	nop
 8000972:	e7fe      	b.n	8000972 <main+0xb2>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000974:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <main+0x1f4>)
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	2302      	movs	r3, #2
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2300      	movs	r3, #0
 800097e:	22fa      	movs	r2, #250	; 0xfa
 8000980:	494d      	ldr	r1, [pc, #308]	; (8000ab8 <main+0x1f8>)
 8000982:	484e      	ldr	r0, [pc, #312]	; (8000abc <main+0x1fc>)
 8000984:	f005 fab6 	bl	8005ef4 <xTaskCreate>
 8000988:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d00a      	beq.n	80009a6 <main+0xe6>
        __asm volatile
 8000990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000994:	f383 8811 	msr	BASEPRI, r3
 8000998:	f3bf 8f6f 	isb	sy
 800099c:	f3bf 8f4f 	dsb	sy
 80009a0:	613b      	str	r3, [r7, #16]
    }
 80009a2:	bf00      	nop
 80009a4:	e7fe      	b.n	80009a4 <main+0xe4>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80009a6:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <main+0x200>)
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	2302      	movs	r3, #2
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	22fa      	movs	r2, #250	; 0xfa
 80009b2:	4944      	ldr	r1, [pc, #272]	; (8000ac4 <main+0x204>)
 80009b4:	4844      	ldr	r0, [pc, #272]	; (8000ac8 <main+0x208>)
 80009b6:	f005 fa9d 	bl	8005ef4 <xTaskCreate>
 80009ba:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d00a      	beq.n	80009d8 <main+0x118>
        __asm volatile
 80009c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c6:	f383 8811 	msr	BASEPRI, r3
 80009ca:	f3bf 8f6f 	isb	sy
 80009ce:	f3bf 8f4f 	dsb	sy
 80009d2:	60fb      	str	r3, [r7, #12]
    }
 80009d4:	bf00      	nop
 80009d6:	e7fe      	b.n	80009d6 <main+0x116>

  //Que creation
  q_data = xQueueCreate (10, sizeof(char));  // Que has 10 item which have sizeof char as the size
 80009d8:	2200      	movs	r2, #0
 80009da:	2101      	movs	r1, #1
 80009dc:	200a      	movs	r0, #10
 80009de:	f004 fca5 	bl	800532c <xQueueGenericCreate>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a39      	ldr	r2, [pc, #228]	; (8000acc <main+0x20c>)
 80009e6:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);				  // If Que return value is NUll, hang the data here
 80009e8:	4b38      	ldr	r3, [pc, #224]	; (8000acc <main+0x20c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10a      	bne.n	8000a06 <main+0x146>
        __asm volatile
 80009f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f4:	f383 8811 	msr	BASEPRI, r3
 80009f8:	f3bf 8f6f 	isb	sy
 80009fc:	f3bf 8f4f 	dsb	sy
 8000a00:	60bb      	str	r3, [r7, #8]
    }
 8000a02:	bf00      	nop
 8000a04:	e7fe      	b.n	8000a04 <main+0x144>

  q_print = xQueueCreate (10, sizeof(size_t));
 8000a06:	2200      	movs	r2, #0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f004 fc8e 	bl	800532c <xQueueGenericCreate>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <main+0x210>)
 8000a14:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <main+0x210>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10a      	bne.n	8000a34 <main+0x174>
        __asm volatile
 8000a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a22:	f383 8811 	msr	BASEPRI, r3
 8000a26:	f3bf 8f6f 	isb	sy
 8000a2a:	f3bf 8f4f 	dsb	sy
 8000a2e:	607b      	str	r3, [r7, #4]
    }
 8000a30:	bf00      	nop
 8000a32:	e7fe      	b.n	8000a32 <main+0x172>

  // freeRTOS software timer created for led effect
	for(int i = 0 ; i < 4 ; i++)	//Arguements 1. human readable name, 2.time in ticks 3. auto roll the timer true 4. timer id 5. call back function
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
 8000a38:	e013      	b.n	8000a62 <main+0x1a2>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <main+0x214>)
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	4613      	mov	r3, r2
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a4c:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <main+0x218>)
 8000a4e:	f006 fbd7 	bl	8007200 <xTimerCreate>
 8000a52:	4602      	mov	r2, r0
 8000a54:	4921      	ldr	r1, [pc, #132]	; (8000adc <main+0x21c>)
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)	//Arguements 1. human readable name, 2.time in ticks 3. auto roll the timer true 4. timer id 5. call back function
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	3301      	adds	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	dde8      	ble.n	8000a3a <main+0x17a>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <main+0x220>)
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a74:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <main+0x224>)
 8000a76:	f006 fbc3 	bl	8007200 <xTimerCreate>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <main+0x228>)
 8000a7e:	6013      	str	r3, [r2, #0]

  // This function that is copied from stm32f4xx_haluart.c it prepares the peripherals to receive UART interupt
  // and is called UART receive interrupt and receive uart handler the variable to store the data and the lenght of the data to receive which is one
  //the first argument is the uart we are using, the second is the userdata tha will be received the third is the byte of data
  //It is related to HAL_UART_RxCpltCallback also found in stm32f4xx_haluart.c and it is implemented in line 527 of this file
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&user_data, 1); // This is also copied from stm32f4xx_haluart.c
 8000a80:	2201      	movs	r2, #1
 8000a82:	491a      	ldr	r1, [pc, #104]	; (8000aec <main+0x22c>)
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <main+0x230>)
 8000a86:	f003 fb9c 	bl	80041c2 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000a8a:	f005 fb97 	bl	80061bc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <main+0x1ce>
 8000a90:	20000118 	.word	0x20000118
 8000a94:	0800b3e4 	.word	0x0800b3e4
 8000a98:	0800183d 	.word	0x0800183d
 8000a9c:	20000114 	.word	0x20000114
 8000aa0:	0800b3f0 	.word	0x0800b3f0
 8000aa4:	08001911 	.word	0x08001911
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	0800b3fc 	.word	0x0800b3fc
 8000ab0:	08001a2d 	.word	0x08001a2d
 8000ab4:	20000120 	.word	0x20000120
 8000ab8:	0800b408 	.word	0x0800b408
 8000abc:	08001a6d 	.word	0x08001a6d
 8000ac0:	20000124 	.word	0x20000124
 8000ac4:	0800b414 	.word	0x0800b414
 8000ac8:	08001be1 	.word	0x08001be1
 8000acc:	20000128 	.word	0x20000128
 8000ad0:	2000012c 	.word	0x2000012c
 8000ad4:	080011dd 	.word	0x080011dd
 8000ad8:	0800b420 	.word	0x0800b420
 8000adc:	20000134 	.word	0x20000134
 8000ae0:	08001125 	.word	0x08001125
 8000ae4:	0800b42c 	.word	0x0800b42c
 8000ae8:	20000144 	.word	0x20000144
 8000aec:	20000130 	.word	0x20000130
 8000af0:	200000d0 	.word	0x200000d0

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f009 fb10 	bl	800a128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <SystemClock_Config+0xd8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SystemClock_Config+0xd8>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <SystemClock_Config+0xd8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b54:	230a      	movs	r3, #10
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b60:	2301      	movs	r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b70:	2332      	movs	r3, #50	; 0x32
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fe09 	bl	8002798 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b8c:	f000 fb60 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000b9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ba2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 f86a 	bl	8002c88 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bba:	f000 fb49 	bl	8001250 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	; 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_RTC_Init+0x44>)
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <MX_RTC_Init+0x48>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_RTC_Init+0x44>)
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_RTC_Init+0x44>)
 8000be2:	227f      	movs	r2, #127	; 0x7f
 8000be4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_RTC_Init+0x44>)
 8000be8:	22ff      	movs	r2, #255	; 0xff
 8000bea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_RTC_Init+0x44>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_RTC_Init+0x44>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_RTC_Init+0x44>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_RTC_Init+0x44>)
 8000c00:	f002 fc54 	bl	80034ac <HAL_RTC_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c0a:	f000 fb21 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000b0 	.word	0x200000b0
 8000c18:	40002800 	.word	0x40002800

08000c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART1_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f003 f9d6 	bl	8004004 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f000 faf7 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000d0 	.word	0x200000d0
 8000c6c:	40011000 	.word	0x40011000

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
 8000c8a:	4bb2      	ldr	r3, [pc, #712]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4ab1      	ldr	r2, [pc, #708]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4baf      	ldr	r3, [pc, #700]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	623b      	str	r3, [r7, #32]
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	4bab      	ldr	r3, [pc, #684]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4aaa      	ldr	r2, [pc, #680]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4ba8      	ldr	r3, [pc, #672]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	4ba4      	ldr	r3, [pc, #656]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4aa3      	ldr	r2, [pc, #652]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4ba1      	ldr	r3, [pc, #644]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	61bb      	str	r3, [r7, #24]
 8000cd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	4b9d      	ldr	r3, [pc, #628]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a9c      	ldr	r2, [pc, #624]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b9a      	ldr	r3, [pc, #616]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b96      	ldr	r3, [pc, #600]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a95      	ldr	r2, [pc, #596]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b93      	ldr	r3, [pc, #588]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b8f      	ldr	r3, [pc, #572]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a8e      	ldr	r2, [pc, #568]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b8c      	ldr	r3, [pc, #560]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b88      	ldr	r3, [pc, #544]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a87      	ldr	r2, [pc, #540]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b85      	ldr	r3, [pc, #532]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a80      	ldr	r2, [pc, #512]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b7e      	ldr	r3, [pc, #504]	; (8000f54 <MX_GPIO_Init+0x2e4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2116      	movs	r1, #22
 8000d6a:	487b      	ldr	r0, [pc, #492]	; (8000f58 <MX_GPIO_Init+0x2e8>)
 8000d6c:	f001 fcfa 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	4879      	ldr	r0, [pc, #484]	; (8000f5c <MX_GPIO_Init+0x2ec>)
 8000d76:	f001 fcf5 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d80:	4877      	ldr	r0, [pc, #476]	; (8000f60 <MX_GPIO_Init+0x2f0>)
 8000d82:	f001 fcef 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000d8c:	4875      	ldr	r0, [pc, #468]	; (8000f64 <MX_GPIO_Init+0x2f4>)
 8000d8e:	f001 fce9 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin PF3
                           PF4 A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|GPIO_PIN_3
 8000d92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da4:	230c      	movs	r3, #12
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	486e      	ldr	r0, [pc, #440]	; (8000f68 <MX_GPIO_Init+0x2f8>)
 8000db0:	f001 fb2c 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000db4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4865      	ldr	r0, [pc, #404]	; (8000f68 <MX_GPIO_Init+0x2f8>)
 8000dd2:	f001 fb1b 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000de8:	230e      	movs	r3, #14
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	485d      	ldr	r0, [pc, #372]	; (8000f68 <MX_GPIO_Init+0x2f8>)
 8000df4:	f001 fb0a 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4851      	ldr	r0, [pc, #324]	; (8000f58 <MX_GPIO_Init+0x2e8>)
 8000e14:	f001 fafa 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e18:	2316      	movs	r3, #22
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	484a      	ldr	r0, [pc, #296]	; (8000f58 <MX_GPIO_Init+0x2e8>)
 8000e30:	f001 faec 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e34:	f248 0307 	movw	r3, #32775	; 0x8007
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4844      	ldr	r0, [pc, #272]	; (8000f5c <MX_GPIO_Init+0x2ec>)
 8000e4c:	f001 fade 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e50:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e62:	230e      	movs	r3, #14
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	483b      	ldr	r0, [pc, #236]	; (8000f5c <MX_GPIO_Init+0x2ec>)
 8000e6e:	f001 facd 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4834      	ldr	r0, [pc, #208]	; (8000f5c <MX_GPIO_Init+0x2ec>)
 8000e8a:	f001 fabf 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e8e:	2320      	movs	r3, #32
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482d      	ldr	r0, [pc, #180]	; (8000f58 <MX_GPIO_Init+0x2e8>)
 8000ea4:	f001 fab2 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eb8:	2309      	movs	r3, #9
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	482a      	ldr	r0, [pc, #168]	; (8000f6c <MX_GPIO_Init+0x2fc>)
 8000ec4:	f001 faa2 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4824      	ldr	r0, [pc, #144]	; (8000f6c <MX_GPIO_Init+0x2fc>)
 8000edc:	f001 fa96 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000ee0:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4819      	ldr	r0, [pc, #100]	; (8000f64 <MX_GPIO_Init+0x2f4>)
 8000efe:	f001 fa85 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000f02:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f14:	230c      	movs	r3, #12
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <MX_GPIO_Init+0x300>)
 8000f20:	f001 fa74 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f24:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f36:	230e      	movs	r3, #14
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <MX_GPIO_Init+0x2fc>)
 8000f42:	f001 fa63 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000f46:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f50:	e010      	b.n	8000f74 <MX_GPIO_Init+0x304>
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40021400 	.word	0x40021400
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4862      	ldr	r0, [pc, #392]	; (8001110 <MX_GPIO_Init+0x4a0>)
 8000f88:	f001 fa40 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	485b      	ldr	r0, [pc, #364]	; (8001110 <MX_GPIO_Init+0x4a0>)
 8000fa2:	f001 fa33 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000fa6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fb8:	230c      	movs	r3, #12
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4854      	ldr	r0, [pc, #336]	; (8001114 <MX_GPIO_Init+0x4a4>)
 8000fc4:	f001 fa22 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	484d      	ldr	r0, [pc, #308]	; (8001114 <MX_GPIO_Init+0x4a4>)
 8000fde:	f001 fa15 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000fe2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4846      	ldr	r0, [pc, #280]	; (8001114 <MX_GPIO_Init+0x4a4>)
 8000ffc:	f001 fa06 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 8001000:	23c0      	movs	r3, #192	; 0xc0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001010:	230e      	movs	r3, #14
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	483f      	ldr	r0, [pc, #252]	; (8001118 <MX_GPIO_Init+0x4a8>)
 800101c:	f001 f9f6 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001020:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001032:	230e      	movs	r3, #14
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4837      	ldr	r0, [pc, #220]	; (800111c <MX_GPIO_Init+0x4ac>)
 800103e:	f001 f9e5 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	2312      	movs	r3, #18
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001054:	2304      	movs	r3, #4
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <MX_GPIO_Init+0x4ac>)
 8001060:	f001 f9d4 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106a:	2312      	movs	r3, #18
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001076:	2304      	movs	r3, #4
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <MX_GPIO_Init+0x4b0>)
 8001082:	f001 f9c3 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001086:	2348      	movs	r3, #72	; 0x48
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001096:	230e      	movs	r3, #14
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <MX_GPIO_Init+0x4a4>)
 80010a2:	f001 f9b3 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 80010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010b8:	2309      	movs	r3, #9
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4815      	ldr	r0, [pc, #84]	; (8001118 <MX_GPIO_Init+0x4a8>)
 80010c4:	f001 f9a2 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LD3_Pin|LD4_Pin;
 80010c8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_GPIO_Init+0x4a8>)
 80010e2:	f001 f993 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010e6:	2360      	movs	r3, #96	; 0x60
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f6:	230c      	movs	r3, #12
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_GPIO_Init+0x4a0>)
 8001102:	f001 f983 	bl	800240c <HAL_GPIO_Init>

}
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	; 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020400 	.word	0x40020400
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021800 	.word	0x40021800
 800111c:	40020800 	.word	0x40020800
 8001120:	40020000 	.word	0x40020000

08001124 <rtc_report_callback>:


void rtc_report_callback( TimerHandle_t xTimer )
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 800112c:	f000 f896 	bl	800125c <show_time_date_itm>

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
///* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // this is Uart receive call back copied from
{														  // from stm32f4xx_hal_uart.c
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]

	uint8_t dummy;

	for (uint32_t i = 0; i < 4000; i++);
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e002      	b.n	800114c <HAL_UART_RxCpltCallback+0x14>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001152:	d3f8      	bcc.n	8001146 <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))       // This check if que is is not full and it returns pdTrue if is True
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_UART_RxCpltCallback+0x94>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fe3e 	bl	8005dda <xQueueIsQueueFullFromISR>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <HAL_UART_RxCpltCallback+0x3c>
	{							// Note since the function reurns true if full or false if not full i can write if (xQueueIsQueueFullFromISR(q_data)==pdFALSE
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL); // This send data from ISR to the back of the que we created
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_UART_RxCpltCallback+0x94>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	2200      	movs	r2, #0
 800116c:	4918      	ldr	r1, [pc, #96]	; (80011d0 <HAL_UART_RxCpltCallback+0x98>)
 800116e:	f004 fa8b 	bl	8005688 <xQueueGenericSendFromISR>
 8001172:	e012      	b.n	800119a <HAL_UART_RxCpltCallback+0x62>
	}
	else
	{
		if(user_data == '\n')
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_UART_RxCpltCallback+0x98>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b0a      	cmp	r3, #10
 800117a:	d10e      	bne.n	800119a <HAL_UART_RxCpltCallback+0x62>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);   // if the que is full, we use receive from ISR to delete the last thing or byte from the queue
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_UART_RxCpltCallback+0x94>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f107 010b 	add.w	r1, r7, #11
 8001184:	2200      	movs	r2, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fc4c 	bl	8005a24 <xQueueReceiveFromISR>
																// and place it in a dummy variable

			xQueueSendFromISR(q_data ,(void*)&user_data , NULL); // After deleting, we now send it to the back of the queue
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_UART_RxCpltCallback+0x94>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	2200      	movs	r2, #0
 8001194:	490e      	ldr	r1, [pc, #56]	; (80011d0 <HAL_UART_RxCpltCallback+0x98>)
 8001196:	f004 fa77 	bl	8005688 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' )
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_UART_RxCpltCallback+0x98>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b0a      	cmp	r3, #10
 80011a0:	d10a      	bne.n	80011b8 <HAL_UART_RxCpltCallback+0x80>
	{
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);   // Notify command handle task that was part of the task we created
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_UART_RxCpltCallback+0x9c>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2300      	movs	r3, #0
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	f005 fe64 	bl	8006e80 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&user_data, 1);  //enable the huart again note that we are using uart 1
 80011b8:	2201      	movs	r2, #1
 80011ba:	4905      	ldr	r1, [pc, #20]	; (80011d0 <HAL_UART_RxCpltCallback+0x98>)
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <HAL_UART_RxCpltCallback+0xa0>)
 80011be:	f003 f800 	bl	80041c2 <HAL_UART_Receive_IT>
															// and the task is implemented in task_handler.c

}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000128 	.word	0x20000128
 80011d0:	20000130 	.word	0x20000130
 80011d4:	20000114 	.word	0x20000114
 80011d8:	200000d0 	.word	0x200000d0

080011dc <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	int id;
	id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f006 fb70 	bl	80078ca <pvTimerGetTimerID>
 80011ea:	4603      	mov	r3, r0
 80011ec:	60fb      	str	r3, [r7, #12]

	switch(id)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d816      	bhi.n	8001224 <led_effect_callback+0x48>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <led_effect_callback+0x20>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	08001213 	.word	0x08001213
 8001204:	08001219 	.word	0x08001219
 8001208:	0800121f 	.word	0x0800121f
	{
	case 1 :
		LED_effect1();
 800120c:	f7ff fafc 	bl	8000808 <LED_effect1>
		break;
 8001210:	e008      	b.n	8001224 <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8001212:	f7ff fb0f 	bl	8000834 <LED_effect2>
		break;
 8001216:	e005      	b.n	8001224 <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8001218:	f7ff fb22 	bl	8000860 <LED_effect3>
		break;
 800121c:	e002      	b.n	8001224 <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 800121e:	f7ff fb37 	bl	8000890 <LED_effect4>
	}

}
 8001222:	e7ff      	b.n	8001224 <led_effect_callback+0x48>
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 ff51 	bl	80020e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40001000 	.word	0x40001000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <show_time_date_itm>:
#include "main.h"



void show_time_date_itm(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	2204      	movs	r2, #4
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f008 ff5c 	bl	800a128 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2214      	movs	r2, #20
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f008 ff56 	bl	800a128 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <show_time_date_itm+0x7c>)
 8001284:	f002 fa22 	bl	80036cc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4811      	ldr	r0, [pc, #68]	; (80012d8 <show_time_date_itm+0x7c>)
 8001292:	f002 fafd 	bl	8003890 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <show_time_date_itm+0x44>
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <show_time_date_itm+0x80>)
 800129e:	e000      	b.n	80012a2 <show_time_date_itm+0x46>
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <show_time_date_itm+0x84>)
 80012a2:	61fb      	str	r3, [r7, #28]

	printf("%02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes,rtc_time.Seconds, format);
 80012a4:	793b      	ldrb	r3, [r7, #4]
 80012a6:	4619      	mov	r1, r3
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	461a      	mov	r2, r3
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	4618      	mov	r0, r3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4603      	mov	r3, r0
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <show_time_date_itm+0x88>)
 80012b8:	f008 ff3e 	bl	800a138 <iprintf>
	printf("\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date,2000 + rtc_date.Year);
 80012bc:	7e7b      	ldrb	r3, [r7, #25]
 80012be:	4619      	mov	r1, r3
 80012c0:	7ebb      	ldrb	r3, [r7, #26]
 80012c2:	461a      	mov	r2, r3
 80012c4:	7efb      	ldrb	r3, [r7, #27]
 80012c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <show_time_date_itm+0x8c>)
 80012cc:	f008 ff34 	bl	800a138 <iprintf>

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200000b0 	.word	0x200000b0
 80012dc:	0800b440 	.word	0x0800b440
 80012e0:	0800b444 	.word	0x0800b444
 80012e4:	0800b448 	.word	0x0800b448
 80012e8:	0800b45c 	.word	0x0800b45c

080012ec <show_time_date>:



void show_time_date(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2204      	movs	r2, #4
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f008 ff14 	bl	800a128 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2214      	movs	r2, #20
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f008 ff0e 	bl	800a128 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4821      	ldr	r0, [pc, #132]	; (8001398 <show_time_date+0xac>)
 8001314:	f002 f9da 	bl	80036cc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <show_time_date+0xac>)
 8001322:	f002 fab5 	bl	8003890 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <show_time_date+0x44>
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <show_time_date+0xb0>)
 800132e:	e000      	b.n	8001332 <show_time_date+0x46>
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <show_time_date+0xb4>)
 8001332:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	797b      	ldrb	r3, [r7, #5]
 800133a:	461a      	mov	r2, r3
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	4619      	mov	r1, r3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	9101      	str	r1, [sp, #4]
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	4603      	mov	r3, r0
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <show_time_date+0xb8>)
 800134c:	4916      	ldr	r1, [pc, #88]	; (80013a8 <show_time_date+0xbc>)
 800134e:	4817      	ldr	r0, [pc, #92]	; (80013ac <show_time_date+0xc0>)
 8001350:	f008 ff0a 	bl	800a168 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <show_time_date+0xc4>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	f04f 32ff 	mov.w	r2, #4294967295
 800135e:	4915      	ldr	r1, [pc, #84]	; (80013b4 <show_time_date+0xc8>)
 8001360:	f004 f86c 	bl	800543c <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001364:	7e7b      	ldrb	r3, [r7, #25]
 8001366:	461a      	mov	r2, r3
 8001368:	7ebb      	ldrb	r3, [r7, #26]
 800136a:	4619      	mov	r1, r3
 800136c:	7efb      	ldrb	r3, [r7, #27]
 800136e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	460b      	mov	r3, r1
 8001376:	4910      	ldr	r1, [pc, #64]	; (80013b8 <show_time_date+0xcc>)
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <show_time_date+0xd0>)
 800137a:	f008 fef5 	bl	800a168 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <show_time_date+0xc4>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	490d      	ldr	r1, [pc, #52]	; (80013c0 <show_time_date+0xd4>)
 800138a:	f004 f857 	bl	800543c <xQueueGenericSend>
}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200000b0 	.word	0x200000b0
 800139c:	0800b440 	.word	0x0800b440
 80013a0:	0800b444 	.word	0x0800b444
 80013a4:	0800b46c 	.word	0x0800b46c
 80013a8:	0800b480 	.word	0x0800b480
 80013ac:	20000148 	.word	0x20000148
 80013b0:	2000012c 	.word	0x2000012c
 80013b4:	20000008 	.word	0x20000008
 80013b8:	0800b45c 	.word	0x0800b45c
 80013bc:	20000170 	.word	0x20000170
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <rtc_configure_time>:



void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 80013de:	2200      	movs	r2, #0
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <rtc_configure_time+0x2c>)
 80013e4:	f002 f8d8 	bl	8003598 <HAL_RTC_SetTime>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200000b0 	.word	0x200000b0

080013f4 <rtc_configure_date>:



void rtc_configure_date(RTC_DateTypeDef *date)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <rtc_configure_date+0x1c>)
 8001402:	f002 f9c1 	bl	8003788 <HAL_RTC_SetDate>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200000b0 	.word	0x200000b0

08001414 <validate_rtc_information>:



int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	if (time)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00d      	beq.n	8001440 <validate_rtc_information+0x2c>
	{
		if ((time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d807      	bhi.n	800143c <validate_rtc_information+0x28>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	2b3b      	cmp	r3, #59	; 0x3b
 8001432:	d803      	bhi.n	800143c <validate_rtc_information+0x28>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	2b3b      	cmp	r3, #59	; 0x3b
 800143a:	d901      	bls.n	8001440 <validate_rtc_information+0x2c>
			return 1;
 800143c:	2301      	movs	r3, #1
 800143e:	e015      	b.n	800146c <validate_rtc_information+0x58>
	}

	if (date)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d011      	beq.n	800146a <validate_rtc_information+0x56>
	{
		if ((date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	789b      	ldrb	r3, [r3, #2]
 800144a:	2b1f      	cmp	r3, #31
 800144c:	d80b      	bhi.n	8001466 <validate_rtc_information+0x52>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b07      	cmp	r3, #7
 8001454:	d807      	bhi.n	8001466 <validate_rtc_information+0x52>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	78db      	ldrb	r3, [r3, #3]
 800145a:	2b63      	cmp	r3, #99	; 0x63
 800145c:	d803      	bhi.n	8001466 <validate_rtc_information+0x52>
				|| (date->Month > 12))
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d901      	bls.n	800146a <validate_rtc_information+0x56>
			return 1;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <validate_rtc_information+0x58>
	}

	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2230      	movs	r2, #48	; 0x30
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 fe25 	bl	800a128 <memset>
  if(hrtc->Instance==RTC)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_RTC_MspInit+0x4c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d111      	bne.n	800150c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014e8:	2320      	movs	r3, #32
 80014ea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fe18 	bl	800312c <HAL_RCCEx_PeriphCLKConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001502:	f7ff fea5 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HAL_RTC_MspInit+0x50>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3738      	adds	r7, #56	; 0x38
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40002800 	.word	0x40002800
 8001518:	42470e3c 	.word	0x42470e3c

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_UART_MspInit+0x94>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d134      	bne.n	80015a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_UART_MspInit+0x98>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001576:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001588:	2307      	movs	r3, #7
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4809      	ldr	r0, [pc, #36]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001594:	f000 ff3a 	bl	800240c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2106      	movs	r1, #6
 800159c:	2025      	movs	r0, #37	; 0x25
 800159e:	f000 fe79 	bl	8002294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015a2:	2025      	movs	r0, #37	; 0x25
 80015a4:	f000 fe92 	bl	80022cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_InitTick+0xe4>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <HAL_InitTick+0xe4>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_InitTick+0xe4>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015e8:	f107 0210 	add.w	r2, r7, #16
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fd68 	bl	80030c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001602:	f001 fd39 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8001606:	6378      	str	r0, [r7, #52]	; 0x34
 8001608:	e004      	b.n	8001614 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800160a:	f001 fd35 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 800160e:	4603      	mov	r3, r0
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <HAL_InitTick+0xe8>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0c9b      	lsrs	r3, r3, #18
 800161e:	3b01      	subs	r3, #1
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_InitTick+0xec>)
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <HAL_InitTick+0xf0>)
 8001626:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_InitTick+0xec>)
 800162a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800162e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_InitTick+0xec>)
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001634:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_InitTick+0xec>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_InitTick+0xec>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_InitTick+0xec>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001648:	4817      	ldr	r0, [pc, #92]	; (80016a8 <HAL_InitTick+0xec>)
 800164a:	f002 fa2d 	bl	8003aa8 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001658:	2b00      	cmp	r3, #0
 800165a:	d11b      	bne.n	8001694 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <HAL_InitTick+0xec>)
 800165e:	f002 fa7d 	bl	8003b5c <HAL_TIM_Base_Start_IT>
 8001662:	4603      	mov	r3, r0
 8001664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800166c:	2b00      	cmp	r3, #0
 800166e:	d111      	bne.n	8001694 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001670:	2036      	movs	r0, #54	; 0x36
 8001672:	f000 fe2b 	bl	80022cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d808      	bhi.n	800168e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2036      	movs	r0, #54	; 0x36
 8001682:	f000 fe07 	bl	8002294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_InitTick+0xf4>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e002      	b.n	8001694 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001698:	4618      	mov	r0, r3
 800169a:	3738      	adds	r7, #56	; 0x38
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	431bde83 	.word	0x431bde83
 80016a8:	20000198 	.word	0x20000198
 80016ac:	40001000 	.word	0x40001000
 80016b0:	20000018 	.word	0x20000018

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <USART1_IRQHandler+0x10>)
 80016e6:	f002 fd9d 	bl	8004224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000d0 	.word	0x200000d0

080016f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM6_DAC_IRQHandler+0x10>)
 80016fa:	f002 fa9f 	bl	8003c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000198 	.word	0x20000198

08001708 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e00a      	b.n	8001730 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800171a:	f3af 8000 	nop.w
 800171e:	4601      	mov	r1, r0
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbf0      	blt.n	800171a <_read+0x12>
  }

  return len;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176a:	605a      	str	r2, [r3, #4]
  return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_isatty>:

int _isatty(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f008 fc5c 	bl	800a098 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20030000 	.word	0x20030000
 800180c:	00000400 	.word	0x00000400
 8001810:	200001e0 	.word	0x200001e0
 8001814:	20014620 	.word	0x20014620

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <menu_task>:
const char *msg_inv = "////Invalid option////\n";   // This shows invalid option



void menu_task(void *param)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;

	command_t *cmd;
	int option;

	const char* msg_menu = "\n========================\n"   // These are string literals and string literals are constants
 8001844:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <menu_task+0xbc>)
 8001846:	60bb      	str	r3, [r7, #8]
							"Exit          ----> 2\n"
							"Enter your choice here : ";

	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);    // here we send the address of the message to the queue print
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <menu_task+0xc0>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	2300      	movs	r3, #0
 8001852:	f04f 32ff 	mov.w	r2, #4294967295
 8001856:	f003 fdf1 	bl	800543c <xQueueGenericSend>

		//This wait for menu commands from process command
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);   // Wait for notification from from xTaskNotify from process command and the wait is idefinitely
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	f04f 32ff 	mov.w	r2, #4294967295
 8001862:	9200      	str	r2, [sp, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2000      	movs	r0, #0
 800186a:	f005 f98f 	bl	8006b8c <xTaskGenericNotifyWait>
														// and store the value in cmd_addr

		cmd = (command_t*)cmd_addr;                      // We capture the address of the cmd_addr by cmd
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)								// if len in the struct is 1 with respect to the menu
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d133      	bne.n	80018e2 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;				// here we convert ascii to number by subtracting it by 48
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3b30      	subs	r3, #48	; 0x30
 8001880:	613b      	str	r3, [r7, #16]

			switch(option)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d035      	beq.n	80018f4 <menu_task+0xb8>
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b02      	cmp	r3, #2
 800188c:	dc20      	bgt.n	80018d0 <menu_task+0x94>
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <menu_task+0x60>
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d00d      	beq.n	80018b6 <menu_task+0x7a>
 800189a:	e019      	b.n	80018d0 <menu_task+0x94>
			{

			case 0:
				curr_state = sLedEffect;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <menu_task+0xc4>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <menu_task+0xc8>)
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	f005 f9f4 	bl	8006c9c <xTaskGenericNotify>
				break;
 80018b4:	e01f      	b.n	80018f6 <menu_task+0xba>

			case 1:
				curr_state = sRtcMenu;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <menu_task+0xc4>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <menu_task+0xcc>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	f005 f9e7 	bl	8006c9c <xTaskGenericNotify>
				break;
 80018ce:	e012      	b.n	80018f6 <menu_task+0xba>

			case 2: /*implement exit */
			break;

			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <menu_task+0xc0>)
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	490c      	ldr	r1, [pc, #48]	; (800190c <menu_task+0xd0>)
 80018dc:	f003 fdae 	bl	800543c <xQueueGenericSend>
				continue;
 80018e0:	e009      	b.n	80018f6 <menu_task+0xba>

		}
		else         // If len in the cmd is not 1 with respect to the menu text
		{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <menu_task+0xc0>)
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <menu_task+0xd0>)
 80018ee:	f003 fda5 	bl	800543c <xQueueGenericSend>

			continue;                     // Continue to wait
 80018f2:	e000      	b.n	80018f6 <menu_task+0xba>
			break;
 80018f4:	bf00      	nop
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);    // here we send the address of the message to the queue print
 80018f6:	e7a7      	b.n	8001848 <menu_task+0xc>
 80018f8:	0800b4b0 	.word	0x0800b4b0
 80018fc:	2000012c 	.word	0x2000012c
 8001900:	20000131 	.word	0x20000131
 8001904:	20000120 	.word	0x20000120
 8001908:	20000124 	.word	0x20000124
 800190c:	20000014 	.word	0x20000014

08001910 <cmd_handler_task>:
	}
}


void cmd_handler_task(void *param)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
	command_t  cmd;         // Command_t is define in main.h

	while(1)
	{
		/*Implement notify wait to receive notification from Uart receive call back in main.c line 527*/
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // portMAX_DELAY which is define in freeRTOSCONFIG.h means to wait indefinitely
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2000      	movs	r0, #0
 8001926:	f005 f931 	bl	8006b8c <xTaskGenericNotifyWait>
 800192a:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d1f2      	bne.n	8001918 <cmd_handler_task+0x8>
		{
		/*process the user data(command) stored in input data queue */
		process_command(&cmd); // here we send the address of the struct stored in input data queue to process command task
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f802 	bl	8001940 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // portMAX_DELAY which is define in freeRTOSCONFIG.h means to wait indefinitely
 800193c:	e7ec      	b.n	8001918 <cmd_handler_task+0x8>
	...

08001940 <process_command>:
	}
}


void process_command(command_t *cmd)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f835 	bl	80019b8 <extract_command>

	switch(curr_state)
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <process_command+0x68>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b05      	cmp	r3, #5
 8001954:	dc24      	bgt.n	80019a0 <process_command+0x60>
 8001956:	2b02      	cmp	r3, #2
 8001958:	da18      	bge.n	800198c <process_command+0x4c>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <process_command+0x24>
 800195e:	2b01      	cmp	r3, #1
 8001960:	d00a      	beq.n	8001978 <process_command+0x38>
		xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001962:	e01d      	b.n	80019a0 <process_command+0x60>
		xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <process_command+0x6c>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	2300      	movs	r3, #0
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2303      	movs	r3, #3
 8001970:	2100      	movs	r1, #0
 8001972:	f005 f993 	bl	8006c9c <xTaskGenericNotify>
		break;
 8001976:	e013      	b.n	80019a0 <process_command+0x60>
		xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <process_command+0x70>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	2300      	movs	r3, #0
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2303      	movs	r3, #3
 8001984:	2100      	movs	r1, #0
 8001986:	f005 f989 	bl	8006c9c <xTaskGenericNotify>
		break;
 800198a:	e009      	b.n	80019a0 <process_command+0x60>
		xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <process_command+0x74>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2303      	movs	r3, #3
 8001998:	2100      	movs	r1, #0
 800199a:	f005 f97f 	bl	8006c9c <xTaskGenericNotify>
		break;
 800199e:	bf00      	nop
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000131 	.word	0x20000131
 80019ac:	20000118 	.word	0x20000118
 80019b0:	20000120 	.word	0x20000120
 80019b4:	20000124 	.word	0x20000124

080019b8 <extract_command>:


int extract_command(command_t *cmd)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );   // check if there is a message in the queue
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <extract_command+0x70>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 f8da 	bl	8005b7e <uxQueueMessagesWaiting>
 80019ca:	4603      	mov	r3, r0
 80019cc:	613b      	str	r3, [r7, #16]

	if(!status)									// if no message return -1
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <extract_command+0x22>
	{
		return -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	e022      	b.n	8001a20 <extract_command+0x68>
	}

	uint8_t i =0;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);						// If there is message store it in the item which is a place holder
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <extract_command+0x70>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2200      	movs	r2, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 ff0b 	bl	8005804 <xQueueReceive>
 80019ee:	6138      	str	r0, [r7, #16]

		if(status == pdTRUE)										// if data has been succesfully stored in status
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d106      	bne.n	8001a04 <extract_command+0x4c>
		{
			cmd->payload[i++] = item;								// populate the cmd which is an object created from struct command_t
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	75fa      	strb	r2, [r7, #23]
 80019fc:	461a      	mov	r2, r3
 80019fe:	7bf9      	ldrb	r1, [r7, #15]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	5499      	strb	r1, [r3, r2]
		}

	}while(item != '\n');											// continue this until you encounter nextline character \n
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b0a      	cmp	r3, #10
 8001a08:	d1e9      	bne.n	80019de <extract_command+0x26>


	cmd->payload[i-1] = '\0';										// store null character at the place of \n
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	2100      	movs	r1, #0
 8001a12:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;                                                 /*save  length of the command excluding null char */
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60da      	str	r2, [r3, #12]

	return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000128 	.word	0x20000128

08001a2c <print_task>:




void print_task(void *param)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY); //it receve a data from the queue. it blocks when there is no message
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <print_task+0x38>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f107 010c 	add.w	r1, r7, #12
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fedf 	bl	8005804 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001a46:	68fc      	ldr	r4, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fc24 	bl	8000298 <strlen>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <print_task+0x3c>)
 8001a5c:	f002 fb1f 	bl	800409e <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY); //it receve a data from the queue. it blocks when there is no message
 8001a60:	e7e8      	b.n	8001a34 <print_task+0x8>
 8001a62:	bf00      	nop
 8001a64:	2000012c 	.word	0x2000012c
 8001a68:	200000d0 	.word	0x200000d0

08001a6c <led_task>:
	}
}


void led_task(void *param)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	const char *msg_led = "========================\n"
 8001a74:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <led_task+0x104>)
 8001a76:	60fb      	str	r3, [r7, #12]
						   "(none, e1, e2, e3, e4 )\n"
						   "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) from menu task*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2000      	movs	r0, #0
 8001a86:	f005 f881 	bl	8006b8c <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <led_task+0x108>)
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f107 010c 	add.w	r1, r7, #12
 8001a92:	2300      	movs	r3, #0
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	f003 fcd0 	bl	800543c <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	9200      	str	r2, [sp, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f005 f86e 	bl	8006b8c <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d843      	bhi.n	8001b44 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	492e      	ldr	r1, [pc, #184]	; (8001b78 <led_task+0x10c>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fbdf 	bl	8000284 <strcmp>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <led_task+0x66>
				led_effect_stop();
 8001acc:	f7fe fdc2 	bl	8000654 <led_effect_stop>
 8001ad0:	e040      	b.n	8001b54 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	4929      	ldr	r1, [pc, #164]	; (8001b7c <led_task+0x110>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fbd4 	bl	8000284 <strcmp>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <led_task+0x7e>
				led_effect(1);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7fe fdd6 	bl	8000694 <led_effect>
 8001ae8:	e034      	b.n	8001b54 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	4924      	ldr	r1, [pc, #144]	; (8001b80 <led_task+0x114>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fbc8 	bl	8000284 <strcmp>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <led_task+0x96>
				led_effect(2);
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7fe fdca 	bl	8000694 <led_effect>
 8001b00:	e028      	b.n	8001b54 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	491f      	ldr	r1, [pc, #124]	; (8001b84 <led_task+0x118>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fbbc 	bl	8000284 <strcmp>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <led_task+0xae>
				led_effect(3);
 8001b12:	2003      	movs	r0, #3
 8001b14:	f7fe fdbe 	bl	8000694 <led_effect>
 8001b18:	e01c      	b.n	8001b54 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	491a      	ldr	r1, [pc, #104]	; (8001b88 <led_task+0x11c>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fbb0 	bl	8000284 <strcmp>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <led_task+0xc6>
				led_effect(4);
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f7fe fdb2 	bl	8000694 <led_effect>
 8001b30:	e010      	b.n	8001b54 <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <led_task+0x108>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	4913      	ldr	r1, [pc, #76]	; (8001b8c <led_task+0x120>)
 8001b3e:	f003 fc7d 	bl	800543c <xQueueGenericSend>
 8001b42:	e007      	b.n	8001b54 <led_task+0xe8>
		}
		else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <led_task+0x108>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4e:	490f      	ldr	r1, [pc, #60]	; (8001b8c <led_task+0x120>)
 8001b50:	f003 fc74 	bl	800543c <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <led_task+0x124>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <led_task+0x128>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	f005 f898 	bl	8006c9c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b6c:	e784      	b.n	8001a78 <led_task+0xc>
 8001b6e:	bf00      	nop
 8001b70:	0800b558 	.word	0x0800b558
 8001b74:	2000012c 	.word	0x2000012c
 8001b78:	0800b5d4 	.word	0x0800b5d4
 8001b7c:	0800b5dc 	.word	0x0800b5dc
 8001b80:	0800b5e0 	.word	0x0800b5e0
 8001b84:	0800b5e4 	.word	0x0800b5e4
 8001b88:	0800b5e8 	.word	0x0800b5e8
 8001b8c:	20000014 	.word	0x20000014
 8001b90:	20000131 	.word	0x20000131
 8001b94:	20000118 	.word	0x20000118

08001b98 <getnumber>:
}



uint8_t getnumber(uint8_t *p , int len)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	dd0f      	ble.n	8001bc8 <getnumber+0x30>
		value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b30      	subs	r3, #48	; 0x30
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	e003      	b.n	8001bd0 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3b30      	subs	r3, #48	; 0x30
 8001bce:	60fb      	str	r3, [r7, #12]

	return value;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	b2db      	uxtb	r3, r3

}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <rtc_task>:



void rtc_task(void *param)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b09b      	sub	sp, #108	; 0x6c
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	6078      	str	r0, [r7, #4]
	const char *msg_rtc1 = "========================\n"
 8001be8:	4bb2      	ldr	r3, [pc, #712]	; (8001eb4 <rtc_task+0x2d4>)
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
						    "========================\n";

	const char *msg_rtc2 = "Configure Time            ----> 0\n"
 8001bec:	4bb2      	ldr	r3, [pc, #712]	; (8001eb8 <rtc_task+0x2d8>)
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
							"Configure Date            ----> 1\n"
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";

	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001bf0:	4bb2      	ldr	r3, [pc, #712]	; (8001ebc <rtc_task+0x2dc>)
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001bf4:	4bb2      	ldr	r3, [pc, #712]	; (8001ec0 <rtc_task+0x2e0>)
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001bf8:	4bb2      	ldr	r3, [pc, #712]	; (8001ec4 <rtc_task+0x2e4>)
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd = "Enter date(1-31):";
 8001bfc:	4bb2      	ldr	r3, [pc, #712]	; (8001ec8 <rtc_task+0x2e8>)
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo = "Enter month(1-12):";
 8001c00:	4bb2      	ldr	r3, [pc, #712]	; (8001ecc <rtc_task+0x2ec>)
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow = "Enter day(1-7 sun:1):";
 8001c04:	4bb2      	ldr	r3, [pc, #712]	; (8001ed0 <rtc_task+0x2f0>)
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr = "Enter year(0-99):";
 8001c08:	4bb2      	ldr	r3, [pc, #712]	; (8001ed4 <rtc_task+0x2f4>)
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001c0c:	4bb2      	ldr	r3, [pc, #712]	; (8001ed8 <rtc_task+0x2f8>)
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001c10:	4bb2      	ldr	r3, [pc, #712]	; (8001edc <rtc_task+0x2fc>)
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3

	while (1)
	{
		/*Notify wait (wait till someone notifies)  from the menu task*/
	    xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2000      	movs	r0, #0
 8001c22:	f004 ffb3 	bl	8006b8c <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 8001c26:	4bae      	ldr	r3, [pc, #696]	; (8001ee0 <rtc_task+0x300>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	f003 fc02 	bl	800543c <xQueueGenericSend>
		show_time_date();
 8001c38:	f7ff fb58 	bl	80012ec <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 8001c3c:	4ba8      	ldr	r3, [pc, #672]	; (8001ee0 <rtc_task+0x300>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001c44:	2300      	movs	r3, #0
 8001c46:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4a:	f003 fbf7 	bl	800543c <xQueueGenericSend>

		while (curr_state != sMainMenu)
 8001c4e:	bf00      	nop
 8001c50:	e1e1      	b.n	8002016 <rtc_task+0x436>
		{

			/*Wait for command notification (Notify wait)  From command*/
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001c52:	f107 0320 	add.w	r3, r7, #32
 8001c56:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2000      	movs	r0, #0
 8001c62:	f004 ff93 	bl	8006b8c <xTaskGenericNotifyWait>
			cmd = (command_t*) cmd_addr;
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch (curr_state)
 8001c6a:	4b9e      	ldr	r3, [pc, #632]	; (8001ee4 <rtc_task+0x304>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b02      	subs	r3, #2
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	f200 81d0 	bhi.w	8002016 <rtc_task+0x436>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <rtc_task+0x9c>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001d3f 	.word	0x08001d3f
 8001c84:	08001e2d 	.word	0x08001e2d
 8001c88:	08001f93 	.word	0x08001f93
			{
			case sRtcMenu: {
				/*process RTC menu commands */
				if (cmd->len == 1)
 8001c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d148      	bne.n	8001d26 <rtc_task+0x146>
				{
					menu_code = cmd->payload[0] - 48;
 8001c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3b30      	subs	r3, #48	; 0x30
 8001c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8001c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d835      	bhi.n	8001d0e <rtc_task+0x12e>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <rtc_task+0xc8>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cd3 	.word	0x08001cd3
 8001cb0:	08001ced 	.word	0x08001ced
 8001cb4:	08001d07 	.word	0x08001d07
					switch (menu_code)
					{
					case 0:
						curr_state = sRtcTimeConfig;
 8001cb8:	4b8a      	ldr	r3, [pc, #552]	; (8001ee4 <rtc_task+0x304>)
 8001cba:	2203      	movs	r2, #3
 8001cbc:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 8001cbe:	4b88      	ldr	r3, [pc, #544]	; (8001ee0 <rtc_task+0x300>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	f003 fbb6 	bl	800543c <xQueueGenericSend>
						break;
 8001cd0:	e034      	b.n	8001d3c <rtc_task+0x15c>
					case 1:
						curr_state = sRtcDateConfig;
 8001cd2:	4b84      	ldr	r3, [pc, #528]	; (8001ee4 <rtc_task+0x304>)
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001cd8:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <rtc_task+0x300>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce6:	f003 fba9 	bl	800543c <xQueueGenericSend>
						break;
 8001cea:	e027      	b.n	8001d3c <rtc_task+0x15c>
					case 2:
						curr_state = sRtcReport;
 8001cec:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <rtc_task+0x304>)
 8001cee:	2205      	movs	r2, #5
 8001cf0:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <rtc_task+0x300>)
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	f003 fb9c 	bl	800543c <xQueueGenericSend>
						break;
 8001d04:	e01a      	b.n	8001d3c <rtc_task+0x15c>
					case 3:
						curr_state = sMainMenu;
 8001d06:	4b77      	ldr	r3, [pc, #476]	; (8001ee4 <rtc_task+0x304>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
						break;
 8001d0c:	e016      	b.n	8001d3c <rtc_task+0x15c>
					default:
						curr_state = sMainMenu;
 8001d0e:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <rtc_task+0x304>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001d14:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <rtc_task+0x300>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1e:	4972      	ldr	r1, [pc, #456]	; (8001ee8 <rtc_task+0x308>)
 8001d20:	f003 fb8c 	bl	800543c <xQueueGenericSend>
 8001d24:	e177      	b.n	8002016 <rtc_task+0x436>

				}

				else
				{
					curr_state = sMainMenu;
 8001d26:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <rtc_task+0x304>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <rtc_task+0x300>)
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	2300      	movs	r3, #0
 8001d32:	f04f 32ff 	mov.w	r2, #4294967295
 8001d36:	496c      	ldr	r1, [pc, #432]	; (8001ee8 <rtc_task+0x308>)
 8001d38:	f003 fb80 	bl	800543c <xQueueGenericSend>
				}

				break;
 8001d3c:	e16b      	b.n	8002016 <rtc_task+0x436>
			}

			case sRtcTimeConfig: {
				/*get hh, mm, ss infor and configure RTC */
				/*take care of invalid entries */
				switch (rtc_state)
 8001d3e:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <rtc_task+0x30c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d03b      	beq.n	8001dbe <rtc_task+0x1de>
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f300 8165 	bgt.w	8002016 <rtc_task+0x436>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <rtc_task+0x176>
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d01a      	beq.n	8001d8a <rtc_task+0x1aa>
 8001d54:	e15f      	b.n	8002016 <rtc_task+0x436>
				{
				case HH_CONFIG: {
					uint8_t hour = getnumber(cmd->payload, cmd->len);
 8001d56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f7ff ff1a 	bl	8001b98 <getnumber>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
					time.Hours = hour;
 8001d6a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d6e:	733b      	strb	r3, [r7, #12]
					rtc_state = MM_CONFIG;
 8001d70:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <rtc_task+0x30c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001d76:	4b5a      	ldr	r3, [pc, #360]	; (8001ee0 <rtc_task+0x300>)
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	f003 fb5a 	bl	800543c <xQueueGenericSend>
					break;
 8001d88:	e04f      	b.n	8001e2a <rtc_task+0x24a>
				}
				case MM_CONFIG: {
					uint8_t min = getnumber(cmd->payload, cmd->len);
 8001d8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f7ff ff00 	bl	8001b98 <getnumber>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
					time.Minutes = min;
 8001d9e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001da2:	737b      	strb	r3, [r7, #13]
					rtc_state = SS_CONFIG;
 8001da4:	4b51      	ldr	r3, [pc, #324]	; (8001eec <rtc_task+0x30c>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 8001daa:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <rtc_task+0x300>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001db2:	2300      	movs	r3, #0
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	f003 fb40 	bl	800543c <xQueueGenericSend>
					break;
 8001dbc:	e035      	b.n	8001e2a <rtc_task+0x24a>
				}
				case SS_CONFIG: {
					uint8_t sec = getnumber(cmd->payload, cmd->len);
 8001dbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f7ff fee6 	bl	8001b98 <getnumber>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					time.Seconds = sec;
 8001dd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dd6:	73bb      	strb	r3, [r7, #14]

					if (!validate_rtc_information(&time, NULL))
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fb18 	bl	8001414 <validate_rtc_information>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d110      	bne.n	8001e0c <rtc_task+0x22c>
					{
						rtc_configure_time(&time);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fae8 	bl	80013c4 <rtc_configure_time>
						xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <rtc_task+0x300>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8001e02:	f003 fb1b 	bl	800543c <xQueueGenericSend>
						show_time_date();
 8001e06:	f7ff fa71 	bl	80012ec <show_time_date>
 8001e0a:	e007      	b.n	8001e1c <rtc_task+0x23c>
					}
					else
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <rtc_task+0x300>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	2300      	movs	r3, #0
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	4934      	ldr	r1, [pc, #208]	; (8001ee8 <rtc_task+0x308>)
 8001e18:	f003 fb10 	bl	800543c <xQueueGenericSend>

					curr_state = sMainMenu;
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <rtc_task+0x304>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
					rtc_state = 0;
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <rtc_task+0x30c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
					break;
 8001e28:	bf00      	nop
				}
				}

				break;
 8001e2a:	e0f4      	b.n	8002016 <rtc_task+0x436>
			case sRtcDateConfig: {

				/*get date, month, day , year info and configure RTC */

				/*take care of invalid entries */
				switch (rtc_state)
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <rtc_task+0x30c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	f200 80f0 	bhi.w	8002016 <rtc_task+0x436>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <rtc_task+0x25c>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e81 	.word	0x08001e81
 8001e44:	08001f25 	.word	0x08001f25
 8001e48:	08001ef1 	.word	0x08001ef1
				{
				case DATE_CONFIG: {
					uint8_t d = getnumber(cmd->payload, cmd->len);
 8001e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f7ff fe9f 	bl	8001b98 <getnumber>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					date.Date = d;
 8001e60:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001e64:	72bb      	strb	r3, [r7, #10]
					rtc_state = MONTH_CONFIG;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <rtc_task+0x30c>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <rtc_task+0x300>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001e74:	2300      	movs	r3, #0
 8001e76:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7a:	f003 fadf 	bl	800543c <xQueueGenericSend>
					break;
 8001e7e:	e087      	b.n	8001f90 <rtc_task+0x3b0>
				}
				case MONTH_CONFIG: {
					uint8_t month = getnumber(cmd->payload, cmd->len);
 8001e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f7ff fe85 	bl	8001b98 <getnumber>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
					date.Month = month;
 8001e94:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001e98:	727b      	strb	r3, [r7, #9]
					rtc_state = DAY_CONFIG;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <rtc_task+0x30c>)
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <rtc_task+0x300>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	f003 fac5 	bl	800543c <xQueueGenericSend>
					break;
 8001eb2:	e06d      	b.n	8001f90 <rtc_task+0x3b0>
 8001eb4:	0800b5ec 	.word	0x0800b5ec
 8001eb8:	0800b638 	.word	0x0800b638
 8001ebc:	0800b6dc 	.word	0x0800b6dc
 8001ec0:	0800b6f0 	.word	0x0800b6f0
 8001ec4:	0800b708 	.word	0x0800b708
 8001ec8:	0800b720 	.word	0x0800b720
 8001ecc:	0800b734 	.word	0x0800b734
 8001ed0:	0800b748 	.word	0x0800b748
 8001ed4:	0800b760 	.word	0x0800b760
 8001ed8:	0800b774 	.word	0x0800b774
 8001edc:	0800b790 	.word	0x0800b790
 8001ee0:	2000012c 	.word	0x2000012c
 8001ee4:	20000131 	.word	0x20000131
 8001ee8:	20000014 	.word	0x20000014
 8001eec:	200001e4 	.word	0x200001e4
				}
				case DAY_CONFIG: {
					uint8_t day = getnumber(cmd->payload, cmd->len);
 8001ef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7ff fe4d 	bl	8001b98 <getnumber>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					date.WeekDay = day;
 8001f04:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f08:	723b      	strb	r3, [r7, #8]
					rtc_state = YEAR_CONFIG;
 8001f0a:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <rtc_task+0x454>)
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001f10:	4b49      	ldr	r3, [pc, #292]	; (8002038 <rtc_task+0x458>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1e:	f003 fa8d 	bl	800543c <xQueueGenericSend>
					break;
 8001f22:	e035      	b.n	8001f90 <rtc_task+0x3b0>
				}
				case YEAR_CONFIG: {
					uint8_t year = getnumber(cmd->payload, cmd->len);
 8001f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	f7ff fe33 	bl	8001b98 <getnumber>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
					date.Year = year;
 8001f38:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001f3c:	72fb      	strb	r3, [r7, #11]

					if (!validate_rtc_information(NULL, &date))
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff fa65 	bl	8001414 <validate_rtc_information>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d110      	bne.n	8001f72 <rtc_task+0x392>
					{
						rtc_configure_date(&date);
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fa4d 	bl	80013f4 <rtc_configure_date>
						xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <rtc_task+0x458>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f62:	2300      	movs	r3, #0
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	f003 fa68 	bl	800543c <xQueueGenericSend>
						show_time_date();
 8001f6c:	f7ff f9be 	bl	80012ec <show_time_date>
 8001f70:	e007      	b.n	8001f82 <rtc_task+0x3a2>
					}
					else
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <rtc_task+0x458>)
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	492f      	ldr	r1, [pc, #188]	; (800203c <rtc_task+0x45c>)
 8001f7e:	f003 fa5d 	bl	800543c <xQueueGenericSend>

					curr_state = sMainMenu;
 8001f82:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <rtc_task+0x460>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
					rtc_state = 0;
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <rtc_task+0x454>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
					break;
 8001f8e:	bf00      	nop
				}
				}

				break;
 8001f90:	e041      	b.n	8002016 <rtc_task+0x436>
			}

			case sRtcReport: {
				/*enable or disable RTC current time reporting over ITM printf */
				if (cmd->len == 1)
 8001f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d131      	bne.n	8001ffe <rtc_task+0x41e>
				{
					if (cmd->payload[0] == 'y')
 8001f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b79      	cmp	r3, #121	; 0x79
 8001fa0:	d115      	bne.n	8001fce <rtc_task+0x3ee>
					{
						if (xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <rtc_task+0x464>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f005 fc66 	bl	8007878 <xTimerIsTimerActive>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d12d      	bne.n	800200e <rtc_task+0x42e>
							xTimerStart(rtc_timer, portMAX_DELAY);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <rtc_task+0x464>)
 8001fb4:	681c      	ldr	r4, [r3, #0]
 8001fb6:	f004 fa11 	bl	80063dc <xTaskGetTickCount>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f005 f976 	bl	80072b8 <xTimerGenericCommand>
 8001fcc:	e01f      	b.n	800200e <rtc_task+0x42e>
					}
					else if (cmd->payload[0] == 'n') {
 8001fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b6e      	cmp	r3, #110	; 0x6e
 8001fd4:	d10a      	bne.n	8001fec <rtc_task+0x40c>
						xTimerStop(rtc_timer, portMAX_DELAY);
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <rtc_task+0x464>)
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	f005 f967 	bl	80072b8 <xTimerGenericCommand>
 8001fea:	e010      	b.n	800200e <rtc_task+0x42e>
					}
					else
					{
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <rtc_task+0x458>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff6:	4911      	ldr	r1, [pc, #68]	; (800203c <rtc_task+0x45c>)
 8001ff8:	f003 fa20 	bl	800543c <xQueueGenericSend>
 8001ffc:	e007      	b.n	800200e <rtc_task+0x42e>
					}

				}
				else
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <rtc_task+0x458>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	2300      	movs	r3, #0
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <rtc_task+0x45c>)
 800200a:	f003 fa17 	bl	800543c <xQueueGenericSend>

				curr_state = sMainMenu;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <rtc_task+0x460>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
				break;
 8002014:	bf00      	nop
		while (curr_state != sMainMenu)
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <rtc_task+0x460>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f47f ae19 	bne.w	8001c52 <rtc_task+0x72>
			} // switch end

		} //while end

		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <rtc_task+0x468>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2300      	movs	r3, #0
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	f004 fe35 	bl	8006c9c <xTaskGenericNotify>
	    xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002032:	e5ef      	b.n	8001c14 <rtc_task+0x34>
 8002034:	200001e4 	.word	0x200001e4
 8002038:	2000012c 	.word	0x2000012c
 800203c:	20000014 	.word	0x20000014
 8002040:	20000131 	.word	0x20000131
 8002044:	20000144 	.word	0x20000144
 8002048:	20000118 	.word	0x20000118

0800204c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800204c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002084 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002052:	490e      	ldr	r1, [pc, #56]	; (800208c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002068:	4c0b      	ldr	r4, [pc, #44]	; (8002098 <LoopFillZerobss+0x26>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002076:	f7ff fbcf 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207a:	f008 f813 	bl	800a0a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207e:	f7fe fc1f 	bl	80008c0 <main>
  bx  lr    
 8002082:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002084:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002090:	0800b974 	.word	0x0800b974
  ldr r2, =_sbss
 8002094:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002098:	2001461c 	.word	0x2001461c

0800209c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_Init+0x40>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_Init+0x40>)
 80020b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_Init+0x40>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 f8d8 	bl	800227e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f7ff fa74 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff f9d0 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000001c 	.word	0x2000001c
 8002108:	200001e8 	.word	0x200001e8

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	200001e8 	.word	0x200001e8

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ff4c 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a6:	f7ff ff61 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	6978      	ldr	r0, [r7, #20]
 80022b2:	f7ff ffb1 	bl	8002218 <NVIC_EncodePriority>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff80 	bl	80021c4 <__NVIC_SetPriority>
}
 80022c4:	bf00      	nop
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff54 	bl	8002188 <__NVIC_EnableIRQ>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022f6:	f7ff ff09 	bl	800210c <HAL_GetTick>
 80022fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d008      	beq.n	800231a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e052      	b.n	80023c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0216 	bic.w	r2, r2, #22
 8002328:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002338:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <HAL_DMA_Abort+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0208 	bic.w	r2, r2, #8
 8002358:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236a:	e013      	b.n	8002394 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236c:	f7ff fece 	bl	800210c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d90c      	bls.n	8002394 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2203      	movs	r2, #3
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e015      	b.n	80023c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e4      	bne.n	800236c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	223f      	movs	r2, #63	; 0x3f
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d004      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00c      	b.n	8002400 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2205      	movs	r2, #5
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e177      	b.n	8002718 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	f040 8166 	bne.w	8002712 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d005      	beq.n	800245e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245a:	2b02      	cmp	r3, #2
 800245c:	d130      	bne.n	80024c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0201 	and.w	r2, r3, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d017      	beq.n	80024fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d123      	bne.n	8002550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80c0 	beq.w	8002712 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b66      	ldr	r3, [pc, #408]	; (8002730 <HAL_GPIO_Init+0x324>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a65      	ldr	r2, [pc, #404]	; (8002730 <HAL_GPIO_Init+0x324>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_GPIO_Init+0x324>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	4a61      	ldr	r2, [pc, #388]	; (8002734 <HAL_GPIO_Init+0x328>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_GPIO_Init+0x32c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d037      	beq.n	800264a <HAL_GPIO_Init+0x23e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a57      	ldr	r2, [pc, #348]	; (800273c <HAL_GPIO_Init+0x330>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_GPIO_Init+0x23a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a56      	ldr	r2, [pc, #344]	; (8002740 <HAL_GPIO_Init+0x334>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_Init+0x236>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <HAL_GPIO_Init+0x338>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x232>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a54      	ldr	r2, [pc, #336]	; (8002748 <HAL_GPIO_Init+0x33c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x22e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a53      	ldr	r2, [pc, #332]	; (800274c <HAL_GPIO_Init+0x340>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x22a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x344>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x226>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_GPIO_Init+0x348>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x222>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a50      	ldr	r2, [pc, #320]	; (8002758 <HAL_GPIO_Init+0x34c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x21e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4f      	ldr	r2, [pc, #316]	; (800275c <HAL_GPIO_Init+0x350>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x21a>
 8002622:	2309      	movs	r3, #9
 8002624:	e012      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002626:	230a      	movs	r3, #10
 8002628:	e010      	b.n	800264c <HAL_GPIO_Init+0x240>
 800262a:	2308      	movs	r3, #8
 800262c:	e00e      	b.n	800264c <HAL_GPIO_Init+0x240>
 800262e:	2307      	movs	r3, #7
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002632:	2306      	movs	r3, #6
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x240>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x240>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x240>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_GPIO_Init+0x328>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_GPIO_Init+0x354>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a34      	ldr	r2, [pc, #208]	; (8002760 <HAL_GPIO_Init+0x354>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_GPIO_Init+0x354>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_GPIO_Init+0x354>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_GPIO_Init+0x354>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_GPIO_Init+0x354>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_GPIO_Init+0x354>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <HAL_GPIO_Init+0x354>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f ae84 	bls.w	8002428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40021400 	.word	0x40021400
 8002750:	40021800 	.word	0x40021800
 8002754:	40021c00 	.word	0x40021c00
 8002758:	40022000 	.word	0x40022000
 800275c:	40022400 	.word	0x40022400
 8002760:	40013c00 	.word	0x40013c00

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002780:	e003      	b.n	800278a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	041a      	lsls	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	619a      	str	r2, [r3, #24]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e267      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d075      	beq.n	80028a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b6:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d00c      	beq.n	80027dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d112      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027da:	d10b      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d05b      	beq.n	80028a0 <HAL_RCC_OscConfig+0x108>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d157      	bne.n	80028a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e242      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d106      	bne.n	800280c <HAL_RCC_OscConfig+0x74>
 80027fe:	4b76      	ldr	r3, [pc, #472]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a75      	ldr	r2, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e01d      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x98>
 8002816:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6f      	ldr	r2, [pc, #444]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6c      	ldr	r2, [pc, #432]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 8002830:	4b69      	ldr	r3, [pc, #420]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a68      	ldr	r2, [pc, #416]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fc5c 	bl	800210c <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff fc58 	bl	800210c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e207      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xc0>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff fc48 	bl	800210c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff fc44 	bl	800210c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1f3      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0xe8>
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d063      	beq.n	8002976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ae:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d11c      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d116      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e1c7      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4937      	ldr	r1, [pc, #220]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	e03a      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002908:	4b34      	ldr	r3, [pc, #208]	; (80029dc <HAL_RCC_OscConfig+0x244>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7ff fbfd 	bl	800210c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002916:	f7ff fbf9 	bl	800210c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1a8      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4925      	ldr	r1, [pc, #148]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
 8002948:	e015      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x244>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff fbdc 	bl	800210c <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002958:	f7ff fbd8 	bl	800210c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e187      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d036      	beq.n	80029f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_RCC_OscConfig+0x248>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7ff fbbc 	bl	800210c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7ff fbb8 	bl	800210c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e167      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x200>
 80029b6:	e01b      	b.n	80029f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_OscConfig+0x248>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff fba5 	bl	800210c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	e00e      	b.n	80029e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c6:	f7ff fba1 	bl	800210c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d907      	bls.n	80029e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e150      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	42470000 	.word	0x42470000
 80029e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	4b88      	ldr	r3, [pc, #544]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ea      	bne.n	80029c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8097 	beq.w	8002b2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a02:	4b81      	ldr	r3, [pc, #516]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	4b7d      	ldr	r3, [pc, #500]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a7c      	ldr	r2, [pc, #496]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b7a      	ldr	r3, [pc, #488]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4b74      	ldr	r3, [pc, #464]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a73      	ldr	r2, [pc, #460]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7ff fb61 	bl	800210c <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7ff fb5d 	bl	800210c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e10c      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2ea>
 8002a74:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a63      	ldr	r2, [pc, #396]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x324>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x30c>
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a5e      	ldr	r2, [pc, #376]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	4b5c      	ldr	r3, [pc, #368]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a5b      	ldr	r2, [pc, #364]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x324>
 8002aa4:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	4b55      	ldr	r3, [pc, #340]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 0304 	bic.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7ff fb22 	bl	800210c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7ff fb1e 	bl	800210c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0cb      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae2:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0ee      	beq.n	8002acc <HAL_RCC_OscConfig+0x334>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7ff fb0c 	bl	800210c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7ff fb08 	bl	800210c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0b5      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ee      	bne.n	8002af8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a1 	beq.w	8002c78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d05c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d141      	bne.n	8002bce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7ff fadc 	bl	800210c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7ff fad8 	bl	800210c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e087      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	491b      	ldr	r1, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7ff fab1 	bl	800210c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7ff faad 	bl	800210c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e05c      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x416>
 8002bcc:	e054      	b.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7ff fa9a 	bl	800210c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7ff fa96 	bl	800210c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e045      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x444>
 8002bfa:	e03d      	b.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e038      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x4ec>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d028      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d121      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d11a      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d111      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800

08002c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0cc      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d90c      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d044      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e067      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4934      	ldr	r1, [pc, #208]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7ff f9c8 	bl	800210c <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7ff f9c4 	bl	800210c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e04f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d20c      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fbc4 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	0800b88c 	.word	0x0800b88c
 8002e4c:	20000010 	.word	0x20000010
 8002e50:	20000018 	.word	0x20000018

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b094      	sub	sp, #80	; 0x50
 8002e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e60:	2300      	movs	r3, #0
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e64:	2300      	movs	r3, #0
 8002e66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6c:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	f200 80e1 	bhi.w	8003040 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e86:	e0db      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e8c:	e0db      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e92:	e0d8      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eaa:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	0159      	lsls	r1, r3, #5
 8002ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed8:	0150      	lsls	r0, r2, #5
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4621      	mov	r1, r4
 8002ee0:	1a51      	subs	r1, r2, r1
 8002ee2:	6139      	str	r1, [r7, #16]
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef8:	4659      	mov	r1, fp
 8002efa:	018b      	lsls	r3, r1, #6
 8002efc:	4651      	mov	r1, sl
 8002efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f02:	4651      	mov	r1, sl
 8002f04:	018a      	lsls	r2, r1, #6
 8002f06:	4651      	mov	r1, sl
 8002f08:	ebb2 0801 	subs.w	r8, r2, r1
 8002f0c:	4659      	mov	r1, fp
 8002f0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f26:	4690      	mov	r8, r2
 8002f28:	4699      	mov	r9, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	eb18 0303 	adds.w	r3, r8, r3
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	462b      	mov	r3, r5
 8002f34:	eb49 0303 	adc.w	r3, r9, r3
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f46:	4629      	mov	r1, r5
 8002f48:	024b      	lsls	r3, r1, #9
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f50:	4621      	mov	r1, r4
 8002f52:	024a      	lsls	r2, r1, #9
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f64:	f7fd f9f4 	bl	8000350 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f70:	e058      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	0159      	lsls	r1, r3, #5
 8002f9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9e:	0150      	lsls	r0, r2, #5
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002faa:	4649      	mov	r1, r9
 8002fac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	00eb      	lsls	r3, r5, #3
 8002fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fda:	00e2      	lsls	r2, r4, #3
 8002fdc:	4614      	mov	r4, r2
 8002fde:	461d      	mov	r5, r3
 8002fe0:	4643      	mov	r3, r8
 8002fe2:	18e3      	adds	r3, r4, r3
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	eb45 0303 	adc.w	r3, r5, r3
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	028b      	lsls	r3, r1, #10
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003004:	4621      	mov	r1, r4
 8003006:	028a      	lsls	r2, r1, #10
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	2200      	movs	r2, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	61fa      	str	r2, [r7, #28]
 8003014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003018:	f7fd f99a 	bl	8000350 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	3301      	adds	r3, #1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800303e:	e002      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetSysClockFreq+0x204>)
 8003042:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003048:	4618      	mov	r0, r3
 800304a:	3750      	adds	r7, #80	; 0x50
 800304c:	46bd      	mov	sp, r7
 800304e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	007a1200 	.word	0x007a1200

08003060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCC_GetHCLKFreq+0x14>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000010 	.word	0x20000010

08003078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800307c:	f7ff fff0 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCC_GetPCLK1Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	0800b89c 	.word	0x0800b89c

080030a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a4:	f7ff ffdc 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0b5b      	lsrs	r3, r3, #13
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	0800b89c 	.word	0x0800b89c

080030c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	220f      	movs	r2, #15
 80030d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_RCC_GetClockConfig+0x5c>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <HAL_RCC_GetClockConfig+0x5c>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <HAL_RCC_GetClockConfig+0x5c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_GetClockConfig+0x5c>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	08db      	lsrs	r3, r3, #3
 8003102:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <HAL_RCC_GetClockConfig+0x60>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40023c00 	.word	0x40023c00

0800312c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800315c:	2b00      	cmp	r3, #0
 800315e:	d075      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003160:	4b91      	ldr	r3, [pc, #580]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003166:	f7fe ffd1 	bl	800210c <HAL_GetTick>
 800316a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800316e:	f7fe ffcd 	bl	800210c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e189      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003180:	4b8a      	ldr	r3, [pc, #552]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	019a      	lsls	r2, r3, #6
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	071b      	lsls	r3, r3, #28
 80031a4:	4981      	ldr	r1, [pc, #516]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031b8:	4b7c      	ldr	r3, [pc, #496]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031be:	0f1b      	lsrs	r3, r3, #28
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	019a      	lsls	r2, r3, #6
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	071b      	lsls	r3, r3, #28
 80031d8:	4974      	ldr	r1, [pc, #464]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031e0:	4b72      	ldr	r3, [pc, #456]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e6:	f023 021f 	bic.w	r2, r3, #31
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	496e      	ldr	r1, [pc, #440]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	019a      	lsls	r2, r3, #6
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	071b      	lsls	r3, r3, #28
 8003218:	4964      	ldr	r1, [pc, #400]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003220:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003226:	f7fe ff71 	bl	800210c <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800322e:	f7fe ff6d 	bl	800210c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e129      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003240:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003260:	2b00      	cmp	r3, #0
 8003262:	d079      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003264:	4b52      	ldr	r3, [pc, #328]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800326a:	f7fe ff4f 	bl	800210c <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003272:	f7fe ff4b 	bl	800210c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e107      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003290:	d0ef      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d020      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800329e:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	0f1b      	lsrs	r3, r3, #28
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	019a      	lsls	r2, r3, #6
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	431a      	orrs	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	071b      	lsls	r3, r3, #28
 80032be:	493b      	ldr	r1, [pc, #236]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	4934      	ldr	r1, [pc, #208]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032ec:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	0e1b      	lsrs	r3, r3, #24
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	019a      	lsls	r2, r3, #6
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	071b      	lsls	r3, r3, #28
 800330c:	4927      	ldr	r1, [pc, #156]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	4922      	ldr	r1, [pc, #136]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003330:	f7fe feec 	bl	800210c <HAL_GetTick>
 8003334:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003338:	f7fe fee8 	bl	800210c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0a4      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003356:	d1ef      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 808b 	beq.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800338e:	f7fe febd 	bl	800210c <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003394:	e010      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fe feb9 	bl	800210c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d909      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e075      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80033a8:	42470068 	.word	0x42470068
 80033ac:	40023800 	.word	0x40023800
 80033b0:	42470070 	.word	0x42470070
 80033b4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0e8      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d028      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033e2:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033f2:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033fe:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d114      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe fe7f 	bl	800210c <HAL_GetTick>
 800340e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	e00a      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7fe fe7b 	bl	800210c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e035      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ee      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003440:	d10d      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003442:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003456:	4912      	ldr	r1, [pc, #72]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]
 800345c:	e005      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003464:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003468:	6093      	str	r3, [r2, #8]
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800346c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	490a      	ldr	r1, [pc, #40]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003478:	4313      	orrs	r3, r2
 800347a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003490:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40007000 	.word	0x40007000
 80034a0:	40023800 	.word	0x40023800
 80034a4:	42470e40 	.word	0x42470e40
 80034a8:	424711e0 	.word	0x424711e0

080034ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e066      	b.n	8003590 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7f5b      	ldrb	r3, [r3, #29]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fff8 	bl	80014c8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	22ca      	movs	r2, #202	; 0xca
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2253      	movs	r2, #83	; 0x53
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa45 	bl	800397e <RTC_EnterInitMode>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d12c      	bne.n	8003558 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800350c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003510:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68d2      	ldr	r2, [r2, #12]
 8003538:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6919      	ldr	r1, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	041a      	lsls	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa4c 	bl	80039ec <RTC_ExitInitMode>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	7f1b      	ldrb	r3, [r3, #28]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_RTC_SetTime+0x1c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e087      	b.n	80036c4 <HAL_RTC_SetTime+0x12c>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2202      	movs	r2, #2
 80035be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d126      	bne.n	8003614 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fa29 	bl	8003a36 <RTC_ByteToBcd2>
 80035e4:	4603      	mov	r3, r0
 80035e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	785b      	ldrb	r3, [r3, #1]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fa22 	bl	8003a36 <RTC_ByteToBcd2>
 80035f2:	4603      	mov	r3, r0
 80035f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	789b      	ldrb	r3, [r3, #2]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fa1a 	bl	8003a36 <RTC_ByteToBcd2>
 8003602:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003604:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	78db      	ldrb	r3, [r3, #3]
 800360c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e018      	b.n	8003646 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	785b      	ldrb	r3, [r3, #1]
 8003632:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003634:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800363a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	78db      	ldrb	r3, [r3, #3]
 8003640:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	22ca      	movs	r2, #202	; 0xca
 800364c:	625a      	str	r2, [r3, #36]	; 0x24
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2253      	movs	r2, #83	; 0x53
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f991 	bl	800397e <RTC_EnterInitMode>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d120      	bne.n	80036a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003670:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003674:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003684:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6899      	ldr	r1, [r3, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9a4 	bl	80039ec <RTC_ExitInitMode>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	771a      	strb	r2, [r3, #28]

  return status;
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd90      	pop	{r4, r7, pc}

080036cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80036fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003702:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	0d9b      	lsrs	r3, r3, #22
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d11a      	bne.n	800377e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f98f 	bl	8003a70 <RTC_Bcd2ToByte>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f986 	bl	8003a70 <RTC_Bcd2ToByte>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	789b      	ldrb	r3, [r3, #2]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f97d 	bl	8003a70 <RTC_Bcd2ToByte>
 8003776:	4603      	mov	r3, r0
 8003778:	461a      	mov	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	7f1b      	ldrb	r3, [r3, #28]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_RTC_SetDate+0x1c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e071      	b.n	8003888 <HAL_RTC_SetDate+0x100>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2202      	movs	r2, #2
 80037ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10e      	bne.n	80037d4 <HAL_RTC_SetDate+0x4c>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	785b      	ldrb	r3, [r3, #1]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	f023 0310 	bic.w	r3, r3, #16
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	330a      	adds	r3, #10
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11c      	bne.n	8003814 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	78db      	ldrb	r3, [r3, #3]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f929 	bl	8003a36 <RTC_ByteToBcd2>
 80037e4:	4603      	mov	r3, r0
 80037e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f922 	bl	8003a36 <RTC_ByteToBcd2>
 80037f2:	4603      	mov	r3, r0
 80037f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	789b      	ldrb	r3, [r3, #2]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f91a 	bl	8003a36 <RTC_ByteToBcd2>
 8003802:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003804:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e00e      	b.n	8003832 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	78db      	ldrb	r3, [r3, #3]
 8003818:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	785b      	ldrb	r3, [r3, #1]
 800381e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003820:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003826:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	22ca      	movs	r2, #202	; 0xca
 8003838:	625a      	str	r2, [r3, #36]	; 0x24
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2253      	movs	r2, #83	; 0x53
 8003840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f89b 	bl	800397e <RTC_EnterInitMode>
 8003848:	4603      	mov	r3, r0
 800384a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800385c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003860:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8c2 	bl	80039ec <RTC_ExitInitMode>
 8003868:	4603      	mov	r3, r0
 800386a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	22ff      	movs	r2, #255	; 0xff
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	771a      	strb	r2, [r3, #28]

  return status;
 8003886:	7cfb      	ldrb	r3, [r7, #19]
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd90      	pop	{r4, r7, pc}

08003890 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	0b5b      	lsrs	r3, r3, #13
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11a      	bne.n	8003924 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	78db      	ldrb	r3, [r3, #3]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f8bc 	bl	8003a70 <RTC_Bcd2ToByte>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f8b3 	bl	8003a70 <RTC_Bcd2ToByte>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	789b      	ldrb	r3, [r3, #2]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f8aa 	bl	8003a70 <RTC_Bcd2ToByte>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003948:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800394a:	f7fe fbdf 	bl	800210c <HAL_GetTick>
 800394e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003950:	e009      	b.n	8003966 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003952:	f7fe fbdb 	bl	800210c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003960:	d901      	bls.n	8003966 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e007      	b.n	8003976 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ee      	beq.n	8003952 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d122      	bne.n	80039e2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ac:	f7fe fbae 	bl	800210c <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80039b2:	e00c      	b.n	80039ce <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039b4:	f7fe fbaa 	bl	800210c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c2:	d904      	bls.n	80039ce <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2204      	movs	r2, #4
 80039c8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <RTC_EnterInitMode+0x64>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d1e8      	bne.n	80039b4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a06:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ff89 	bl	800392e <HAL_RTC_WaitForSynchro>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2204      	movs	r2, #4
 8003a26:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003a44:	e005      	b.n	8003a52 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	3b0a      	subs	r3, #10
 8003a50:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	d8f6      	bhi.n	8003a46 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	b2db      	uxtb	r3, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	4413      	add	r3, r2
 8003a9a:	b2db      	uxtb	r3, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e041      	b.n	8003b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f839 	bl	8003b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 f9d8 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d001      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e04e      	b.n	8003c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d01d      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d018      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d111      	bne.n	8003c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d010      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfe:	e007      	b.n	8003c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40010400 	.word	0x40010400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40001800 	.word	0x40001800

08003c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0202 	mvn.w	r2, #2
 8003c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8ee 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8e0 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f8f1 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d122      	bne.n	8003cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d11b      	bne.n	8003cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0204 	mvn.w	r2, #4
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8c4 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8b6 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f8c7 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0208 	mvn.w	r2, #8
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2204      	movs	r2, #4
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f89a 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f88c 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f89d 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d122      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d11b      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0210 	mvn.w	r2, #16
 8003d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f870 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f862 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f873 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0201 	mvn.w	r2, #1
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fd fa36 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b80      	cmp	r3, #128	; 0x80
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f902 	bl	8003ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f838 	bl	8003e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d10e      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d107      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0220 	mvn.w	r2, #32
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8cc 	bl	8003fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a40      	ldr	r2, [pc, #256]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d00f      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3c      	ldr	r2, [pc, #240]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <TIM_Base_SetConfig+0x120>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3a      	ldr	r2, [pc, #232]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d02b      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d027      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d023      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01f      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <TIM_Base_SetConfig+0x120>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01b      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d017      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <TIM_Base_SetConfig+0x128>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <TIM_Base_SetConfig+0x12c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00f      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <TIM_Base_SetConfig+0x130>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <TIM_Base_SetConfig+0x134>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <TIM_Base_SetConfig+0x138>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <TIM_Base_SetConfig+0x13c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0xf8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d103      	bne.n	8003f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	615a      	str	r2, [r3, #20]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800
 8003fd0:	40001800 	.word	0x40001800
 8003fd4:	40001c00 	.word	0x40001c00
 8003fd8:	40002000 	.word	0x40002000

08003fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e03f      	b.n	8004096 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd fa76 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fddf 	bl	8004c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800405c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800406c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800407c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08a      	sub	sp, #40	; 0x28
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d17c      	bne.n	80041b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_UART_Transmit+0x2c>
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e075      	b.n	80041ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_UART_Transmit+0x3e>
 80040d8:	2302      	movs	r3, #2
 80040da:	e06e      	b.n	80041ba <HAL_UART_Transmit+0x11c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2221      	movs	r2, #33	; 0x21
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f2:	f7fe f80b 	bl	800210c <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d108      	bne.n	8004120 <HAL_UART_Transmit+0x82>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004130:	e02a      	b.n	8004188 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fb1f 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e036      	b.n	80041ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	3302      	adds	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e007      	b.n	800417a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1cf      	bne.n	8004132 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	2140      	movs	r1, #64	; 0x40
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 faef 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e006      	b.n	80041ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d11d      	bne.n	8004218 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Receive_IT+0x26>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e016      	b.n	800421a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Receive_IT+0x38>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e00f      	b.n	800421a <HAL_UART_Receive_IT+0x58>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	461a      	mov	r2, r3
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fb24 	bl	800485c <UART_Start_Receive_IT>
 8004214:	4603      	mov	r3, r0
 8004216:	e000      	b.n	800421a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b0ba      	sub	sp, #232	; 0xe8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_UART_IRQHandler+0x66>
 8004276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fc07 	bl	8004a96 <UART_Receive_IT>
      return;
 8004288:	e256      	b.n	8004738 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800428a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80de 	beq.w	8004450 <HAL_UART_IRQHandler+0x22c>
 8004294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80d1 	beq.w	8004450 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_UART_IRQHandler+0xae>
 80042ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_UART_IRQHandler+0xd2>
 80042de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_UART_IRQHandler+0xf6>
 8004302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d011      	beq.n	800434a <HAL_UART_IRQHandler+0x126>
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0208 	orr.w	r2, r3, #8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 81ed 	beq.w	800472e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_UART_IRQHandler+0x14e>
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fb92 	bl	8004a96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <HAL_UART_IRQHandler+0x17a>
 8004396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d04f      	beq.n	800443e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa9a 	bl	80048d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d141      	bne.n	8004436 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3314      	adds	r3, #20
 80043b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1d9      	bne.n	80043b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	2b00      	cmp	r3, #0
 8004404:	d013      	beq.n	800442e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	4a7d      	ldr	r2, [pc, #500]	; (8004600 <HAL_UART_IRQHandler+0x3dc>)
 800440c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	4618      	mov	r0, r3
 8004414:	f7fd ffd8 	bl	80023c8 <HAL_DMA_Abort_IT>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004428:	4610      	mov	r0, r2
 800442a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	e00e      	b.n	800444c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f990 	bl	8004754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004434:	e00a      	b.n	800444c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f98c 	bl	8004754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	e006      	b.n	800444c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f988 	bl	8004754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800444a:	e170      	b.n	800472e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	bf00      	nop
    return;
 800444e:	e16e      	b.n	800472e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	2b01      	cmp	r3, #1
 8004456:	f040 814a 	bne.w	80046ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8143 	beq.w	80046ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 813c 	beq.w	80046ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	f040 80b4 	bne.w	8004604 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8140 	beq.w	8004732 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ba:	429a      	cmp	r2, r3
 80044bc:	f080 8139 	bcs.w	8004732 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d2:	f000 8088 	beq.w	80045e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004502:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800450e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1d9      	bne.n	80044d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004546:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800454a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800454e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e1      	bne.n	8004522 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800456e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004582:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e3      	bne.n	800455e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b6:	f023 0310 	bic.w	r3, r3, #16
 80045ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80045ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e3      	bne.n	80045a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd fe81 	bl	80022e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8b6 	bl	8004768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045fc:	e099      	b.n	8004732 <HAL_UART_IRQHandler+0x50e>
 80045fe:	bf00      	nop
 8004600:	0800499f 	.word	0x0800499f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460c:	b29b      	uxth	r3, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 808b 	beq.w	8004736 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8086 	beq.w	8004736 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800464e:	647a      	str	r2, [r7, #68]	; 0x44
 8004650:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800465c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3314      	adds	r3, #20
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	623b      	str	r3, [r7, #32]
   return(result);
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3314      	adds	r3, #20
 8004682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004686:	633a      	str	r2, [r7, #48]	; 0x30
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800468c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e3      	bne.n	8004662 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0310 	bic.w	r3, r3, #16
 80046be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	617b      	str	r3, [r7, #20]
   return(result);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e3      	bne.n	80046a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f83e 	bl	8004768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046ec:	e023      	b.n	8004736 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_UART_IRQHandler+0x4ea>
 80046fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f95d 	bl	80049c6 <UART_Transmit_IT>
    return;
 800470c:	e014      	b.n	8004738 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00e      	beq.n	8004738 <HAL_UART_IRQHandler+0x514>
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f99d 	bl	8004a66 <UART_EndTransmit_IT>
    return;
 800472c:	e004      	b.n	8004738 <HAL_UART_IRQHandler+0x514>
    return;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <HAL_UART_IRQHandler+0x514>
      return;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_UART_IRQHandler+0x514>
      return;
 8004736:	bf00      	nop
  }
}
 8004738:	37e8      	adds	r7, #232	; 0xe8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop

08004740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b090      	sub	sp, #64	; 0x40
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004790:	e050      	b.n	8004834 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d04c      	beq.n	8004834 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047a0:	f7fd fcb4 	bl	800210c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d241      	bcs.n	8004834 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047d0:	637a      	str	r2, [r7, #52]	; 0x34
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	613b      	str	r3, [r7, #16]
   return(result);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004804:	623a      	str	r2, [r7, #32]
 8004806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	69f9      	ldr	r1, [r7, #28]
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	61bb      	str	r3, [r7, #24]
   return(result);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e00f      	b.n	8004854 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	429a      	cmp	r2, r3
 8004850:	d09f      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3740      	adds	r7, #64	; 0x40
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2222      	movs	r2, #34	; 0x22
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0220 	orr.w	r2, r2, #32
 80048c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b095      	sub	sp, #84	; 0x54
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004900:	643a      	str	r2, [r7, #64]	; 0x40
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	61fb      	str	r3, [r7, #28]
   return(result);
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3314      	adds	r3, #20
 8004932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004934:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	2b01      	cmp	r3, #1
 800494e:	d119      	bne.n	8004984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f023 0310 	bic.w	r3, r3, #16
 8004966:	647b      	str	r3, [r7, #68]	; 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004970:	61ba      	str	r2, [r7, #24]
 8004972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	613b      	str	r3, [r7, #16]
   return(result);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004992:	bf00      	nop
 8004994:	3754      	adds	r7, #84	; 0x54
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fecb 	bl	8004754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b21      	cmp	r3, #33	; 0x21
 80049d8:	d13e      	bne.n	8004a58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d114      	bne.n	8004a0e <UART_Transmit_IT+0x48>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d110      	bne.n	8004a0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	1c9a      	adds	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]
 8004a0c:	e008      	b.n	8004a20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6211      	str	r1, [r2, #32]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10f      	bne.n	8004a54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fe5a 	bl	8004740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b08c      	sub	sp, #48	; 0x30
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b22      	cmp	r3, #34	; 0x22
 8004aa8:	f040 80ab 	bne.w	8004c02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab4:	d117      	bne.n	8004ae6 <UART_Receive_IT+0x50>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d113      	bne.n	8004ae6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae4:	e026      	b.n	8004b34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	d007      	beq.n	8004b0a <UART_Receive_IT+0x74>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <UART_Receive_IT+0x82>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e008      	b.n	8004b2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4619      	mov	r1, r3
 8004b42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d15a      	bne.n	8004bfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0220 	bic.w	r2, r2, #32
 8004b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d135      	bne.n	8004bf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f023 0310 	bic.w	r3, r3, #16
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	623a      	str	r2, [r7, #32]
 8004bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	69f9      	ldr	r1, [r7, #28]
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e5      	bne.n	8004b8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d10a      	bne.n	8004be6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fdbb 	bl	8004768 <HAL_UARTEx_RxEventCallback>
 8004bf2:	e002      	b.n	8004bfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fc fa9f 	bl	8001138 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e002      	b.n	8004c04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3730      	adds	r7, #48	; 0x30
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c10:	b0c0      	sub	sp, #256	; 0x100
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	68d9      	ldr	r1, [r3, #12]
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	ea40 0301 	orr.w	r3, r0, r1
 8004c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c64:	f021 010c 	bic.w	r1, r1, #12
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c72:	430b      	orrs	r3, r1
 8004c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	6999      	ldr	r1, [r3, #24]
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	ea40 0301 	orr.w	r3, r0, r1
 8004c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b8f      	ldr	r3, [pc, #572]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d005      	beq.n	8004cac <UART_SetConfig+0xa0>
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <UART_SetConfig+0x2d0>)
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d104      	bne.n	8004cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cac:	f7fe f9f8 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8004cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cb4:	e003      	b.n	8004cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cb6:	f7fe f9df 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8004cba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc8:	f040 810c 	bne.w	8004ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	1891      	adds	r1, r2, r2
 8004ce4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ce6:	415b      	adcs	r3, r3
 8004ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cee:	4621      	mov	r1, r4
 8004cf0:	eb12 0801 	adds.w	r8, r2, r1
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	eb43 0901 	adc.w	r9, r3, r1
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0e:	4690      	mov	r8, r2
 8004d10:	4699      	mov	r9, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	eb18 0303 	adds.w	r3, r8, r3
 8004d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	eb49 0303 	adc.w	r3, r9, r3
 8004d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	18db      	adds	r3, r3, r3
 8004d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d40:	4613      	mov	r3, r2
 8004d42:	eb42 0303 	adc.w	r3, r2, r3
 8004d46:	657b      	str	r3, [r7, #84]	; 0x54
 8004d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d50:	f7fb fafe 	bl	8000350 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	011c      	lsls	r4, r3, #4
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d84:	4641      	mov	r1, r8
 8004d86:	eb12 0a01 	adds.w	sl, r2, r1
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da4:	4692      	mov	sl, r2
 8004da6:	469b      	mov	fp, r3
 8004da8:	4643      	mov	r3, r8
 8004daa:	eb1a 0303 	adds.w	r3, sl, r3
 8004dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004db2:	464b      	mov	r3, r9
 8004db4:	eb4b 0303 	adc.w	r3, fp, r3
 8004db8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	18db      	adds	r3, r3, r3
 8004dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004de6:	f7fb fab3 	bl	8000350 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004df2:	fba3 2301 	umull	r2, r3, r3, r1
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2264      	movs	r2, #100	; 0x64
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	1acb      	subs	r3, r1, r3
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e06:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004e08:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e14:	441c      	add	r4, r3
 8004e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e30:	415b      	adcs	r3, r3
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e38:	4641      	mov	r1, r8
 8004e3a:	1851      	adds	r1, r2, r1
 8004e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e3e:	4649      	mov	r1, r9
 8004e40:	414b      	adcs	r3, r1
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e50:	4659      	mov	r1, fp
 8004e52:	00cb      	lsls	r3, r1, #3
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	00ca      	lsls	r2, r1, #3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	4642      	mov	r2, r8
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	460a      	mov	r2, r1
 8004e70:	eb42 0303 	adc.w	r3, r2, r3
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	18db      	adds	r3, r3, r3
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	4613      	mov	r3, r2
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ea2:	f7fb fa55 	bl	8000350 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 0207 	and.w	r2, r3, #7
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4422      	add	r2, r4
 8004ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed4:	e105      	b.n	80050e2 <UART_SetConfig+0x4d6>
 8004ed6:	bf00      	nop
 8004ed8:	40011000 	.word	0x40011000
 8004edc:	40011400 	.word	0x40011400
 8004ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	464b      	mov	r3, r9
 8004efa:	1891      	adds	r1, r2, r2
 8004efc:	6239      	str	r1, [r7, #32]
 8004efe:	415b      	adcs	r3, r3
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
 8004f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f06:	4641      	mov	r1, r8
 8004f08:	1854      	adds	r4, r2, r1
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	eb43 0501 	adc.w	r5, r3, r1
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	00eb      	lsls	r3, r5, #3
 8004f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1e:	00e2      	lsls	r2, r4, #3
 8004f20:	4614      	mov	r4, r2
 8004f22:	461d      	mov	r5, r3
 8004f24:	4643      	mov	r3, r8
 8004f26:	18e3      	adds	r3, r4, r3
 8004f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	eb45 0303 	adc.w	r3, r5, r3
 8004f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f52:	4629      	mov	r1, r5
 8004f54:	008b      	lsls	r3, r1, #2
 8004f56:	4621      	mov	r1, r4
 8004f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	008a      	lsls	r2, r1, #2
 8004f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f64:	f7fb f9f4 	bl	8000350 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <UART_SetConfig+0x4e4>)
 8004f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	011c      	lsls	r4, r3, #4
 8004f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	61b9      	str	r1, [r7, #24]
 8004f90:	415b      	adcs	r3, r3
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f98:	4641      	mov	r1, r8
 8004f9a:	1851      	adds	r1, r2, r1
 8004f9c:	6139      	str	r1, [r7, #16]
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	414b      	adcs	r3, r1
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	00cb      	lsls	r3, r1, #3
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fba:	4651      	mov	r1, sl
 8004fbc:	00ca      	lsls	r2, r1, #3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fcc:	464b      	mov	r3, r9
 8004fce:	460a      	mov	r2, r1
 8004fd0:	eb42 0303 	adc.w	r3, r2, r3
 8004fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fe2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	008b      	lsls	r3, r1, #2
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	008a      	lsls	r2, r1, #2
 8004ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005002:	f7fb f9a5 	bl	8000350 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <UART_SetConfig+0x4e4>)
 800500c:	fba3 1302 	umull	r1, r3, r3, r2
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	2164      	movs	r1, #100	; 0x64
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	3332      	adds	r3, #50	; 0x32
 800501e:	4a34      	ldr	r2, [pc, #208]	; (80050f0 <UART_SetConfig+0x4e4>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800502a:	441c      	add	r4, r3
 800502c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005030:	2200      	movs	r2, #0
 8005032:	673b      	str	r3, [r7, #112]	; 0x70
 8005034:	677a      	str	r2, [r7, #116]	; 0x74
 8005036:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800503a:	4642      	mov	r2, r8
 800503c:	464b      	mov	r3, r9
 800503e:	1891      	adds	r1, r2, r2
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	415b      	adcs	r3, r3
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800504a:	4641      	mov	r1, r8
 800504c:	1851      	adds	r1, r2, r1
 800504e:	6039      	str	r1, [r7, #0]
 8005050:	4649      	mov	r1, r9
 8005052:	414b      	adcs	r3, r1
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005062:	4659      	mov	r1, fp
 8005064:	00cb      	lsls	r3, r1, #3
 8005066:	4651      	mov	r1, sl
 8005068:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506c:	4651      	mov	r1, sl
 800506e:	00ca      	lsls	r2, r1, #3
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	4603      	mov	r3, r0
 8005076:	4642      	mov	r2, r8
 8005078:	189b      	adds	r3, r3, r2
 800507a:	66bb      	str	r3, [r7, #104]	; 0x68
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	663b      	str	r3, [r7, #96]	; 0x60
 8005090:	667a      	str	r2, [r7, #100]	; 0x64
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800509e:	4649      	mov	r1, r9
 80050a0:	008b      	lsls	r3, r1, #2
 80050a2:	4641      	mov	r1, r8
 80050a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a8:	4641      	mov	r1, r8
 80050aa:	008a      	lsls	r2, r1, #2
 80050ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050b0:	f7fb f94e 	bl	8000350 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <UART_SetConfig+0x4e4>)
 80050ba:	fba3 1302 	umull	r1, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2164      	movs	r1, #100	; 0x64
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <UART_SetConfig+0x4e4>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 020f 	and.w	r2, r3, #15
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4422      	add	r2, r4
 80050e0:	609a      	str	r2, [r3, #8]
}
 80050e2:	bf00      	nop
 80050e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050e8:	46bd      	mov	sp, r7
 80050ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop
 80050f0:	51eb851f 	.word	0x51eb851f

080050f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f103 0208 	add.w	r2, r3, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f04f 32ff 	mov.w	r2, #4294967295
 800510c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f103 0208 	add.w	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 0208 	add.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d103      	bne.n	80051b6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e00c      	b.n	80051d0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3308      	adds	r3, #8
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e002      	b.n	80051c4 <vListInsert+0x2e>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d2f6      	bcs.n	80051be <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6892      	ldr	r2, [r2, #8]
 800521e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d103      	bne.n	800523c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericReset+0x2a>
        __asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60bb      	str	r3, [r7, #8]
    }
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005286:	f002 fc6f 	bl	8007b68 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	441a      	add	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	3b01      	subs	r3, #1
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	441a      	add	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	22ff      	movs	r2, #255	; 0xff
 80052ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	22ff      	movs	r2, #255	; 0xff
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d114      	bne.n	8005306 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01a      	beq.n	800531a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3310      	adds	r3, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 fa11 	bl	8006710 <xTaskRemoveFromEventList>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d012      	beq.n	800531a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <xQueueGenericReset+0xcc>)
 80052f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	e009      	b.n	800531a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3310      	adds	r3, #16
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fef2 	bl	80050f4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3324      	adds	r3, #36	; 0x24
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff feed 	bl	80050f4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800531a:	f002 fc55 	bl	8007bc8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800531e:	2301      	movs	r3, #1
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xQueueGenericCreate+0x2a>
        __asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	61bb      	str	r3, [r7, #24]
    }
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d006      	beq.n	8005374 <xQueueGenericCreate+0x48>
 8005366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	429a      	cmp	r2, r3
 8005372:	d101      	bne.n	8005378 <xQueueGenericCreate+0x4c>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <xQueueGenericCreate+0x4e>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <xQueueGenericCreate+0x68>
        __asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	617b      	str	r3, [r7, #20]
    }
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800539a:	d90a      	bls.n	80053b2 <xQueueGenericCreate+0x86>
        __asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	613b      	str	r3, [r7, #16]
    }
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	3350      	adds	r3, #80	; 0x50
 80053b6:	4618      	mov	r0, r3
 80053b8:	f002 fd00 	bl	8007dbc <pvPortMalloc>
 80053bc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3350      	adds	r3, #80	; 0x50
 80053cc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053ce:	79fa      	ldrb	r2, [r7, #7]
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f805 	bl	80053ea <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80053e0:	6a3b      	ldr	r3, [r7, #32]
    }
 80053e2:	4618      	mov	r0, r3
 80053e4:	3728      	adds	r7, #40	; 0x28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e002      	b.n	800540c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005418:	2101      	movs	r1, #1
 800541a:	69b8      	ldr	r0, [r7, #24]
 800541c:	f7ff ff1e 	bl	800525c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	2073      	movs	r0, #115	; 0x73
 8005430:	f003 fd64 	bl	8008efc <SEGGER_SYSVIEW_RecordU32x3>
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b090      	sub	sp, #64	; 0x40
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800544a:	2300      	movs	r3, #0
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xQueueGenericSend+0x32>
        __asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <xQueueGenericSend+0x40>
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <xQueueGenericSend+0x44>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <xQueueGenericSend+0x46>
 8005480:	2300      	movs	r3, #0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <xQueueGenericSend+0x60>
        __asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSend+0x6e>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <xQueueGenericSend+0x72>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <xQueueGenericSend+0x74>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <xQueueGenericSend+0x8e>
        __asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	623b      	str	r3, [r7, #32]
    }
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ca:	f001 fac1 	bl	8006a50 <xTaskGetSchedulerState>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <xQueueGenericSend+0x9e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <xQueueGenericSend+0xa2>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <xQueueGenericSend+0xa4>
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <xQueueGenericSend+0xbe>
        __asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	61fb      	str	r3, [r7, #28]
    }
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80054fa:	f002 fb35 	bl	8007b68 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <xQueueGenericSend+0xd4>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d136      	bne.n	800557e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	4618      	mov	r0, r3
 8005514:	f004 fb2c 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	460b      	mov	r3, r1
 8005522:	4601      	mov	r1, r0
 8005524:	205a      	movs	r0, #90	; 0x5a
 8005526:	f003 fd5f 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005530:	f000 fb43 	bl	8005bba <prvCopyDataToQueue>
 8005534:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	3324      	adds	r3, #36	; 0x24
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f8e4 	bl	8006710 <xTaskRemoveFromEventList>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d013      	beq.n	8005576 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800554e:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <xQueueGenericSend+0x248>)
 8005550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	e00a      	b.n	8005576 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005566:	4b47      	ldr	r3, [pc, #284]	; (8005684 <xQueueGenericSend+0x248>)
 8005568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005576:	f002 fb27 	bl	8007bc8 <vPortExitCritical>
                return pdPASS;
 800557a:	2301      	movs	r3, #1
 800557c:	e07d      	b.n	800567a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d110      	bne.n	80055a6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005584:	f002 fb20 	bl	8007bc8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	4618      	mov	r0, r3
 800558c:	f004 faf0 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	460b      	mov	r3, r1
 800559a:	4601      	mov	r1, r0
 800559c:	205a      	movs	r0, #90	; 0x5a
 800559e:	f003 fd23 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e069      	b.n	800567a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 f913 	bl	80067dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80055b6:	2301      	movs	r3, #1
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80055ba:	f002 fb05 	bl	8007bc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80055be:	f000 fe5f 	bl	8006280 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80055c2:	f002 fad1 	bl	8007b68 <vPortEnterCritical>
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d103      	bne.n	80055dc <xQueueGenericSend+0x1a0>
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d103      	bne.n	80055f2 <xQueueGenericSend+0x1b6>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055f2:	f002 fae9 	bl	8007bc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055f6:	1d3a      	adds	r2, r7, #4
 80055f8:	f107 0314 	add.w	r3, r7, #20
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f902 	bl	8006808 <xTaskCheckForTimeOut>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d124      	bne.n	8005654 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800560a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800560c:	f000 fbcd 	bl	8005daa <prvIsQueueFull>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	3310      	adds	r3, #16
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f001 f824 	bl	800666c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005626:	f000 fb58 	bl	8005cda <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800562a:	f000 fe37 	bl	800629c <xTaskResumeAll>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	f47f af62 	bne.w	80054fa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <xQueueGenericSend+0x248>)
 8005638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	e758      	b.n	80054fa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564a:	f000 fb46 	bl	8005cda <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800564e:	f000 fe25 	bl	800629c <xTaskResumeAll>
 8005652:	e752      	b.n	80054fa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005656:	f000 fb40 	bl	8005cda <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800565a:	f000 fe1f 	bl	800629c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	4618      	mov	r0, r3
 8005662:	f004 fa85 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	460b      	mov	r3, r1
 8005670:	4601      	mov	r1, r0
 8005672:	205a      	movs	r0, #90	; 0x5a
 8005674:	f003 fcb8 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005678:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800567a:	4618      	mov	r0, r3
 800567c:	3738      	adds	r7, #56	; 0x38
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b090      	sub	sp, #64	; 0x40
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d103      	bne.n	80056c4 <xQueueGenericSendFromISR+0x3c>
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <xQueueGenericSendFromISR+0x40>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <xQueueGenericSendFromISR+0x42>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d103      	bne.n	80056f2 <xQueueGenericSendFromISR+0x6a>
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <xQueueGenericSendFromISR+0x6e>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <xQueueGenericSendFromISR+0x70>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	623b      	str	r3, [r7, #32]
    }
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005712:	f002 fb13 	bl	8007d3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005716:	f3ef 8211 	mrs	r2, BASEPRI
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	61fa      	str	r2, [r7, #28]
 800572c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800572e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <xQueueGenericSendFromISR+0xbc>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d148      	bne.n	80057d6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	4618      	mov	r0, r3
 8005758:	f004 fa0a 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 800575c:	4601      	mov	r1, r0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	461a      	mov	r2, r3
 8005762:	2060      	movs	r0, #96	; 0x60
 8005764:	f003 fb70 	bl	8008e48 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800576e:	f000 fa24 	bl	8005bba <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005772:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d112      	bne.n	80057a2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d025      	beq.n	80057d0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	3324      	adds	r3, #36	; 0x24
 8005788:	4618      	mov	r0, r3
 800578a:	f000 ffc1 	bl	8006710 <xTaskRemoveFromEventList>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01d      	beq.n	80057d0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01a      	beq.n	80057d0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e016      	b.n	80057d0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80057a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80057a6:	2b7f      	cmp	r3, #127	; 0x7f
 80057a8:	d10a      	bne.n	80057c0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	617b      	str	r3, [r7, #20]
    }
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057c4:	3301      	adds	r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	b25a      	sxtb	r2, r3
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80057d0:	2301      	movs	r3, #1
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80057d4:	e00b      	b.n	80057ee <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	4618      	mov	r0, r3
 80057da:	f004 f9c9 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 80057de:	4601      	mov	r1, r0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	461a      	mov	r2, r3
 80057e4:	2060      	movs	r0, #96	; 0x60
 80057e6:	f003 fb2f 	bl	8008e48 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80057f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80057fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3740      	adds	r7, #64	; 0x40
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b08f      	sub	sp, #60	; 0x3c
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <xQueueReceive+0x30>
        __asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	623b      	str	r3, [r7, #32]
    }
 8005830:	bf00      	nop
 8005832:	e7fe      	b.n	8005832 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <xQueueReceive+0x3e>
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <xQueueReceive+0x42>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <xQueueReceive+0x44>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueReceive+0x5e>
        __asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	61fb      	str	r3, [r7, #28]
    }
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005862:	f001 f8f5 	bl	8006a50 <xTaskGetSchedulerState>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <xQueueReceive+0x6e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <xQueueReceive+0x72>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <xQueueReceive+0x74>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xQueueReceive+0x8e>
        __asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	61bb      	str	r3, [r7, #24]
    }
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005892:	f002 f969 	bl	8007b68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d02f      	beq.n	8005902 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a6:	f000 f9f2 	bl	8005c8e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	4618      	mov	r0, r3
 80058ae:	f004 f95f 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 80058b2:	4604      	mov	r4, r0
 80058b4:	2000      	movs	r0, #0
 80058b6:	f004 f95b 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 80058ba:	4602      	mov	r2, r0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2101      	movs	r1, #1
 80058c0:	9100      	str	r1, [sp, #0]
 80058c2:	4621      	mov	r1, r4
 80058c4:	205c      	movs	r0, #92	; 0x5c
 80058c6:	f003 fb8f 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	1e5a      	subs	r2, r3, #1
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00f      	beq.n	80058fa <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	3310      	adds	r3, #16
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 ff16 	bl	8006710 <xTaskRemoveFromEventList>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80058ea:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <xQueueReceive+0x21c>)
 80058ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80058fa:	f002 f965 	bl	8007bc8 <vPortExitCritical>
                return pdPASS;
 80058fe:	2301      	movs	r3, #1
 8005900:	e08a      	b.n	8005a18 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d113      	bne.n	8005930 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005908:	f002 f95e 	bl	8007bc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	4618      	mov	r0, r3
 8005910:	f004 f92e 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005914:	4604      	mov	r4, r0
 8005916:	2000      	movs	r0, #0
 8005918:	f004 f92a 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 800591c:	4602      	mov	r2, r0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2101      	movs	r1, #1
 8005922:	9100      	str	r1, [sp, #0]
 8005924:	4621      	mov	r1, r4
 8005926:	205c      	movs	r0, #92	; 0x5c
 8005928:	f003 fb5e 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800592c:	2300      	movs	r3, #0
 800592e:	e073      	b.n	8005a18 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005936:	f107 0310 	add.w	r3, r7, #16
 800593a:	4618      	mov	r0, r3
 800593c:	f000 ff4e 	bl	80067dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005940:	2301      	movs	r3, #1
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005944:	f002 f940 	bl	8007bc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005948:	f000 fc9a 	bl	8006280 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800594c:	f002 f90c 	bl	8007b68 <vPortEnterCritical>
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005956:	b25b      	sxtb	r3, r3
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d103      	bne.n	8005966 <xQueueReceive+0x162>
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800596c:	b25b      	sxtb	r3, r3
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d103      	bne.n	800597c <xQueueReceive+0x178>
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800597c:	f002 f924 	bl	8007bc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005980:	1d3a      	adds	r2, r7, #4
 8005982:	f107 0310 	add.w	r3, r7, #16
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f000 ff3d 	bl	8006808 <xTaskCheckForTimeOut>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d124      	bne.n	80059de <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005996:	f000 f9f2 	bl	8005d7e <prvIsQueueEmpty>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d018      	beq.n	80059d2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	3324      	adds	r3, #36	; 0x24
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	4611      	mov	r1, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fe5f 	bl	800666c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80059ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b0:	f000 f993 	bl	8005cda <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80059b4:	f000 fc72 	bl	800629c <xTaskResumeAll>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f47f af69 	bne.w	8005892 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <xQueueReceive+0x21c>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	e75f      	b.n	8005892 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80059d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d4:	f000 f981 	bl	8005cda <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80059d8:	f000 fc60 	bl	800629c <xTaskResumeAll>
 80059dc:	e759      	b.n	8005892 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80059de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e0:	f000 f97b 	bl	8005cda <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80059e4:	f000 fc5a 	bl	800629c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ea:	f000 f9c8 	bl	8005d7e <prvIsQueueEmpty>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f43f af4e 	beq.w	8005892 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	4618      	mov	r0, r3
 80059fa:	f004 f8b9 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 80059fe:	4604      	mov	r4, r0
 8005a00:	2000      	movs	r0, #0
 8005a02:	f004 f8b5 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005a06:	4602      	mov	r2, r0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	9100      	str	r1, [sp, #0]
 8005a0e:	4621      	mov	r1, r4
 8005a10:	205c      	movs	r0, #92	; 0x5c
 8005a12:	f003 fae9 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005a16:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3734      	adds	r7, #52	; 0x34
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd90      	pop	{r4, r7, pc}
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b091      	sub	sp, #68	; 0x44
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <xQueueReceiveFromISR+0x3a>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <xQueueReceiveFromISR+0x3e>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <xQueueReceiveFromISR+0x40>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a7e:	f002 f95d 	bl	8007d3c <vPortValidateInterruptPriority>
        __asm volatile
 8005a82:	f3ef 8211 	mrs	r2, BASEPRI
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	623a      	str	r2, [r7, #32]
 8005a98:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005a9a:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a9c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d04d      	beq.n	8005b46 <xQueueReceiveFromISR+0x122>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f004 f85a 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005abc:	4604      	mov	r4, r0
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f004 f855 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4621      	mov	r1, r4
 8005acc:	2062      	movs	r0, #98	; 0x62
 8005ace:	f003 fa15 	bl	8008efc <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ad6:	f000 f8da 	bl	8005c8e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005ae2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d112      	bne.n	8005b12 <xQueueReceiveFromISR+0xee>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d025      	beq.n	8005b40 <xQueueReceiveFromISR+0x11c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	3310      	adds	r3, #16
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fe09 	bl	8006710 <xTaskRemoveFromEventList>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01d      	beq.n	8005b40 <xQueueReceiveFromISR+0x11c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01a      	beq.n	8005b40 <xQueueReceiveFromISR+0x11c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e016      	b.n	8005b40 <xQueueReceiveFromISR+0x11c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005b12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b16:	2b7f      	cmp	r3, #127	; 0x7f
 8005b18:	d10a      	bne.n	8005b30 <xQueueReceiveFromISR+0x10c>
        __asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	61bb      	str	r3, [r7, #24]
    }
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <xQueueReceiveFromISR+0x10a>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b34:	3301      	adds	r3, #1
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	b25a      	sxtb	r2, r3
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005b40:	2301      	movs	r3, #1
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b44:	e010      	b.n	8005b68 <xQueueReceiveFromISR+0x144>
        }
        else
        {
            xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f004 f80f 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005b52:	4604      	mov	r4, r0
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 f80a 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4621      	mov	r1, r4
 8005b62:	2062      	movs	r0, #98	; 0x62
 8005b64:	f003 f9ca 	bl	8008efc <SEGGER_SYSVIEW_RecordU32x3>
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f383 8811 	msr	BASEPRI, r3
    }
 8005b72:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3744      	adds	r7, #68	; 0x44
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd90      	pop	{r4, r7, pc}

08005b7e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	60bb      	str	r3, [r7, #8]
    }
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005ba2:	f001 ffe1 	bl	8007b68 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005bac:	f002 f80c 	bl	8007bc8 <vPortExitCritical>

    return uxReturn;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10d      	bne.n	8005bf4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d14d      	bne.n	8005c7c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 ff51 	bl	8006a8c <xTaskPriorityDisinherit>
 8005bea:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	e043      	b.n	8005c7c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d119      	bne.n	8005c2e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6858      	ldr	r0, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	461a      	mov	r2, r3
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	f004 fa81 	bl	800a10c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d32b      	bcc.n	8005c7c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	e026      	b.n	8005c7c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68d8      	ldr	r0, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	461a      	mov	r2, r3
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	f004 fa67 	bl	800a10c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	425b      	negs	r3, r3
 8005c48:	441a      	add	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d207      	bcs.n	8005c6a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	425b      	negs	r3, r3
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d105      	bne.n	8005c7c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005c84:	697b      	ldr	r3, [r7, #20]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d018      	beq.n	8005cd2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	441a      	add	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d303      	bcc.n	8005cc2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68d9      	ldr	r1, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6838      	ldr	r0, [r7, #0]
 8005cce:	f004 fa1d 	bl	800a10c <memcpy>
    }
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005ce2:	f001 ff41 	bl	8007b68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cec:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cee:	e011      	b.n	8005d14 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fd07 	bl	8006710 <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005d08:	f000 fde4 	bl	80068d4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dce9      	bgt.n	8005cf0 <prvUnlockQueue+0x16>
 8005d1c:	e000      	b.n	8005d20 <prvUnlockQueue+0x46>
                        break;
 8005d1e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	22ff      	movs	r2, #255	; 0xff
 8005d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005d28:	f001 ff4e 	bl	8007bc8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005d2c:	f001 ff1c 	bl	8007b68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d36:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d38:	e011      	b.n	8005d5e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d012      	beq.n	8005d68 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3310      	adds	r3, #16
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fce2 	bl	8006710 <xTaskRemoveFromEventList>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005d52:	f000 fdbf 	bl	80068d4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dce9      	bgt.n	8005d3a <prvUnlockQueue+0x60>
 8005d66:	e000      	b.n	8005d6a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005d68:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	22ff      	movs	r2, #255	; 0xff
 8005d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005d72:	f001 ff29 	bl	8007bc8 <vPortExitCritical>
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005d86:	f001 feef 	bl	8007b68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e001      	b.n	8005d9c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005d9c:	f001 ff14 	bl	8007bc8 <vPortExitCritical>

    return xReturn;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005db2:	f001 fed9 	bl	8007b68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d102      	bne.n	8005dc8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e001      	b.n	8005dcc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005dcc:	f001 fefc 	bl	8007bc8 <vPortExitCritical>

    return xReturn;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	60fb      	str	r3, [r7, #12]
    }
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d102      	bne.n	8005e14 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e001      	b.n	8005e18 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005e18:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e01e      	b.n	8005e76 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e38:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <vQueueAddToRegistry+0x60>)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d115      	bne.n	8005e70 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e44:	4910      	ldr	r1, [pc, #64]	; (8005e88 <vQueueAddToRegistry+0x60>)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <vQueueAddToRegistry+0x60>)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f003 fe87 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8005e62:	4601      	mov	r1, r0
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	2071      	movs	r0, #113	; 0x71
 8005e6a:	f002 ffed 	bl	8008e48 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8005e6e:	e006      	b.n	8005e7e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b07      	cmp	r3, #7
 8005e7a:	d9dd      	bls.n	8005e38 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200001ec 	.word	0x200001ec

08005e8c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005e9c:	f001 fe64 	bl	8007b68 <vPortEnterCritical>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d103      	bne.n	8005eb6 <vQueueWaitForMessageRestricted+0x2a>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d103      	bne.n	8005ecc <vQueueWaitForMessageRestricted+0x40>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ecc:	f001 fe7c 	bl	8007bc8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3324      	adds	r3, #36	; 0x24
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fbe7 	bl	80066b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7ff fef7 	bl	8005cda <prvUnlockQueue>
    }
 8005eec:	bf00      	nop
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	; 0x30
 8005ef8:	af04      	add	r7, sp, #16
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 ff57 	bl	8007dbc <pvPortMalloc>
 8005f0e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00e      	beq.n	8005f34 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f16:	2058      	movs	r0, #88	; 0x58
 8005f18:	f001 ff50 	bl	8007dbc <pvPortMalloc>
 8005f1c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
 8005f2a:	e005      	b.n	8005f38 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005f2c:	6978      	ldr	r0, [r7, #20]
 8005f2e:	f002 f825 	bl	8007f7c <vPortFree>
 8005f32:	e001      	b.n	8005f38 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d013      	beq.n	8005f66 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	2300      	movs	r3, #0
 8005f42:	9303      	str	r3, [sp, #12]
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f80e 	bl	8005f76 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005f5a:	69f8      	ldr	r0, [r7, #28]
 8005f5c:	f000 f8a2 	bl	80060a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005f60:	2301      	movs	r3, #1
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e002      	b.n	8005f6c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f66:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
    }
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b088      	sub	sp, #32
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	21a5      	movs	r1, #165	; 0xa5
 8005f90:	f004 f8ca 	bl	800a128 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f023 0307 	bic.w	r3, r3, #7
 8005fac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <prvInitialiseNewTask+0x58>
        __asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	617b      	str	r3, [r7, #20]
    }
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01f      	beq.n	8006014 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	e012      	b.n	8006000 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	7819      	ldrb	r1, [r3, #0]
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3334      	adds	r3, #52	; 0x34
 8005fea:	460a      	mov	r2, r1
 8005fec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d006      	beq.n	8006008 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b09      	cmp	r3, #9
 8006004:	d9e9      	bls.n	8005fda <prvInitialiseNewTask+0x64>
 8006006:	e000      	b.n	800600a <prvInitialiseNewTask+0x94>
            {
                break;
 8006008:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006012:	e003      	b.n	800601c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	2b04      	cmp	r3, #4
 8006020:	d901      	bls.n	8006026 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006022:	2304      	movs	r3, #4
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006030:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2200      	movs	r2, #0
 8006036:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff f879 	bl	8005134 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	3318      	adds	r3, #24
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff f874 	bl	8005134 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006050:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	f1c3 0205 	rsb	r2, r3, #5
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006060:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	3350      	adds	r3, #80	; 0x50
 8006066:	2204      	movs	r2, #4
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f004 f85c 	bl	800a128 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	3354      	adds	r3, #84	; 0x54
 8006074:	2201      	movs	r2, #1
 8006076:	2100      	movs	r1, #0
 8006078:	4618      	mov	r0, r3
 800607a:	f004 f855 	bl	800a128 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	68f9      	ldr	r1, [r7, #12]
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f001 fc42 	bl	800790c <pxPortInitialiseStack>
 8006088:	4602      	mov	r2, r0
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800609a:	bf00      	nop
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80060a4:	b5b0      	push	{r4, r5, r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80060ac:	f001 fd5c 	bl	8007b68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80060b0:	4b3b      	ldr	r3, [pc, #236]	; (80061a0 <prvAddNewTaskToReadyList+0xfc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a3a      	ldr	r2, [pc, #232]	; (80061a0 <prvAddNewTaskToReadyList+0xfc>)
 80060b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80060ba:	4b3a      	ldr	r3, [pc, #232]	; (80061a4 <prvAddNewTaskToReadyList+0x100>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80060c2:	4a38      	ldr	r2, [pc, #224]	; (80061a4 <prvAddNewTaskToReadyList+0x100>)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060c8:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <prvAddNewTaskToReadyList+0xfc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d110      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80060d0:	f000 fc24 	bl	800691c <prvInitialiseTaskLists>
 80060d4:	e00d      	b.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80060d6:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <prvAddNewTaskToReadyList+0x104>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060de:	4b31      	ldr	r3, [pc, #196]	; (80061a4 <prvAddNewTaskToReadyList+0x100>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d802      	bhi.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80060ec:	4a2d      	ldr	r2, [pc, #180]	; (80061a4 <prvAddNewTaskToReadyList+0x100>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80060f2:	4b2e      	ldr	r3, [pc, #184]	; (80061ac <prvAddNewTaskToReadyList+0x108>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <prvAddNewTaskToReadyList+0x108>)
 80060fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060fc:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <prvAddNewTaskToReadyList+0x108>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <prvAddNewTaskToReadyList+0x94>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	f003 fc09 	bl	8009924 <SEGGER_SYSVIEW_OnTaskCreate>
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	461d      	mov	r5, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461c      	mov	r4, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	1ae3      	subs	r3, r4, r3
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	462b      	mov	r3, r5
 8006134:	f003 ff26 	bl	8009f84 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4618      	mov	r0, r3
 800613c:	f003 fc76 	bl	8009a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	2201      	movs	r2, #1
 8006146:	409a      	lsls	r2, r3
 8006148:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <prvAddNewTaskToReadyList+0x10c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4313      	orrs	r3, r2
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <prvAddNewTaskToReadyList+0x10c>)
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <prvAddNewTaskToReadyList+0x110>)
 8006160:	441a      	add	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f7fe fff0 	bl	800514e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800616e:	f001 fd2b 	bl	8007bc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <prvAddNewTaskToReadyList+0x104>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <prvAddNewTaskToReadyList+0x100>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	429a      	cmp	r2, r3
 8006186:	d207      	bcs.n	8006198 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <prvAddNewTaskToReadyList+0x114>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bdb0      	pop	{r4, r5, r7, pc}
 80061a0:	20000304 	.word	0x20000304
 80061a4:	2000022c 	.word	0x2000022c
 80061a8:	20000310 	.word	0x20000310
 80061ac:	20000320 	.word	0x20000320
 80061b0:	2000030c 	.word	0x2000030c
 80061b4:	20000230 	.word	0x20000230
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80061c2:	4b27      	ldr	r3, [pc, #156]	; (8006260 <vTaskStartScheduler+0xa4>)
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	2300      	movs	r3, #0
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	2282      	movs	r2, #130	; 0x82
 80061ce:	4925      	ldr	r1, [pc, #148]	; (8006264 <vTaskStartScheduler+0xa8>)
 80061d0:	4825      	ldr	r0, [pc, #148]	; (8006268 <vTaskStartScheduler+0xac>)
 80061d2:	f7ff fe8f 	bl	8005ef4 <xTaskCreate>
 80061d6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d102      	bne.n	80061e4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80061de:	f000 ffdd 	bl	800719c <xTimerCreateTimerTask>
 80061e2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d124      	bne.n	8006234 <vTaskStartScheduler+0x78>
        __asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	60bb      	str	r3, [r7, #8]
    }
 80061fc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80061fe:	4b1b      	ldr	r3, [pc, #108]	; (800626c <vTaskStartScheduler+0xb0>)
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006206:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <vTaskStartScheduler+0xb4>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <vTaskStartScheduler+0xb8>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006212:	4b19      	ldr	r3, [pc, #100]	; (8006278 <vTaskStartScheduler+0xbc>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	4b12      	ldr	r3, [pc, #72]	; (8006260 <vTaskStartScheduler+0xa4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d102      	bne.n	8006224 <vTaskStartScheduler+0x68>
 800621e:	f003 fb65 	bl	80098ec <SEGGER_SYSVIEW_OnIdle>
 8006222:	e004      	b.n	800622e <vTaskStartScheduler+0x72>
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <vTaskStartScheduler+0xbc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f003 fbbd 	bl	80099a8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800622e:	f001 fbf9 	bl	8007a24 <xPortStartScheduler>
 8006232:	e00e      	b.n	8006252 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d10a      	bne.n	8006252 <vTaskStartScheduler+0x96>
        __asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	607b      	str	r3, [r7, #4]
    }
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <vTaskStartScheduler+0xc0>)
 8006254:	681b      	ldr	r3, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000328 	.word	0x20000328
 8006264:	0800b7b4 	.word	0x0800b7b4
 8006268:	080068ed 	.word	0x080068ed
 800626c:	20000324 	.word	0x20000324
 8006270:	20000310 	.word	0x20000310
 8006274:	20000308 	.word	0x20000308
 8006278:	2000022c 	.word	0x2000022c
 800627c:	20000020 	.word	0x20000020

08006280 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006284:	4b04      	ldr	r3, [pc, #16]	; (8006298 <vTaskSuspendAll+0x18>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3301      	adds	r3, #1
 800628a:	4a03      	ldr	r2, [pc, #12]	; (8006298 <vTaskSuspendAll+0x18>)
 800628c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800628e:	bf00      	nop
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	2000032c 	.word	0x2000032c

0800629c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80062aa:	4b43      	ldr	r3, [pc, #268]	; (80063b8 <xTaskResumeAll+0x11c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	603b      	str	r3, [r7, #0]
    }
 80062c4:	bf00      	nop
 80062c6:	e7fe      	b.n	80062c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80062c8:	f001 fc4e 	bl	8007b68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80062cc:	4b3a      	ldr	r3, [pc, #232]	; (80063b8 <xTaskResumeAll+0x11c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	4a39      	ldr	r2, [pc, #228]	; (80063b8 <xTaskResumeAll+0x11c>)
 80062d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062d6:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <xTaskResumeAll+0x11c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d165      	bne.n	80063aa <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062de:	4b37      	ldr	r3, [pc, #220]	; (80063bc <xTaskResumeAll+0x120>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d061      	beq.n	80063aa <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062e6:	e032      	b.n	800634e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e8:	4b35      	ldr	r3, [pc, #212]	; (80063c0 <xTaskResumeAll+0x124>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3318      	adds	r3, #24
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe ff87 	bl	8005208 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe ff82 	bl	8005208 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4618      	mov	r0, r3
 8006308:	f003 fb90 	bl	8009a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <xTaskResumeAll+0x128>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <xTaskResumeAll+0x128>)
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a27      	ldr	r2, [pc, #156]	; (80063c8 <xTaskResumeAll+0x12c>)
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe ff0a 	bl	800514e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	4b23      	ldr	r3, [pc, #140]	; (80063cc <xTaskResumeAll+0x130>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <xTaskResumeAll+0x134>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800634e:	4b1c      	ldr	r3, [pc, #112]	; (80063c0 <xTaskResumeAll+0x124>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1c8      	bne.n	80062e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800635c:	f000 fb5c 	bl	8006a18 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006360:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <xTaskResumeAll+0x138>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d010      	beq.n	800638e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800636c:	f000 f858 	bl	8006420 <xTaskIncrementTick>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8006376:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <xTaskResumeAll+0x134>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f1      	bne.n	800636c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8006388:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <xTaskResumeAll+0x138>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <xTaskResumeAll+0x134>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006396:	2301      	movs	r3, #1
 8006398:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <xTaskResumeAll+0x13c>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80063aa:	f001 fc0d 	bl	8007bc8 <vPortExitCritical>

    return xAlreadyYielded;
 80063ae:	68bb      	ldr	r3, [r7, #8]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	2000032c 	.word	0x2000032c
 80063bc:	20000304 	.word	0x20000304
 80063c0:	200002c4 	.word	0x200002c4
 80063c4:	2000030c 	.word	0x2000030c
 80063c8:	20000230 	.word	0x20000230
 80063cc:	2000022c 	.word	0x2000022c
 80063d0:	20000318 	.word	0x20000318
 80063d4:	20000314 	.word	0x20000314
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <xTaskGetTickCount+0x1c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80063e8:	687b      	ldr	r3, [r7, #4]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000308 	.word	0x20000308

080063fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006402:	f001 fc9b 	bl	8007d3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006406:	2300      	movs	r3, #0
 8006408:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800640a:	4b04      	ldr	r3, [pc, #16]	; (800641c <xTaskGetTickCountFromISR+0x20>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006410:	683b      	ldr	r3, [r7, #0]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000308 	.word	0x20000308

08006420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800642a:	4b50      	ldr	r3, [pc, #320]	; (800656c <xTaskIncrementTick+0x14c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 8092 	bne.w	8006558 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006434:	4b4e      	ldr	r3, [pc, #312]	; (8006570 <xTaskIncrementTick+0x150>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800643c:	4a4c      	ldr	r2, [pc, #304]	; (8006570 <xTaskIncrementTick+0x150>)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d120      	bne.n	800648a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006448:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <xTaskIncrementTick+0x154>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <xTaskIncrementTick+0x48>
        __asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	603b      	str	r3, [r7, #0]
    }
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <xTaskIncrementTick+0x46>
 8006468:	4b42      	ldr	r3, [pc, #264]	; (8006574 <xTaskIncrementTick+0x154>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	4b42      	ldr	r3, [pc, #264]	; (8006578 <xTaskIncrementTick+0x158>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a40      	ldr	r2, [pc, #256]	; (8006574 <xTaskIncrementTick+0x154>)
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	4a40      	ldr	r2, [pc, #256]	; (8006578 <xTaskIncrementTick+0x158>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b3f      	ldr	r3, [pc, #252]	; (800657c <xTaskIncrementTick+0x15c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3301      	adds	r3, #1
 8006482:	4a3e      	ldr	r2, [pc, #248]	; (800657c <xTaskIncrementTick+0x15c>)
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	f000 fac7 	bl	8006a18 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800648a:	4b3d      	ldr	r3, [pc, #244]	; (8006580 <xTaskIncrementTick+0x160>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	429a      	cmp	r2, r3
 8006492:	d34c      	bcc.n	800652e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006494:	4b37      	ldr	r3, [pc, #220]	; (8006574 <xTaskIncrementTick+0x154>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649e:	4b38      	ldr	r3, [pc, #224]	; (8006580 <xTaskIncrementTick+0x160>)
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295
 80064a4:	601a      	str	r2, [r3, #0]
                    break;
 80064a6:	e042      	b.n	800652e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a8:	4b32      	ldr	r3, [pc, #200]	; (8006574 <xTaskIncrementTick+0x154>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d203      	bcs.n	80064c8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80064c0:	4a2f      	ldr	r2, [pc, #188]	; (8006580 <xTaskIncrementTick+0x160>)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064c6:	e032      	b.n	800652e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe fe9b 	bl	8005208 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	3318      	adds	r3, #24
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fe92 	bl	8005208 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f003 faa0 	bl	8009a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	2201      	movs	r2, #1
 80064f2:	409a      	lsls	r2, r3
 80064f4:	4b23      	ldr	r3, [pc, #140]	; (8006584 <xTaskIncrementTick+0x164>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	4a22      	ldr	r2, [pc, #136]	; (8006584 <xTaskIncrementTick+0x164>)
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4a1f      	ldr	r2, [pc, #124]	; (8006588 <xTaskIncrementTick+0x168>)
 800650c:	441a      	add	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fe fe1a 	bl	800514e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651e:	4b1b      	ldr	r3, [pc, #108]	; (800658c <xTaskIncrementTick+0x16c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d3b5      	bcc.n	8006494 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800652c:	e7b2      	b.n	8006494 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800652e:	4b17      	ldr	r3, [pc, #92]	; (800658c <xTaskIncrementTick+0x16c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4914      	ldr	r1, [pc, #80]	; (8006588 <xTaskIncrementTick+0x168>)
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d901      	bls.n	800654a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8006546:	2301      	movs	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <xTaskIncrementTick+0x170>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8006552:	2301      	movs	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e004      	b.n	8006562 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006558:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <xTaskIncrementTick+0x174>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	4a0d      	ldr	r2, [pc, #52]	; (8006594 <xTaskIncrementTick+0x174>)
 8006560:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006562:	697b      	ldr	r3, [r7, #20]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	2000032c 	.word	0x2000032c
 8006570:	20000308 	.word	0x20000308
 8006574:	200002bc 	.word	0x200002bc
 8006578:	200002c0 	.word	0x200002c0
 800657c:	2000031c 	.word	0x2000031c
 8006580:	20000324 	.word	0x20000324
 8006584:	2000030c 	.word	0x2000030c
 8006588:	20000230 	.word	0x20000230
 800658c:	2000022c 	.word	0x2000022c
 8006590:	20000318 	.word	0x20000318
 8006594:	20000314 	.word	0x20000314

08006598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800659e:	4b2d      	ldr	r3, [pc, #180]	; (8006654 <vTaskSwitchContext+0xbc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80065a6:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <vTaskSwitchContext+0xc0>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80065ac:	e04d      	b.n	800664a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80065ae:	4b2a      	ldr	r3, [pc, #168]	; (8006658 <vTaskSwitchContext+0xc0>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b4:	4b29      	ldr	r3, [pc, #164]	; (800665c <vTaskSwitchContext+0xc4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	fab3 f383 	clz	r3, r3
 80065c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	f1c3 031f 	rsb	r3, r3, #31
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	4925      	ldr	r1, [pc, #148]	; (8006660 <vTaskSwitchContext+0xc8>)
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	607b      	str	r3, [r7, #4]
    }
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vTaskSwitchContext+0x5a>
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4a18      	ldr	r2, [pc, #96]	; (8006660 <vTaskSwitchContext+0xc8>)
 8006600:	4413      	add	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	605a      	str	r2, [r3, #4]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3308      	adds	r3, #8
 8006616:	429a      	cmp	r2, r3
 8006618:	d104      	bne.n	8006624 <vTaskSwitchContext+0x8c>
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	4a0e      	ldr	r2, [pc, #56]	; (8006664 <vTaskSwitchContext+0xcc>)
 800662c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800662e:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <vTaskSwitchContext+0xcc>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <vTaskSwitchContext+0xd0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d102      	bne.n	8006640 <vTaskSwitchContext+0xa8>
 800663a:	f003 f957 	bl	80098ec <SEGGER_SYSVIEW_OnIdle>
}
 800663e:	e004      	b.n	800664a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8006640:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vTaskSwitchContext+0xcc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f003 f9af 	bl	80099a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800664a:	bf00      	nop
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	2000032c 	.word	0x2000032c
 8006658:	20000318 	.word	0x20000318
 800665c:	2000030c 	.word	0x2000030c
 8006660:	20000230 	.word	0x20000230
 8006664:	2000022c 	.word	0x2000022c
 8006668:	20000328 	.word	0x20000328

0800666c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60fb      	str	r3, [r7, #12]
    }
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <vTaskPlaceOnEventList+0x44>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3318      	adds	r3, #24
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fe fd7b 	bl	8005196 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066a0:	2101      	movs	r1, #1
 80066a2:	6838      	ldr	r0, [r7, #0]
 80066a4:	f000 fd02 	bl	80070ac <prvAddCurrentTaskToDelayedList>
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	2000022c 	.word	0x2000022c

080066b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	617b      	str	r3, [r7, #20]
    }
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <vTaskPlaceOnEventListRestricted+0x58>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3318      	adds	r3, #24
 80066e2:	4619      	mov	r1, r3
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7fe fd32 	bl	800514e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80066f0:	f04f 33ff 	mov.w	r3, #4294967295
 80066f4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80066f6:	2024      	movs	r0, #36	; 0x24
 80066f8:	f002 fb4c 	bl	8008d94 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	68b8      	ldr	r0, [r7, #8]
 8006700:	f000 fcd4 	bl	80070ac <prvAddCurrentTaskToDelayedList>
    }
 8006704:	bf00      	nop
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	2000022c 	.word	0x2000022c

08006710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60fb      	str	r3, [r7, #12]
    }
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3318      	adds	r3, #24
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fd61 	bl	8005208 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006746:	4b1f      	ldr	r3, [pc, #124]	; (80067c4 <xTaskRemoveFromEventList+0xb4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d120      	bne.n	8006790 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3304      	adds	r3, #4
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fd58 	bl	8005208 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4618      	mov	r0, r3
 800675c:	f003 f966 	bl	8009a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <xTaskRemoveFromEventList+0xb8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <xTaskRemoveFromEventList+0xb8>)
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4a13      	ldr	r2, [pc, #76]	; (80067cc <xTaskRemoveFromEventList+0xbc>)
 8006780:	441a      	add	r2, r3
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fe fce0 	bl	800514e <vListInsertEnd>
 800678e:	e005      	b.n	800679c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	3318      	adds	r3, #24
 8006794:	4619      	mov	r1, r3
 8006796:	480e      	ldr	r0, [pc, #56]	; (80067d0 <xTaskRemoveFromEventList+0xc0>)
 8006798:	f7fe fcd9 	bl	800514e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <xTaskRemoveFromEventList+0xc4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d905      	bls.n	80067b6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80067aa:	2301      	movs	r3, #1
 80067ac:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <xTaskRemoveFromEventList+0xc8>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e001      	b.n	80067ba <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	2000032c 	.word	0x2000032c
 80067c8:	2000030c 	.word	0x2000030c
 80067cc:	20000230 	.word	0x20000230
 80067d0:	200002c4 	.word	0x200002c4
 80067d4:	2000022c 	.word	0x2000022c
 80067d8:	20000318 	.word	0x20000318

080067dc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <vTaskInternalSetTimeOutState+0x24>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <vTaskInternalSetTimeOutState+0x28>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	605a      	str	r2, [r3, #4]
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	2000031c 	.word	0x2000031c
 8006804:	20000308 	.word	0x20000308

08006808 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	613b      	str	r3, [r7, #16]
    }
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	60fb      	str	r3, [r7, #12]
    }
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800684a:	f001 f98d 	bl	8007b68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800684e:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <xTaskCheckForTimeOut+0xc4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d102      	bne.n	800686e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e026      	b.n	80068bc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <xTaskCheckForTimeOut+0xc8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d00a      	beq.n	8006890 <xTaskCheckForTimeOut+0x88>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	429a      	cmp	r2, r3
 8006882:	d305      	bcc.n	8006890 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	e015      	b.n	80068bc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d20b      	bcs.n	80068b2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	1ad2      	subs	r2, r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff98 	bl	80067dc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e004      	b.n	80068bc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80068bc:	f001 f984 	bl	8007bc8 <vPortExitCritical>

    return xReturn;
 80068c0:	69fb      	ldr	r3, [r7, #28]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000308 	.word	0x20000308
 80068d0:	2000031c 	.word	0x2000031c

080068d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80068d8:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <vTaskMissedYield+0x14>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	20000318 	.word	0x20000318

080068ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80068f4:	f000 f852 	bl	800699c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <prvIdleTask+0x28>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d9f9      	bls.n	80068f4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <prvIdleTask+0x2c>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006910:	e7f0      	b.n	80068f4 <prvIdleTask+0x8>
 8006912:	bf00      	nop
 8006914:	20000230 	.word	0x20000230
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	e00c      	b.n	8006942 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4a12      	ldr	r2, [pc, #72]	; (800697c <prvInitialiseTaskLists+0x60>)
 8006934:	4413      	add	r3, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fbdc 	bl	80050f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3301      	adds	r3, #1
 8006940:	607b      	str	r3, [r7, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b04      	cmp	r3, #4
 8006946:	d9ef      	bls.n	8006928 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006948:	480d      	ldr	r0, [pc, #52]	; (8006980 <prvInitialiseTaskLists+0x64>)
 800694a:	f7fe fbd3 	bl	80050f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800694e:	480d      	ldr	r0, [pc, #52]	; (8006984 <prvInitialiseTaskLists+0x68>)
 8006950:	f7fe fbd0 	bl	80050f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006954:	480c      	ldr	r0, [pc, #48]	; (8006988 <prvInitialiseTaskLists+0x6c>)
 8006956:	f7fe fbcd 	bl	80050f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800695a:	480c      	ldr	r0, [pc, #48]	; (800698c <prvInitialiseTaskLists+0x70>)
 800695c:	f7fe fbca 	bl	80050f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006960:	480b      	ldr	r0, [pc, #44]	; (8006990 <prvInitialiseTaskLists+0x74>)
 8006962:	f7fe fbc7 	bl	80050f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <prvInitialiseTaskLists+0x78>)
 8006968:	4a05      	ldr	r2, [pc, #20]	; (8006980 <prvInitialiseTaskLists+0x64>)
 800696a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <prvInitialiseTaskLists+0x7c>)
 800696e:	4a05      	ldr	r2, [pc, #20]	; (8006984 <prvInitialiseTaskLists+0x68>)
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000230 	.word	0x20000230
 8006980:	20000294 	.word	0x20000294
 8006984:	200002a8 	.word	0x200002a8
 8006988:	200002c4 	.word	0x200002c4
 800698c:	200002d8 	.word	0x200002d8
 8006990:	200002f0 	.word	0x200002f0
 8006994:	200002bc 	.word	0x200002bc
 8006998:	200002c0 	.word	0x200002c0

0800699c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069a2:	e019      	b.n	80069d8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80069a4:	f001 f8e0 	bl	8007b68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a8:	4b10      	ldr	r3, [pc, #64]	; (80069ec <prvCheckTasksWaitingTermination+0x50>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fc27 	bl	8005208 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <prvCheckTasksWaitingTermination+0x54>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3b01      	subs	r3, #1
 80069c0:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <prvCheckTasksWaitingTermination+0x54>)
 80069c2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <prvCheckTasksWaitingTermination+0x58>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	4a0a      	ldr	r2, [pc, #40]	; (80069f4 <prvCheckTasksWaitingTermination+0x58>)
 80069cc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80069ce:	f001 f8fb 	bl	8007bc8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f810 	bl	80069f8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <prvCheckTasksWaitingTermination+0x58>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e1      	bne.n	80069a4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200002d8 	.word	0x200002d8
 80069f0:	20000304 	.word	0x20000304
 80069f4:	200002ec 	.word	0x200002ec

080069f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 fab9 	bl	8007f7c <vPortFree>
                vPortFree( pxTCB );
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 fab6 	bl	8007f7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <prvResetNextTaskUnblockTime+0x30>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <prvResetNextTaskUnblockTime+0x34>)
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006a2e:	e005      	b.n	8006a3c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <prvResetNextTaskUnblockTime+0x30>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a04      	ldr	r2, [pc, #16]	; (8006a4c <prvResetNextTaskUnblockTime+0x34>)
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	200002bc 	.word	0x200002bc
 8006a4c:	20000324 	.word	0x20000324

08006a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006a56:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <xTaskGetSchedulerState+0x34>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	607b      	str	r3, [r7, #4]
 8006a62:	e008      	b.n	8006a76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a64:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <xTaskGetSchedulerState+0x38>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	e001      	b.n	8006a76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006a72:	2300      	movs	r3, #0
 8006a74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006a76:	687b      	ldr	r3, [r7, #4]
    }
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000310 	.word	0x20000310
 8006a88:	2000032c 	.word	0x2000032c

08006a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d068      	beq.n	8006b74 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006aa2:	4b37      	ldr	r3, [pc, #220]	; (8006b80 <xTaskPriorityDisinherit+0xf4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d00a      	beq.n	8006ac2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60fb      	str	r3, [r7, #12]
    }
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	60bb      	str	r3, [r7, #8]
    }
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae4:	1e5a      	subs	r2, r3, #1
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d03e      	beq.n	8006b74 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d13a      	bne.n	8006b74 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fb80 	bl	8005208 <uxListRemove>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	2201      	movs	r2, #1
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	43da      	mvns	r2, r3
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <xTaskPriorityDisinherit+0xf8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	4a18      	ldr	r2, [pc, #96]	; (8006b84 <xTaskPriorityDisinherit+0xf8>)
 8006b22:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4619      	mov	r1, r3
 8006b28:	204a      	movs	r0, #74	; 0x4a
 8006b2a:	f002 f951 	bl	8008dd0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	f1c3 0205 	rsb	r2, r3, #5
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	2201      	movs	r2, #1
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <xTaskPriorityDisinherit+0xf8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <xTaskPriorityDisinherit+0xf8>)
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <xTaskPriorityDisinherit+0xfc>)
 8006b62:	441a      	add	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f7fe faef 	bl	800514e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006b74:	697b      	ldr	r3, [r7, #20]
    }
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	2000022c 	.word	0x2000022c
 8006b84:	2000030c 	.word	0x2000030c
 8006b88:	20000230 	.word	0x20000230

08006b8c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	613b      	str	r3, [r7, #16]
    }
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006bb6:	f000 ffd7 	bl	8007b68 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006bba:	4b36      	ldr	r3, [pc, #216]	; (8006c94 <xTaskGenericNotifyWait+0x108>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3354      	adds	r3, #84	; 0x54
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d022      	beq.n	8006c12 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006bcc:	4b31      	ldr	r3, [pc, #196]	; (8006c94 <xTaskGenericNotifyWait+0x108>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	3214      	adds	r2, #20
 8006bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	43d2      	mvns	r2, r2
 8006bdc:	4011      	ands	r1, r2
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	3214      	adds	r2, #20
 8006be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006be6:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <xTaskGenericNotifyWait+0x108>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	3354      	adds	r3, #84	; 0x54
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	6a38      	ldr	r0, [r7, #32]
 8006bfe:	f000 fa55 	bl	80070ac <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006c02:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <xTaskGenericNotifyWait+0x10c>)
 8006c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c12:	f000 ffd9 	bl	8007bc8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006c16:	f000 ffa7 	bl	8007b68 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	2040      	movs	r0, #64	; 0x40
 8006c28:	f002 f9de 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006c32:	4b18      	ldr	r3, [pc, #96]	; (8006c94 <xTaskGenericNotifyWait+0x108>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	3214      	adds	r2, #20
 8006c3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <xTaskGenericNotifyWait+0x108>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3354      	adds	r3, #84	; 0x54
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d002      	beq.n	8006c5a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e00e      	b.n	8006c78 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006c5a:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <xTaskGenericNotifyWait+0x108>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	3214      	adds	r2, #20
 8006c62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	43d2      	mvns	r2, r2
 8006c6a:	4011      	ands	r1, r2
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	3214      	adds	r2, #20
 8006c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <xTaskGenericNotifyWait+0x108>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	3354      	adds	r3, #84	; 0x54
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006c86:	f000 ff9f 	bl	8007bc8 <vPortExitCritical>

        return xReturn;
 8006c8a:	697b      	ldr	r3, [r7, #20]
    }
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2000022c 	.word	0x2000022c
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	; 0x38
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006caa:	2301      	movs	r3, #1
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <xTaskGenericNotify+0x2e>
        __asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	623b      	str	r3, [r7, #32]
    }
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xTaskGenericNotify+0x4a>
        __asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	61fb      	str	r3, [r7, #28]
    }
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006cea:	f000 ff3d 	bl	8007b68 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	3214      	adds	r2, #20
 8006cfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4413      	add	r3, r2
 8006d08:	3354      	adds	r3, #84	; 0x54
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4413      	add	r3, r2
 8006d16:	3354      	adds	r3, #84	; 0x54
 8006d18:	2202      	movs	r2, #2
 8006d1a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d83b      	bhi.n	8006d9a <xTaskGenericNotify+0xfe>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <xTaskGenericNotify+0x8c>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006db9 	.word	0x08006db9
 8006d2c:	08006d3d 	.word	0x08006d3d
 8006d30:	08006d59 	.word	0x08006d59
 8006d34:	08006d71 	.word	0x08006d71
 8006d38:	08006d7f 	.word	0x08006d7f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	3214      	adds	r2, #20
 8006d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	ea42 0103 	orr.w	r1, r2, r3
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	3214      	adds	r2, #20
 8006d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d56:	e032      	b.n	8006dbe <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	3214      	adds	r2, #20
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	3214      	adds	r2, #20
 8006d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d6e:	e026      	b.n	8006dbe <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	3214      	adds	r2, #20
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d7c:	e01f      	b.n	8006dbe <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d006      	beq.n	8006d94 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	3214      	adds	r2, #20
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006d92:	e014      	b.n	8006dbe <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006d98:	e011      	b.n	8006dbe <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006d9a:	4b34      	ldr	r3, [pc, #208]	; (8006e6c <xTaskGenericNotify+0x1d0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <xTaskGenericNotify+0x120>
        __asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	61bb      	str	r3, [r7, #24]
    }
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <xTaskGenericNotify+0x11a>
                    break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <xTaskGenericNotify+0x122>

                    break;
 8006dbc:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 fed5 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	203e      	movs	r0, #62	; 0x3e
 8006dd4:	f002 f908 	bl	8008fe8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d13d      	bne.n	8006e5c <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	3304      	adds	r3, #4
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe fa0f 	bl	8005208 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	4618      	mov	r0, r3
 8006dee:	f002 fe1d 	bl	8009a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	2201      	movs	r2, #1
 8006df8:	409a      	lsls	r2, r3
 8006dfa:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <xTaskGenericNotify+0x1d4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <xTaskGenericNotify+0x1d4>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <xTaskGenericNotify+0x1d8>)
 8006e12:	441a      	add	r2, r3
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	3304      	adds	r3, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	f7fe f997 	bl	800514e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <xTaskGenericNotify+0x1a2>
        __asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	617b      	str	r3, [r7, #20]
    }
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <xTaskGenericNotify+0x1dc>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d907      	bls.n	8006e5c <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <xTaskGenericNotify+0x1e0>)
 8006e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e5c:	f000 feb4 	bl	8007bc8 <vPortExitCritical>

        return xReturn;
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006e62:	4618      	mov	r0, r3
 8006e64:	3730      	adds	r7, #48	; 0x30
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000308 	.word	0x20000308
 8006e70:	2000030c 	.word	0x2000030c
 8006e74:	20000230 	.word	0x20000230
 8006e78:	2000022c 	.word	0x2000022c
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b092      	sub	sp, #72	; 0x48
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eca:	f000 ff37 	bl	8007d3c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ee8:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	3214      	adds	r2, #20
 8006efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f00:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4413      	add	r3, r2
 8006f08:	3354      	adds	r3, #84	; 0x54
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	3354      	adds	r3, #84	; 0x54
 8006f18:	2202      	movs	r2, #2
 8006f1a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d83b      	bhi.n	8006f9a <xTaskGenericNotifyFromISR+0x11a>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <xTaskGenericNotifyFromISR+0xa8>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006fb9 	.word	0x08006fb9
 8006f2c:	08006f3d 	.word	0x08006f3d
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f71 	.word	0x08006f71
 8006f38:	08006f7f 	.word	0x08006f7f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	3214      	adds	r2, #20
 8006f42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	ea42 0103 	orr.w	r1, r2, r3
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	3214      	adds	r2, #20
 8006f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f56:	e032      	b.n	8006fbe <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	3214      	adds	r2, #20
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	1c59      	adds	r1, r3, #1
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	3214      	adds	r2, #20
 8006f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f6e:	e026      	b.n	8006fbe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	3214      	adds	r2, #20
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f7c:	e01f      	b.n	8006fbe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d006      	beq.n	8006f94 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	3214      	adds	r2, #20
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006f92:	e014      	b.n	8006fbe <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006f98:	e011      	b.n	8006fbe <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006f9a:	4b3d      	ldr	r3, [pc, #244]	; (8007090 <xTaskGenericNotifyFromISR+0x210>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	61fb      	str	r3, [r7, #28]
    }
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006fb8:	bf00      	nop
 8006fba:	e000      	b.n	8006fbe <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006fbc:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f002 fdd5 	bl	8009b70 <SEGGER_SYSVIEW_ShrinkId>
 8006fc6:	78f9      	ldrb	r1, [r7, #3]
 8006fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fcc:	9201      	str	r2, [sp, #4]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	203f      	movs	r0, #63	; 0x3f
 8006fd8:	f002 f898 	bl	800910c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d149      	bne.n	8007078 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	61bb      	str	r3, [r7, #24]
    }
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007002:	4b24      	ldr	r3, [pc, #144]	; (8007094 <xTaskGenericNotifyFromISR+0x214>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d120      	bne.n	800704c <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	3304      	adds	r3, #4
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe f8fa 	bl	8005208 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	4618      	mov	r0, r3
 8007018:	f002 fd08 	bl	8009a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	2201      	movs	r2, #1
 8007022:	409a      	lsls	r2, r3
 8007024:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <xTaskGenericNotifyFromISR+0x218>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4313      	orrs	r3, r2
 800702a:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <xTaskGenericNotifyFromISR+0x218>)
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4a18      	ldr	r2, [pc, #96]	; (800709c <xTaskGenericNotifyFromISR+0x21c>)
 800703c:	441a      	add	r2, r3
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	3304      	adds	r3, #4
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f7fe f882 	bl	800514e <vListInsertEnd>
 800704a:	e005      	b.n	8007058 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	3318      	adds	r3, #24
 8007050:	4619      	mov	r1, r3
 8007052:	4813      	ldr	r0, [pc, #76]	; (80070a0 <xTaskGenericNotifyFromISR+0x220>)
 8007054:	f7fe f87b 	bl	800514e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <xTaskGenericNotifyFromISR+0x224>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	429a      	cmp	r2, r3
 8007064:	d908      	bls.n	8007078 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800706c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <xTaskGenericNotifyFromISR+0x228>)
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f383 8811 	msr	BASEPRI, r3
    }
 8007082:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8007086:	4618      	mov	r0, r3
 8007088:	3740      	adds	r7, #64	; 0x40
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000308 	.word	0x20000308
 8007094:	2000032c 	.word	0x2000032c
 8007098:	2000030c 	.word	0x2000030c
 800709c:	20000230 	.word	0x20000230
 80070a0:	200002c4 	.word	0x200002c4
 80070a4:	2000022c 	.word	0x2000022c
 80070a8:	20000318 	.word	0x20000318

080070ac <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80070b6:	4b32      	ldr	r3, [pc, #200]	; (8007180 <prvAddCurrentTaskToDelayedList+0xd4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070bc:	4b31      	ldr	r3, [pc, #196]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe f8a0 	bl	8005208 <uxListRemove>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070ce:	4b2d      	ldr	r3, [pc, #180]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	2201      	movs	r2, #1
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	43da      	mvns	r2, r3
 80070dc:	4b2a      	ldr	r3, [pc, #168]	; (8007188 <prvAddCurrentTaskToDelayedList+0xdc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4013      	ands	r3, r2
 80070e2:	4a29      	ldr	r2, [pc, #164]	; (8007188 <prvAddCurrentTaskToDelayedList+0xdc>)
 80070e4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d110      	bne.n	8007110 <prvAddCurrentTaskToDelayedList+0x64>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80070f4:	4b23      	ldr	r3, [pc, #140]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	211b      	movs	r1, #27
 80070fa:	4618      	mov	r0, r3
 80070fc:	f002 fcd8 	bl	8009ab0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007100:	4b20      	ldr	r3, [pc, #128]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3304      	adds	r3, #4
 8007106:	4619      	mov	r1, r3
 8007108:	4820      	ldr	r0, [pc, #128]	; (800718c <prvAddCurrentTaskToDelayedList+0xe0>)
 800710a:	f7fe f820 	bl	800514e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800710e:	e032      	b.n	8007176 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	429a      	cmp	r2, r3
 8007126:	d20f      	bcs.n	8007148 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8007128:	4b16      	ldr	r3, [pc, #88]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2104      	movs	r1, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f002 fcbe 	bl	8009ab0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007134:	4b16      	ldr	r3, [pc, #88]	; (8007190 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4b12      	ldr	r3, [pc, #72]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fe f828 	bl	8005196 <vListInsert>
}
 8007146:	e016      	b.n	8007176 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8007148:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2104      	movs	r1, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f002 fcae 	bl	8009ab0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007154:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <prvAddCurrentTaskToDelayedList+0xd8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3304      	adds	r3, #4
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7fe f818 	bl	8005196 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <prvAddCurrentTaskToDelayedList+0xec>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d202      	bcs.n	8007176 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8007170:	4a09      	ldr	r2, [pc, #36]	; (8007198 <prvAddCurrentTaskToDelayedList+0xec>)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6013      	str	r3, [r2, #0]
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000308 	.word	0x20000308
 8007184:	2000022c 	.word	0x2000022c
 8007188:	2000030c 	.word	0x2000030c
 800718c:	200002f0 	.word	0x200002f0
 8007190:	200002c0 	.word	0x200002c0
 8007194:	200002bc 	.word	0x200002bc
 8007198:	20000324 	.word	0x20000324

0800719c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80071a6:	f000 fb31 	bl	800780c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80071aa:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <xTimerCreateTimerTask+0x54>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00b      	beq.n	80071ca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80071b2:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <xTimerCreateTimerTask+0x58>)
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	2302      	movs	r3, #2
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80071c0:	490d      	ldr	r1, [pc, #52]	; (80071f8 <xTimerCreateTimerTask+0x5c>)
 80071c2:	480e      	ldr	r0, [pc, #56]	; (80071fc <xTimerCreateTimerTask+0x60>)
 80071c4:	f7fe fe96 	bl	8005ef4 <xTaskCreate>
 80071c8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	603b      	str	r3, [r7, #0]
    }
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80071e6:	687b      	ldr	r3, [r7, #4]
    }
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000360 	.word	0x20000360
 80071f4:	20000364 	.word	0x20000364
 80071f8:	0800b7bc 	.word	0x0800b7bc
 80071fc:	080073ed 	.word	0x080073ed

08007200 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af02      	add	r7, sp, #8
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800720e:	202c      	movs	r0, #44	; 0x2c
 8007210:	f000 fdd4 	bl	8007dbc <pvPortMalloc>
 8007214:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00d      	beq.n	8007238 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f805 	bl	8007242 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007238:	697b      	ldr	r3, [r7, #20]
        }
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007242:	b580      	push	{r7, lr}
 8007244:	b086      	sub	sp, #24
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
    }
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01e      	beq.n	80072b0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8007272:	f000 facb 	bl	800780c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	3304      	adds	r3, #4
 8007292:	4618      	mov	r0, r3
 8007294:	f7fd ff4e 	bl	8005134 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072a4:	f043 0304 	orr.w	r3, r3, #4
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	; 0x28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	623b      	str	r3, [r7, #32]
    }
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80072e6:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <xTimerGenericCommand+0x98>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d02a      	beq.n	8007344 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b05      	cmp	r3, #5
 80072fe:	dc18      	bgt.n	8007332 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007300:	f7ff fba6 	bl	8006a50 <xTaskGetSchedulerState>
 8007304:	4603      	mov	r3, r0
 8007306:	2b02      	cmp	r3, #2
 8007308:	d109      	bne.n	800731e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800730a:	4b11      	ldr	r3, [pc, #68]	; (8007350 <xTimerGenericCommand+0x98>)
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	f107 0114 	add.w	r1, r7, #20
 8007312:	2300      	movs	r3, #0
 8007314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007316:	f7fe f891 	bl	800543c <xQueueGenericSend>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24
 800731c:	e012      	b.n	8007344 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <xTimerGenericCommand+0x98>)
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f107 0114 	add.w	r1, r7, #20
 8007326:	2300      	movs	r3, #0
 8007328:	2200      	movs	r2, #0
 800732a:	f7fe f887 	bl	800543c <xQueueGenericSend>
 800732e:	6278      	str	r0, [r7, #36]	; 0x24
 8007330:	e008      	b.n	8007344 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <xTimerGenericCommand+0x98>)
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f107 0114 	add.w	r1, r7, #20
 800733a:	2300      	movs	r3, #0
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	f7fe f9a3 	bl	8005688 <xQueueGenericSendFromISR>
 8007342:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007346:	4618      	mov	r0, r3
 8007348:	3728      	adds	r7, #40	; 0x28
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000360 	.word	0x20000360

08007354 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af02      	add	r7, sp, #8
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800735e:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <prvProcessExpiredTimer+0x94>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	3304      	adds	r3, #4
 800736c:	4618      	mov	r0, r3
 800736e:	f7fd ff4b 	bl	8005208 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d022      	beq.n	80073c6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	18d1      	adds	r1, r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	6978      	ldr	r0, [r7, #20]
 800738e:	f000 f8d1 	bl	8007534 <prvInsertTimerInActiveList>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01f      	beq.n	80073d8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007398:	2300      	movs	r3, #0
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2300      	movs	r3, #0
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	2100      	movs	r1, #0
 80073a2:	6978      	ldr	r0, [r7, #20]
 80073a4:	f7ff ff88 	bl	80072b8 <xTimerGenericCommand>
 80073a8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d113      	bne.n	80073d8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
    }
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	6978      	ldr	r0, [r7, #20]
 80073de:	4798      	blx	r3
    }
 80073e0:	bf00      	nop
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20000358 	.word	0x20000358

080073ec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f857 	bl	80074ac <prvGetNextExpireTime>
 80073fe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4619      	mov	r1, r3
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f803 	bl	8007410 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800740a:	f000 f8d5 	bl	80075b8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800740e:	e7f1      	b.n	80073f4 <prvTimerTask+0x8>

08007410 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800741a:	f7fe ff31 	bl	8006280 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	4618      	mov	r0, r3
 8007424:	f000 f866 	bl	80074f4 <prvSampleTimeNow>
 8007428:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d130      	bne.n	8007492 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <prvProcessTimerOrBlockTask+0x3c>
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	429a      	cmp	r2, r3
 800743c:	d806      	bhi.n	800744c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800743e:	f7fe ff2d 	bl	800629c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ff85 	bl	8007354 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800744a:	e024      	b.n	8007496 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d008      	beq.n	8007464 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007452:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <prvProcessTimerOrBlockTask+0x90>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <prvProcessTimerOrBlockTask+0x50>
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <prvProcessTimerOrBlockTask+0x52>
 8007460:	2300      	movs	r3, #0
 8007462:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <prvProcessTimerOrBlockTask+0x94>)
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	4619      	mov	r1, r3
 8007472:	f7fe fd0b 	bl	8005e8c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007476:	f7fe ff11 	bl	800629c <xTaskResumeAll>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007480:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <prvProcessTimerOrBlockTask+0x98>)
 8007482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
    }
 8007490:	e001      	b.n	8007496 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007492:	f7fe ff03 	bl	800629c <xTaskResumeAll>
    }
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	2000035c 	.word	0x2000035c
 80074a4:	20000360 	.word	0x20000360
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074b4:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <prvGetNextExpireTime+0x44>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <prvGetNextExpireTime+0x16>
 80074be:	2201      	movs	r2, #1
 80074c0:	e000      	b.n	80074c4 <prvGetNextExpireTime+0x18>
 80074c2:	2200      	movs	r2, #0
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d105      	bne.n	80074dc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <prvGetNextExpireTime+0x44>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e001      	b.n	80074e0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80074e0:	68fb      	ldr	r3, [r7, #12]
    }
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20000358 	.word	0x20000358

080074f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80074fc:	f7fe ff6e 	bl	80063dc <xTaskGetTickCount>
 8007500:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007502:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <prvSampleTimeNow+0x3c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	429a      	cmp	r2, r3
 800750a:	d205      	bcs.n	8007518 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800750c:	f000 f91a 	bl	8007744 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e002      	b.n	800751e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800751e:	4a04      	ldr	r2, [pc, #16]	; (8007530 <prvSampleTimeNow+0x3c>)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007524:	68fb      	ldr	r3, [r7, #12]
    }
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000368 	.word	0x20000368

08007534 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d812      	bhi.n	8007580 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	429a      	cmp	r2, r3
 8007566:	d302      	bcc.n	800756e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	e01b      	b.n	80075a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800756e:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <prvInsertTimerInActiveList+0x7c>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3304      	adds	r3, #4
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7fd fe0c 	bl	8005196 <vListInsert>
 800757e:	e012      	b.n	80075a6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d206      	bcs.n	8007596 <prvInsertTimerInActiveList+0x62>
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d302      	bcc.n	8007596 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	e007      	b.n	80075a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007596:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <prvInsertTimerInActiveList+0x80>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f7fd fdf8 	bl	8005196 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80075a6:	697b      	ldr	r3, [r7, #20]
    }
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	2000035c 	.word	0x2000035c
 80075b4:	20000358 	.word	0x20000358

080075b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08c      	sub	sp, #48	; 0x30
 80075bc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075be:	e0ae      	b.n	800771e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f2c0 80aa 	blt.w	800771c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	3304      	adds	r3, #4
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fd fe15 	bl	8005208 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075de:	1d3b      	adds	r3, r7, #4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff ff87 	bl	80074f4 <prvSampleTimeNow>
 80075e6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b09      	cmp	r3, #9
 80075ec:	f200 8097 	bhi.w	800771e <prvProcessReceivedCommands+0x166>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <prvProcessReceivedCommands+0x40>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	08007621 	.word	0x08007621
 80075fc:	08007621 	.word	0x08007621
 8007600:	08007621 	.word	0x08007621
 8007604:	08007695 	.word	0x08007695
 8007608:	080076a9 	.word	0x080076a9
 800760c:	080076f3 	.word	0x080076f3
 8007610:	08007621 	.word	0x08007621
 8007614:	08007621 	.word	0x08007621
 8007618:	08007695 	.word	0x08007695
 800761c:	080076a9 	.word	0x080076a9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	18d1      	adds	r1, r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a3a      	ldr	r2, [r7, #32]
 800763e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007640:	f7ff ff78 	bl	8007534 <prvInsertTimerInActiveList>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d069      	beq.n	800771e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007650:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d05e      	beq.n	800771e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	441a      	add	r2, r3
 8007668:	2300      	movs	r3, #0
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2300      	movs	r3, #0
 800766e:	2100      	movs	r1, #0
 8007670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007672:	f7ff fe21 	bl	80072b8 <xTimerGenericCommand>
 8007676:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d14f      	bne.n	800771e <prvProcessReceivedCommands+0x166>
        __asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	61bb      	str	r3, [r7, #24]
    }
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80076a6:	e03a      	b.n	800771e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <prvProcessReceivedCommands+0x126>
        __asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	617b      	str	r3, [r7, #20]
    }
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	18d1      	adds	r1, r2, r3
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	6a3a      	ldr	r2, [r7, #32]
 80076ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ec:	f7ff ff22 	bl	8007534 <prvInsertTimerInActiveList>
                        break;
 80076f0:	e015      	b.n	800771e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007702:	f000 fc3b 	bl	8007f7c <vPortFree>
 8007706:	e00a      	b.n	800771e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	b2da      	uxtb	r2, r3
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800771a:	e000      	b.n	800771e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800771c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <prvProcessReceivedCommands+0x188>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f107 0108 	add.w	r1, r7, #8
 8007726:	2200      	movs	r2, #0
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe f86b 	bl	8005804 <xQueueReceive>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	f47f af45 	bne.w	80075c0 <prvProcessReceivedCommands+0x8>
        }
    }
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	3728      	adds	r7, #40	; 0x28
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000360 	.word	0x20000360

08007744 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800774a:	e048      	b.n	80077de <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800774c:	4b2d      	ldr	r3, [pc, #180]	; (8007804 <prvSwitchTimerLists+0xc0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007756:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <prvSwitchTimerLists+0xc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3304      	adds	r3, #4
 8007764:	4618      	mov	r0, r3
 8007766:	f7fd fd4f 	bl	8005208 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d02e      	beq.n	80077de <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	429a      	cmp	r2, r3
 8007790:	d90e      	bls.n	80077b0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800779e:	4b19      	ldr	r3, [pc, #100]	; (8007804 <prvSwitchTimerLists+0xc0>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fd fcf4 	bl	8005196 <vListInsert>
 80077ae:	e016      	b.n	80077de <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077b0:	2300      	movs	r3, #0
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	2100      	movs	r1, #0
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fd7c 	bl	80072b8 <xTimerGenericCommand>
 80077c0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <prvSwitchTimerLists+0x9a>
        __asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	603b      	str	r3, [r7, #0]
    }
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <prvSwitchTimerLists+0xc0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1b1      	bne.n	800774c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80077e8:	4b06      	ldr	r3, [pc, #24]	; (8007804 <prvSwitchTimerLists+0xc0>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80077ee:	4b06      	ldr	r3, [pc, #24]	; (8007808 <prvSwitchTimerLists+0xc4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a04      	ldr	r2, [pc, #16]	; (8007804 <prvSwitchTimerLists+0xc0>)
 80077f4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80077f6:	4a04      	ldr	r2, [pc, #16]	; (8007808 <prvSwitchTimerLists+0xc4>)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	6013      	str	r3, [r2, #0]
    }
 80077fc:	bf00      	nop
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000358 	.word	0x20000358
 8007808:	2000035c 	.word	0x2000035c

0800780c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007810:	f000 f9aa 	bl	8007b68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007814:	4b12      	ldr	r3, [pc, #72]	; (8007860 <prvCheckForValidListAndQueue+0x54>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11d      	bne.n	8007858 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800781c:	4811      	ldr	r0, [pc, #68]	; (8007864 <prvCheckForValidListAndQueue+0x58>)
 800781e:	f7fd fc69 	bl	80050f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007822:	4811      	ldr	r0, [pc, #68]	; (8007868 <prvCheckForValidListAndQueue+0x5c>)
 8007824:	f7fd fc66 	bl	80050f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007828:	4b10      	ldr	r3, [pc, #64]	; (800786c <prvCheckForValidListAndQueue+0x60>)
 800782a:	4a0e      	ldr	r2, [pc, #56]	; (8007864 <prvCheckForValidListAndQueue+0x58>)
 800782c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800782e:	4b10      	ldr	r3, [pc, #64]	; (8007870 <prvCheckForValidListAndQueue+0x64>)
 8007830:	4a0d      	ldr	r2, [pc, #52]	; (8007868 <prvCheckForValidListAndQueue+0x5c>)
 8007832:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007834:	2200      	movs	r2, #0
 8007836:	210c      	movs	r1, #12
 8007838:	200a      	movs	r0, #10
 800783a:	f7fd fd77 	bl	800532c <xQueueGenericCreate>
 800783e:	4603      	mov	r3, r0
 8007840:	4a07      	ldr	r2, [pc, #28]	; (8007860 <prvCheckForValidListAndQueue+0x54>)
 8007842:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007844:	4b06      	ldr	r3, [pc, #24]	; (8007860 <prvCheckForValidListAndQueue+0x54>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <prvCheckForValidListAndQueue+0x54>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4908      	ldr	r1, [pc, #32]	; (8007874 <prvCheckForValidListAndQueue+0x68>)
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fae8 	bl	8005e28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007858:	f000 f9b6 	bl	8007bc8 <vPortExitCritical>
    }
 800785c:	bf00      	nop
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20000360 	.word	0x20000360
 8007864:	20000330 	.word	0x20000330
 8007868:	20000344 	.word	0x20000344
 800786c:	20000358 	.word	0x20000358
 8007870:	2000035c 	.word	0x2000035c
 8007874:	0800b7c4 	.word	0x0800b7c4

08007878 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <xTimerIsTimerActive+0x28>
        __asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	60fb      	str	r3, [r7, #12]
    }
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 80078a0:	f000 f962 	bl	8007b68 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d102      	bne.n	80078b8 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e001      	b.n	80078bc <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80078bc:	f000 f984 	bl	8007bc8 <vPortExitCritical>

        return xReturn;
 80078c0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <pvTimerGetTimerID+0x28>
        __asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60fb      	str	r3, [r7, #12]
    }
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80078f2:	f000 f939 	bl	8007b68 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80078fc:	f000 f964 	bl	8007bc8 <vPortExitCritical>

        return pvReturn;
 8007900:	693b      	ldr	r3, [r7, #16]
    }
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3b04      	subs	r3, #4
 800791c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007924:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3b04      	subs	r3, #4
 800792a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3b04      	subs	r3, #4
 800793a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800793c:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <pxPortInitialiseStack+0x64>)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3b14      	subs	r3, #20
 8007946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3b04      	subs	r3, #4
 8007952:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f06f 0202 	mvn.w	r2, #2
 800795a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3b20      	subs	r3, #32
 8007960:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007962:	68fb      	ldr	r3, [r7, #12]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	08007975 	.word	0x08007975

08007974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800797e:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <prvTaskExitError+0x54>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007986:	d00a      	beq.n	800799e <prvTaskExitError+0x2a>
        __asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
    }
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <prvTaskExitError+0x28>
        __asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60bb      	str	r3, [r7, #8]
    }
 80079b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80079b2:	bf00      	nop
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0fc      	beq.n	80079b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20000024 	.word	0x20000024
 80079cc:	00000000 	.word	0x00000000

080079d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80079d0:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <pxCurrentTCBConst2>)
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	6808      	ldr	r0, [r1, #0]
 80079d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	f380 8809 	msr	PSP, r0
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8811 	msr	BASEPRI, r0
 80079ea:	4770      	bx	lr
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst2>:
 80079f0:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80079f8:	4808      	ldr	r0, [pc, #32]	; (8007a1c <prvPortStartFirstTask+0x24>)
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	6800      	ldr	r0, [r0, #0]
 80079fe:	f380 8808 	msr	MSP, r0
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8814 	msr	CONTROL, r0
 8007a0a:	b662      	cpsie	i
 8007a0c:	b661      	cpsie	f
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	df00      	svc	0
 8007a18:	bf00      	nop
 8007a1a:	0000      	.short	0x0000
 8007a1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop

08007a24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a2a:	4b46      	ldr	r3, [pc, #280]	; (8007b44 <xPortStartScheduler+0x120>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a46      	ldr	r2, [pc, #280]	; (8007b48 <xPortStartScheduler+0x124>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10a      	bne.n	8007a4a <xPortStartScheduler+0x26>
        __asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	613b      	str	r3, [r7, #16]
    }
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a4a:	4b3e      	ldr	r3, [pc, #248]	; (8007b44 <xPortStartScheduler+0x120>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a3f      	ldr	r2, [pc, #252]	; (8007b4c <xPortStartScheduler+0x128>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d10a      	bne.n	8007a6a <xPortStartScheduler+0x46>
        __asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	60fb      	str	r3, [r7, #12]
    }
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a6a:	4b39      	ldr	r3, [pc, #228]	; (8007b50 <xPortStartScheduler+0x12c>)
 8007a6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	22ff      	movs	r2, #255	; 0xff
 8007a7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <xPortStartScheduler+0x130>)
 8007a90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a92:	4b31      	ldr	r3, [pc, #196]	; (8007b58 <xPortStartScheduler+0x134>)
 8007a94:	2207      	movs	r2, #7
 8007a96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a98:	e009      	b.n	8007aae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007a9a:	4b2f      	ldr	r3, [pc, #188]	; (8007b58 <xPortStartScheduler+0x134>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	4a2d      	ldr	r2, [pc, #180]	; (8007b58 <xPortStartScheduler+0x134>)
 8007aa2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b80      	cmp	r3, #128	; 0x80
 8007ab8:	d0ef      	beq.n	8007a9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aba:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <xPortStartScheduler+0x134>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f1c3 0307 	rsb	r3, r3, #7
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d00a      	beq.n	8007adc <xPortStartScheduler+0xb8>
        __asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60bb      	str	r3, [r7, #8]
    }
 8007ad8:	bf00      	nop
 8007ada:	e7fe      	b.n	8007ada <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007adc:	4b1e      	ldr	r3, [pc, #120]	; (8007b58 <xPortStartScheduler+0x134>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <xPortStartScheduler+0x134>)
 8007ae4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ae6:	4b1c      	ldr	r3, [pc, #112]	; (8007b58 <xPortStartScheduler+0x134>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aee:	4a1a      	ldr	r2, [pc, #104]	; (8007b58 <xPortStartScheduler+0x134>)
 8007af0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007afa:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <xPortStartScheduler+0x138>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <xPortStartScheduler+0x138>)
 8007b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007b06:	4b15      	ldr	r3, [pc, #84]	; (8007b5c <xPortStartScheduler+0x138>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a14      	ldr	r2, [pc, #80]	; (8007b5c <xPortStartScheduler+0x138>)
 8007b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007b12:	f000 f8e3 	bl	8007cdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <xPortStartScheduler+0x13c>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007b1c:	f000 f902 	bl	8007d24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b20:	4b10      	ldr	r3, [pc, #64]	; (8007b64 <xPortStartScheduler+0x140>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0f      	ldr	r2, [pc, #60]	; (8007b64 <xPortStartScheduler+0x140>)
 8007b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007b2c:	f7ff ff64 	bl	80079f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007b30:	f7fe fd32 	bl	8006598 <vTaskSwitchContext>
    prvTaskExitError();
 8007b34:	f7ff ff1e 	bl	8007974 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	e000ed00 	.word	0xe000ed00
 8007b48:	410fc271 	.word	0x410fc271
 8007b4c:	410fc270 	.word	0x410fc270
 8007b50:	e000e400 	.word	0xe000e400
 8007b54:	2000036c 	.word	0x2000036c
 8007b58:	20000370 	.word	0x20000370
 8007b5c:	e000ed20 	.word	0xe000ed20
 8007b60:	20000024 	.word	0x20000024
 8007b64:	e000ef34 	.word	0xe000ef34

08007b68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
        __asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	607b      	str	r3, [r7, #4]
    }
 8007b80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <vPortEnterCritical+0x58>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3301      	adds	r3, #1
 8007b88:	4a0d      	ldr	r2, [pc, #52]	; (8007bc0 <vPortEnterCritical+0x58>)
 8007b8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <vPortEnterCritical+0x58>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d10f      	bne.n	8007bb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b94:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <vPortEnterCritical+0x5c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	603b      	str	r3, [r7, #0]
    }
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vPortEnterCritical+0x4a>
    }
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	20000024 	.word	0x20000024
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <vPortExitCritical+0x50>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <vPortExitCritical+0x24>
        __asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	607b      	str	r3, [r7, #4]
    }
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <vPortExitCritical+0x50>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <vPortExitCritical+0x50>)
 8007bf4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007bf6:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <vPortExitCritical+0x50>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d105      	bne.n	8007c0a <vPortExitCritical+0x42>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	f383 8811 	msr	BASEPRI, r3
    }
 8007c08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	20000024 	.word	0x20000024
 8007c1c:	00000000 	.word	0x00000000

08007c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007c20:	f3ef 8009 	mrs	r0, PSP
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <pxCurrentTCBConst>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	f01e 0f10 	tst.w	lr, #16
 8007c30:	bf08      	it	eq
 8007c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	6010      	str	r0, [r2, #0]
 8007c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c44:	f380 8811 	msr	BASEPRI, r0
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f7fe fca2 	bl	8006598 <vTaskSwitchContext>
 8007c54:	f04f 0000 	mov.w	r0, #0
 8007c58:	f380 8811 	msr	BASEPRI, r0
 8007c5c:	bc09      	pop	{r0, r3}
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	6808      	ldr	r0, [r1, #0]
 8007c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c66:	f01e 0f10 	tst.w	lr, #16
 8007c6a:	bf08      	it	eq
 8007c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c70:	f380 8809 	msr	PSP, r0
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst>:
 8007c80:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
        __asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
    }
 8007ca0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007ca2:	f001 fda9 	bl	80097f8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007ca6:	f7fe fbbb 	bl	8006420 <xTaskIncrementTick>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d006      	beq.n	8007cbe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007cb0:	f001 fe00 	bl	80098b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cb4:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <SysTick_Handler+0x50>)
 8007cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e001      	b.n	8007cc2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8007cbe:	f001 fddd 	bl	800987c <SEGGER_SYSVIEW_RecordExitISR>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	f383 8811 	msr	BASEPRI, r3
    }
 8007ccc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <vPortSetupTimerInterrupt+0x38>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vPortSetupTimerInterrupt+0x3c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <vPortSetupTimerInterrupt+0x40>)
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf6:	099b      	lsrs	r3, r3, #6
 8007cf8:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <vPortSetupTimerInterrupt+0x44>)
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007d00:	2207      	movs	r2, #7
 8007d02:	601a      	str	r2, [r3, #0]
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	e000e010 	.word	0xe000e010
 8007d14:	e000e018 	.word	0xe000e018
 8007d18:	20000010 	.word	0x20000010
 8007d1c:	10624dd3 	.word	0x10624dd3
 8007d20:	e000e014 	.word	0xe000e014

08007d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d34 <vPortEnableVFP+0x10>
 8007d28:	6801      	ldr	r1, [r0, #0]
 8007d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d2e:	6001      	str	r1, [r0, #0]
 8007d30:	4770      	bx	lr
 8007d32:	0000      	.short	0x0000
 8007d34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop

08007d3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007d42:	f3ef 8305 	mrs	r3, IPSR
 8007d46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b0f      	cmp	r3, #15
 8007d4c:	d914      	bls.n	8007d78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d4e:	4a17      	ldr	r2, [pc, #92]	; (8007dac <vPortValidateInterruptPriority+0x70>)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d58:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <vPortValidateInterruptPriority+0x74>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	7afa      	ldrb	r2, [r7, #11]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d20a      	bcs.n	8007d78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	607b      	str	r3, [r7, #4]
    }
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d78:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <vPortValidateInterruptPriority+0x78>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d80:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <vPortValidateInterruptPriority+0x7c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d90a      	bls.n	8007d9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	603b      	str	r3, [r7, #0]
    }
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <vPortValidateInterruptPriority+0x60>
    }
 8007d9e:	bf00      	nop
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	e000e3f0 	.word	0xe000e3f0
 8007db0:	2000036c 	.word	0x2000036c
 8007db4:	e000ed0c 	.word	0xe000ed0c
 8007db8:	20000370 	.word	0x20000370

08007dbc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007dc8:	f7fe fa5a 	bl	8006280 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007dcc:	4b65      	ldr	r3, [pc, #404]	; (8007f64 <pvPortMalloc+0x1a8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007dd4:	f000 f934 	bl	8008040 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dd8:	4b63      	ldr	r3, [pc, #396]	; (8007f68 <pvPortMalloc+0x1ac>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 80a7 	bne.w	8007f34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02d      	beq.n	8007e48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007dec:	2208      	movs	r2, #8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d227      	bcs.n	8007e48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007df8:	2208      	movs	r2, #8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d021      	beq.n	8007e4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f023 0307 	bic.w	r3, r3, #7
 8007e10:	3308      	adds	r3, #8
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d214      	bcs.n	8007e42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	3308      	adds	r3, #8
 8007e20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d010      	beq.n	8007e4e <pvPortMalloc+0x92>
        __asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	617b      	str	r3, [r7, #20]
    }
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e46:	e002      	b.n	8007e4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	e000      	b.n	8007e50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d06e      	beq.n	8007f34 <pvPortMalloc+0x178>
 8007e56:	4b45      	ldr	r3, [pc, #276]	; (8007f6c <pvPortMalloc+0x1b0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d869      	bhi.n	8007f34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007e60:	4b43      	ldr	r3, [pc, #268]	; (8007f70 <pvPortMalloc+0x1b4>)
 8007e62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007e64:	4b42      	ldr	r3, [pc, #264]	; (8007f70 <pvPortMalloc+0x1b4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e6a:	e004      	b.n	8007e76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d903      	bls.n	8007e88 <pvPortMalloc+0xcc>
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f1      	bne.n	8007e6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007e88:	4b36      	ldr	r3, [pc, #216]	; (8007f64 <pvPortMalloc+0x1a8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d050      	beq.n	8007f34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2208      	movs	r2, #8
 8007e98:	4413      	add	r3, r2
 8007e9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	2308      	movs	r3, #8
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d91f      	bls.n	8007ef4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4413      	add	r3, r2
 8007eba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <pvPortMalloc+0x120>
        __asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	613b      	str	r3, [r7, #16]
    }
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	1ad2      	subs	r2, r2, r3
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eee:	69b8      	ldr	r0, [r7, #24]
 8007ef0:	f000 f908 	bl	8008104 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <pvPortMalloc+0x1b0>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	4a1b      	ldr	r2, [pc, #108]	; (8007f6c <pvPortMalloc+0x1b0>)
 8007f00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f02:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <pvPortMalloc+0x1b0>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <pvPortMalloc+0x1b8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d203      	bcs.n	8007f16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <pvPortMalloc+0x1b0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a18      	ldr	r2, [pc, #96]	; (8007f74 <pvPortMalloc+0x1b8>)
 8007f14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <pvPortMalloc+0x1ac>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007f2a:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <pvPortMalloc+0x1bc>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	4a11      	ldr	r2, [pc, #68]	; (8007f78 <pvPortMalloc+0x1bc>)
 8007f32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007f34:	f7fe f9b2 	bl	800629c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <pvPortMalloc+0x19c>
        __asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60fb      	str	r3, [r7, #12]
    }
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <pvPortMalloc+0x19a>
    return pvReturn;
 8007f58:	69fb      	ldr	r3, [r7, #28]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3728      	adds	r7, #40	; 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20012f7c 	.word	0x20012f7c
 8007f68:	20012f90 	.word	0x20012f90
 8007f6c:	20012f80 	.word	0x20012f80
 8007f70:	20012f74 	.word	0x20012f74
 8007f74:	20012f84 	.word	0x20012f84
 8007f78:	20012f88 	.word	0x20012f88

08007f7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d04d      	beq.n	800802a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007f8e:	2308      	movs	r3, #8
 8007f90:	425b      	negs	r3, r3
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	4b24      	ldr	r3, [pc, #144]	; (8008034 <vPortFree+0xb8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <vPortFree+0x44>
        __asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	60fb      	str	r3, [r7, #12]
    }
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00a      	beq.n	8007fde <vPortFree+0x62>
        __asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	60bb      	str	r3, [r7, #8]
    }
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	4b14      	ldr	r3, [pc, #80]	; (8008034 <vPortFree+0xb8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01e      	beq.n	800802a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11a      	bne.n	800802a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <vPortFree+0xb8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	401a      	ands	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008004:	f7fe f93c 	bl	8006280 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <vPortFree+0xbc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4413      	add	r3, r2
 8008012:	4a09      	ldr	r2, [pc, #36]	; (8008038 <vPortFree+0xbc>)
 8008014:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008016:	6938      	ldr	r0, [r7, #16]
 8008018:	f000 f874 	bl	8008104 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800801c:	4b07      	ldr	r3, [pc, #28]	; (800803c <vPortFree+0xc0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3301      	adds	r3, #1
 8008022:	4a06      	ldr	r2, [pc, #24]	; (800803c <vPortFree+0xc0>)
 8008024:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008026:	f7fe f939 	bl	800629c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800802a:	bf00      	nop
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20012f90 	.word	0x20012f90
 8008038:	20012f80 	.word	0x20012f80
 800803c:	20012f8c 	.word	0x20012f8c

08008040 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008046:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800804a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800804c:	4b27      	ldr	r3, [pc, #156]	; (80080ec <prvHeapInit+0xac>)
 800804e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00c      	beq.n	8008074 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3307      	adds	r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0307 	bic.w	r3, r3, #7
 8008066:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	4a1f      	ldr	r2, [pc, #124]	; (80080ec <prvHeapInit+0xac>)
 8008070:	4413      	add	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008078:	4a1d      	ldr	r2, [pc, #116]	; (80080f0 <prvHeapInit+0xb0>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800807e:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <prvHeapInit+0xb0>)
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	4413      	add	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800808c:	2208      	movs	r2, #8
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0307 	bic.w	r3, r3, #7
 800809a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a15      	ldr	r2, [pc, #84]	; (80080f4 <prvHeapInit+0xb4>)
 80080a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80080a2:	4b14      	ldr	r3, [pc, #80]	; (80080f4 <prvHeapInit+0xb4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2200      	movs	r2, #0
 80080a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80080aa:	4b12      	ldr	r3, [pc, #72]	; (80080f4 <prvHeapInit+0xb4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <prvHeapInit+0xb4>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a0a      	ldr	r2, [pc, #40]	; (80080f8 <prvHeapInit+0xb8>)
 80080ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	4a09      	ldr	r2, [pc, #36]	; (80080fc <prvHeapInit+0xbc>)
 80080d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080d8:	4b09      	ldr	r3, [pc, #36]	; (8008100 <prvHeapInit+0xc0>)
 80080da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080de:	601a      	str	r2, [r3, #0]
}
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000374 	.word	0x20000374
 80080f0:	20012f74 	.word	0x20012f74
 80080f4:	20012f7c 	.word	0x20012f7c
 80080f8:	20012f84 	.word	0x20012f84
 80080fc:	20012f80 	.word	0x20012f80
 8008100:	20012f90 	.word	0x20012f90

08008104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800810c:	4b28      	ldr	r3, [pc, #160]	; (80081b0 <prvInsertBlockIntoFreeList+0xac>)
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	e002      	b.n	8008118 <prvInsertBlockIntoFreeList+0x14>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d8f7      	bhi.n	8008112 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	4413      	add	r3, r2
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d108      	bne.n	8008146 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	441a      	add	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d118      	bne.n	800818c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d00d      	beq.n	8008182 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	441a      	add	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e008      	b.n	8008194 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e003      	b.n	8008194 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	429a      	cmp	r2, r3
 800819a:	d002      	beq.n	80081a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	20012f74 	.word	0x20012f74
 80081b4:	20012f7c 	.word	0x20012f7c

080081b8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80081be:	4b26      	ldr	r3, [pc, #152]	; (8008258 <_DoInit+0xa0>)
 80081c0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80081c2:	22a8      	movs	r2, #168	; 0xa8
 80081c4:	2100      	movs	r1, #0
 80081c6:	6838      	ldr	r0, [r7, #0]
 80081c8:	f001 ffae 	bl	800a128 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2203      	movs	r2, #3
 80081d0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2203      	movs	r2, #3
 80081d6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	4a20      	ldr	r2, [pc, #128]	; (800825c <_DoInit+0xa4>)
 80081dc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	4a1f      	ldr	r2, [pc, #124]	; (8008260 <_DoInit+0xa8>)
 80081e2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081ea:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2200      	movs	r2, #0
 80081f0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2200      	movs	r2, #0
 80081f6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	4a16      	ldr	r2, [pc, #88]	; (800825c <_DoInit+0xa4>)
 8008202:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	4a17      	ldr	r2, [pc, #92]	; (8008264 <_DoInit+0xac>)
 8008208:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2210      	movs	r2, #16
 800820e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2200      	movs	r2, #0
 800821a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008222:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	e00c      	b.n	8008246 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f1c3 030f 	rsb	r3, r3, #15
 8008232:	4a0d      	ldr	r2, [pc, #52]	; (8008268 <_DoInit+0xb0>)
 8008234:	5cd1      	ldrb	r1, [r2, r3]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4413      	add	r3, r2
 800823c:	460a      	mov	r2, r1
 800823e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3301      	adds	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b0f      	cmp	r3, #15
 800824a:	d9ef      	bls.n	800822c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800824c:	f3bf 8f5f 	dmb	sy
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20012f94 	.word	0x20012f94
 800825c:	0800b7cc 	.word	0x0800b7cc
 8008260:	2001303c 	.word	0x2001303c
 8008264:	2001343c 	.word	0x2001343c
 8008268:	0800b8a4 	.word	0x0800b8a4

0800826c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	; 0x28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008278:	2300      	movs	r3, #0
 800827a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	429a      	cmp	r2, r3
 800828e:	d905      	bls.n	800829c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
 800829a:	e007      	b.n	80082ac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	69b9      	ldr	r1, [r7, #24]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	1acb      	subs	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	3b01      	subs	r3, #1
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bf28      	it	cs
 80082ba:	4613      	movcs	r3, r2
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80082be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4293      	cmp	r3, r2
 80082c4:	bf28      	it	cs
 80082c6:	4613      	movcs	r3, r2
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	6978      	ldr	r0, [r7, #20]
 80082da:	f001 ff17 	bl	800a10c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	4413      	add	r3, r2
 80082e4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	4413      	add	r3, r2
 80082ec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	4413      	add	r3, r2
 80082fc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	429a      	cmp	r2, r3
 8008306:	d101      	bne.n	800830c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008308:	2300      	movs	r3, #0
 800830a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800830c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1b2      	bne.n	8008282 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800831c:	6a3b      	ldr	r3, [r7, #32]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3728      	adds	r7, #40	; 0x28
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008326:	b580      	push	{r7, lr}
 8008328:	b088      	sub	sp, #32
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d911      	bls.n	800836e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	6938      	ldr	r0, [r7, #16]
 800835a:	f001 fed7 	bl	800a10c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800835e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	441a      	add	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800836c:	e01f      	b.n	80083ae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4413      	add	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	6938      	ldr	r0, [r7, #16]
 8008382:	f001 fec3 	bl	800a10c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	4413      	add	r3, r2
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	4619      	mov	r1, r3
 800839e:	6938      	ldr	r0, [r7, #16]
 80083a0:	f001 feb4 	bl	800a10c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80083a4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	60da      	str	r2, [r3, #12]
}
 80083ae:	bf00      	nop
 80083b0:	3720      	adds	r7, #32
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80083b6:	b480      	push	{r7}
 80083b8:	b087      	sub	sp, #28
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d808      	bhi.n	80083e4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	1ad2      	subs	r2, r2, r3
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	4413      	add	r3, r2
 80083de:	3b01      	subs	r3, #1
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e004      	b.n	80083ee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
  }
  return r;
 80083ee:	697b      	ldr	r3, [r7, #20]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08c      	sub	sp, #48	; 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008408:	4b3e      	ldr	r3, [pc, #248]	; (8008504 <SEGGER_RTT_ReadNoLock+0x108>)
 800840a:	623b      	str	r3, [r7, #32]
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <SEGGER_RTT_ReadNoLock+0x1e>
 8008416:	f7ff fecf 	bl	80081b8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4613      	mov	r3, r2
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	4413      	add	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	3360      	adds	r3, #96	; 0x60
 8008426:	4a37      	ldr	r2, [pc, #220]	; (8008504 <SEGGER_RTT_ReadNoLock+0x108>)
 8008428:	4413      	add	r3, r2
 800842a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800843c:	2300      	movs	r3, #0
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	429a      	cmp	r2, r3
 8008446:	d92b      	bls.n	80084a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4293      	cmp	r3, r2
 8008458:	bf28      	it	cs
 800845a:	4613      	movcs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	4413      	add	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	6939      	ldr	r1, [r7, #16]
 800846c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800846e:	f001 fe4d 	bl	800a10c <memcpy>
    NumBytesRead += NumBytesRem;
 8008472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	4413      	add	r3, r2
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800847a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	4413      	add	r3, r2
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800848a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	4413      	add	r3, r2
 8008490:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008498:	429a      	cmp	r2, r3
 800849a:	d101      	bne.n	80084a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800849c:	2300      	movs	r3, #0
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	bf28      	it	cs
 80084b0:	4613      	movcs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d019      	beq.n	80084ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	4413      	add	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	6939      	ldr	r1, [r7, #16]
 80084c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084ca:	f001 fe1f 	bl	800a10c <memcpy>
    NumBytesRead += NumBytesRem;
 80084ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	4413      	add	r3, r2
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	4413      	add	r3, r2
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80084e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	4413      	add	r3, r2
 80084ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3730      	adds	r7, #48	; 0x30
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20012f94 	.word	0x20012f94

08008508 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	4613      	mov	r3, r2
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	4413      	add	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4a1f      	ldr	r2, [pc, #124]	; (80085a4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008526:	4413      	add	r3, r2
 8008528:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d029      	beq.n	8008586 <SEGGER_RTT_WriteNoLock+0x7e>
 8008532:	2b02      	cmp	r3, #2
 8008534:	d82e      	bhi.n	8008594 <SEGGER_RTT_WriteNoLock+0x8c>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <SEGGER_RTT_WriteNoLock+0x38>
 800853a:	2b01      	cmp	r3, #1
 800853c:	d013      	beq.n	8008566 <SEGGER_RTT_WriteNoLock+0x5e>
 800853e:	e029      	b.n	8008594 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008540:	6978      	ldr	r0, [r7, #20]
 8008542:	f7ff ff38 	bl	80083b6 <_GetAvailWriteSpace>
 8008546:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d202      	bcs.n	8008556 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008554:	e021      	b.n	800859a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	69b9      	ldr	r1, [r7, #24]
 800855e:	6978      	ldr	r0, [r7, #20]
 8008560:	f7ff fee1 	bl	8008326 <_WriteNoCheck>
    break;
 8008564:	e019      	b.n	800859a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008566:	6978      	ldr	r0, [r7, #20]
 8008568:	f7ff ff25 	bl	80083b6 <_GetAvailWriteSpace>
 800856c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	4293      	cmp	r3, r2
 8008574:	bf28      	it	cs
 8008576:	4613      	movcs	r3, r2
 8008578:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	69b9      	ldr	r1, [r7, #24]
 800857e:	6978      	ldr	r0, [r7, #20]
 8008580:	f7ff fed1 	bl	8008326 <_WriteNoCheck>
    break;
 8008584:	e009      	b.n	800859a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	69b9      	ldr	r1, [r7, #24]
 800858a:	6978      	ldr	r0, [r7, #20]
 800858c:	f7ff fe6e 	bl	800826c <_WriteBlocking>
 8008590:	61f8      	str	r0, [r7, #28]
    break;
 8008592:	e002      	b.n	800859a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]
    break;
 8008598:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800859a:	69fb      	ldr	r3, [r7, #28]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3720      	adds	r7, #32
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20012f94 	.word	0x20012f94

080085a8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80085b4:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <SEGGER_RTT_Write+0x48>)
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <SEGGER_RTT_Write+0x1e>
 80085c2:	f7ff fdf9 	bl	80081b8 <_DoInit>
  SEGGER_RTT_LOCK();
 80085c6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ca:	f04f 0120 	mov.w	r1, #32
 80085ce:	f381 8811 	msr	BASEPRI, r1
 80085d2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff ff95 	bl	8008508 <SEGGER_RTT_WriteNoLock>
 80085de:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80085e6:	697b      	ldr	r3, [r7, #20]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20012f94 	.word	0x20012f94

080085f4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008602:	4b3d      	ldr	r3, [pc, #244]	; (80086f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008610:	f7ff fdd2 	bl	80081b8 <_DoInit>
  SEGGER_RTT_LOCK();
 8008614:	f3ef 8311 	mrs	r3, BASEPRI
 8008618:	f04f 0120 	mov.w	r1, #32
 800861c:	f381 8811 	msr	BASEPRI, r1
 8008620:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008622:	4b35      	ldr	r3, [pc, #212]	; (80086f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008624:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800862a:	6939      	ldr	r1, [r7, #16]
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	4613      	mov	r3, r2
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	4413      	add	r3, r2
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	440b      	add	r3, r1
 800863a:	3304      	adds	r3, #4
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	3301      	adds	r3, #1
 8008646:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	429a      	cmp	r2, r3
 8008650:	dbeb      	blt.n	800862a <SEGGER_RTT_AllocUpBuffer+0x36>
 8008652:	e000      	b.n	8008656 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008654:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	429a      	cmp	r2, r3
 800865e:	da3f      	bge.n	80086e0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008660:	6939      	ldr	r1, [r7, #16]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	4613      	mov	r3, r2
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4413      	add	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	440b      	add	r3, r1
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008674:	6939      	ldr	r1, [r7, #16]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	4613      	mov	r3, r2
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	4413      	add	r3, r2
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	440b      	add	r3, r1
 8008684:	3304      	adds	r3, #4
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800868a:	6939      	ldr	r1, [r7, #16]
 800868c:	69fa      	ldr	r2, [r7, #28]
 800868e:	4613      	mov	r3, r2
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	4413      	add	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	440b      	add	r3, r1
 8008698:	3320      	adds	r3, #32
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800869e:	6939      	ldr	r1, [r7, #16]
 80086a0:	69fa      	ldr	r2, [r7, #28]
 80086a2:	4613      	mov	r3, r2
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	4413      	add	r3, r2
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	440b      	add	r3, r1
 80086ac:	3328      	adds	r3, #40	; 0x28
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80086b2:	6939      	ldr	r1, [r7, #16]
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	4613      	mov	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	4413      	add	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	440b      	add	r3, r1
 80086c0:	3324      	adds	r3, #36	; 0x24
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80086c6:	6939      	ldr	r1, [r7, #16]
 80086c8:	69fa      	ldr	r2, [r7, #28]
 80086ca:	4613      	mov	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4413      	add	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	440b      	add	r3, r1
 80086d4:	332c      	adds	r3, #44	; 0x2c
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80086da:	f3bf 8f5f 	dmb	sy
 80086de:	e002      	b.n	80086e6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80086e0:	f04f 33ff 	mov.w	r3, #4294967295
 80086e4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80086ec:	69fb      	ldr	r3, [r7, #28]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20012f94 	.word	0x20012f94

080086fc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08a      	sub	sp, #40	; 0x28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800870a:	4b21      	ldr	r3, [pc, #132]	; (8008790 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800870c:	623b      	str	r3, [r7, #32]
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008718:	f7ff fd4e 	bl	80081b8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800871c:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800871e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d82c      	bhi.n	8008780 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8008726:	f3ef 8311 	mrs	r3, BASEPRI
 800872a:	f04f 0120 	mov.w	r1, #32
 800872e:	f381 8811 	msr	BASEPRI, r1
 8008732:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4613      	mov	r3, r2
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	4413      	add	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	3360      	adds	r3, #96	; 0x60
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2200      	movs	r2, #0
 8008762:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2200      	movs	r2, #0
 8008768:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008770:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800877a:	2300      	movs	r3, #0
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
 800877e:	e002      	b.n	8008786 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008788:	4618      	mov	r0, r3
 800878a:	3728      	adds	r7, #40	; 0x28
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20012f94 	.word	0x20012f94

08008794 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00f      	beq.n	80087ca <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80087aa:	e002      	b.n	80087b2 <_EncodeStr+0x1e>
      Len++;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	3301      	adds	r3, #1
 80087b0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f6      	bne.n	80087ac <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d901      	bls.n	80087ca <_EncodeStr+0x36>
      Len = Limit;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2bfe      	cmp	r3, #254	; 0xfe
 80087ce:	d806      	bhi.n	80087de <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	60fa      	str	r2, [r7, #12]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	b2d2      	uxtb	r2, r2
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e011      	b.n	8008802 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	60fa      	str	r2, [r7, #12]
 80087e4:	22ff      	movs	r2, #255	; 0xff
 80087e6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	60fa      	str	r2, [r7, #12]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	0a19      	lsrs	r1, r3, #8
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	60fa      	str	r2, [r7, #12]
 80087fe:	b2ca      	uxtb	r2, r1
 8008800:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008806:	e00a      	b.n	800881e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	1c53      	adds	r3, r2, #1
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1c59      	adds	r1, r3, #1
 8008812:	60f9      	str	r1, [r7, #12]
 8008814:	7812      	ldrb	r2, [r2, #0]
 8008816:	701a      	strb	r2, [r3, #0]
    n++;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	3301      	adds	r3, #1
 800881c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	429a      	cmp	r2, r3
 8008824:	d3f0      	bcc.n	8008808 <_EncodeStr+0x74>
  }
  return pPayload;
 8008826:	68fb      	ldr	r3, [r7, #12]
}
 8008828:	4618      	mov	r0, r3
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3307      	adds	r3, #7
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008852:	4b35      	ldr	r3, [pc, #212]	; (8008928 <_HandleIncomingPacket+0xdc>)
 8008854:	7e1b      	ldrb	r3, [r3, #24]
 8008856:	4618      	mov	r0, r3
 8008858:	1cfb      	adds	r3, r7, #3
 800885a:	2201      	movs	r2, #1
 800885c:	4619      	mov	r1, r3
 800885e:	f7ff fdcd 	bl	80083fc <SEGGER_RTT_ReadNoLock>
 8008862:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d052      	beq.n	8008910 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	2b80      	cmp	r3, #128	; 0x80
 800886e:	d031      	beq.n	80088d4 <_HandleIncomingPacket+0x88>
 8008870:	2b80      	cmp	r3, #128	; 0x80
 8008872:	dc40      	bgt.n	80088f6 <_HandleIncomingPacket+0xaa>
 8008874:	2b07      	cmp	r3, #7
 8008876:	dc15      	bgt.n	80088a4 <_HandleIncomingPacket+0x58>
 8008878:	2b00      	cmp	r3, #0
 800887a:	dd3c      	ble.n	80088f6 <_HandleIncomingPacket+0xaa>
 800887c:	3b01      	subs	r3, #1
 800887e:	2b06      	cmp	r3, #6
 8008880:	d839      	bhi.n	80088f6 <_HandleIncomingPacket+0xaa>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <_HandleIncomingPacket+0x3c>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088ab 	.word	0x080088ab
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b7 	.word	0x080088b7
 8008894:	080088bd 	.word	0x080088bd
 8008898:	080088c3 	.word	0x080088c3
 800889c:	080088c9 	.word	0x080088c9
 80088a0:	080088cf 	.word	0x080088cf
 80088a4:	2b7f      	cmp	r3, #127	; 0x7f
 80088a6:	d035      	beq.n	8008914 <_HandleIncomingPacket+0xc8>
 80088a8:	e025      	b.n	80088f6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80088aa:	f000 fcdd 	bl	8009268 <SEGGER_SYSVIEW_Start>
      break;
 80088ae:	e036      	b.n	800891e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80088b0:	f000 fd94 	bl	80093dc <SEGGER_SYSVIEW_Stop>
      break;
 80088b4:	e033      	b.n	800891e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80088b6:	f000 ff6d 	bl	8009794 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80088ba:	e030      	b.n	800891e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80088bc:	f000 ff32 	bl	8009724 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80088c0:	e02d      	b.n	800891e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80088c2:	f000 fdb1 	bl	8009428 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80088c6:	e02a      	b.n	800891e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80088c8:	f001 fa00 	bl	8009ccc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80088cc:	e027      	b.n	800891e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80088ce:	f001 f9df 	bl	8009c90 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80088d2:	e024      	b.n	800891e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80088d4:	4b14      	ldr	r3, [pc, #80]	; (8008928 <_HandleIncomingPacket+0xdc>)
 80088d6:	7e1b      	ldrb	r3, [r3, #24]
 80088d8:	4618      	mov	r0, r3
 80088da:	1cfb      	adds	r3, r7, #3
 80088dc:	2201      	movs	r2, #1
 80088de:	4619      	mov	r1, r3
 80088e0:	f7ff fd8c 	bl	80083fc <SEGGER_RTT_ReadNoLock>
 80088e4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d015      	beq.n	8008918 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 f94e 	bl	8009b90 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80088f4:	e010      	b.n	8008918 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	b25b      	sxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da0e      	bge.n	800891c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80088fe:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <_HandleIncomingPacket+0xdc>)
 8008900:	7e1b      	ldrb	r3, [r3, #24]
 8008902:	4618      	mov	r0, r3
 8008904:	1cfb      	adds	r3, r7, #3
 8008906:	2201      	movs	r2, #1
 8008908:	4619      	mov	r1, r3
 800890a:	f7ff fd77 	bl	80083fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800890e:	e005      	b.n	800891c <_HandleIncomingPacket+0xd0>
    }
  }
 8008910:	bf00      	nop
 8008912:	e004      	b.n	800891e <_HandleIncomingPacket+0xd2>
      break;
 8008914:	bf00      	nop
 8008916:	e002      	b.n	800891e <_HandleIncomingPacket+0xd2>
      break;
 8008918:	bf00      	nop
 800891a:	e000      	b.n	800891e <_HandleIncomingPacket+0xd2>
      break;
 800891c:	bf00      	nop
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20014454 	.word	0x20014454

0800892c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b08c      	sub	sp, #48	; 0x30
 8008930:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008932:	2301      	movs	r3, #1
 8008934:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008936:	1d3b      	adds	r3, r7, #4
 8008938:	3301      	adds	r3, #1
 800893a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008940:	4b31      	ldr	r3, [pc, #196]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
 8008946:	e00b      	b.n	8008960 <_TrySendOverflowPacket+0x34>
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	b2da      	uxtb	r2, r3
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	1c59      	adds	r1, r3, #1
 8008950:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	09db      	lsrs	r3, r3, #7
 800895e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	2b7f      	cmp	r3, #127	; 0x7f
 8008964:	d8f0      	bhi.n	8008948 <_TrySendOverflowPacket+0x1c>
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800896c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
 8008972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008974:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008976:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <_TrySendOverflowPacket+0xe0>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800897c:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	623b      	str	r3, [r7, #32]
 800898e:	e00b      	b.n	80089a8 <_TrySendOverflowPacket+0x7c>
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	b2da      	uxtb	r2, r3
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	1c59      	adds	r1, r3, #1
 8008998:	6279      	str	r1, [r7, #36]	; 0x24
 800899a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	09db      	lsrs	r3, r3, #7
 80089a6:	623b      	str	r3, [r7, #32]
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	2b7f      	cmp	r3, #127	; 0x7f
 80089ac:	d8f0      	bhi.n	8008990 <_TrySendOverflowPacket+0x64>
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	627a      	str	r2, [r7, #36]	; 0x24
 80089b4:	6a3a      	ldr	r2, [r7, #32]
 80089b6:	b2d2      	uxtb	r2, r2
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 80089c0:	785b      	ldrb	r3, [r3, #1]
 80089c2:	4618      	mov	r0, r3
 80089c4:	1d3b      	adds	r3, r7, #4
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	1d3b      	adds	r3, r7, #4
 80089ce:	4619      	mov	r1, r3
 80089d0:	f7f7 fc0e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80089d4:	4603      	mov	r3, r0
 80089d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 80089ee:	701a      	strb	r2, [r3, #0]
 80089f0:	e004      	b.n	80089fc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	3301      	adds	r3, #1
 80089f8:	4a03      	ldr	r2, [pc, #12]	; (8008a08 <_TrySendOverflowPacket+0xdc>)
 80089fa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80089fc:	693b      	ldr	r3, [r7, #16]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3730      	adds	r7, #48	; 0x30
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20014454 	.word	0x20014454
 8008a0c:	e0001004 	.word	0xe0001004

08008a10 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	; 0x28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008a1c:	4b98      	ldr	r3, [pc, #608]	; (8008c80 <_SendPacket+0x270>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d010      	beq.n	8008a46 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008a24:	4b96      	ldr	r3, [pc, #600]	; (8008c80 <_SendPacket+0x270>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 812d 	beq.w	8008c88 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008a2e:	4b94      	ldr	r3, [pc, #592]	; (8008c80 <_SendPacket+0x270>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d109      	bne.n	8008a4a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008a36:	f7ff ff79 	bl	800892c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008a3a:	4b91      	ldr	r3, [pc, #580]	; (8008c80 <_SendPacket+0x270>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	f040 8124 	bne.w	8008c8c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8008a44:	e001      	b.n	8008a4a <_SendPacket+0x3a>
    goto Send;
 8008a46:	bf00      	nop
 8008a48:	e000      	b.n	8008a4c <_SendPacket+0x3c>
Send:
 8008a4a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b1f      	cmp	r3, #31
 8008a50:	d809      	bhi.n	8008a66 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008a52:	4b8b      	ldr	r3, [pc, #556]	; (8008c80 <_SendPacket+0x270>)
 8008a54:	69da      	ldr	r2, [r3, #28]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f040 8115 	bne.w	8008c90 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b17      	cmp	r3, #23
 8008a6a:	d807      	bhi.n	8008a7c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e0c4      	b.n	8008c06 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	2b7f      	cmp	r3, #127	; 0x7f
 8008a88:	d912      	bls.n	8008ab0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	09da      	lsrs	r2, r3, #7
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	3a01      	subs	r2, #1
 8008aa2:	60fa      	str	r2, [r7, #12]
 8008aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e006      	b.n	8008abe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b7e      	cmp	r3, #126	; 0x7e
 8008ac2:	d807      	bhi.n	8008ad4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	e098      	b.n	8008c06 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ada:	d212      	bcs.n	8008b02 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	09da      	lsrs	r2, r3, #7
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	3a01      	subs	r2, #1
 8008af4:	60fa      	str	r2, [r7, #12]
 8008af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	701a      	strb	r2, [r3, #0]
 8008b00:	e081      	b.n	8008c06 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b08:	d21d      	bcs.n	8008b46 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	0b9a      	lsrs	r2, r3, #14
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	b2d2      	uxtb	r2, r2
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	09db      	lsrs	r3, r3, #7
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	3a01      	subs	r2, #1
 8008b24:	60fa      	str	r2, [r7, #12]
 8008b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	3a01      	subs	r2, #1
 8008b38:	60fa      	str	r2, [r7, #12]
 8008b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	701a      	strb	r2, [r3, #0]
 8008b44:	e05f      	b.n	8008c06 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b4c:	d228      	bcs.n	8008ba0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	0d5a      	lsrs	r2, r3, #21
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	0b9b      	lsrs	r3, r3, #14
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	3a01      	subs	r2, #1
 8008b68:	60fa      	str	r2, [r7, #12]
 8008b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	09db      	lsrs	r3, r3, #7
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	3a01      	subs	r2, #1
 8008b7e:	60fa      	str	r2, [r7, #12]
 8008b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	3a01      	subs	r2, #1
 8008b92:	60fa      	str	r2, [r7, #12]
 8008b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	e032      	b.n	8008c06 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	0f1a      	lsrs	r2, r3, #28
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	0d5b      	lsrs	r3, r3, #21
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	3a01      	subs	r2, #1
 8008bba:	60fa      	str	r2, [r7, #12]
 8008bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	0b9b      	lsrs	r3, r3, #14
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	60fa      	str	r2, [r7, #12]
 8008bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	09db      	lsrs	r3, r3, #7
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	3a01      	subs	r2, #1
 8008be6:	60fa      	str	r2, [r7, #12]
 8008be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	3a01      	subs	r2, #1
 8008bfa:	60fa      	str	r2, [r7, #12]
 8008bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008c06:	4b1f      	ldr	r3, [pc, #124]	; (8008c84 <_SendPacket+0x274>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <_SendPacket+0x270>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	623b      	str	r3, [r7, #32]
 8008c1e:	e00b      	b.n	8008c38 <_SendPacket+0x228>
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	1c59      	adds	r1, r3, #1
 8008c28:	6279      	str	r1, [r7, #36]	; 0x24
 8008c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c2e:	b2d2      	uxtb	r2, r2
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	09db      	lsrs	r3, r3, #7
 8008c36:	623b      	str	r3, [r7, #32]
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c3c:	d8f0      	bhi.n	8008c20 <_SendPacket+0x210>
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	627a      	str	r2, [r7, #36]	; 0x24
 8008c44:	6a3a      	ldr	r2, [r7, #32]
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8008c4e:	4b0c      	ldr	r3, [pc, #48]	; (8008c80 <_SendPacket+0x270>)
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	4618      	mov	r0, r3
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	f7f7 fac7 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008c62:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008c6a:	4a05      	ldr	r2, [pc, #20]	; (8008c80 <_SendPacket+0x270>)
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	60d3      	str	r3, [r2, #12]
 8008c70:	e00f      	b.n	8008c92 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008c72:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <_SendPacket+0x270>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	4b01      	ldr	r3, [pc, #4]	; (8008c80 <_SendPacket+0x270>)
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e008      	b.n	8008c92 <_SendPacket+0x282>
 8008c80:	20014454 	.word	0x20014454
 8008c84:	e0001004 	.word	0xe0001004
    goto SendDone;
 8008c88:	bf00      	nop
 8008c8a:	e002      	b.n	8008c92 <_SendPacket+0x282>
      goto SendDone;
 8008c8c:	bf00      	nop
 8008c8e:	e000      	b.n	8008c92 <_SendPacket+0x282>
      goto SendDone;
 8008c90:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008c92:	4b14      	ldr	r3, [pc, #80]	; (8008ce4 <_SendPacket+0x2d4>)
 8008c94:	7e1b      	ldrb	r3, [r3, #24]
 8008c96:	4619      	mov	r1, r3
 8008c98:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <_SendPacket+0x2d8>)
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	440b      	add	r3, r1
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	336c      	adds	r3, #108	; 0x6c
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <_SendPacket+0x2d4>)
 8008caa:	7e1b      	ldrb	r3, [r3, #24]
 8008cac:	4618      	mov	r0, r3
 8008cae:	490e      	ldr	r1, [pc, #56]	; (8008ce8 <_SendPacket+0x2d8>)
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	4403      	add	r3, r0
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	440b      	add	r3, r1
 8008cba:	3370      	adds	r3, #112	; 0x70
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d00b      	beq.n	8008cda <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008cc2:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <_SendPacket+0x2d4>)
 8008cc4:	789b      	ldrb	r3, [r3, #2]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d107      	bne.n	8008cda <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008cca:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <_SendPacket+0x2d4>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008cd0:	f7ff fdbc 	bl	800884c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008cd4:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <_SendPacket+0x2d4>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008cda:	bf00      	nop
 8008cdc:	3728      	adds	r7, #40	; 0x28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20014454 	.word	0x20014454
 8008ce8:	20012f94 	.word	0x20012f94

08008cec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
 8008cf8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d00:	4917      	ldr	r1, [pc, #92]	; (8008d60 <SEGGER_SYSVIEW_Init+0x74>)
 8008d02:	4818      	ldr	r0, [pc, #96]	; (8008d64 <SEGGER_SYSVIEW_Init+0x78>)
 8008d04:	f7ff fc76 	bl	80085f4 <SEGGER_RTT_AllocUpBuffer>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	4b16      	ldr	r3, [pc, #88]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d0e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008d10:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d12:	785a      	ldrb	r2, [r3, #1]
 8008d14:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d16:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008d18:	4b13      	ldr	r3, [pc, #76]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d1a:	7e1b      	ldrb	r3, [r3, #24]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	2308      	movs	r3, #8
 8008d24:	4a11      	ldr	r2, [pc, #68]	; (8008d6c <SEGGER_SYSVIEW_Init+0x80>)
 8008d26:	490f      	ldr	r1, [pc, #60]	; (8008d64 <SEGGER_SYSVIEW_Init+0x78>)
 8008d28:	f7ff fce8 	bl	80086fc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008d32:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <SEGGER_SYSVIEW_Init+0x84>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d38:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8008d3a:	4a0b      	ldr	r2, [pc, #44]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008d40:	4a09      	ldr	r2, [pc, #36]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008d46:	4a08      	ldr	r2, [pc, #32]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008d4c:	4a06      	ldr	r2, [pc, #24]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008d52:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008d58:	bf00      	nop
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	2001344c 	.word	0x2001344c
 8008d64:	0800b7d8 	.word	0x0800b7d8
 8008d68:	20014454 	.word	0x20014454
 8008d6c:	2001444c 	.word	0x2001444c
 8008d70:	e0001004 	.word	0xe0001004

08008d74 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008d7c:	4a04      	ldr	r2, [pc, #16]	; (8008d90 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6113      	str	r3, [r2, #16]
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20014454 	.word	0x20014454

08008d94 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8008da0:	f04f 0120 	mov.w	r1, #32
 8008da4:	f381 8811 	msr	BASEPRI, r1
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	4808      	ldr	r0, [pc, #32]	; (8008dcc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008dac:	f7ff fd42 	bl	8008834 <_PreparePacket>
 8008db0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	68b8      	ldr	r0, [r7, #8]
 8008db8:	f7ff fe2a 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f383 8811 	msr	BASEPRI, r3
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20014484 	.word	0x20014484

08008dd0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008dda:	f3ef 8311 	mrs	r3, BASEPRI
 8008dde:	f04f 0120 	mov.w	r1, #32
 8008de2:	f381 8811 	msr	BASEPRI, r1
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	4816      	ldr	r0, [pc, #88]	; (8008e44 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008dea:	f7ff fd23 	bl	8008834 <_PreparePacket>
 8008dee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	61fb      	str	r3, [r7, #28]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	61bb      	str	r3, [r7, #24]
 8008dfc:	e00b      	b.n	8008e16 <SEGGER_SYSVIEW_RecordU32+0x46>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	1c59      	adds	r1, r3, #1
 8008e06:	61f9      	str	r1, [r7, #28]
 8008e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	701a      	strb	r2, [r3, #0]
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	09db      	lsrs	r3, r3, #7
 8008e14:	61bb      	str	r3, [r7, #24]
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2b7f      	cmp	r3, #127	; 0x7f
 8008e1a:	d8f0      	bhi.n	8008dfe <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	61fa      	str	r2, [r7, #28]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	701a      	strb	r2, [r3, #0]
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	6938      	ldr	r0, [r7, #16]
 8008e32:	f7ff fded 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f383 8811 	msr	BASEPRI, r3
}
 8008e3c:	bf00      	nop
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20014484 	.word	0x20014484

08008e48 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08c      	sub	sp, #48	; 0x30
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008e54:	f3ef 8311 	mrs	r3, BASEPRI
 8008e58:	f04f 0120 	mov.w	r1, #32
 8008e5c:	f381 8811 	msr	BASEPRI, r1
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	4825      	ldr	r0, [pc, #148]	; (8008ef8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008e64:	f7ff fce6 	bl	8008834 <_PreparePacket>
 8008e68:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e76:	e00b      	b.n	8008e90 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	1c59      	adds	r1, r3, #1
 8008e80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008e82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	09db      	lsrs	r3, r3, #7
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	2b7f      	cmp	r3, #127	; 0x7f
 8008e94:	d8f0      	bhi.n	8008e78 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	623b      	str	r3, [r7, #32]
 8008eae:	e00b      	b.n	8008ec8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	1c59      	adds	r1, r3, #1
 8008eb8:	6279      	str	r1, [r7, #36]	; 0x24
 8008eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	09db      	lsrs	r3, r3, #7
 8008ec6:	623b      	str	r3, [r7, #32]
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	2b7f      	cmp	r3, #127	; 0x7f
 8008ecc:	d8f0      	bhi.n	8008eb0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8008ed4:	6a3a      	ldr	r2, [r7, #32]
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	6979      	ldr	r1, [r7, #20]
 8008ee2:	69b8      	ldr	r0, [r7, #24]
 8008ee4:	f7ff fd94 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f383 8811 	msr	BASEPRI, r3
}
 8008eee:	bf00      	nop
 8008ef0:	3730      	adds	r7, #48	; 0x30
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20014484 	.word	0x20014484

08008efc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08e      	sub	sp, #56	; 0x38
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8008f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f0e:	f04f 0120 	mov.w	r1, #32
 8008f12:	f381 8811 	msr	BASEPRI, r1
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	4832      	ldr	r0, [pc, #200]	; (8008fe4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8008f1a:	f7ff fc8b 	bl	8008834 <_PreparePacket>
 8008f1e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	637b      	str	r3, [r7, #52]	; 0x34
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008f2c:	e00b      	b.n	8008f46 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f34:	1c59      	adds	r1, r3, #1
 8008f36:	6379      	str	r1, [r7, #52]	; 0x34
 8008f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f3c:	b2d2      	uxtb	r2, r2
 8008f3e:	701a      	strb	r2, [r3, #0]
 8008f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f42:	09db      	lsrs	r3, r3, #7
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	2b7f      	cmp	r3, #127	; 0x7f
 8008f4a:	d8f0      	bhi.n	8008f2e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	637a      	str	r2, [r7, #52]	; 0x34
 8008f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f64:	e00b      	b.n	8008f7e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	1c59      	adds	r1, r3, #1
 8008f6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	09db      	lsrs	r3, r3, #7
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	2b7f      	cmp	r3, #127	; 0x7f
 8008f82:	d8f0      	bhi.n	8008f66 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	627b      	str	r3, [r7, #36]	; 0x24
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	623b      	str	r3, [r7, #32]
 8008f9c:	e00b      	b.n	8008fb6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	1c59      	adds	r1, r3, #1
 8008fa6:	6279      	str	r1, [r7, #36]	; 0x24
 8008fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	09db      	lsrs	r3, r3, #7
 8008fb4:	623b      	str	r3, [r7, #32]
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8008fba:	d8f0      	bhi.n	8008f9e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	627a      	str	r2, [r7, #36]	; 0x24
 8008fc2:	6a3a      	ldr	r2, [r7, #32]
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	6979      	ldr	r1, [r7, #20]
 8008fd0:	69b8      	ldr	r0, [r7, #24]
 8008fd2:	f7ff fd1d 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f383 8811 	msr	BASEPRI, r3
}
 8008fdc:	bf00      	nop
 8008fde:	3738      	adds	r7, #56	; 0x38
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20014484 	.word	0x20014484

08008fe8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b090      	sub	sp, #64	; 0x40
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8008ffa:	f04f 0120 	mov.w	r1, #32
 8008ffe:	f381 8811 	msr	BASEPRI, r1
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	4840      	ldr	r0, [pc, #256]	; (8009108 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009006:	f7ff fc15 	bl	8008834 <_PreparePacket>
 800900a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	63bb      	str	r3, [r7, #56]	; 0x38
 8009018:	e00b      	b.n	8009032 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	b2da      	uxtb	r2, r3
 800901e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009020:	1c59      	adds	r1, r3, #1
 8009022:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	09db      	lsrs	r3, r3, #7
 8009030:	63bb      	str	r3, [r7, #56]	; 0x38
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	2b7f      	cmp	r3, #127	; 0x7f
 8009036:	d8f0      	bhi.n	800901a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800903e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009040:	b2d2      	uxtb	r2, r2
 8009042:	701a      	strb	r2, [r3, #0]
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	633b      	str	r3, [r7, #48]	; 0x30
 8009050:	e00b      	b.n	800906a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	b2da      	uxtb	r2, r3
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	1c59      	adds	r1, r3, #1
 800905a:	6379      	str	r1, [r7, #52]	; 0x34
 800905c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009060:	b2d2      	uxtb	r2, r2
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	09db      	lsrs	r3, r3, #7
 8009068:	633b      	str	r3, [r7, #48]	; 0x30
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	2b7f      	cmp	r3, #127	; 0x7f
 800906e:	d8f0      	bhi.n	8009052 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	637a      	str	r2, [r7, #52]	; 0x34
 8009076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009078:	b2d2      	uxtb	r2, r2
 800907a:	701a      	strb	r2, [r3, #0]
 800907c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
 8009088:	e00b      	b.n	80090a2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	b2da      	uxtb	r2, r3
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	1c59      	adds	r1, r3, #1
 8009092:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	09db      	lsrs	r3, r3, #7
 80090a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	2b7f      	cmp	r3, #127	; 0x7f
 80090a6:	d8f0      	bhi.n	800908a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b0:	b2d2      	uxtb	r2, r2
 80090b2:	701a      	strb	r2, [r3, #0]
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
 80090bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090be:	623b      	str	r3, [r7, #32]
 80090c0:	e00b      	b.n	80090da <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	1c59      	adds	r1, r3, #1
 80090ca:	6279      	str	r1, [r7, #36]	; 0x24
 80090cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090d0:	b2d2      	uxtb	r2, r2
 80090d2:	701a      	strb	r2, [r3, #0]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	09db      	lsrs	r3, r3, #7
 80090d8:	623b      	str	r3, [r7, #32]
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	2b7f      	cmp	r3, #127	; 0x7f
 80090de:	d8f0      	bhi.n	80090c2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	627a      	str	r2, [r7, #36]	; 0x24
 80090e6:	6a3a      	ldr	r2, [r7, #32]
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	6979      	ldr	r1, [r7, #20]
 80090f4:	69b8      	ldr	r0, [r7, #24]
 80090f6:	f7ff fc8b 	bl	8008a10 <_SendPacket>
  RECORD_END();
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	f383 8811 	msr	BASEPRI, r3
}
 8009100:	bf00      	nop
 8009102:	3740      	adds	r7, #64	; 0x40
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20014484 	.word	0x20014484

0800910c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800910c:	b580      	push	{r7, lr}
 800910e:	b092      	sub	sp, #72	; 0x48
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800911a:	f3ef 8311 	mrs	r3, BASEPRI
 800911e:	f04f 0120 	mov.w	r1, #32
 8009122:	f381 8811 	msr	BASEPRI, r1
 8009126:	61fb      	str	r3, [r7, #28]
 8009128:	484e      	ldr	r0, [pc, #312]	; (8009264 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800912a:	f7ff fb83 	bl	8008834 <_PreparePacket>
 800912e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	647b      	str	r3, [r7, #68]	; 0x44
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	643b      	str	r3, [r7, #64]	; 0x40
 800913c:	e00b      	b.n	8009156 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800913e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009140:	b2da      	uxtb	r2, r3
 8009142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009144:	1c59      	adds	r1, r3, #1
 8009146:	6479      	str	r1, [r7, #68]	; 0x44
 8009148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800914c:	b2d2      	uxtb	r2, r2
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009152:	09db      	lsrs	r3, r3, #7
 8009154:	643b      	str	r3, [r7, #64]	; 0x40
 8009156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009158:	2b7f      	cmp	r3, #127	; 0x7f
 800915a:	d8f0      	bhi.n	800913e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800915c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	647a      	str	r2, [r7, #68]	; 0x44
 8009162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	63bb      	str	r3, [r7, #56]	; 0x38
 8009174:	e00b      	b.n	800918e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	b2da      	uxtb	r2, r3
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	1c59      	adds	r1, r3, #1
 800917e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009184:	b2d2      	uxtb	r2, r2
 8009186:	701a      	strb	r2, [r3, #0]
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	09db      	lsrs	r3, r3, #7
 800918c:	63bb      	str	r3, [r7, #56]	; 0x38
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	2b7f      	cmp	r3, #127	; 0x7f
 8009192:	d8f0      	bhi.n	8009176 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8009194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800919a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919c:	b2d2      	uxtb	r2, r2
 800919e:	701a      	strb	r2, [r3, #0]
 80091a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	633b      	str	r3, [r7, #48]	; 0x30
 80091ac:	e00b      	b.n	80091c6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b4:	1c59      	adds	r1, r3, #1
 80091b6:	6379      	str	r1, [r7, #52]	; 0x34
 80091b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091bc:	b2d2      	uxtb	r2, r2
 80091be:	701a      	strb	r2, [r3, #0]
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	09db      	lsrs	r3, r3, #7
 80091c4:	633b      	str	r3, [r7, #48]	; 0x30
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	2b7f      	cmp	r3, #127	; 0x7f
 80091ca:	d8f0      	bhi.n	80091ae <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80091cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	637a      	str	r2, [r7, #52]	; 0x34
 80091d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80091e4:	e00b      	b.n	80091fe <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	1c59      	adds	r1, r3, #1
 80091ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80091f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	09db      	lsrs	r3, r3, #7
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009200:	2b7f      	cmp	r3, #127	; 0x7f
 8009202:	d8f0      	bhi.n	80091e6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800920a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
 8009218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800921a:	623b      	str	r3, [r7, #32]
 800921c:	e00b      	b.n	8009236 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	b2da      	uxtb	r2, r3
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	1c59      	adds	r1, r3, #1
 8009226:	6279      	str	r1, [r7, #36]	; 0x24
 8009228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	09db      	lsrs	r3, r3, #7
 8009234:	623b      	str	r3, [r7, #32]
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	2b7f      	cmp	r3, #127	; 0x7f
 800923a:	d8f0      	bhi.n	800921e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	627a      	str	r2, [r7, #36]	; 0x24
 8009242:	6a3a      	ldr	r2, [r7, #32]
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	6979      	ldr	r1, [r7, #20]
 8009250:	69b8      	ldr	r0, [r7, #24]
 8009252:	f7ff fbdd 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f383 8811 	msr	BASEPRI, r3
}
 800925c:	bf00      	nop
 800925e:	3748      	adds	r7, #72	; 0x48
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20014484 	.word	0x20014484

08009268 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009268:	b580      	push	{r7, lr}
 800926a:	b08c      	sub	sp, #48	; 0x30
 800926c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800926e:	4b58      	ldr	r3, [pc, #352]	; (80093d0 <SEGGER_SYSVIEW_Start+0x168>)
 8009270:	2201      	movs	r2, #1
 8009272:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009274:	f3ef 8311 	mrs	r3, BASEPRI
 8009278:	f04f 0120 	mov.w	r1, #32
 800927c:	f381 8811 	msr	BASEPRI, r1
 8009280:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009282:	4b53      	ldr	r3, [pc, #332]	; (80093d0 <SEGGER_SYSVIEW_Start+0x168>)
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	220a      	movs	r2, #10
 8009288:	4952      	ldr	r1, [pc, #328]	; (80093d4 <SEGGER_SYSVIEW_Start+0x16c>)
 800928a:	4618      	mov	r0, r3
 800928c:	f7f6 ffb0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009296:	200a      	movs	r0, #10
 8009298:	f7ff fd7c 	bl	8008d94 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800929c:	f3ef 8311 	mrs	r3, BASEPRI
 80092a0:	f04f 0120 	mov.w	r1, #32
 80092a4:	f381 8811 	msr	BASEPRI, r1
 80092a8:	60bb      	str	r3, [r7, #8]
 80092aa:	484b      	ldr	r0, [pc, #300]	; (80093d8 <SEGGER_SYSVIEW_Start+0x170>)
 80092ac:	f7ff fac2 	bl	8008834 <_PreparePacket>
 80092b0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ba:	4b45      	ldr	r3, [pc, #276]	; (80093d0 <SEGGER_SYSVIEW_Start+0x168>)
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	62bb      	str	r3, [r7, #40]	; 0x28
 80092c0:	e00b      	b.n	80092da <SEGGER_SYSVIEW_Start+0x72>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	1c59      	adds	r1, r3, #1
 80092ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80092cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092d0:	b2d2      	uxtb	r2, r2
 80092d2:	701a      	strb	r2, [r3, #0]
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	09db      	lsrs	r3, r3, #7
 80092d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	2b7f      	cmp	r3, #127	; 0x7f
 80092de:	d8f0      	bhi.n	80092c2 <SEGGER_SYSVIEW_Start+0x5a>
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
 80092f4:	4b36      	ldr	r3, [pc, #216]	; (80093d0 <SEGGER_SYSVIEW_Start+0x168>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	623b      	str	r3, [r7, #32]
 80092fa:	e00b      	b.n	8009314 <SEGGER_SYSVIEW_Start+0xac>
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	1c59      	adds	r1, r3, #1
 8009304:	6279      	str	r1, [r7, #36]	; 0x24
 8009306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	09db      	lsrs	r3, r3, #7
 8009312:	623b      	str	r3, [r7, #32]
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	2b7f      	cmp	r3, #127	; 0x7f
 8009318:	d8f0      	bhi.n	80092fc <SEGGER_SYSVIEW_Start+0x94>
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	627a      	str	r2, [r7, #36]	; 0x24
 8009320:	6a3a      	ldr	r2, [r7, #32]
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	61fb      	str	r3, [r7, #28]
 800932e:	4b28      	ldr	r3, [pc, #160]	; (80093d0 <SEGGER_SYSVIEW_Start+0x168>)
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	61bb      	str	r3, [r7, #24]
 8009334:	e00b      	b.n	800934e <SEGGER_SYSVIEW_Start+0xe6>
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	b2da      	uxtb	r2, r3
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	1c59      	adds	r1, r3, #1
 800933e:	61f9      	str	r1, [r7, #28]
 8009340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009344:	b2d2      	uxtb	r2, r2
 8009346:	701a      	strb	r2, [r3, #0]
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	09db      	lsrs	r3, r3, #7
 800934c:	61bb      	str	r3, [r7, #24]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b7f      	cmp	r3, #127	; 0x7f
 8009352:	d8f0      	bhi.n	8009336 <SEGGER_SYSVIEW_Start+0xce>
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	61fa      	str	r2, [r7, #28]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	b2d2      	uxtb	r2, r2
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	2300      	movs	r3, #0
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	e00b      	b.n	8009386 <SEGGER_SYSVIEW_Start+0x11e>
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	b2da      	uxtb	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	1c59      	adds	r1, r3, #1
 8009376:	6179      	str	r1, [r7, #20]
 8009378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800937c:	b2d2      	uxtb	r2, r2
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	09db      	lsrs	r3, r3, #7
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b7f      	cmp	r3, #127	; 0x7f
 800938a:	d8f0      	bhi.n	800936e <SEGGER_SYSVIEW_Start+0x106>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	617a      	str	r2, [r7, #20]
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	b2d2      	uxtb	r2, r2
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800939c:	2218      	movs	r2, #24
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff fb35 	bl	8008a10 <_SendPacket>
      RECORD_END();
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80093ac:	4b08      	ldr	r3, [pc, #32]	; (80093d0 <SEGGER_SYSVIEW_Start+0x168>)
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80093b4:	4b06      	ldr	r3, [pc, #24]	; (80093d0 <SEGGER_SYSVIEW_Start+0x168>)
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80093ba:	f000 f9eb 	bl	8009794 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80093be:	f000 f9b1 	bl	8009724 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80093c2:	f000 fc83 	bl	8009ccc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80093c6:	bf00      	nop
 80093c8:	3730      	adds	r7, #48	; 0x30
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20014454 	.word	0x20014454
 80093d4:	0800b8b8 	.word	0x0800b8b8
 80093d8:	20014484 	.word	0x20014484

080093dc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80093e2:	f3ef 8311 	mrs	r3, BASEPRI
 80093e6:	f04f 0120 	mov.w	r1, #32
 80093ea:	f381 8811 	msr	BASEPRI, r1
 80093ee:	607b      	str	r3, [r7, #4]
 80093f0:	480b      	ldr	r0, [pc, #44]	; (8009420 <SEGGER_SYSVIEW_Stop+0x44>)
 80093f2:	f7ff fa1f 	bl	8008834 <_PreparePacket>
 80093f6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80093f8:	4b0a      	ldr	r3, [pc, #40]	; (8009424 <SEGGER_SYSVIEW_Stop+0x48>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009400:	220b      	movs	r2, #11
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6838      	ldr	r0, [r7, #0]
 8009406:	f7ff fb03 	bl	8008a10 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800940a:	4b06      	ldr	r3, [pc, #24]	; (8009424 <SEGGER_SYSVIEW_Stop+0x48>)
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f383 8811 	msr	BASEPRI, r3
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20014484 	.word	0x20014484
 8009424:	20014454 	.word	0x20014454

08009428 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009428:	b580      	push	{r7, lr}
 800942a:	b08c      	sub	sp, #48	; 0x30
 800942c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800942e:	f3ef 8311 	mrs	r3, BASEPRI
 8009432:	f04f 0120 	mov.w	r1, #32
 8009436:	f381 8811 	msr	BASEPRI, r1
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	4845      	ldr	r0, [pc, #276]	; (8009554 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800943e:	f7ff f9f9 	bl	8008834 <_PreparePacket>
 8009442:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800944c:	4b42      	ldr	r3, [pc, #264]	; (8009558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28
 8009452:	e00b      	b.n	800946c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	b2da      	uxtb	r2, r3
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	1c59      	adds	r1, r3, #1
 800945c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800945e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	09db      	lsrs	r3, r3, #7
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	2b7f      	cmp	r3, #127	; 0x7f
 8009470:	d8f0      	bhi.n	8009454 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800947a:	b2d2      	uxtb	r2, r2
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
 8009486:	4b34      	ldr	r3, [pc, #208]	; (8009558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	623b      	str	r3, [r7, #32]
 800948c:	e00b      	b.n	80094a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	b2da      	uxtb	r2, r3
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	1c59      	adds	r1, r3, #1
 8009496:	6279      	str	r1, [r7, #36]	; 0x24
 8009498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800949c:	b2d2      	uxtb	r2, r2
 800949e:	701a      	strb	r2, [r3, #0]
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	09db      	lsrs	r3, r3, #7
 80094a4:	623b      	str	r3, [r7, #32]
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	2b7f      	cmp	r3, #127	; 0x7f
 80094aa:	d8f0      	bhi.n	800948e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	627a      	str	r2, [r7, #36]	; 0x24
 80094b2:	6a3a      	ldr	r2, [r7, #32]
 80094b4:	b2d2      	uxtb	r2, r2
 80094b6:	701a      	strb	r2, [r3, #0]
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	4b25      	ldr	r3, [pc, #148]	; (8009558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	61bb      	str	r3, [r7, #24]
 80094c6:	e00b      	b.n	80094e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	1c59      	adds	r1, r3, #1
 80094d0:	61f9      	str	r1, [r7, #28]
 80094d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	09db      	lsrs	r3, r3, #7
 80094de:	61bb      	str	r3, [r7, #24]
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	2b7f      	cmp	r3, #127	; 0x7f
 80094e4:	d8f0      	bhi.n	80094c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	61fa      	str	r2, [r7, #28]
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	e00b      	b.n	8009518 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	b2da      	uxtb	r2, r3
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	1c59      	adds	r1, r3, #1
 8009508:	6179      	str	r1, [r7, #20]
 800950a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	09db      	lsrs	r3, r3, #7
 8009516:	613b      	str	r3, [r7, #16]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	2b7f      	cmp	r3, #127	; 0x7f
 800951c:	d8f0      	bhi.n	8009500 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	617a      	str	r2, [r7, #20]
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800952e:	2218      	movs	r2, #24
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	68b8      	ldr	r0, [r7, #8]
 8009534:	f7ff fa6c 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800953e:	4b06      	ldr	r3, [pc, #24]	; (8009558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009546:	4b04      	ldr	r3, [pc, #16]	; (8009558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	4798      	blx	r3
  }
}
 800954c:	bf00      	nop
 800954e:	3730      	adds	r7, #48	; 0x30
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20014484 	.word	0x20014484
 8009558:	20014454 	.word	0x20014454

0800955c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b092      	sub	sp, #72	; 0x48
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009564:	f3ef 8311 	mrs	r3, BASEPRI
 8009568:	f04f 0120 	mov.w	r1, #32
 800956c:	f381 8811 	msr	BASEPRI, r1
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	486a      	ldr	r0, [pc, #424]	; (800971c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009574:	f7ff f95e 	bl	8008834 <_PreparePacket>
 8009578:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	647b      	str	r3, [r7, #68]	; 0x44
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b66      	ldr	r3, [pc, #408]	; (8009720 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	643b      	str	r3, [r7, #64]	; 0x40
 800958e:	e00b      	b.n	80095a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009592:	b2da      	uxtb	r2, r3
 8009594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009596:	1c59      	adds	r1, r3, #1
 8009598:	6479      	str	r1, [r7, #68]	; 0x44
 800959a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a4:	09db      	lsrs	r3, r3, #7
 80095a6:	643b      	str	r3, [r7, #64]	; 0x40
 80095a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095aa:	2b7f      	cmp	r3, #127	; 0x7f
 80095ac:	d8f0      	bhi.n	8009590 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80095ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	647a      	str	r2, [r7, #68]	; 0x44
 80095b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80095c8:	e00b      	b.n	80095e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d0:	1c59      	adds	r1, r3, #1
 80095d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80095d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095d8:	b2d2      	uxtb	r2, r2
 80095da:	701a      	strb	r2, [r3, #0]
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	09db      	lsrs	r3, r3, #7
 80095e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	2b7f      	cmp	r3, #127	; 0x7f
 80095e6:	d8f0      	bhi.n	80095ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80095e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80095ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	2220      	movs	r2, #32
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff f8c7 	bl	8008794 <_EncodeStr>
 8009606:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009608:	2209      	movs	r2, #9
 800960a:	68f9      	ldr	r1, [r7, #12]
 800960c:	6938      	ldr	r0, [r7, #16]
 800960e:	f7ff f9ff 	bl	8008a10 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	637b      	str	r3, [r7, #52]	; 0x34
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4b40      	ldr	r3, [pc, #256]	; (8009720 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	633b      	str	r3, [r7, #48]	; 0x30
 8009626:	e00b      	b.n	8009640 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	b2da      	uxtb	r2, r3
 800962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962e:	1c59      	adds	r1, r3, #1
 8009630:	6379      	str	r1, [r7, #52]	; 0x34
 8009632:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	701a      	strb	r2, [r3, #0]
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	09db      	lsrs	r3, r3, #7
 800963e:	633b      	str	r3, [r7, #48]	; 0x30
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	2b7f      	cmp	r3, #127	; 0x7f
 8009644:	d8f0      	bhi.n	8009628 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	637a      	str	r2, [r7, #52]	; 0x34
 800964c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009654:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009660:	e00b      	b.n	800967a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	b2da      	uxtb	r2, r3
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	1c59      	adds	r1, r3, #1
 800966a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800966c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	09db      	lsrs	r3, r3, #7
 8009678:	62bb      	str	r3, [r7, #40]	; 0x28
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	2b7f      	cmp	r3, #127	; 0x7f
 800967e:	d8f0      	bhi.n	8009662 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	627b      	str	r3, [r7, #36]	; 0x24
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	623b      	str	r3, [r7, #32]
 800969a:	e00b      	b.n	80096b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	1c59      	adds	r1, r3, #1
 80096a4:	6279      	str	r1, [r7, #36]	; 0x24
 80096a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096aa:	b2d2      	uxtb	r2, r2
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	09db      	lsrs	r3, r3, #7
 80096b2:	623b      	str	r3, [r7, #32]
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	2b7f      	cmp	r3, #127	; 0x7f
 80096b8:	d8f0      	bhi.n	800969c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	627a      	str	r2, [r7, #36]	; 0x24
 80096c0:	6a3a      	ldr	r2, [r7, #32]
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	2300      	movs	r3, #0
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	e00b      	b.n	80096ec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	1c59      	adds	r1, r3, #1
 80096dc:	61f9      	str	r1, [r7, #28]
 80096de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	701a      	strb	r2, [r3, #0]
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	09db      	lsrs	r3, r3, #7
 80096ea:	61bb      	str	r3, [r7, #24]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	2b7f      	cmp	r3, #127	; 0x7f
 80096f0:	d8f0      	bhi.n	80096d4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	61fa      	str	r2, [r7, #28]
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	701a      	strb	r2, [r3, #0]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009702:	2215      	movs	r2, #21
 8009704:	68f9      	ldr	r1, [r7, #12]
 8009706:	6938      	ldr	r0, [r7, #16]
 8009708:	f7ff f982 	bl	8008a10 <_SendPacket>
  RECORD_END();
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f383 8811 	msr	BASEPRI, r3
}
 8009712:	bf00      	nop
 8009714:	3748      	adds	r7, #72	; 0x48
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	20014484 	.word	0x20014484
 8009720:	20014454 	.word	0x20014454

08009724 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009728:	4b07      	ldr	r3, [pc, #28]	; (8009748 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009730:	4b05      	ldr	r3, [pc, #20]	; (8009748 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800973a:	4b03      	ldr	r3, [pc, #12]	; (8009748 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4798      	blx	r3
  }
}
 8009742:	bf00      	nop
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20014454 	.word	0x20014454

0800974c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009754:	f3ef 8311 	mrs	r3, BASEPRI
 8009758:	f04f 0120 	mov.w	r1, #32
 800975c:	f381 8811 	msr	BASEPRI, r1
 8009760:	617b      	str	r3, [r7, #20]
 8009762:	480b      	ldr	r0, [pc, #44]	; (8009790 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009764:	f7ff f866 	bl	8008834 <_PreparePacket>
 8009768:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800976a:	2280      	movs	r2, #128	; 0x80
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f7ff f810 	bl	8008794 <_EncodeStr>
 8009774:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009776:	220e      	movs	r2, #14
 8009778:	68f9      	ldr	r1, [r7, #12]
 800977a:	6938      	ldr	r0, [r7, #16]
 800977c:	f7ff f948 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f383 8811 	msr	BASEPRI, r3
}
 8009786:	bf00      	nop
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20014484 	.word	0x20014484

08009794 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009794:	b590      	push	{r4, r7, lr}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800979a:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01a      	beq.n	80097d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80097a2:	4b13      	ldr	r3, [pc, #76]	; (80097f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d015      	beq.n	80097d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80097ac:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4798      	blx	r3
 80097b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80097b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80097ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	000a      	movs	r2, r1
 80097c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80097ca:	4613      	mov	r3, r2
 80097cc:	461a      	mov	r2, r3
 80097ce:	4621      	mov	r1, r4
 80097d0:	200d      	movs	r0, #13
 80097d2:	f7ff fb39 	bl	8008e48 <SEGGER_SYSVIEW_RecordU32x2>
 80097d6:	e006      	b.n	80097e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80097d8:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4619      	mov	r1, r3
 80097de:	200c      	movs	r0, #12
 80097e0:	f7ff faf6 	bl	8008dd0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd90      	pop	{r4, r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20014454 	.word	0x20014454
 80097f4:	e0001004 	.word	0xe0001004

080097f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80097fe:	f3ef 8311 	mrs	r3, BASEPRI
 8009802:	f04f 0120 	mov.w	r1, #32
 8009806:	f381 8811 	msr	BASEPRI, r1
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	4819      	ldr	r0, [pc, #100]	; (8009874 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800980e:	f7ff f811 	bl	8008834 <_PreparePacket>
 8009812:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009818:	4b17      	ldr	r3, [pc, #92]	; (8009878 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009820:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	e00b      	b.n	8009844 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	b2da      	uxtb	r2, r3
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	1c59      	adds	r1, r3, #1
 8009834:	6179      	str	r1, [r7, #20]
 8009836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800983a:	b2d2      	uxtb	r2, r2
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	09db      	lsrs	r3, r3, #7
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2b7f      	cmp	r3, #127	; 0x7f
 8009848:	d8f0      	bhi.n	800982c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	617a      	str	r2, [r7, #20]
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800985a:	2202      	movs	r2, #2
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	68b8      	ldr	r0, [r7, #8]
 8009860:	f7ff f8d6 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f383 8811 	msr	BASEPRI, r3
}
 800986a:	bf00      	nop
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20014484 	.word	0x20014484
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009882:	f3ef 8311 	mrs	r3, BASEPRI
 8009886:	f04f 0120 	mov.w	r1, #32
 800988a:	f381 8811 	msr	BASEPRI, r1
 800988e:	607b      	str	r3, [r7, #4]
 8009890:	4807      	ldr	r0, [pc, #28]	; (80098b0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009892:	f7fe ffcf 	bl	8008834 <_PreparePacket>
 8009896:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009898:	2203      	movs	r2, #3
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6838      	ldr	r0, [r7, #0]
 800989e:	f7ff f8b7 	bl	8008a10 <_SendPacket>
  RECORD_END();
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f383 8811 	msr	BASEPRI, r3
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20014484 	.word	0x20014484

080098b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80098ba:	f3ef 8311 	mrs	r3, BASEPRI
 80098be:	f04f 0120 	mov.w	r1, #32
 80098c2:	f381 8811 	msr	BASEPRI, r1
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	4807      	ldr	r0, [pc, #28]	; (80098e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80098ca:	f7fe ffb3 	bl	8008834 <_PreparePacket>
 80098ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80098d0:	2212      	movs	r2, #18
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6838      	ldr	r0, [r7, #0]
 80098d6:	f7ff f89b 	bl	8008a10 <_SendPacket>
  RECORD_END();
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f383 8811 	msr	BASEPRI, r3
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20014484 	.word	0x20014484

080098ec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80098f2:	f3ef 8311 	mrs	r3, BASEPRI
 80098f6:	f04f 0120 	mov.w	r1, #32
 80098fa:	f381 8811 	msr	BASEPRI, r1
 80098fe:	607b      	str	r3, [r7, #4]
 8009900:	4807      	ldr	r0, [pc, #28]	; (8009920 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009902:	f7fe ff97 	bl	8008834 <_PreparePacket>
 8009906:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009908:	2211      	movs	r2, #17
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6838      	ldr	r0, [r7, #0]
 800990e:	f7ff f87f 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f383 8811 	msr	BASEPRI, r3
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20014484 	.word	0x20014484

08009924 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800992c:	f3ef 8311 	mrs	r3, BASEPRI
 8009930:	f04f 0120 	mov.w	r1, #32
 8009934:	f381 8811 	msr	BASEPRI, r1
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	4819      	ldr	r0, [pc, #100]	; (80099a0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800993c:	f7fe ff7a 	bl	8008834 <_PreparePacket>
 8009940:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009946:	4b17      	ldr	r3, [pc, #92]	; (80099a4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	61bb      	str	r3, [r7, #24]
 8009958:	e00b      	b.n	8009972 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	b2da      	uxtb	r2, r3
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	1c59      	adds	r1, r3, #1
 8009962:	61f9      	str	r1, [r7, #28]
 8009964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	701a      	strb	r2, [r3, #0]
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	09db      	lsrs	r3, r3, #7
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2b7f      	cmp	r3, #127	; 0x7f
 8009976:	d8f0      	bhi.n	800995a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	61fa      	str	r2, [r7, #28]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009988:	2208      	movs	r2, #8
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	6938      	ldr	r0, [r7, #16]
 800998e:	f7ff f83f 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f383 8811 	msr	BASEPRI, r3
}
 8009998:	bf00      	nop
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20014484 	.word	0x20014484
 80099a4:	20014454 	.word	0x20014454

080099a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80099b0:	f3ef 8311 	mrs	r3, BASEPRI
 80099b4:	f04f 0120 	mov.w	r1, #32
 80099b8:	f381 8811 	msr	BASEPRI, r1
 80099bc:	617b      	str	r3, [r7, #20]
 80099be:	4819      	ldr	r0, [pc, #100]	; (8009a24 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80099c0:	f7fe ff38 	bl	8008834 <_PreparePacket>
 80099c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80099ca:	4b17      	ldr	r3, [pc, #92]	; (8009a28 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	61fb      	str	r3, [r7, #28]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	e00b      	b.n	80099f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	1c59      	adds	r1, r3, #1
 80099e6:	61f9      	str	r1, [r7, #28]
 80099e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099ec:	b2d2      	uxtb	r2, r2
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	09db      	lsrs	r3, r3, #7
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	2b7f      	cmp	r3, #127	; 0x7f
 80099fa:	d8f0      	bhi.n	80099de <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	61fa      	str	r2, [r7, #28]
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	6938      	ldr	r0, [r7, #16]
 8009a12:	f7fe fffd 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f383 8811 	msr	BASEPRI, r3
}
 8009a1c:	bf00      	nop
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20014484 	.word	0x20014484
 8009a28:	20014454 	.word	0x20014454

08009a2c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009a34:	f3ef 8311 	mrs	r3, BASEPRI
 8009a38:	f04f 0120 	mov.w	r1, #32
 8009a3c:	f381 8811 	msr	BASEPRI, r1
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	4819      	ldr	r0, [pc, #100]	; (8009aa8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009a44:	f7fe fef6 	bl	8008834 <_PreparePacket>
 8009a48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009a4e:	4b17      	ldr	r3, [pc, #92]	; (8009aac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	e00b      	b.n	8009a7a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	1c59      	adds	r1, r3, #1
 8009a6a:	61f9      	str	r1, [r7, #28]
 8009a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	09db      	lsrs	r3, r3, #7
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8009a7e:	d8f0      	bhi.n	8009a62 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	61fa      	str	r2, [r7, #28]
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	b2d2      	uxtb	r2, r2
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009a90:	2206      	movs	r2, #6
 8009a92:	68f9      	ldr	r1, [r7, #12]
 8009a94:	6938      	ldr	r0, [r7, #16]
 8009a96:	f7fe ffbb 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f383 8811 	msr	BASEPRI, r3
}
 8009aa0:	bf00      	nop
 8009aa2:	3720      	adds	r7, #32
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20014484 	.word	0x20014484
 8009aac:	20014454 	.word	0x20014454

08009ab0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009aba:	f3ef 8311 	mrs	r3, BASEPRI
 8009abe:	f04f 0120 	mov.w	r1, #32
 8009ac2:	f381 8811 	msr	BASEPRI, r1
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	4827      	ldr	r0, [pc, #156]	; (8009b68 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8009aca:	f7fe feb3 	bl	8008834 <_PreparePacket>
 8009ace:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009ad4:	4b25      	ldr	r3, [pc, #148]	; (8009b6c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	623b      	str	r3, [r7, #32]
 8009ae6:	e00b      	b.n	8009b00 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	1c59      	adds	r1, r3, #1
 8009af0:	6279      	str	r1, [r7, #36]	; 0x24
 8009af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	09db      	lsrs	r3, r3, #7
 8009afe:	623b      	str	r3, [r7, #32]
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	2b7f      	cmp	r3, #127	; 0x7f
 8009b04:	d8f0      	bhi.n	8009ae8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8009b0c:	6a3a      	ldr	r2, [r7, #32]
 8009b0e:	b2d2      	uxtb	r2, r2
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	61fb      	str	r3, [r7, #28]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	61bb      	str	r3, [r7, #24]
 8009b1e:	e00b      	b.n	8009b38 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	1c59      	adds	r1, r3, #1
 8009b28:	61f9      	str	r1, [r7, #28]
 8009b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	09db      	lsrs	r3, r3, #7
 8009b36:	61bb      	str	r3, [r7, #24]
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b3c:	d8f0      	bhi.n	8009b20 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	61fa      	str	r2, [r7, #28]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8009b4e:	2207      	movs	r2, #7
 8009b50:	68f9      	ldr	r1, [r7, #12]
 8009b52:	6938      	ldr	r0, [r7, #16]
 8009b54:	f7fe ff5c 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f383 8811 	msr	BASEPRI, r3
}
 8009b5e:	bf00      	nop
 8009b60:	3728      	adds	r7, #40	; 0x28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20014484 	.word	0x20014484
 8009b6c:	20014454 	.word	0x20014454

08009b70 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009b78:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	1ad3      	subs	r3, r2, r3
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	20014454 	.word	0x20014454

08009b90 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08c      	sub	sp, #48	; 0x30
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009b9a:	4b3b      	ldr	r3, [pc, #236]	; (8009c88 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d06d      	beq.n	8009c7e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8009ba2:	4b39      	ldr	r3, [pc, #228]	; (8009c88 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bac:	e008      	b.n	8009bc0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d3f2      	bcc.n	8009bae <SEGGER_SYSVIEW_SendModule+0x1e>
 8009bc8:	e000      	b.n	8009bcc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009bca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d055      	beq.n	8009c7e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009bd6:	f04f 0120 	mov.w	r1, #32
 8009bda:	f381 8811 	msr	BASEPRI, r1
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	482a      	ldr	r0, [pc, #168]	; (8009c8c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009be2:	f7fe fe27 	bl	8008834 <_PreparePacket>
 8009be6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	623b      	str	r3, [r7, #32]
 8009bf4:	e00b      	b.n	8009c0e <SEGGER_SYSVIEW_SendModule+0x7e>
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	1c59      	adds	r1, r3, #1
 8009bfe:	6279      	str	r1, [r7, #36]	; 0x24
 8009c00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c04:	b2d2      	uxtb	r2, r2
 8009c06:	701a      	strb	r2, [r3, #0]
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	09db      	lsrs	r3, r3, #7
 8009c0c:	623b      	str	r3, [r7, #32]
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	2b7f      	cmp	r3, #127	; 0x7f
 8009c12:	d8f0      	bhi.n	8009bf6 <SEGGER_SYSVIEW_SendModule+0x66>
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	627a      	str	r2, [r7, #36]	; 0x24
 8009c1a:	6a3a      	ldr	r2, [r7, #32]
 8009c1c:	b2d2      	uxtb	r2, r2
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	61fb      	str	r3, [r7, #28]
 8009c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	e00b      	b.n	8009c48 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	1c59      	adds	r1, r3, #1
 8009c38:	61f9      	str	r1, [r7, #28]
 8009c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	09db      	lsrs	r3, r3, #7
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c4c:	d8f0      	bhi.n	8009c30 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	61fa      	str	r2, [r7, #28]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	701a      	strb	r2, [r3, #0]
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2280      	movs	r2, #128	; 0x80
 8009c64:	4619      	mov	r1, r3
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7fe fd94 	bl	8008794 <_EncodeStr>
 8009c6c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009c6e:	2216      	movs	r2, #22
 8009c70:	68f9      	ldr	r1, [r7, #12]
 8009c72:	6938      	ldr	r0, [r7, #16]
 8009c74:	f7fe fecc 	bl	8008a10 <_SendPacket>
      RECORD_END();
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009c7e:	bf00      	nop
 8009c80:	3730      	adds	r7, #48	; 0x30
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	2001447c 	.word	0x2001447c
 8009c8c:	20014484 	.word	0x20014484

08009c90 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00f      	beq.n	8009cbe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f2      	bne.n	8009ca4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	2001447c 	.word	0x2001447c

08009ccc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009cd6:	f04f 0120 	mov.w	r1, #32
 8009cda:	f381 8811 	msr	BASEPRI, r1
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	4817      	ldr	r0, [pc, #92]	; (8009d40 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009ce2:	f7fe fda7 	bl	8008834 <_PreparePacket>
 8009ce6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	613b      	str	r3, [r7, #16]
 8009cf6:	e00b      	b.n	8009d10 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	1c59      	adds	r1, r3, #1
 8009d00:	6179      	str	r1, [r7, #20]
 8009d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d06:	b2d2      	uxtb	r2, r2
 8009d08:	701a      	strb	r2, [r3, #0]
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	09db      	lsrs	r3, r3, #7
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b7f      	cmp	r3, #127	; 0x7f
 8009d14:	d8f0      	bhi.n	8009cf8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	617a      	str	r2, [r7, #20]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	b2d2      	uxtb	r2, r2
 8009d20:	701a      	strb	r2, [r3, #0]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009d26:	221b      	movs	r2, #27
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	68b8      	ldr	r0, [r7, #8]
 8009d2c:	f7fe fe70 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f383 8811 	msr	BASEPRI, r3
}
 8009d36:	bf00      	nop
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20014484 	.word	0x20014484
 8009d44:	20014480 	.word	0x20014480

08009d48 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	; 0x28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009d50:	f3ef 8311 	mrs	r3, BASEPRI
 8009d54:	f04f 0120 	mov.w	r1, #32
 8009d58:	f381 8811 	msr	BASEPRI, r1
 8009d5c:	617b      	str	r3, [r7, #20]
 8009d5e:	4827      	ldr	r0, [pc, #156]	; (8009dfc <SEGGER_SYSVIEW_Warn+0xb4>)
 8009d60:	f7fe fd68 	bl	8008834 <_PreparePacket>
 8009d64:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009d66:	2280      	movs	r2, #128	; 0x80
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	6938      	ldr	r0, [r7, #16]
 8009d6c:	f7fe fd12 	bl	8008794 <_EncodeStr>
 8009d70:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
 8009d76:	2301      	movs	r3, #1
 8009d78:	623b      	str	r3, [r7, #32]
 8009d7a:	e00b      	b.n	8009d94 <SEGGER_SYSVIEW_Warn+0x4c>
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	6279      	str	r1, [r7, #36]	; 0x24
 8009d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	09db      	lsrs	r3, r3, #7
 8009d92:	623b      	str	r3, [r7, #32]
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	2b7f      	cmp	r3, #127	; 0x7f
 8009d98:	d8f0      	bhi.n	8009d7c <SEGGER_SYSVIEW_Warn+0x34>
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8009da0:	6a3a      	ldr	r2, [r7, #32]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	2300      	movs	r3, #0
 8009db0:	61bb      	str	r3, [r7, #24]
 8009db2:	e00b      	b.n	8009dcc <SEGGER_SYSVIEW_Warn+0x84>
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	1c59      	adds	r1, r3, #1
 8009dbc:	61f9      	str	r1, [r7, #28]
 8009dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	701a      	strb	r2, [r3, #0]
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	09db      	lsrs	r3, r3, #7
 8009dca:	61bb      	str	r3, [r7, #24]
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b7f      	cmp	r3, #127	; 0x7f
 8009dd0:	d8f0      	bhi.n	8009db4 <SEGGER_SYSVIEW_Warn+0x6c>
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	61fa      	str	r2, [r7, #28]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009de2:	221a      	movs	r2, #26
 8009de4:	68f9      	ldr	r1, [r7, #12]
 8009de6:	6938      	ldr	r0, [r7, #16]
 8009de8:	f7fe fe12 	bl	8008a10 <_SendPacket>
  RECORD_END();
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f383 8811 	msr	BASEPRI, r3
}
 8009df2:	bf00      	nop
 8009df4:	3728      	adds	r7, #40	; 0x28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20014484 	.word	0x20014484

08009e00 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	2000      	movs	r0, #0
 8009e14:	f7fe fbc8 	bl	80085a8 <SEGGER_RTT_Write>
  return len;
 8009e18:	683b      	ldr	r3, [r7, #0]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009e28:	4803      	ldr	r0, [pc, #12]	; (8009e38 <_cbSendSystemDesc+0x14>)
 8009e2a:	f7ff fc8f 	bl	800974c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8009e2e:	4803      	ldr	r0, [pc, #12]	; (8009e3c <_cbSendSystemDesc+0x18>)
 8009e30:	f7ff fc8c 	bl	800974c <SEGGER_SYSVIEW_SendSysDesc>
}
 8009e34:	bf00      	nop
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	0800b7e0 	.word	0x0800b7e0
 8009e3c:	0800b824 	.word	0x0800b824

08009e40 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <SEGGER_SYSVIEW_Conf+0x20>)
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <SEGGER_SYSVIEW_Conf+0x20>)
 8009e4a:	6819      	ldr	r1, [r3, #0]
 8009e4c:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <SEGGER_SYSVIEW_Conf+0x24>)
 8009e4e:	4a06      	ldr	r2, [pc, #24]	; (8009e68 <SEGGER_SYSVIEW_Conf+0x28>)
 8009e50:	f7fe ff4c 	bl	8008cec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009e54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009e58:	f7fe ff8c 	bl	8008d74 <SEGGER_SYSVIEW_SetRAMBase>
}
 8009e5c:	bf00      	nop
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20000010 	.word	0x20000010
 8009e64:	08009e25 	.word	0x08009e25
 8009e68:	0800b8c4 	.word	0x0800b8c4

08009e6c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009e72:	2300      	movs	r3, #0
 8009e74:	607b      	str	r3, [r7, #4]
 8009e76:	e033      	b.n	8009ee0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009e78:	491e      	ldr	r1, [pc, #120]	; (8009ef4 <_cbSendTaskList+0x88>)
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	491a      	ldr	r1, [pc, #104]	; (8009ef4 <_cbSendTaskList+0x88>)
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	3304      	adds	r3, #4
 8009e98:	6819      	ldr	r1, [r3, #0]
 8009e9a:	4c16      	ldr	r4, [pc, #88]	; (8009ef4 <_cbSendTaskList+0x88>)
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4423      	add	r3, r4
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	681c      	ldr	r4, [r3, #0]
 8009eac:	4d11      	ldr	r5, [pc, #68]	; (8009ef4 <_cbSendTaskList+0x88>)
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	442b      	add	r3, r5
 8009eba:	330c      	adds	r3, #12
 8009ebc:	681d      	ldr	r5, [r3, #0]
 8009ebe:	4e0d      	ldr	r6, [pc, #52]	; (8009ef4 <_cbSendTaskList+0x88>)
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4433      	add	r3, r6
 8009ecc:	3310      	adds	r3, #16
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	462b      	mov	r3, r5
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	f000 f8bd 	bl	800a054 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3301      	adds	r3, #1
 8009ede:	607b      	str	r3, [r7, #4]
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <_cbSendTaskList+0x8c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d3c6      	bcc.n	8009e78 <_cbSendTaskList+0xc>
  }
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef4:	20014568 	.word	0x20014568
 8009ef8:	20014608 	.word	0x20014608

08009efc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009f04:	f7fc fa7a 	bl	80063fc <xTaskGetTickCountFromISR>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	469a      	mov	sl, r3
 8009f0e:	4693      	mov	fp, r2
 8009f10:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	f04f 0a00 	mov.w	sl, #0
 8009f20:	f04f 0b00 	mov.w	fp, #0
 8009f24:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009f28:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009f2c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009f30:	4652      	mov	r2, sl
 8009f32:	465b      	mov	r3, fp
 8009f34:	1a14      	subs	r4, r2, r0
 8009f36:	eb63 0501 	sbc.w	r5, r3, r1
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	00ab      	lsls	r3, r5, #2
 8009f44:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009f48:	00a2      	lsls	r2, r4, #2
 8009f4a:	4614      	mov	r4, r2
 8009f4c:	461d      	mov	r5, r3
 8009f4e:	eb14 0800 	adds.w	r8, r4, r0
 8009f52:	eb45 0901 	adc.w	r9, r5, r1
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f6a:	4690      	mov	r8, r2
 8009f6c:	4699      	mov	r9, r3
 8009f6e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009f72:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009f76:	4610      	mov	r0, r2
 8009f78:	4619      	mov	r1, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009f84 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009f92:	2205      	movs	r2, #5
 8009f94:	492b      	ldr	r1, [pc, #172]	; (800a044 <SYSVIEW_AddTask+0xc0>)
 8009f96:	68b8      	ldr	r0, [r7, #8]
 8009f98:	f000 f8a8 	bl	800a0ec <memcmp>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d04b      	beq.n	800a03a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009fa2:	4b29      	ldr	r3, [pc, #164]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b07      	cmp	r3, #7
 8009fa8:	d903      	bls.n	8009fb2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009faa:	4828      	ldr	r0, [pc, #160]	; (800a04c <SYSVIEW_AddTask+0xc8>)
 8009fac:	f7ff fecc 	bl	8009d48 <SEGGER_SYSVIEW_Warn>
    return;
 8009fb0:	e044      	b.n	800a03c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009fb2:	4b25      	ldr	r3, [pc, #148]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	4926      	ldr	r1, [pc, #152]	; (800a050 <SYSVIEW_AddTask+0xcc>)
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8009fc6:	4b20      	ldr	r3, [pc, #128]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	4921      	ldr	r1, [pc, #132]	; (800a050 <SYSVIEW_AddTask+0xcc>)
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009fdc:	4b1a      	ldr	r3, [pc, #104]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	491b      	ldr	r1, [pc, #108]	; (800a050 <SYSVIEW_AddTask+0xcc>)
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	440b      	add	r3, r1
 8009fec:	3308      	adds	r3, #8
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8009ff2:	4b15      	ldr	r3, [pc, #84]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4916      	ldr	r1, [pc, #88]	; (800a050 <SYSVIEW_AddTask+0xcc>)
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	330c      	adds	r3, #12
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800a008:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	4910      	ldr	r1, [pc, #64]	; (800a050 <SYSVIEW_AddTask+0xcc>)
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	440b      	add	r3, r1
 800a018:	3310      	adds	r3, #16
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800a01e:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3301      	adds	r3, #1
 800a024:	4a08      	ldr	r2, [pc, #32]	; (800a048 <SYSVIEW_AddTask+0xc4>)
 800a026:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f80e 	bl	800a054 <SYSVIEW_SendTaskInfo>
 800a038:	e000      	b.n	800a03c <SYSVIEW_AddTask+0xb8>
    return;
 800a03a:	bf00      	nop

}
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	0800b834 	.word	0x0800b834
 800a048:	20014608 	.word	0x20014608
 800a04c:	0800b83c 	.word	0x0800b83c
 800a050:	20014568 	.word	0x20014568

0800a054 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800a062:	f107 0314 	add.w	r3, r7, #20
 800a066:	2214      	movs	r2, #20
 800a068:	2100      	movs	r1, #0
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f85c 	bl	800a128 <memset>
  TaskInfo.TaskID     = TaskID;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800a084:	f107 0314 	add.w	r3, r7, #20
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff fa67 	bl	800955c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800a08e:	bf00      	nop
 800a090:	3728      	adds	r7, #40	; 0x28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <__errno>:
 800a098:	4b01      	ldr	r3, [pc, #4]	; (800a0a0 <__errno+0x8>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	20000028 	.word	0x20000028

0800a0a4 <__libc_init_array>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	4d0d      	ldr	r5, [pc, #52]	; (800a0dc <__libc_init_array+0x38>)
 800a0a8:	4c0d      	ldr	r4, [pc, #52]	; (800a0e0 <__libc_init_array+0x3c>)
 800a0aa:	1b64      	subs	r4, r4, r5
 800a0ac:	10a4      	asrs	r4, r4, #2
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	42a6      	cmp	r6, r4
 800a0b2:	d109      	bne.n	800a0c8 <__libc_init_array+0x24>
 800a0b4:	4d0b      	ldr	r5, [pc, #44]	; (800a0e4 <__libc_init_array+0x40>)
 800a0b6:	4c0c      	ldr	r4, [pc, #48]	; (800a0e8 <__libc_init_array+0x44>)
 800a0b8:	f001 f988 	bl	800b3cc <_init>
 800a0bc:	1b64      	subs	r4, r4, r5
 800a0be:	10a4      	asrs	r4, r4, #2
 800a0c0:	2600      	movs	r6, #0
 800a0c2:	42a6      	cmp	r6, r4
 800a0c4:	d105      	bne.n	800a0d2 <__libc_init_array+0x2e>
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0cc:	4798      	blx	r3
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	e7ee      	b.n	800a0b0 <__libc_init_array+0xc>
 800a0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d6:	4798      	blx	r3
 800a0d8:	3601      	adds	r6, #1
 800a0da:	e7f2      	b.n	800a0c2 <__libc_init_array+0x1e>
 800a0dc:	0800b96c 	.word	0x0800b96c
 800a0e0:	0800b96c 	.word	0x0800b96c
 800a0e4:	0800b96c 	.word	0x0800b96c
 800a0e8:	0800b970 	.word	0x0800b970

0800a0ec <memcmp>:
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	3901      	subs	r1, #1
 800a0f0:	4402      	add	r2, r0
 800a0f2:	4290      	cmp	r0, r2
 800a0f4:	d101      	bne.n	800a0fa <memcmp+0xe>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	e005      	b.n	800a106 <memcmp+0x1a>
 800a0fa:	7803      	ldrb	r3, [r0, #0]
 800a0fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a100:	42a3      	cmp	r3, r4
 800a102:	d001      	beq.n	800a108 <memcmp+0x1c>
 800a104:	1b18      	subs	r0, r3, r4
 800a106:	bd10      	pop	{r4, pc}
 800a108:	3001      	adds	r0, #1
 800a10a:	e7f2      	b.n	800a0f2 <memcmp+0x6>

0800a10c <memcpy>:
 800a10c:	440a      	add	r2, r1
 800a10e:	4291      	cmp	r1, r2
 800a110:	f100 33ff 	add.w	r3, r0, #4294967295
 800a114:	d100      	bne.n	800a118 <memcpy+0xc>
 800a116:	4770      	bx	lr
 800a118:	b510      	push	{r4, lr}
 800a11a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a11e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a122:	4291      	cmp	r1, r2
 800a124:	d1f9      	bne.n	800a11a <memcpy+0xe>
 800a126:	bd10      	pop	{r4, pc}

0800a128 <memset>:
 800a128:	4402      	add	r2, r0
 800a12a:	4603      	mov	r3, r0
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d100      	bne.n	800a132 <memset+0xa>
 800a130:	4770      	bx	lr
 800a132:	f803 1b01 	strb.w	r1, [r3], #1
 800a136:	e7f9      	b.n	800a12c <memset+0x4>

0800a138 <iprintf>:
 800a138:	b40f      	push	{r0, r1, r2, r3}
 800a13a:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <iprintf+0x2c>)
 800a13c:	b513      	push	{r0, r1, r4, lr}
 800a13e:	681c      	ldr	r4, [r3, #0]
 800a140:	b124      	cbz	r4, 800a14c <iprintf+0x14>
 800a142:	69a3      	ldr	r3, [r4, #24]
 800a144:	b913      	cbnz	r3, 800a14c <iprintf+0x14>
 800a146:	4620      	mov	r0, r4
 800a148:	f000 f886 	bl	800a258 <__sinit>
 800a14c:	ab05      	add	r3, sp, #20
 800a14e:	9a04      	ldr	r2, [sp, #16]
 800a150:	68a1      	ldr	r1, [r4, #8]
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fb39 	bl	800a7cc <_vfiprintf_r>
 800a15a:	b002      	add	sp, #8
 800a15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a160:	b004      	add	sp, #16
 800a162:	4770      	bx	lr
 800a164:	20000028 	.word	0x20000028

0800a168 <siprintf>:
 800a168:	b40e      	push	{r1, r2, r3}
 800a16a:	b500      	push	{lr}
 800a16c:	b09c      	sub	sp, #112	; 0x70
 800a16e:	ab1d      	add	r3, sp, #116	; 0x74
 800a170:	9002      	str	r0, [sp, #8]
 800a172:	9006      	str	r0, [sp, #24]
 800a174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a178:	4809      	ldr	r0, [pc, #36]	; (800a1a0 <siprintf+0x38>)
 800a17a:	9107      	str	r1, [sp, #28]
 800a17c:	9104      	str	r1, [sp, #16]
 800a17e:	4909      	ldr	r1, [pc, #36]	; (800a1a4 <siprintf+0x3c>)
 800a180:	f853 2b04 	ldr.w	r2, [r3], #4
 800a184:	9105      	str	r1, [sp, #20]
 800a186:	6800      	ldr	r0, [r0, #0]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	a902      	add	r1, sp, #8
 800a18c:	f000 f9f4 	bl	800a578 <_svfiprintf_r>
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	b01c      	add	sp, #112	; 0x70
 800a198:	f85d eb04 	ldr.w	lr, [sp], #4
 800a19c:	b003      	add	sp, #12
 800a19e:	4770      	bx	lr
 800a1a0:	20000028 	.word	0x20000028
 800a1a4:	ffff0208 	.word	0xffff0208

0800a1a8 <std>:
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1b6:	6083      	str	r3, [r0, #8]
 800a1b8:	8181      	strh	r1, [r0, #12]
 800a1ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a1bc:	81c2      	strh	r2, [r0, #14]
 800a1be:	6183      	str	r3, [r0, #24]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	2208      	movs	r2, #8
 800a1c4:	305c      	adds	r0, #92	; 0x5c
 800a1c6:	f7ff ffaf 	bl	800a128 <memset>
 800a1ca:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <std+0x38>)
 800a1cc:	6263      	str	r3, [r4, #36]	; 0x24
 800a1ce:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <std+0x3c>)
 800a1d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1d2:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <std+0x40>)
 800a1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1d6:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <std+0x44>)
 800a1d8:	6224      	str	r4, [r4, #32]
 800a1da:	6323      	str	r3, [r4, #48]	; 0x30
 800a1dc:	bd10      	pop	{r4, pc}
 800a1de:	bf00      	nop
 800a1e0:	0800ad75 	.word	0x0800ad75
 800a1e4:	0800ad97 	.word	0x0800ad97
 800a1e8:	0800adcf 	.word	0x0800adcf
 800a1ec:	0800adf3 	.word	0x0800adf3

0800a1f0 <_cleanup_r>:
 800a1f0:	4901      	ldr	r1, [pc, #4]	; (800a1f8 <_cleanup_r+0x8>)
 800a1f2:	f000 b8af 	b.w	800a354 <_fwalk_reent>
 800a1f6:	bf00      	nop
 800a1f8:	0800b0a9 	.word	0x0800b0a9

0800a1fc <__sfmoreglue>:
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	2268      	movs	r2, #104	; 0x68
 800a200:	1e4d      	subs	r5, r1, #1
 800a202:	4355      	muls	r5, r2
 800a204:	460e      	mov	r6, r1
 800a206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a20a:	f000 f8e5 	bl	800a3d8 <_malloc_r>
 800a20e:	4604      	mov	r4, r0
 800a210:	b140      	cbz	r0, 800a224 <__sfmoreglue+0x28>
 800a212:	2100      	movs	r1, #0
 800a214:	e9c0 1600 	strd	r1, r6, [r0]
 800a218:	300c      	adds	r0, #12
 800a21a:	60a0      	str	r0, [r4, #8]
 800a21c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a220:	f7ff ff82 	bl	800a128 <memset>
 800a224:	4620      	mov	r0, r4
 800a226:	bd70      	pop	{r4, r5, r6, pc}

0800a228 <__sfp_lock_acquire>:
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <__sfp_lock_acquire+0x8>)
 800a22a:	f000 b8b3 	b.w	800a394 <__retarget_lock_acquire_recursive>
 800a22e:	bf00      	nop
 800a230:	2001460d 	.word	0x2001460d

0800a234 <__sfp_lock_release>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__sfp_lock_release+0x8>)
 800a236:	f000 b8ae 	b.w	800a396 <__retarget_lock_release_recursive>
 800a23a:	bf00      	nop
 800a23c:	2001460d 	.word	0x2001460d

0800a240 <__sinit_lock_acquire>:
 800a240:	4801      	ldr	r0, [pc, #4]	; (800a248 <__sinit_lock_acquire+0x8>)
 800a242:	f000 b8a7 	b.w	800a394 <__retarget_lock_acquire_recursive>
 800a246:	bf00      	nop
 800a248:	2001460e 	.word	0x2001460e

0800a24c <__sinit_lock_release>:
 800a24c:	4801      	ldr	r0, [pc, #4]	; (800a254 <__sinit_lock_release+0x8>)
 800a24e:	f000 b8a2 	b.w	800a396 <__retarget_lock_release_recursive>
 800a252:	bf00      	nop
 800a254:	2001460e 	.word	0x2001460e

0800a258 <__sinit>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	4604      	mov	r4, r0
 800a25c:	f7ff fff0 	bl	800a240 <__sinit_lock_acquire>
 800a260:	69a3      	ldr	r3, [r4, #24]
 800a262:	b11b      	cbz	r3, 800a26c <__sinit+0x14>
 800a264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a268:	f7ff bff0 	b.w	800a24c <__sinit_lock_release>
 800a26c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a270:	6523      	str	r3, [r4, #80]	; 0x50
 800a272:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <__sinit+0x68>)
 800a274:	4a13      	ldr	r2, [pc, #76]	; (800a2c4 <__sinit+0x6c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	62a2      	str	r2, [r4, #40]	; 0x28
 800a27a:	42a3      	cmp	r3, r4
 800a27c:	bf04      	itt	eq
 800a27e:	2301      	moveq	r3, #1
 800a280:	61a3      	streq	r3, [r4, #24]
 800a282:	4620      	mov	r0, r4
 800a284:	f000 f820 	bl	800a2c8 <__sfp>
 800a288:	6060      	str	r0, [r4, #4]
 800a28a:	4620      	mov	r0, r4
 800a28c:	f000 f81c 	bl	800a2c8 <__sfp>
 800a290:	60a0      	str	r0, [r4, #8]
 800a292:	4620      	mov	r0, r4
 800a294:	f000 f818 	bl	800a2c8 <__sfp>
 800a298:	2200      	movs	r2, #0
 800a29a:	60e0      	str	r0, [r4, #12]
 800a29c:	2104      	movs	r1, #4
 800a29e:	6860      	ldr	r0, [r4, #4]
 800a2a0:	f7ff ff82 	bl	800a1a8 <std>
 800a2a4:	68a0      	ldr	r0, [r4, #8]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	2109      	movs	r1, #9
 800a2aa:	f7ff ff7d 	bl	800a1a8 <std>
 800a2ae:	68e0      	ldr	r0, [r4, #12]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	2112      	movs	r1, #18
 800a2b4:	f7ff ff78 	bl	800a1a8 <std>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	61a3      	str	r3, [r4, #24]
 800a2bc:	e7d2      	b.n	800a264 <__sinit+0xc>
 800a2be:	bf00      	nop
 800a2c0:	0800b8cc 	.word	0x0800b8cc
 800a2c4:	0800a1f1 	.word	0x0800a1f1

0800a2c8 <__sfp>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	4607      	mov	r7, r0
 800a2cc:	f7ff ffac 	bl	800a228 <__sfp_lock_acquire>
 800a2d0:	4b1e      	ldr	r3, [pc, #120]	; (800a34c <__sfp+0x84>)
 800a2d2:	681e      	ldr	r6, [r3, #0]
 800a2d4:	69b3      	ldr	r3, [r6, #24]
 800a2d6:	b913      	cbnz	r3, 800a2de <__sfp+0x16>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7ff ffbd 	bl	800a258 <__sinit>
 800a2de:	3648      	adds	r6, #72	; 0x48
 800a2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	d503      	bpl.n	800a2f0 <__sfp+0x28>
 800a2e8:	6833      	ldr	r3, [r6, #0]
 800a2ea:	b30b      	cbz	r3, 800a330 <__sfp+0x68>
 800a2ec:	6836      	ldr	r6, [r6, #0]
 800a2ee:	e7f7      	b.n	800a2e0 <__sfp+0x18>
 800a2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2f4:	b9d5      	cbnz	r5, 800a32c <__sfp+0x64>
 800a2f6:	4b16      	ldr	r3, [pc, #88]	; (800a350 <__sfp+0x88>)
 800a2f8:	60e3      	str	r3, [r4, #12]
 800a2fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2fe:	6665      	str	r5, [r4, #100]	; 0x64
 800a300:	f000 f847 	bl	800a392 <__retarget_lock_init_recursive>
 800a304:	f7ff ff96 	bl	800a234 <__sfp_lock_release>
 800a308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a30c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a310:	6025      	str	r5, [r4, #0]
 800a312:	61a5      	str	r5, [r4, #24]
 800a314:	2208      	movs	r2, #8
 800a316:	4629      	mov	r1, r5
 800a318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a31c:	f7ff ff04 	bl	800a128 <memset>
 800a320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a328:	4620      	mov	r0, r4
 800a32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a32c:	3468      	adds	r4, #104	; 0x68
 800a32e:	e7d9      	b.n	800a2e4 <__sfp+0x1c>
 800a330:	2104      	movs	r1, #4
 800a332:	4638      	mov	r0, r7
 800a334:	f7ff ff62 	bl	800a1fc <__sfmoreglue>
 800a338:	4604      	mov	r4, r0
 800a33a:	6030      	str	r0, [r6, #0]
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d1d5      	bne.n	800a2ec <__sfp+0x24>
 800a340:	f7ff ff78 	bl	800a234 <__sfp_lock_release>
 800a344:	230c      	movs	r3, #12
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	e7ee      	b.n	800a328 <__sfp+0x60>
 800a34a:	bf00      	nop
 800a34c:	0800b8cc 	.word	0x0800b8cc
 800a350:	ffff0001 	.word	0xffff0001

0800a354 <_fwalk_reent>:
 800a354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a358:	4606      	mov	r6, r0
 800a35a:	4688      	mov	r8, r1
 800a35c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a360:	2700      	movs	r7, #0
 800a362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a366:	f1b9 0901 	subs.w	r9, r9, #1
 800a36a:	d505      	bpl.n	800a378 <_fwalk_reent+0x24>
 800a36c:	6824      	ldr	r4, [r4, #0]
 800a36e:	2c00      	cmp	r4, #0
 800a370:	d1f7      	bne.n	800a362 <_fwalk_reent+0xe>
 800a372:	4638      	mov	r0, r7
 800a374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a378:	89ab      	ldrh	r3, [r5, #12]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d907      	bls.n	800a38e <_fwalk_reent+0x3a>
 800a37e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a382:	3301      	adds	r3, #1
 800a384:	d003      	beq.n	800a38e <_fwalk_reent+0x3a>
 800a386:	4629      	mov	r1, r5
 800a388:	4630      	mov	r0, r6
 800a38a:	47c0      	blx	r8
 800a38c:	4307      	orrs	r7, r0
 800a38e:	3568      	adds	r5, #104	; 0x68
 800a390:	e7e9      	b.n	800a366 <_fwalk_reent+0x12>

0800a392 <__retarget_lock_init_recursive>:
 800a392:	4770      	bx	lr

0800a394 <__retarget_lock_acquire_recursive>:
 800a394:	4770      	bx	lr

0800a396 <__retarget_lock_release_recursive>:
 800a396:	4770      	bx	lr

0800a398 <sbrk_aligned>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	4e0e      	ldr	r6, [pc, #56]	; (800a3d4 <sbrk_aligned+0x3c>)
 800a39c:	460c      	mov	r4, r1
 800a39e:	6831      	ldr	r1, [r6, #0]
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	b911      	cbnz	r1, 800a3aa <sbrk_aligned+0x12>
 800a3a4:	f000 fcd6 	bl	800ad54 <_sbrk_r>
 800a3a8:	6030      	str	r0, [r6, #0]
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 fcd1 	bl	800ad54 <_sbrk_r>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d00a      	beq.n	800a3cc <sbrk_aligned+0x34>
 800a3b6:	1cc4      	adds	r4, r0, #3
 800a3b8:	f024 0403 	bic.w	r4, r4, #3
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d007      	beq.n	800a3d0 <sbrk_aligned+0x38>
 800a3c0:	1a21      	subs	r1, r4, r0
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 fcc6 	bl	800ad54 <_sbrk_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d101      	bne.n	800a3d0 <sbrk_aligned+0x38>
 800a3cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	20014614 	.word	0x20014614

0800a3d8 <_malloc_r>:
 800a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3dc:	1ccd      	adds	r5, r1, #3
 800a3de:	f025 0503 	bic.w	r5, r5, #3
 800a3e2:	3508      	adds	r5, #8
 800a3e4:	2d0c      	cmp	r5, #12
 800a3e6:	bf38      	it	cc
 800a3e8:	250c      	movcc	r5, #12
 800a3ea:	2d00      	cmp	r5, #0
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	db01      	blt.n	800a3f4 <_malloc_r+0x1c>
 800a3f0:	42a9      	cmp	r1, r5
 800a3f2:	d905      	bls.n	800a400 <_malloc_r+0x28>
 800a3f4:	230c      	movs	r3, #12
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	2600      	movs	r6, #0
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a400:	4e2e      	ldr	r6, [pc, #184]	; (800a4bc <_malloc_r+0xe4>)
 800a402:	f000 ff1f 	bl	800b244 <__malloc_lock>
 800a406:	6833      	ldr	r3, [r6, #0]
 800a408:	461c      	mov	r4, r3
 800a40a:	bb34      	cbnz	r4, 800a45a <_malloc_r+0x82>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4638      	mov	r0, r7
 800a410:	f7ff ffc2 	bl	800a398 <sbrk_aligned>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	4604      	mov	r4, r0
 800a418:	d14d      	bne.n	800a4b6 <_malloc_r+0xde>
 800a41a:	6834      	ldr	r4, [r6, #0]
 800a41c:	4626      	mov	r6, r4
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d140      	bne.n	800a4a4 <_malloc_r+0xcc>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	4631      	mov	r1, r6
 800a426:	4638      	mov	r0, r7
 800a428:	eb04 0803 	add.w	r8, r4, r3
 800a42c:	f000 fc92 	bl	800ad54 <_sbrk_r>
 800a430:	4580      	cmp	r8, r0
 800a432:	d13a      	bne.n	800a4aa <_malloc_r+0xd2>
 800a434:	6821      	ldr	r1, [r4, #0]
 800a436:	3503      	adds	r5, #3
 800a438:	1a6d      	subs	r5, r5, r1
 800a43a:	f025 0503 	bic.w	r5, r5, #3
 800a43e:	3508      	adds	r5, #8
 800a440:	2d0c      	cmp	r5, #12
 800a442:	bf38      	it	cc
 800a444:	250c      	movcc	r5, #12
 800a446:	4629      	mov	r1, r5
 800a448:	4638      	mov	r0, r7
 800a44a:	f7ff ffa5 	bl	800a398 <sbrk_aligned>
 800a44e:	3001      	adds	r0, #1
 800a450:	d02b      	beq.n	800a4aa <_malloc_r+0xd2>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	442b      	add	r3, r5
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	e00e      	b.n	800a478 <_malloc_r+0xa0>
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	1b52      	subs	r2, r2, r5
 800a45e:	d41e      	bmi.n	800a49e <_malloc_r+0xc6>
 800a460:	2a0b      	cmp	r2, #11
 800a462:	d916      	bls.n	800a492 <_malloc_r+0xba>
 800a464:	1961      	adds	r1, r4, r5
 800a466:	42a3      	cmp	r3, r4
 800a468:	6025      	str	r5, [r4, #0]
 800a46a:	bf18      	it	ne
 800a46c:	6059      	strne	r1, [r3, #4]
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	bf08      	it	eq
 800a472:	6031      	streq	r1, [r6, #0]
 800a474:	5162      	str	r2, [r4, r5]
 800a476:	604b      	str	r3, [r1, #4]
 800a478:	4638      	mov	r0, r7
 800a47a:	f104 060b 	add.w	r6, r4, #11
 800a47e:	f000 fee7 	bl	800b250 <__malloc_unlock>
 800a482:	f026 0607 	bic.w	r6, r6, #7
 800a486:	1d23      	adds	r3, r4, #4
 800a488:	1af2      	subs	r2, r6, r3
 800a48a:	d0b6      	beq.n	800a3fa <_malloc_r+0x22>
 800a48c:	1b9b      	subs	r3, r3, r6
 800a48e:	50a3      	str	r3, [r4, r2]
 800a490:	e7b3      	b.n	800a3fa <_malloc_r+0x22>
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	42a3      	cmp	r3, r4
 800a496:	bf0c      	ite	eq
 800a498:	6032      	streq	r2, [r6, #0]
 800a49a:	605a      	strne	r2, [r3, #4]
 800a49c:	e7ec      	b.n	800a478 <_malloc_r+0xa0>
 800a49e:	4623      	mov	r3, r4
 800a4a0:	6864      	ldr	r4, [r4, #4]
 800a4a2:	e7b2      	b.n	800a40a <_malloc_r+0x32>
 800a4a4:	4634      	mov	r4, r6
 800a4a6:	6876      	ldr	r6, [r6, #4]
 800a4a8:	e7b9      	b.n	800a41e <_malloc_r+0x46>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	603b      	str	r3, [r7, #0]
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f000 fece 	bl	800b250 <__malloc_unlock>
 800a4b4:	e7a1      	b.n	800a3fa <_malloc_r+0x22>
 800a4b6:	6025      	str	r5, [r4, #0]
 800a4b8:	e7de      	b.n	800a478 <_malloc_r+0xa0>
 800a4ba:	bf00      	nop
 800a4bc:	20014610 	.word	0x20014610

0800a4c0 <__ssputs_r>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	688e      	ldr	r6, [r1, #8]
 800a4c6:	429e      	cmp	r6, r3
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	4690      	mov	r8, r2
 800a4ce:	461f      	mov	r7, r3
 800a4d0:	d838      	bhi.n	800a544 <__ssputs_r+0x84>
 800a4d2:	898a      	ldrh	r2, [r1, #12]
 800a4d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4d8:	d032      	beq.n	800a540 <__ssputs_r+0x80>
 800a4da:	6825      	ldr	r5, [r4, #0]
 800a4dc:	6909      	ldr	r1, [r1, #16]
 800a4de:	eba5 0901 	sub.w	r9, r5, r1
 800a4e2:	6965      	ldr	r5, [r4, #20]
 800a4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	444b      	add	r3, r9
 800a4f0:	106d      	asrs	r5, r5, #1
 800a4f2:	429d      	cmp	r5, r3
 800a4f4:	bf38      	it	cc
 800a4f6:	461d      	movcc	r5, r3
 800a4f8:	0553      	lsls	r3, r2, #21
 800a4fa:	d531      	bpl.n	800a560 <__ssputs_r+0xa0>
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	f7ff ff6b 	bl	800a3d8 <_malloc_r>
 800a502:	4606      	mov	r6, r0
 800a504:	b950      	cbnz	r0, 800a51c <__ssputs_r+0x5c>
 800a506:	230c      	movs	r3, #12
 800a508:	f8ca 3000 	str.w	r3, [sl]
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51c:	6921      	ldr	r1, [r4, #16]
 800a51e:	464a      	mov	r2, r9
 800a520:	f7ff fdf4 	bl	800a10c <memcpy>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	6126      	str	r6, [r4, #16]
 800a532:	6165      	str	r5, [r4, #20]
 800a534:	444e      	add	r6, r9
 800a536:	eba5 0509 	sub.w	r5, r5, r9
 800a53a:	6026      	str	r6, [r4, #0]
 800a53c:	60a5      	str	r5, [r4, #8]
 800a53e:	463e      	mov	r6, r7
 800a540:	42be      	cmp	r6, r7
 800a542:	d900      	bls.n	800a546 <__ssputs_r+0x86>
 800a544:	463e      	mov	r6, r7
 800a546:	6820      	ldr	r0, [r4, #0]
 800a548:	4632      	mov	r2, r6
 800a54a:	4641      	mov	r1, r8
 800a54c:	f000 fe60 	bl	800b210 <memmove>
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	1b9b      	subs	r3, r3, r6
 800a554:	60a3      	str	r3, [r4, #8]
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	4433      	add	r3, r6
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	2000      	movs	r0, #0
 800a55e:	e7db      	b.n	800a518 <__ssputs_r+0x58>
 800a560:	462a      	mov	r2, r5
 800a562:	f000 fec7 	bl	800b2f4 <_realloc_r>
 800a566:	4606      	mov	r6, r0
 800a568:	2800      	cmp	r0, #0
 800a56a:	d1e1      	bne.n	800a530 <__ssputs_r+0x70>
 800a56c:	6921      	ldr	r1, [r4, #16]
 800a56e:	4650      	mov	r0, sl
 800a570:	f000 fe74 	bl	800b25c <_free_r>
 800a574:	e7c7      	b.n	800a506 <__ssputs_r+0x46>
	...

0800a578 <_svfiprintf_r>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	4698      	mov	r8, r3
 800a57e:	898b      	ldrh	r3, [r1, #12]
 800a580:	061b      	lsls	r3, r3, #24
 800a582:	b09d      	sub	sp, #116	; 0x74
 800a584:	4607      	mov	r7, r0
 800a586:	460d      	mov	r5, r1
 800a588:	4614      	mov	r4, r2
 800a58a:	d50e      	bpl.n	800a5aa <_svfiprintf_r+0x32>
 800a58c:	690b      	ldr	r3, [r1, #16]
 800a58e:	b963      	cbnz	r3, 800a5aa <_svfiprintf_r+0x32>
 800a590:	2140      	movs	r1, #64	; 0x40
 800a592:	f7ff ff21 	bl	800a3d8 <_malloc_r>
 800a596:	6028      	str	r0, [r5, #0]
 800a598:	6128      	str	r0, [r5, #16]
 800a59a:	b920      	cbnz	r0, 800a5a6 <_svfiprintf_r+0x2e>
 800a59c:	230c      	movs	r3, #12
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a4:	e0d1      	b.n	800a74a <_svfiprintf_r+0x1d2>
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	616b      	str	r3, [r5, #20]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ae:	2320      	movs	r3, #32
 800a5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5b8:	2330      	movs	r3, #48	; 0x30
 800a5ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a764 <_svfiprintf_r+0x1ec>
 800a5be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5c2:	f04f 0901 	mov.w	r9, #1
 800a5c6:	4623      	mov	r3, r4
 800a5c8:	469a      	mov	sl, r3
 800a5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ce:	b10a      	cbz	r2, 800a5d4 <_svfiprintf_r+0x5c>
 800a5d0:	2a25      	cmp	r2, #37	; 0x25
 800a5d2:	d1f9      	bne.n	800a5c8 <_svfiprintf_r+0x50>
 800a5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5d8:	d00b      	beq.n	800a5f2 <_svfiprintf_r+0x7a>
 800a5da:	465b      	mov	r3, fp
 800a5dc:	4622      	mov	r2, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	f7ff ff6d 	bl	800a4c0 <__ssputs_r>
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f000 80aa 	beq.w	800a740 <_svfiprintf_r+0x1c8>
 800a5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ee:	445a      	add	r2, fp
 800a5f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 80a2 	beq.w	800a740 <_svfiprintf_r+0x1c8>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a606:	f10a 0a01 	add.w	sl, sl, #1
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	9307      	str	r3, [sp, #28]
 800a60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a612:	931a      	str	r3, [sp, #104]	; 0x68
 800a614:	4654      	mov	r4, sl
 800a616:	2205      	movs	r2, #5
 800a618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61c:	4851      	ldr	r0, [pc, #324]	; (800a764 <_svfiprintf_r+0x1ec>)
 800a61e:	f7f5 fe47 	bl	80002b0 <memchr>
 800a622:	9a04      	ldr	r2, [sp, #16]
 800a624:	b9d8      	cbnz	r0, 800a65e <_svfiprintf_r+0xe6>
 800a626:	06d0      	lsls	r0, r2, #27
 800a628:	bf44      	itt	mi
 800a62a:	2320      	movmi	r3, #32
 800a62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a630:	0711      	lsls	r1, r2, #28
 800a632:	bf44      	itt	mi
 800a634:	232b      	movmi	r3, #43	; 0x2b
 800a636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a63a:	f89a 3000 	ldrb.w	r3, [sl]
 800a63e:	2b2a      	cmp	r3, #42	; 0x2a
 800a640:	d015      	beq.n	800a66e <_svfiprintf_r+0xf6>
 800a642:	9a07      	ldr	r2, [sp, #28]
 800a644:	4654      	mov	r4, sl
 800a646:	2000      	movs	r0, #0
 800a648:	f04f 0c0a 	mov.w	ip, #10
 800a64c:	4621      	mov	r1, r4
 800a64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a652:	3b30      	subs	r3, #48	; 0x30
 800a654:	2b09      	cmp	r3, #9
 800a656:	d94e      	bls.n	800a6f6 <_svfiprintf_r+0x17e>
 800a658:	b1b0      	cbz	r0, 800a688 <_svfiprintf_r+0x110>
 800a65a:	9207      	str	r2, [sp, #28]
 800a65c:	e014      	b.n	800a688 <_svfiprintf_r+0x110>
 800a65e:	eba0 0308 	sub.w	r3, r0, r8
 800a662:	fa09 f303 	lsl.w	r3, r9, r3
 800a666:	4313      	orrs	r3, r2
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	46a2      	mov	sl, r4
 800a66c:	e7d2      	b.n	800a614 <_svfiprintf_r+0x9c>
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	1d19      	adds	r1, r3, #4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	9103      	str	r1, [sp, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfbb      	ittet	lt
 800a67a:	425b      	neglt	r3, r3
 800a67c:	f042 0202 	orrlt.w	r2, r2, #2
 800a680:	9307      	strge	r3, [sp, #28]
 800a682:	9307      	strlt	r3, [sp, #28]
 800a684:	bfb8      	it	lt
 800a686:	9204      	strlt	r2, [sp, #16]
 800a688:	7823      	ldrb	r3, [r4, #0]
 800a68a:	2b2e      	cmp	r3, #46	; 0x2e
 800a68c:	d10c      	bne.n	800a6a8 <_svfiprintf_r+0x130>
 800a68e:	7863      	ldrb	r3, [r4, #1]
 800a690:	2b2a      	cmp	r3, #42	; 0x2a
 800a692:	d135      	bne.n	800a700 <_svfiprintf_r+0x188>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	9203      	str	r2, [sp, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bfb8      	it	lt
 800a6a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6a4:	3402      	adds	r4, #2
 800a6a6:	9305      	str	r3, [sp, #20]
 800a6a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a774 <_svfiprintf_r+0x1fc>
 800a6ac:	7821      	ldrb	r1, [r4, #0]
 800a6ae:	2203      	movs	r2, #3
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	f7f5 fdfd 	bl	80002b0 <memchr>
 800a6b6:	b140      	cbz	r0, 800a6ca <_svfiprintf_r+0x152>
 800a6b8:	2340      	movs	r3, #64	; 0x40
 800a6ba:	eba0 000a 	sub.w	r0, r0, sl
 800a6be:	fa03 f000 	lsl.w	r0, r3, r0
 800a6c2:	9b04      	ldr	r3, [sp, #16]
 800a6c4:	4303      	orrs	r3, r0
 800a6c6:	3401      	adds	r4, #1
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ce:	4826      	ldr	r0, [pc, #152]	; (800a768 <_svfiprintf_r+0x1f0>)
 800a6d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6d4:	2206      	movs	r2, #6
 800a6d6:	f7f5 fdeb 	bl	80002b0 <memchr>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d038      	beq.n	800a750 <_svfiprintf_r+0x1d8>
 800a6de:	4b23      	ldr	r3, [pc, #140]	; (800a76c <_svfiprintf_r+0x1f4>)
 800a6e0:	bb1b      	cbnz	r3, 800a72a <_svfiprintf_r+0x1b2>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	3307      	adds	r3, #7
 800a6e6:	f023 0307 	bic.w	r3, r3, #7
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	9303      	str	r3, [sp, #12]
 800a6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f0:	4433      	add	r3, r6
 800a6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f4:	e767      	b.n	800a5c6 <_svfiprintf_r+0x4e>
 800a6f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	e7a5      	b.n	800a64c <_svfiprintf_r+0xd4>
 800a700:	2300      	movs	r3, #0
 800a702:	3401      	adds	r4, #1
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	4619      	mov	r1, r3
 800a708:	f04f 0c0a 	mov.w	ip, #10
 800a70c:	4620      	mov	r0, r4
 800a70e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a712:	3a30      	subs	r2, #48	; 0x30
 800a714:	2a09      	cmp	r2, #9
 800a716:	d903      	bls.n	800a720 <_svfiprintf_r+0x1a8>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0c5      	beq.n	800a6a8 <_svfiprintf_r+0x130>
 800a71c:	9105      	str	r1, [sp, #20]
 800a71e:	e7c3      	b.n	800a6a8 <_svfiprintf_r+0x130>
 800a720:	fb0c 2101 	mla	r1, ip, r1, r2
 800a724:	4604      	mov	r4, r0
 800a726:	2301      	movs	r3, #1
 800a728:	e7f0      	b.n	800a70c <_svfiprintf_r+0x194>
 800a72a:	ab03      	add	r3, sp, #12
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	462a      	mov	r2, r5
 800a730:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <_svfiprintf_r+0x1f8>)
 800a732:	a904      	add	r1, sp, #16
 800a734:	4638      	mov	r0, r7
 800a736:	f3af 8000 	nop.w
 800a73a:	1c42      	adds	r2, r0, #1
 800a73c:	4606      	mov	r6, r0
 800a73e:	d1d6      	bne.n	800a6ee <_svfiprintf_r+0x176>
 800a740:	89ab      	ldrh	r3, [r5, #12]
 800a742:	065b      	lsls	r3, r3, #25
 800a744:	f53f af2c 	bmi.w	800a5a0 <_svfiprintf_r+0x28>
 800a748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a74a:	b01d      	add	sp, #116	; 0x74
 800a74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a750:	ab03      	add	r3, sp, #12
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	462a      	mov	r2, r5
 800a756:	4b06      	ldr	r3, [pc, #24]	; (800a770 <_svfiprintf_r+0x1f8>)
 800a758:	a904      	add	r1, sp, #16
 800a75a:	4638      	mov	r0, r7
 800a75c:	f000 f9d4 	bl	800ab08 <_printf_i>
 800a760:	e7eb      	b.n	800a73a <_svfiprintf_r+0x1c2>
 800a762:	bf00      	nop
 800a764:	0800b930 	.word	0x0800b930
 800a768:	0800b93a 	.word	0x0800b93a
 800a76c:	00000000 	.word	0x00000000
 800a770:	0800a4c1 	.word	0x0800a4c1
 800a774:	0800b936 	.word	0x0800b936

0800a778 <__sfputc_r>:
 800a778:	6893      	ldr	r3, [r2, #8]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	b410      	push	{r4}
 800a780:	6093      	str	r3, [r2, #8]
 800a782:	da08      	bge.n	800a796 <__sfputc_r+0x1e>
 800a784:	6994      	ldr	r4, [r2, #24]
 800a786:	42a3      	cmp	r3, r4
 800a788:	db01      	blt.n	800a78e <__sfputc_r+0x16>
 800a78a:	290a      	cmp	r1, #10
 800a78c:	d103      	bne.n	800a796 <__sfputc_r+0x1e>
 800a78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a792:	f000 bb33 	b.w	800adfc <__swbuf_r>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	1c58      	adds	r0, r3, #1
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	7019      	strb	r1, [r3, #0]
 800a79e:	4608      	mov	r0, r1
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <__sfputs_r>:
 800a7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	18d5      	adds	r5, r2, r3
 800a7b0:	42ac      	cmp	r4, r5
 800a7b2:	d101      	bne.n	800a7b8 <__sfputs_r+0x12>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e007      	b.n	800a7c8 <__sfputs_r+0x22>
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	463a      	mov	r2, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ffda 	bl	800a778 <__sfputc_r>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d1f3      	bne.n	800a7b0 <__sfputs_r+0xa>
 800a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7cc <_vfiprintf_r>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	b09d      	sub	sp, #116	; 0x74
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b118      	cbz	r0, 800a7e4 <_vfiprintf_r+0x18>
 800a7dc:	6983      	ldr	r3, [r0, #24]
 800a7de:	b90b      	cbnz	r3, 800a7e4 <_vfiprintf_r+0x18>
 800a7e0:	f7ff fd3a 	bl	800a258 <__sinit>
 800a7e4:	4b89      	ldr	r3, [pc, #548]	; (800aa0c <_vfiprintf_r+0x240>)
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	d11b      	bne.n	800a822 <_vfiprintf_r+0x56>
 800a7ea:	6875      	ldr	r5, [r6, #4]
 800a7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ee:	07d9      	lsls	r1, r3, #31
 800a7f0:	d405      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	059a      	lsls	r2, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fa:	f7ff fdcb 	bl	800a394 <__retarget_lock_acquire_recursive>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	071b      	lsls	r3, r3, #28
 800a802:	d501      	bpl.n	800a808 <_vfiprintf_r+0x3c>
 800a804:	692b      	ldr	r3, [r5, #16]
 800a806:	b9eb      	cbnz	r3, 800a844 <_vfiprintf_r+0x78>
 800a808:	4629      	mov	r1, r5
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 fb48 	bl	800aea0 <__swsetup_r>
 800a810:	b1c0      	cbz	r0, 800a844 <_vfiprintf_r+0x78>
 800a812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a814:	07dc      	lsls	r4, r3, #31
 800a816:	d50e      	bpl.n	800a836 <_vfiprintf_r+0x6a>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	b01d      	add	sp, #116	; 0x74
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	4b7b      	ldr	r3, [pc, #492]	; (800aa10 <_vfiprintf_r+0x244>)
 800a824:	429d      	cmp	r5, r3
 800a826:	d101      	bne.n	800a82c <_vfiprintf_r+0x60>
 800a828:	68b5      	ldr	r5, [r6, #8]
 800a82a:	e7df      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a82c:	4b79      	ldr	r3, [pc, #484]	; (800aa14 <_vfiprintf_r+0x248>)
 800a82e:	429d      	cmp	r5, r3
 800a830:	bf08      	it	eq
 800a832:	68f5      	ldreq	r5, [r6, #12]
 800a834:	e7da      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a836:	89ab      	ldrh	r3, [r5, #12]
 800a838:	0598      	lsls	r0, r3, #22
 800a83a:	d4ed      	bmi.n	800a818 <_vfiprintf_r+0x4c>
 800a83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a83e:	f7ff fdaa 	bl	800a396 <__retarget_lock_release_recursive>
 800a842:	e7e9      	b.n	800a818 <_vfiprintf_r+0x4c>
 800a844:	2300      	movs	r3, #0
 800a846:	9309      	str	r3, [sp, #36]	; 0x24
 800a848:	2320      	movs	r3, #32
 800a84a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a84e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a852:	2330      	movs	r3, #48	; 0x30
 800a854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa18 <_vfiprintf_r+0x24c>
 800a858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a85c:	f04f 0901 	mov.w	r9, #1
 800a860:	4623      	mov	r3, r4
 800a862:	469a      	mov	sl, r3
 800a864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a868:	b10a      	cbz	r2, 800a86e <_vfiprintf_r+0xa2>
 800a86a:	2a25      	cmp	r2, #37	; 0x25
 800a86c:	d1f9      	bne.n	800a862 <_vfiprintf_r+0x96>
 800a86e:	ebba 0b04 	subs.w	fp, sl, r4
 800a872:	d00b      	beq.n	800a88c <_vfiprintf_r+0xc0>
 800a874:	465b      	mov	r3, fp
 800a876:	4622      	mov	r2, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ff93 	bl	800a7a6 <__sfputs_r>
 800a880:	3001      	adds	r0, #1
 800a882:	f000 80aa 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a888:	445a      	add	r2, fp
 800a88a:	9209      	str	r2, [sp, #36]	; 0x24
 800a88c:	f89a 3000 	ldrb.w	r3, [sl]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80a2 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a896:	2300      	movs	r3, #0
 800a898:	f04f 32ff 	mov.w	r2, #4294967295
 800a89c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a0:	f10a 0a01 	add.w	sl, sl, #1
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ae:	4654      	mov	r4, sl
 800a8b0:	2205      	movs	r2, #5
 800a8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b6:	4858      	ldr	r0, [pc, #352]	; (800aa18 <_vfiprintf_r+0x24c>)
 800a8b8:	f7f5 fcfa 	bl	80002b0 <memchr>
 800a8bc:	9a04      	ldr	r2, [sp, #16]
 800a8be:	b9d8      	cbnz	r0, 800a8f8 <_vfiprintf_r+0x12c>
 800a8c0:	06d1      	lsls	r1, r2, #27
 800a8c2:	bf44      	itt	mi
 800a8c4:	2320      	movmi	r3, #32
 800a8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ca:	0713      	lsls	r3, r2, #28
 800a8cc:	bf44      	itt	mi
 800a8ce:	232b      	movmi	r3, #43	; 0x2b
 800a8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8da:	d015      	beq.n	800a908 <_vfiprintf_r+0x13c>
 800a8dc:	9a07      	ldr	r2, [sp, #28]
 800a8de:	4654      	mov	r4, sl
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	f04f 0c0a 	mov.w	ip, #10
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ec:	3b30      	subs	r3, #48	; 0x30
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d94e      	bls.n	800a990 <_vfiprintf_r+0x1c4>
 800a8f2:	b1b0      	cbz	r0, 800a922 <_vfiprintf_r+0x156>
 800a8f4:	9207      	str	r2, [sp, #28]
 800a8f6:	e014      	b.n	800a922 <_vfiprintf_r+0x156>
 800a8f8:	eba0 0308 	sub.w	r3, r0, r8
 800a8fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a900:	4313      	orrs	r3, r2
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	46a2      	mov	sl, r4
 800a906:	e7d2      	b.n	800a8ae <_vfiprintf_r+0xe2>
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	1d19      	adds	r1, r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	9103      	str	r1, [sp, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	bfbb      	ittet	lt
 800a914:	425b      	neglt	r3, r3
 800a916:	f042 0202 	orrlt.w	r2, r2, #2
 800a91a:	9307      	strge	r3, [sp, #28]
 800a91c:	9307      	strlt	r3, [sp, #28]
 800a91e:	bfb8      	it	lt
 800a920:	9204      	strlt	r2, [sp, #16]
 800a922:	7823      	ldrb	r3, [r4, #0]
 800a924:	2b2e      	cmp	r3, #46	; 0x2e
 800a926:	d10c      	bne.n	800a942 <_vfiprintf_r+0x176>
 800a928:	7863      	ldrb	r3, [r4, #1]
 800a92a:	2b2a      	cmp	r3, #42	; 0x2a
 800a92c:	d135      	bne.n	800a99a <_vfiprintf_r+0x1ce>
 800a92e:	9b03      	ldr	r3, [sp, #12]
 800a930:	1d1a      	adds	r2, r3, #4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	9203      	str	r2, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bfb8      	it	lt
 800a93a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a93e:	3402      	adds	r4, #2
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa28 <_vfiprintf_r+0x25c>
 800a946:	7821      	ldrb	r1, [r4, #0]
 800a948:	2203      	movs	r2, #3
 800a94a:	4650      	mov	r0, sl
 800a94c:	f7f5 fcb0 	bl	80002b0 <memchr>
 800a950:	b140      	cbz	r0, 800a964 <_vfiprintf_r+0x198>
 800a952:	2340      	movs	r3, #64	; 0x40
 800a954:	eba0 000a 	sub.w	r0, r0, sl
 800a958:	fa03 f000 	lsl.w	r0, r3, r0
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	4303      	orrs	r3, r0
 800a960:	3401      	adds	r4, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a968:	482c      	ldr	r0, [pc, #176]	; (800aa1c <_vfiprintf_r+0x250>)
 800a96a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a96e:	2206      	movs	r2, #6
 800a970:	f7f5 fc9e 	bl	80002b0 <memchr>
 800a974:	2800      	cmp	r0, #0
 800a976:	d03f      	beq.n	800a9f8 <_vfiprintf_r+0x22c>
 800a978:	4b29      	ldr	r3, [pc, #164]	; (800aa20 <_vfiprintf_r+0x254>)
 800a97a:	bb1b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x1f8>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	3307      	adds	r3, #7
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98a:	443b      	add	r3, r7
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	e767      	b.n	800a860 <_vfiprintf_r+0x94>
 800a990:	fb0c 3202 	mla	r2, ip, r2, r3
 800a994:	460c      	mov	r4, r1
 800a996:	2001      	movs	r0, #1
 800a998:	e7a5      	b.n	800a8e6 <_vfiprintf_r+0x11a>
 800a99a:	2300      	movs	r3, #0
 800a99c:	3401      	adds	r4, #1
 800a99e:	9305      	str	r3, [sp, #20]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ac:	3a30      	subs	r2, #48	; 0x30
 800a9ae:	2a09      	cmp	r2, #9
 800a9b0:	d903      	bls.n	800a9ba <_vfiprintf_r+0x1ee>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0c5      	beq.n	800a942 <_vfiprintf_r+0x176>
 800a9b6:	9105      	str	r1, [sp, #20]
 800a9b8:	e7c3      	b.n	800a942 <_vfiprintf_r+0x176>
 800a9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9be:	4604      	mov	r4, r0
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e7f0      	b.n	800a9a6 <_vfiprintf_r+0x1da>
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4b16      	ldr	r3, [pc, #88]	; (800aa24 <_vfiprintf_r+0x258>)
 800a9cc:	a904      	add	r1, sp, #16
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f3af 8000 	nop.w
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	1c78      	adds	r0, r7, #1
 800a9d8:	d1d6      	bne.n	800a988 <_vfiprintf_r+0x1bc>
 800a9da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9dc:	07d9      	lsls	r1, r3, #31
 800a9de:	d405      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e0:	89ab      	ldrh	r3, [r5, #12]
 800a9e2:	059a      	lsls	r2, r3, #22
 800a9e4:	d402      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e8:	f7ff fcd5 	bl	800a396 <__retarget_lock_release_recursive>
 800a9ec:	89ab      	ldrh	r3, [r5, #12]
 800a9ee:	065b      	lsls	r3, r3, #25
 800a9f0:	f53f af12 	bmi.w	800a818 <_vfiprintf_r+0x4c>
 800a9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f6:	e711      	b.n	800a81c <_vfiprintf_r+0x50>
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <_vfiprintf_r+0x258>)
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	4630      	mov	r0, r6
 800aa04:	f000 f880 	bl	800ab08 <_printf_i>
 800aa08:	e7e4      	b.n	800a9d4 <_vfiprintf_r+0x208>
 800aa0a:	bf00      	nop
 800aa0c:	0800b8f0 	.word	0x0800b8f0
 800aa10:	0800b910 	.word	0x0800b910
 800aa14:	0800b8d0 	.word	0x0800b8d0
 800aa18:	0800b930 	.word	0x0800b930
 800aa1c:	0800b93a 	.word	0x0800b93a
 800aa20:	00000000 	.word	0x00000000
 800aa24:	0800a7a7 	.word	0x0800a7a7
 800aa28:	0800b936 	.word	0x0800b936

0800aa2c <_printf_common>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	4616      	mov	r6, r2
 800aa32:	4699      	mov	r9, r3
 800aa34:	688a      	ldr	r2, [r1, #8]
 800aa36:	690b      	ldr	r3, [r1, #16]
 800aa38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	bfb8      	it	lt
 800aa40:	4613      	movlt	r3, r2
 800aa42:	6033      	str	r3, [r6, #0]
 800aa44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa48:	4607      	mov	r7, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b10a      	cbz	r2, 800aa52 <_printf_common+0x26>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	6033      	str	r3, [r6, #0]
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	0699      	lsls	r1, r3, #26
 800aa56:	bf42      	ittt	mi
 800aa58:	6833      	ldrmi	r3, [r6, #0]
 800aa5a:	3302      	addmi	r3, #2
 800aa5c:	6033      	strmi	r3, [r6, #0]
 800aa5e:	6825      	ldr	r5, [r4, #0]
 800aa60:	f015 0506 	ands.w	r5, r5, #6
 800aa64:	d106      	bne.n	800aa74 <_printf_common+0x48>
 800aa66:	f104 0a19 	add.w	sl, r4, #25
 800aa6a:	68e3      	ldr	r3, [r4, #12]
 800aa6c:	6832      	ldr	r2, [r6, #0]
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	dc26      	bgt.n	800aac2 <_printf_common+0x96>
 800aa74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa78:	1e13      	subs	r3, r2, #0
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	bf18      	it	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	0692      	lsls	r2, r2, #26
 800aa82:	d42b      	bmi.n	800aadc <_printf_common+0xb0>
 800aa84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	47c0      	blx	r8
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d01e      	beq.n	800aad0 <_printf_common+0xa4>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	68e5      	ldr	r5, [r4, #12]
 800aa96:	6832      	ldr	r2, [r6, #0]
 800aa98:	f003 0306 	and.w	r3, r3, #6
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	bf08      	it	eq
 800aaa0:	1aad      	subeq	r5, r5, r2
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	6922      	ldr	r2, [r4, #16]
 800aaa6:	bf0c      	ite	eq
 800aaa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaac:	2500      	movne	r5, #0
 800aaae:	4293      	cmp	r3, r2
 800aab0:	bfc4      	itt	gt
 800aab2:	1a9b      	subgt	r3, r3, r2
 800aab4:	18ed      	addgt	r5, r5, r3
 800aab6:	2600      	movs	r6, #0
 800aab8:	341a      	adds	r4, #26
 800aaba:	42b5      	cmp	r5, r6
 800aabc:	d11a      	bne.n	800aaf4 <_printf_common+0xc8>
 800aabe:	2000      	movs	r0, #0
 800aac0:	e008      	b.n	800aad4 <_printf_common+0xa8>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4652      	mov	r2, sl
 800aac6:	4649      	mov	r1, r9
 800aac8:	4638      	mov	r0, r7
 800aaca:	47c0      	blx	r8
 800aacc:	3001      	adds	r0, #1
 800aace:	d103      	bne.n	800aad8 <_printf_common+0xac>
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	3501      	adds	r5, #1
 800aada:	e7c6      	b.n	800aa6a <_printf_common+0x3e>
 800aadc:	18e1      	adds	r1, r4, r3
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	2030      	movs	r0, #48	; 0x30
 800aae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aae6:	4422      	add	r2, r4
 800aae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	e7c7      	b.n	800aa84 <_printf_common+0x58>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	3001      	adds	r0, #1
 800ab00:	d0e6      	beq.n	800aad0 <_printf_common+0xa4>
 800ab02:	3601      	adds	r6, #1
 800ab04:	e7d9      	b.n	800aaba <_printf_common+0x8e>
	...

0800ab08 <_printf_i>:
 800ab08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	7e0f      	ldrb	r7, [r1, #24]
 800ab0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab10:	2f78      	cmp	r7, #120	; 0x78
 800ab12:	4691      	mov	r9, r2
 800ab14:	4680      	mov	r8, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	469a      	mov	sl, r3
 800ab1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab1e:	d807      	bhi.n	800ab30 <_printf_i+0x28>
 800ab20:	2f62      	cmp	r7, #98	; 0x62
 800ab22:	d80a      	bhi.n	800ab3a <_printf_i+0x32>
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	f000 80d8 	beq.w	800acda <_printf_i+0x1d2>
 800ab2a:	2f58      	cmp	r7, #88	; 0x58
 800ab2c:	f000 80a3 	beq.w	800ac76 <_printf_i+0x16e>
 800ab30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab38:	e03a      	b.n	800abb0 <_printf_i+0xa8>
 800ab3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab3e:	2b15      	cmp	r3, #21
 800ab40:	d8f6      	bhi.n	800ab30 <_printf_i+0x28>
 800ab42:	a101      	add	r1, pc, #4	; (adr r1, 800ab48 <_printf_i+0x40>)
 800ab44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800abb5 	.word	0x0800abb5
 800ab50:	0800ab31 	.word	0x0800ab31
 800ab54:	0800ab31 	.word	0x0800ab31
 800ab58:	0800ab31 	.word	0x0800ab31
 800ab5c:	0800ab31 	.word	0x0800ab31
 800ab60:	0800abb5 	.word	0x0800abb5
 800ab64:	0800ab31 	.word	0x0800ab31
 800ab68:	0800ab31 	.word	0x0800ab31
 800ab6c:	0800ab31 	.word	0x0800ab31
 800ab70:	0800ab31 	.word	0x0800ab31
 800ab74:	0800acc1 	.word	0x0800acc1
 800ab78:	0800abe5 	.word	0x0800abe5
 800ab7c:	0800aca3 	.word	0x0800aca3
 800ab80:	0800ab31 	.word	0x0800ab31
 800ab84:	0800ab31 	.word	0x0800ab31
 800ab88:	0800ace3 	.word	0x0800ace3
 800ab8c:	0800ab31 	.word	0x0800ab31
 800ab90:	0800abe5 	.word	0x0800abe5
 800ab94:	0800ab31 	.word	0x0800ab31
 800ab98:	0800ab31 	.word	0x0800ab31
 800ab9c:	0800acab 	.word	0x0800acab
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	602a      	str	r2, [r5, #0]
 800aba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb0:	2301      	movs	r3, #1
 800abb2:	e0a3      	b.n	800acfc <_printf_i+0x1f4>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	6829      	ldr	r1, [r5, #0]
 800abb8:	0606      	lsls	r6, r0, #24
 800abba:	f101 0304 	add.w	r3, r1, #4
 800abbe:	d50a      	bpl.n	800abd6 <_printf_i+0xce>
 800abc0:	680e      	ldr	r6, [r1, #0]
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	2e00      	cmp	r6, #0
 800abc6:	da03      	bge.n	800abd0 <_printf_i+0xc8>
 800abc8:	232d      	movs	r3, #45	; 0x2d
 800abca:	4276      	negs	r6, r6
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd0:	485e      	ldr	r0, [pc, #376]	; (800ad4c <_printf_i+0x244>)
 800abd2:	230a      	movs	r3, #10
 800abd4:	e019      	b.n	800ac0a <_printf_i+0x102>
 800abd6:	680e      	ldr	r6, [r1, #0]
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abde:	bf18      	it	ne
 800abe0:	b236      	sxthne	r6, r6
 800abe2:	e7ef      	b.n	800abc4 <_printf_i+0xbc>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	6820      	ldr	r0, [r4, #0]
 800abe8:	1d19      	adds	r1, r3, #4
 800abea:	6029      	str	r1, [r5, #0]
 800abec:	0601      	lsls	r1, r0, #24
 800abee:	d501      	bpl.n	800abf4 <_printf_i+0xec>
 800abf0:	681e      	ldr	r6, [r3, #0]
 800abf2:	e002      	b.n	800abfa <_printf_i+0xf2>
 800abf4:	0646      	lsls	r6, r0, #25
 800abf6:	d5fb      	bpl.n	800abf0 <_printf_i+0xe8>
 800abf8:	881e      	ldrh	r6, [r3, #0]
 800abfa:	4854      	ldr	r0, [pc, #336]	; (800ad4c <_printf_i+0x244>)
 800abfc:	2f6f      	cmp	r7, #111	; 0x6f
 800abfe:	bf0c      	ite	eq
 800ac00:	2308      	moveq	r3, #8
 800ac02:	230a      	movne	r3, #10
 800ac04:	2100      	movs	r1, #0
 800ac06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac0a:	6865      	ldr	r5, [r4, #4]
 800ac0c:	60a5      	str	r5, [r4, #8]
 800ac0e:	2d00      	cmp	r5, #0
 800ac10:	bfa2      	ittt	ge
 800ac12:	6821      	ldrge	r1, [r4, #0]
 800ac14:	f021 0104 	bicge.w	r1, r1, #4
 800ac18:	6021      	strge	r1, [r4, #0]
 800ac1a:	b90e      	cbnz	r6, 800ac20 <_printf_i+0x118>
 800ac1c:	2d00      	cmp	r5, #0
 800ac1e:	d04d      	beq.n	800acbc <_printf_i+0x1b4>
 800ac20:	4615      	mov	r5, r2
 800ac22:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac26:	fb03 6711 	mls	r7, r3, r1, r6
 800ac2a:	5dc7      	ldrb	r7, [r0, r7]
 800ac2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac30:	4637      	mov	r7, r6
 800ac32:	42bb      	cmp	r3, r7
 800ac34:	460e      	mov	r6, r1
 800ac36:	d9f4      	bls.n	800ac22 <_printf_i+0x11a>
 800ac38:	2b08      	cmp	r3, #8
 800ac3a:	d10b      	bne.n	800ac54 <_printf_i+0x14c>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	07de      	lsls	r6, r3, #31
 800ac40:	d508      	bpl.n	800ac54 <_printf_i+0x14c>
 800ac42:	6923      	ldr	r3, [r4, #16]
 800ac44:	6861      	ldr	r1, [r4, #4]
 800ac46:	4299      	cmp	r1, r3
 800ac48:	bfde      	ittt	le
 800ac4a:	2330      	movle	r3, #48	; 0x30
 800ac4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac54:	1b52      	subs	r2, r2, r5
 800ac56:	6122      	str	r2, [r4, #16]
 800ac58:	f8cd a000 	str.w	sl, [sp]
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	aa03      	add	r2, sp, #12
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7ff fee2 	bl	800aa2c <_printf_common>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d14c      	bne.n	800ad06 <_printf_i+0x1fe>
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	b004      	add	sp, #16
 800ac72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac76:	4835      	ldr	r0, [pc, #212]	; (800ad4c <_printf_i+0x244>)
 800ac78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac7c:	6829      	ldr	r1, [r5, #0]
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac84:	6029      	str	r1, [r5, #0]
 800ac86:	061d      	lsls	r5, r3, #24
 800ac88:	d514      	bpl.n	800acb4 <_printf_i+0x1ac>
 800ac8a:	07df      	lsls	r7, r3, #31
 800ac8c:	bf44      	itt	mi
 800ac8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac92:	6023      	strmi	r3, [r4, #0]
 800ac94:	b91e      	cbnz	r6, 800ac9e <_printf_i+0x196>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f023 0320 	bic.w	r3, r3, #32
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	2310      	movs	r3, #16
 800aca0:	e7b0      	b.n	800ac04 <_printf_i+0xfc>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	f043 0320 	orr.w	r3, r3, #32
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	2378      	movs	r3, #120	; 0x78
 800acac:	4828      	ldr	r0, [pc, #160]	; (800ad50 <_printf_i+0x248>)
 800acae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acb2:	e7e3      	b.n	800ac7c <_printf_i+0x174>
 800acb4:	0659      	lsls	r1, r3, #25
 800acb6:	bf48      	it	mi
 800acb8:	b2b6      	uxthmi	r6, r6
 800acba:	e7e6      	b.n	800ac8a <_printf_i+0x182>
 800acbc:	4615      	mov	r5, r2
 800acbe:	e7bb      	b.n	800ac38 <_printf_i+0x130>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	6826      	ldr	r6, [r4, #0]
 800acc4:	6961      	ldr	r1, [r4, #20]
 800acc6:	1d18      	adds	r0, r3, #4
 800acc8:	6028      	str	r0, [r5, #0]
 800acca:	0635      	lsls	r5, r6, #24
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0x1cc>
 800acd0:	6019      	str	r1, [r3, #0]
 800acd2:	e002      	b.n	800acda <_printf_i+0x1d2>
 800acd4:	0670      	lsls	r0, r6, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0x1c8>
 800acd8:	8019      	strh	r1, [r3, #0]
 800acda:	2300      	movs	r3, #0
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	4615      	mov	r5, r2
 800ace0:	e7ba      	b.n	800ac58 <_printf_i+0x150>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	1d1a      	adds	r2, r3, #4
 800ace6:	602a      	str	r2, [r5, #0]
 800ace8:	681d      	ldr	r5, [r3, #0]
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	2100      	movs	r1, #0
 800acee:	4628      	mov	r0, r5
 800acf0:	f7f5 fade 	bl	80002b0 <memchr>
 800acf4:	b108      	cbz	r0, 800acfa <_printf_i+0x1f2>
 800acf6:	1b40      	subs	r0, r0, r5
 800acf8:	6060      	str	r0, [r4, #4]
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	2300      	movs	r3, #0
 800ad00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad04:	e7a8      	b.n	800ac58 <_printf_i+0x150>
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	47d0      	blx	sl
 800ad10:	3001      	adds	r0, #1
 800ad12:	d0ab      	beq.n	800ac6c <_printf_i+0x164>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	079b      	lsls	r3, r3, #30
 800ad18:	d413      	bmi.n	800ad42 <_printf_i+0x23a>
 800ad1a:	68e0      	ldr	r0, [r4, #12]
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	4298      	cmp	r0, r3
 800ad20:	bfb8      	it	lt
 800ad22:	4618      	movlt	r0, r3
 800ad24:	e7a4      	b.n	800ac70 <_printf_i+0x168>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4632      	mov	r2, r6
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	47d0      	blx	sl
 800ad30:	3001      	adds	r0, #1
 800ad32:	d09b      	beq.n	800ac6c <_printf_i+0x164>
 800ad34:	3501      	adds	r5, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	9903      	ldr	r1, [sp, #12]
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	42ab      	cmp	r3, r5
 800ad3e:	dcf2      	bgt.n	800ad26 <_printf_i+0x21e>
 800ad40:	e7eb      	b.n	800ad1a <_printf_i+0x212>
 800ad42:	2500      	movs	r5, #0
 800ad44:	f104 0619 	add.w	r6, r4, #25
 800ad48:	e7f5      	b.n	800ad36 <_printf_i+0x22e>
 800ad4a:	bf00      	nop
 800ad4c:	0800b941 	.word	0x0800b941
 800ad50:	0800b952 	.word	0x0800b952

0800ad54 <_sbrk_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d06      	ldr	r5, [pc, #24]	; (800ad70 <_sbrk_r+0x1c>)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	602b      	str	r3, [r5, #0]
 800ad60:	f7f6 fd24 	bl	80017ac <_sbrk>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d102      	bne.n	800ad6e <_sbrk_r+0x1a>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	b103      	cbz	r3, 800ad6e <_sbrk_r+0x1a>
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}
 800ad70:	20014618 	.word	0x20014618

0800ad74 <__sread>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	460c      	mov	r4, r1
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	f000 faea 	bl	800b354 <_read_r>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	bfab      	itete	ge
 800ad84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad86:	89a3      	ldrhlt	r3, [r4, #12]
 800ad88:	181b      	addge	r3, r3, r0
 800ad8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad8e:	bfac      	ite	ge
 800ad90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad92:	81a3      	strhlt	r3, [r4, #12]
 800ad94:	bd10      	pop	{r4, pc}

0800ad96 <__swrite>:
 800ad96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9a:	461f      	mov	r7, r3
 800ad9c:	898b      	ldrh	r3, [r1, #12]
 800ad9e:	05db      	lsls	r3, r3, #23
 800ada0:	4605      	mov	r5, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	4616      	mov	r6, r2
 800ada6:	d505      	bpl.n	800adb4 <__swrite+0x1e>
 800ada8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adac:	2302      	movs	r3, #2
 800adae:	2200      	movs	r2, #0
 800adb0:	f000 f9b6 	bl	800b120 <_lseek_r>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	4632      	mov	r2, r6
 800adc2:	463b      	mov	r3, r7
 800adc4:	4628      	mov	r0, r5
 800adc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adca:	f7ff b819 	b.w	8009e00 <_write_r>

0800adce <__sseek>:
 800adce:	b510      	push	{r4, lr}
 800add0:	460c      	mov	r4, r1
 800add2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add6:	f000 f9a3 	bl	800b120 <_lseek_r>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	bf15      	itete	ne
 800ade0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ade2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ade6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adea:	81a3      	strheq	r3, [r4, #12]
 800adec:	bf18      	it	ne
 800adee:	81a3      	strhne	r3, [r4, #12]
 800adf0:	bd10      	pop	{r4, pc}

0800adf2 <__sclose>:
 800adf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf6:	f000 b8c1 	b.w	800af7c <_close_r>
	...

0800adfc <__swbuf_r>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	460e      	mov	r6, r1
 800ae00:	4614      	mov	r4, r2
 800ae02:	4605      	mov	r5, r0
 800ae04:	b118      	cbz	r0, 800ae0e <__swbuf_r+0x12>
 800ae06:	6983      	ldr	r3, [r0, #24]
 800ae08:	b90b      	cbnz	r3, 800ae0e <__swbuf_r+0x12>
 800ae0a:	f7ff fa25 	bl	800a258 <__sinit>
 800ae0e:	4b21      	ldr	r3, [pc, #132]	; (800ae94 <__swbuf_r+0x98>)
 800ae10:	429c      	cmp	r4, r3
 800ae12:	d12b      	bne.n	800ae6c <__swbuf_r+0x70>
 800ae14:	686c      	ldr	r4, [r5, #4]
 800ae16:	69a3      	ldr	r3, [r4, #24]
 800ae18:	60a3      	str	r3, [r4, #8]
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	071a      	lsls	r2, r3, #28
 800ae1e:	d52f      	bpl.n	800ae80 <__swbuf_r+0x84>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	b36b      	cbz	r3, 800ae80 <__swbuf_r+0x84>
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	1ac0      	subs	r0, r0, r3
 800ae2a:	6963      	ldr	r3, [r4, #20]
 800ae2c:	b2f6      	uxtb	r6, r6
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	4637      	mov	r7, r6
 800ae32:	dc04      	bgt.n	800ae3e <__swbuf_r+0x42>
 800ae34:	4621      	mov	r1, r4
 800ae36:	4628      	mov	r0, r5
 800ae38:	f000 f936 	bl	800b0a8 <_fflush_r>
 800ae3c:	bb30      	cbnz	r0, 800ae8c <__swbuf_r+0x90>
 800ae3e:	68a3      	ldr	r3, [r4, #8]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	60a3      	str	r3, [r4, #8]
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	6022      	str	r2, [r4, #0]
 800ae4a:	701e      	strb	r6, [r3, #0]
 800ae4c:	6963      	ldr	r3, [r4, #20]
 800ae4e:	3001      	adds	r0, #1
 800ae50:	4283      	cmp	r3, r0
 800ae52:	d004      	beq.n	800ae5e <__swbuf_r+0x62>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	07db      	lsls	r3, r3, #31
 800ae58:	d506      	bpl.n	800ae68 <__swbuf_r+0x6c>
 800ae5a:	2e0a      	cmp	r6, #10
 800ae5c:	d104      	bne.n	800ae68 <__swbuf_r+0x6c>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4628      	mov	r0, r5
 800ae62:	f000 f921 	bl	800b0a8 <_fflush_r>
 800ae66:	b988      	cbnz	r0, 800ae8c <__swbuf_r+0x90>
 800ae68:	4638      	mov	r0, r7
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <__swbuf_r+0x9c>)
 800ae6e:	429c      	cmp	r4, r3
 800ae70:	d101      	bne.n	800ae76 <__swbuf_r+0x7a>
 800ae72:	68ac      	ldr	r4, [r5, #8]
 800ae74:	e7cf      	b.n	800ae16 <__swbuf_r+0x1a>
 800ae76:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <__swbuf_r+0xa0>)
 800ae78:	429c      	cmp	r4, r3
 800ae7a:	bf08      	it	eq
 800ae7c:	68ec      	ldreq	r4, [r5, #12]
 800ae7e:	e7ca      	b.n	800ae16 <__swbuf_r+0x1a>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f80c 	bl	800aea0 <__swsetup_r>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d0cb      	beq.n	800ae24 <__swbuf_r+0x28>
 800ae8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ae90:	e7ea      	b.n	800ae68 <__swbuf_r+0x6c>
 800ae92:	bf00      	nop
 800ae94:	0800b8f0 	.word	0x0800b8f0
 800ae98:	0800b910 	.word	0x0800b910
 800ae9c:	0800b8d0 	.word	0x0800b8d0

0800aea0 <__swsetup_r>:
 800aea0:	4b32      	ldr	r3, [pc, #200]	; (800af6c <__swsetup_r+0xcc>)
 800aea2:	b570      	push	{r4, r5, r6, lr}
 800aea4:	681d      	ldr	r5, [r3, #0]
 800aea6:	4606      	mov	r6, r0
 800aea8:	460c      	mov	r4, r1
 800aeaa:	b125      	cbz	r5, 800aeb6 <__swsetup_r+0x16>
 800aeac:	69ab      	ldr	r3, [r5, #24]
 800aeae:	b913      	cbnz	r3, 800aeb6 <__swsetup_r+0x16>
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f7ff f9d1 	bl	800a258 <__sinit>
 800aeb6:	4b2e      	ldr	r3, [pc, #184]	; (800af70 <__swsetup_r+0xd0>)
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	d10f      	bne.n	800aedc <__swsetup_r+0x3c>
 800aebc:	686c      	ldr	r4, [r5, #4]
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aec4:	0719      	lsls	r1, r3, #28
 800aec6:	d42c      	bmi.n	800af22 <__swsetup_r+0x82>
 800aec8:	06dd      	lsls	r5, r3, #27
 800aeca:	d411      	bmi.n	800aef0 <__swsetup_r+0x50>
 800aecc:	2309      	movs	r3, #9
 800aece:	6033      	str	r3, [r6, #0]
 800aed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aed4:	81a3      	strh	r3, [r4, #12]
 800aed6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeda:	e03e      	b.n	800af5a <__swsetup_r+0xba>
 800aedc:	4b25      	ldr	r3, [pc, #148]	; (800af74 <__swsetup_r+0xd4>)
 800aede:	429c      	cmp	r4, r3
 800aee0:	d101      	bne.n	800aee6 <__swsetup_r+0x46>
 800aee2:	68ac      	ldr	r4, [r5, #8]
 800aee4:	e7eb      	b.n	800aebe <__swsetup_r+0x1e>
 800aee6:	4b24      	ldr	r3, [pc, #144]	; (800af78 <__swsetup_r+0xd8>)
 800aee8:	429c      	cmp	r4, r3
 800aeea:	bf08      	it	eq
 800aeec:	68ec      	ldreq	r4, [r5, #12]
 800aeee:	e7e6      	b.n	800aebe <__swsetup_r+0x1e>
 800aef0:	0758      	lsls	r0, r3, #29
 800aef2:	d512      	bpl.n	800af1a <__swsetup_r+0x7a>
 800aef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef6:	b141      	cbz	r1, 800af0a <__swsetup_r+0x6a>
 800aef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aefc:	4299      	cmp	r1, r3
 800aefe:	d002      	beq.n	800af06 <__swsetup_r+0x66>
 800af00:	4630      	mov	r0, r6
 800af02:	f000 f9ab 	bl	800b25c <_free_r>
 800af06:	2300      	movs	r3, #0
 800af08:	6363      	str	r3, [r4, #52]	; 0x34
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	2300      	movs	r3, #0
 800af14:	6063      	str	r3, [r4, #4]
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f043 0308 	orr.w	r3, r3, #8
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	b94b      	cbnz	r3, 800af3a <__swsetup_r+0x9a>
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af30:	d003      	beq.n	800af3a <__swsetup_r+0x9a>
 800af32:	4621      	mov	r1, r4
 800af34:	4630      	mov	r0, r6
 800af36:	f000 f92b 	bl	800b190 <__smakebuf_r>
 800af3a:	89a0      	ldrh	r0, [r4, #12]
 800af3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af40:	f010 0301 	ands.w	r3, r0, #1
 800af44:	d00a      	beq.n	800af5c <__swsetup_r+0xbc>
 800af46:	2300      	movs	r3, #0
 800af48:	60a3      	str	r3, [r4, #8]
 800af4a:	6963      	ldr	r3, [r4, #20]
 800af4c:	425b      	negs	r3, r3
 800af4e:	61a3      	str	r3, [r4, #24]
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	b943      	cbnz	r3, 800af66 <__swsetup_r+0xc6>
 800af54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af58:	d1ba      	bne.n	800aed0 <__swsetup_r+0x30>
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	0781      	lsls	r1, r0, #30
 800af5e:	bf58      	it	pl
 800af60:	6963      	ldrpl	r3, [r4, #20]
 800af62:	60a3      	str	r3, [r4, #8]
 800af64:	e7f4      	b.n	800af50 <__swsetup_r+0xb0>
 800af66:	2000      	movs	r0, #0
 800af68:	e7f7      	b.n	800af5a <__swsetup_r+0xba>
 800af6a:	bf00      	nop
 800af6c:	20000028 	.word	0x20000028
 800af70:	0800b8f0 	.word	0x0800b8f0
 800af74:	0800b910 	.word	0x0800b910
 800af78:	0800b8d0 	.word	0x0800b8d0

0800af7c <_close_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d06      	ldr	r5, [pc, #24]	; (800af98 <_close_r+0x1c>)
 800af80:	2300      	movs	r3, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	f7f6 fbdb 	bl	8001742 <_close>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_close_r+0x1a>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_close_r+0x1a>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	20014618 	.word	0x20014618

0800af9c <__sflush_r>:
 800af9c:	898a      	ldrh	r2, [r1, #12]
 800af9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa2:	4605      	mov	r5, r0
 800afa4:	0710      	lsls	r0, r2, #28
 800afa6:	460c      	mov	r4, r1
 800afa8:	d458      	bmi.n	800b05c <__sflush_r+0xc0>
 800afaa:	684b      	ldr	r3, [r1, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	dc05      	bgt.n	800afbc <__sflush_r+0x20>
 800afb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dc02      	bgt.n	800afbc <__sflush_r+0x20>
 800afb6:	2000      	movs	r0, #0
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afbe:	2e00      	cmp	r6, #0
 800afc0:	d0f9      	beq.n	800afb6 <__sflush_r+0x1a>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afc8:	682f      	ldr	r7, [r5, #0]
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	d032      	beq.n	800b034 <__sflush_r+0x98>
 800afce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	075a      	lsls	r2, r3, #29
 800afd4:	d505      	bpl.n	800afe2 <__sflush_r+0x46>
 800afd6:	6863      	ldr	r3, [r4, #4]
 800afd8:	1ac0      	subs	r0, r0, r3
 800afda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afdc:	b10b      	cbz	r3, 800afe2 <__sflush_r+0x46>
 800afde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afe0:	1ac0      	subs	r0, r0, r3
 800afe2:	2300      	movs	r3, #0
 800afe4:	4602      	mov	r2, r0
 800afe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afe8:	6a21      	ldr	r1, [r4, #32]
 800afea:	4628      	mov	r0, r5
 800afec:	47b0      	blx	r6
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	d106      	bne.n	800b002 <__sflush_r+0x66>
 800aff4:	6829      	ldr	r1, [r5, #0]
 800aff6:	291d      	cmp	r1, #29
 800aff8:	d82c      	bhi.n	800b054 <__sflush_r+0xb8>
 800affa:	4a2a      	ldr	r2, [pc, #168]	; (800b0a4 <__sflush_r+0x108>)
 800affc:	40ca      	lsrs	r2, r1
 800affe:	07d6      	lsls	r6, r2, #31
 800b000:	d528      	bpl.n	800b054 <__sflush_r+0xb8>
 800b002:	2200      	movs	r2, #0
 800b004:	6062      	str	r2, [r4, #4]
 800b006:	04d9      	lsls	r1, r3, #19
 800b008:	6922      	ldr	r2, [r4, #16]
 800b00a:	6022      	str	r2, [r4, #0]
 800b00c:	d504      	bpl.n	800b018 <__sflush_r+0x7c>
 800b00e:	1c42      	adds	r2, r0, #1
 800b010:	d101      	bne.n	800b016 <__sflush_r+0x7a>
 800b012:	682b      	ldr	r3, [r5, #0]
 800b014:	b903      	cbnz	r3, 800b018 <__sflush_r+0x7c>
 800b016:	6560      	str	r0, [r4, #84]	; 0x54
 800b018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b01a:	602f      	str	r7, [r5, #0]
 800b01c:	2900      	cmp	r1, #0
 800b01e:	d0ca      	beq.n	800afb6 <__sflush_r+0x1a>
 800b020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b024:	4299      	cmp	r1, r3
 800b026:	d002      	beq.n	800b02e <__sflush_r+0x92>
 800b028:	4628      	mov	r0, r5
 800b02a:	f000 f917 	bl	800b25c <_free_r>
 800b02e:	2000      	movs	r0, #0
 800b030:	6360      	str	r0, [r4, #52]	; 0x34
 800b032:	e7c1      	b.n	800afb8 <__sflush_r+0x1c>
 800b034:	6a21      	ldr	r1, [r4, #32]
 800b036:	2301      	movs	r3, #1
 800b038:	4628      	mov	r0, r5
 800b03a:	47b0      	blx	r6
 800b03c:	1c41      	adds	r1, r0, #1
 800b03e:	d1c7      	bne.n	800afd0 <__sflush_r+0x34>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0c4      	beq.n	800afd0 <__sflush_r+0x34>
 800b046:	2b1d      	cmp	r3, #29
 800b048:	d001      	beq.n	800b04e <__sflush_r+0xb2>
 800b04a:	2b16      	cmp	r3, #22
 800b04c:	d101      	bne.n	800b052 <__sflush_r+0xb6>
 800b04e:	602f      	str	r7, [r5, #0]
 800b050:	e7b1      	b.n	800afb6 <__sflush_r+0x1a>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	e7ad      	b.n	800afb8 <__sflush_r+0x1c>
 800b05c:	690f      	ldr	r7, [r1, #16]
 800b05e:	2f00      	cmp	r7, #0
 800b060:	d0a9      	beq.n	800afb6 <__sflush_r+0x1a>
 800b062:	0793      	lsls	r3, r2, #30
 800b064:	680e      	ldr	r6, [r1, #0]
 800b066:	bf08      	it	eq
 800b068:	694b      	ldreq	r3, [r1, #20]
 800b06a:	600f      	str	r7, [r1, #0]
 800b06c:	bf18      	it	ne
 800b06e:	2300      	movne	r3, #0
 800b070:	eba6 0807 	sub.w	r8, r6, r7
 800b074:	608b      	str	r3, [r1, #8]
 800b076:	f1b8 0f00 	cmp.w	r8, #0
 800b07a:	dd9c      	ble.n	800afb6 <__sflush_r+0x1a>
 800b07c:	6a21      	ldr	r1, [r4, #32]
 800b07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b080:	4643      	mov	r3, r8
 800b082:	463a      	mov	r2, r7
 800b084:	4628      	mov	r0, r5
 800b086:	47b0      	blx	r6
 800b088:	2800      	cmp	r0, #0
 800b08a:	dc06      	bgt.n	800b09a <__sflush_r+0xfe>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b092:	81a3      	strh	r3, [r4, #12]
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	e78e      	b.n	800afb8 <__sflush_r+0x1c>
 800b09a:	4407      	add	r7, r0
 800b09c:	eba8 0800 	sub.w	r8, r8, r0
 800b0a0:	e7e9      	b.n	800b076 <__sflush_r+0xda>
 800b0a2:	bf00      	nop
 800b0a4:	20400001 	.word	0x20400001

0800b0a8 <_fflush_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	690b      	ldr	r3, [r1, #16]
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	b913      	cbnz	r3, 800b0b8 <_fflush_r+0x10>
 800b0b2:	2500      	movs	r5, #0
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	b118      	cbz	r0, 800b0c2 <_fflush_r+0x1a>
 800b0ba:	6983      	ldr	r3, [r0, #24]
 800b0bc:	b90b      	cbnz	r3, 800b0c2 <_fflush_r+0x1a>
 800b0be:	f7ff f8cb 	bl	800a258 <__sinit>
 800b0c2:	4b14      	ldr	r3, [pc, #80]	; (800b114 <_fflush_r+0x6c>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	d11b      	bne.n	800b100 <_fflush_r+0x58>
 800b0c8:	686c      	ldr	r4, [r5, #4]
 800b0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0ef      	beq.n	800b0b2 <_fflush_r+0xa>
 800b0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0d4:	07d0      	lsls	r0, r2, #31
 800b0d6:	d404      	bmi.n	800b0e2 <_fflush_r+0x3a>
 800b0d8:	0599      	lsls	r1, r3, #22
 800b0da:	d402      	bmi.n	800b0e2 <_fflush_r+0x3a>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0de:	f7ff f959 	bl	800a394 <__retarget_lock_acquire_recursive>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	f7ff ff59 	bl	800af9c <__sflush_r>
 800b0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0ec:	07da      	lsls	r2, r3, #31
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	d4e0      	bmi.n	800b0b4 <_fflush_r+0xc>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	059b      	lsls	r3, r3, #22
 800b0f6:	d4dd      	bmi.n	800b0b4 <_fflush_r+0xc>
 800b0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0fa:	f7ff f94c 	bl	800a396 <__retarget_lock_release_recursive>
 800b0fe:	e7d9      	b.n	800b0b4 <_fflush_r+0xc>
 800b100:	4b05      	ldr	r3, [pc, #20]	; (800b118 <_fflush_r+0x70>)
 800b102:	429c      	cmp	r4, r3
 800b104:	d101      	bne.n	800b10a <_fflush_r+0x62>
 800b106:	68ac      	ldr	r4, [r5, #8]
 800b108:	e7df      	b.n	800b0ca <_fflush_r+0x22>
 800b10a:	4b04      	ldr	r3, [pc, #16]	; (800b11c <_fflush_r+0x74>)
 800b10c:	429c      	cmp	r4, r3
 800b10e:	bf08      	it	eq
 800b110:	68ec      	ldreq	r4, [r5, #12]
 800b112:	e7da      	b.n	800b0ca <_fflush_r+0x22>
 800b114:	0800b8f0 	.word	0x0800b8f0
 800b118:	0800b910 	.word	0x0800b910
 800b11c:	0800b8d0 	.word	0x0800b8d0

0800b120 <_lseek_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	; (800b140 <_lseek_r+0x20>)
 800b124:	4604      	mov	r4, r0
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7f6 fb2e 	bl	8001790 <_lseek>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_lseek_r+0x1e>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_lseek_r+0x1e>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	20014618 	.word	0x20014618

0800b144 <__swhatbuf_r>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	460e      	mov	r6, r1
 800b148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14c:	2900      	cmp	r1, #0
 800b14e:	b096      	sub	sp, #88	; 0x58
 800b150:	4614      	mov	r4, r2
 800b152:	461d      	mov	r5, r3
 800b154:	da08      	bge.n	800b168 <__swhatbuf_r+0x24>
 800b156:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	602a      	str	r2, [r5, #0]
 800b15e:	061a      	lsls	r2, r3, #24
 800b160:	d410      	bmi.n	800b184 <__swhatbuf_r+0x40>
 800b162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b166:	e00e      	b.n	800b186 <__swhatbuf_r+0x42>
 800b168:	466a      	mov	r2, sp
 800b16a:	f000 f905 	bl	800b378 <_fstat_r>
 800b16e:	2800      	cmp	r0, #0
 800b170:	dbf1      	blt.n	800b156 <__swhatbuf_r+0x12>
 800b172:	9a01      	ldr	r2, [sp, #4]
 800b174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b17c:	425a      	negs	r2, r3
 800b17e:	415a      	adcs	r2, r3
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	e7ee      	b.n	800b162 <__swhatbuf_r+0x1e>
 800b184:	2340      	movs	r3, #64	; 0x40
 800b186:	2000      	movs	r0, #0
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	b016      	add	sp, #88	; 0x58
 800b18c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b190 <__smakebuf_r>:
 800b190:	898b      	ldrh	r3, [r1, #12]
 800b192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b194:	079d      	lsls	r5, r3, #30
 800b196:	4606      	mov	r6, r0
 800b198:	460c      	mov	r4, r1
 800b19a:	d507      	bpl.n	800b1ac <__smakebuf_r+0x1c>
 800b19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	6123      	str	r3, [r4, #16]
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	6163      	str	r3, [r4, #20]
 800b1a8:	b002      	add	sp, #8
 800b1aa:	bd70      	pop	{r4, r5, r6, pc}
 800b1ac:	ab01      	add	r3, sp, #4
 800b1ae:	466a      	mov	r2, sp
 800b1b0:	f7ff ffc8 	bl	800b144 <__swhatbuf_r>
 800b1b4:	9900      	ldr	r1, [sp, #0]
 800b1b6:	4605      	mov	r5, r0
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7ff f90d 	bl	800a3d8 <_malloc_r>
 800b1be:	b948      	cbnz	r0, 800b1d4 <__smakebuf_r+0x44>
 800b1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1c4:	059a      	lsls	r2, r3, #22
 800b1c6:	d4ef      	bmi.n	800b1a8 <__smakebuf_r+0x18>
 800b1c8:	f023 0303 	bic.w	r3, r3, #3
 800b1cc:	f043 0302 	orr.w	r3, r3, #2
 800b1d0:	81a3      	strh	r3, [r4, #12]
 800b1d2:	e7e3      	b.n	800b19c <__smakebuf_r+0xc>
 800b1d4:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <__smakebuf_r+0x7c>)
 800b1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	6020      	str	r0, [r4, #0]
 800b1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	9b00      	ldr	r3, [sp, #0]
 800b1e4:	6163      	str	r3, [r4, #20]
 800b1e6:	9b01      	ldr	r3, [sp, #4]
 800b1e8:	6120      	str	r0, [r4, #16]
 800b1ea:	b15b      	cbz	r3, 800b204 <__smakebuf_r+0x74>
 800b1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f000 f8d3 	bl	800b39c <_isatty_r>
 800b1f6:	b128      	cbz	r0, 800b204 <__smakebuf_r+0x74>
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	f023 0303 	bic.w	r3, r3, #3
 800b1fe:	f043 0301 	orr.w	r3, r3, #1
 800b202:	81a3      	strh	r3, [r4, #12]
 800b204:	89a0      	ldrh	r0, [r4, #12]
 800b206:	4305      	orrs	r5, r0
 800b208:	81a5      	strh	r5, [r4, #12]
 800b20a:	e7cd      	b.n	800b1a8 <__smakebuf_r+0x18>
 800b20c:	0800a1f1 	.word	0x0800a1f1

0800b210 <memmove>:
 800b210:	4288      	cmp	r0, r1
 800b212:	b510      	push	{r4, lr}
 800b214:	eb01 0402 	add.w	r4, r1, r2
 800b218:	d902      	bls.n	800b220 <memmove+0x10>
 800b21a:	4284      	cmp	r4, r0
 800b21c:	4623      	mov	r3, r4
 800b21e:	d807      	bhi.n	800b230 <memmove+0x20>
 800b220:	1e43      	subs	r3, r0, #1
 800b222:	42a1      	cmp	r1, r4
 800b224:	d008      	beq.n	800b238 <memmove+0x28>
 800b226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b22e:	e7f8      	b.n	800b222 <memmove+0x12>
 800b230:	4402      	add	r2, r0
 800b232:	4601      	mov	r1, r0
 800b234:	428a      	cmp	r2, r1
 800b236:	d100      	bne.n	800b23a <memmove+0x2a>
 800b238:	bd10      	pop	{r4, pc}
 800b23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b242:	e7f7      	b.n	800b234 <memmove+0x24>

0800b244 <__malloc_lock>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__malloc_lock+0x8>)
 800b246:	f7ff b8a5 	b.w	800a394 <__retarget_lock_acquire_recursive>
 800b24a:	bf00      	nop
 800b24c:	2001460c 	.word	0x2001460c

0800b250 <__malloc_unlock>:
 800b250:	4801      	ldr	r0, [pc, #4]	; (800b258 <__malloc_unlock+0x8>)
 800b252:	f7ff b8a0 	b.w	800a396 <__retarget_lock_release_recursive>
 800b256:	bf00      	nop
 800b258:	2001460c 	.word	0x2001460c

0800b25c <_free_r>:
 800b25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b25e:	2900      	cmp	r1, #0
 800b260:	d044      	beq.n	800b2ec <_free_r+0x90>
 800b262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b266:	9001      	str	r0, [sp, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f1a1 0404 	sub.w	r4, r1, #4
 800b26e:	bfb8      	it	lt
 800b270:	18e4      	addlt	r4, r4, r3
 800b272:	f7ff ffe7 	bl	800b244 <__malloc_lock>
 800b276:	4a1e      	ldr	r2, [pc, #120]	; (800b2f0 <_free_r+0x94>)
 800b278:	9801      	ldr	r0, [sp, #4]
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	b933      	cbnz	r3, 800b28c <_free_r+0x30>
 800b27e:	6063      	str	r3, [r4, #4]
 800b280:	6014      	str	r4, [r2, #0]
 800b282:	b003      	add	sp, #12
 800b284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b288:	f7ff bfe2 	b.w	800b250 <__malloc_unlock>
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	d908      	bls.n	800b2a2 <_free_r+0x46>
 800b290:	6825      	ldr	r5, [r4, #0]
 800b292:	1961      	adds	r1, r4, r5
 800b294:	428b      	cmp	r3, r1
 800b296:	bf01      	itttt	eq
 800b298:	6819      	ldreq	r1, [r3, #0]
 800b29a:	685b      	ldreq	r3, [r3, #4]
 800b29c:	1949      	addeq	r1, r1, r5
 800b29e:	6021      	streq	r1, [r4, #0]
 800b2a0:	e7ed      	b.n	800b27e <_free_r+0x22>
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	b10b      	cbz	r3, 800b2ac <_free_r+0x50>
 800b2a8:	42a3      	cmp	r3, r4
 800b2aa:	d9fa      	bls.n	800b2a2 <_free_r+0x46>
 800b2ac:	6811      	ldr	r1, [r2, #0]
 800b2ae:	1855      	adds	r5, r2, r1
 800b2b0:	42a5      	cmp	r5, r4
 800b2b2:	d10b      	bne.n	800b2cc <_free_r+0x70>
 800b2b4:	6824      	ldr	r4, [r4, #0]
 800b2b6:	4421      	add	r1, r4
 800b2b8:	1854      	adds	r4, r2, r1
 800b2ba:	42a3      	cmp	r3, r4
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	d1e0      	bne.n	800b282 <_free_r+0x26>
 800b2c0:	681c      	ldr	r4, [r3, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	6053      	str	r3, [r2, #4]
 800b2c6:	4421      	add	r1, r4
 800b2c8:	6011      	str	r1, [r2, #0]
 800b2ca:	e7da      	b.n	800b282 <_free_r+0x26>
 800b2cc:	d902      	bls.n	800b2d4 <_free_r+0x78>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	e7d6      	b.n	800b282 <_free_r+0x26>
 800b2d4:	6825      	ldr	r5, [r4, #0]
 800b2d6:	1961      	adds	r1, r4, r5
 800b2d8:	428b      	cmp	r3, r1
 800b2da:	bf04      	itt	eq
 800b2dc:	6819      	ldreq	r1, [r3, #0]
 800b2de:	685b      	ldreq	r3, [r3, #4]
 800b2e0:	6063      	str	r3, [r4, #4]
 800b2e2:	bf04      	itt	eq
 800b2e4:	1949      	addeq	r1, r1, r5
 800b2e6:	6021      	streq	r1, [r4, #0]
 800b2e8:	6054      	str	r4, [r2, #4]
 800b2ea:	e7ca      	b.n	800b282 <_free_r+0x26>
 800b2ec:	b003      	add	sp, #12
 800b2ee:	bd30      	pop	{r4, r5, pc}
 800b2f0:	20014610 	.word	0x20014610

0800b2f4 <_realloc_r>:
 800b2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	4614      	mov	r4, r2
 800b2fc:	460e      	mov	r6, r1
 800b2fe:	b921      	cbnz	r1, 800b30a <_realloc_r+0x16>
 800b300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b304:	4611      	mov	r1, r2
 800b306:	f7ff b867 	b.w	800a3d8 <_malloc_r>
 800b30a:	b92a      	cbnz	r2, 800b318 <_realloc_r+0x24>
 800b30c:	f7ff ffa6 	bl	800b25c <_free_r>
 800b310:	4625      	mov	r5, r4
 800b312:	4628      	mov	r0, r5
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	f000 f850 	bl	800b3bc <_malloc_usable_size_r>
 800b31c:	4284      	cmp	r4, r0
 800b31e:	4607      	mov	r7, r0
 800b320:	d802      	bhi.n	800b328 <_realloc_r+0x34>
 800b322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b326:	d812      	bhi.n	800b34e <_realloc_r+0x5a>
 800b328:	4621      	mov	r1, r4
 800b32a:	4640      	mov	r0, r8
 800b32c:	f7ff f854 	bl	800a3d8 <_malloc_r>
 800b330:	4605      	mov	r5, r0
 800b332:	2800      	cmp	r0, #0
 800b334:	d0ed      	beq.n	800b312 <_realloc_r+0x1e>
 800b336:	42bc      	cmp	r4, r7
 800b338:	4622      	mov	r2, r4
 800b33a:	4631      	mov	r1, r6
 800b33c:	bf28      	it	cs
 800b33e:	463a      	movcs	r2, r7
 800b340:	f7fe fee4 	bl	800a10c <memcpy>
 800b344:	4631      	mov	r1, r6
 800b346:	4640      	mov	r0, r8
 800b348:	f7ff ff88 	bl	800b25c <_free_r>
 800b34c:	e7e1      	b.n	800b312 <_realloc_r+0x1e>
 800b34e:	4635      	mov	r5, r6
 800b350:	e7df      	b.n	800b312 <_realloc_r+0x1e>
	...

0800b354 <_read_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d07      	ldr	r5, [pc, #28]	; (800b374 <_read_r+0x20>)
 800b358:	4604      	mov	r4, r0
 800b35a:	4608      	mov	r0, r1
 800b35c:	4611      	mov	r1, r2
 800b35e:	2200      	movs	r2, #0
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	f7f6 f9d0 	bl	8001708 <_read>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_read_r+0x1e>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_read_r+0x1e>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	20014618 	.word	0x20014618

0800b378 <_fstat_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4d07      	ldr	r5, [pc, #28]	; (800b398 <_fstat_r+0x20>)
 800b37c:	2300      	movs	r3, #0
 800b37e:	4604      	mov	r4, r0
 800b380:	4608      	mov	r0, r1
 800b382:	4611      	mov	r1, r2
 800b384:	602b      	str	r3, [r5, #0]
 800b386:	f7f6 f9e8 	bl	800175a <_fstat>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d102      	bne.n	800b394 <_fstat_r+0x1c>
 800b38e:	682b      	ldr	r3, [r5, #0]
 800b390:	b103      	cbz	r3, 800b394 <_fstat_r+0x1c>
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	bd38      	pop	{r3, r4, r5, pc}
 800b396:	bf00      	nop
 800b398:	20014618 	.word	0x20014618

0800b39c <_isatty_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d06      	ldr	r5, [pc, #24]	; (800b3b8 <_isatty_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	602b      	str	r3, [r5, #0]
 800b3a8:	f7f6 f9e7 	bl	800177a <_isatty>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_isatty_r+0x1a>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_isatty_r+0x1a>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	20014618 	.word	0x20014618

0800b3bc <_malloc_usable_size_r>:
 800b3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c0:	1f18      	subs	r0, r3, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	bfbc      	itt	lt
 800b3c6:	580b      	ldrlt	r3, [r1, r0]
 800b3c8:	18c0      	addlt	r0, r0, r3
 800b3ca:	4770      	bx	lr

0800b3cc <_init>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	bf00      	nop
 800b3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d2:	bc08      	pop	{r3}
 800b3d4:	469e      	mov	lr, r3
 800b3d6:	4770      	bx	lr

0800b3d8 <_fini>:
 800b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3da:	bf00      	nop
 800b3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3de:	bc08      	pop	{r3}
 800b3e0:	469e      	mov	lr, r3
 800b3e2:	4770      	bx	lr
