
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a0  080024a0  000124a8  2**0
                  CONTENTS
  4 .ARM          00000000  080024a0  080024a0  000124a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024a0  080024a8  000124a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a0  080024a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024a4  080024a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000124a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000124a8  2**0
                  CONTENTS
 10 .bss          00000708  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000708  20000708  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001358a  00000000  00000000  000124d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c5  00000000  00000000  00025a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00027c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  00028d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003af7  00000000  00000000  00029d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f1b  00000000  00000000  0002d807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6b84  00000000  00000000  00042722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001292a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047a8  00000000  00000000  001292f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000000 	.word	0x20000000
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800245c 	.word	0x0800245c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000004 	.word	0x20000004
 80001ec:	0800245c 	.word	0x0800245c

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2000013c 	.word	0x2000013c

08000284 <main>:
 *      Author: mahon
 */


int main()
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
 8000288:	2300      	movs	r3, #0

}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <DMA1_Stream7_IRQHandler>:
	UART5->SR &= ~USART_SR_TC;
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
}

void DMA1_Stream7_IRQHandler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 8000298:	e7fe      	b.n	8000298 <DMA1_Stream7_IRQHandler+0x4>

0800029a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800029e:	e7fe      	b.n	800029e <NMI_Handler+0x4>

080002a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <HardFault_Handler+0x4>

080002a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002aa:	e7fe      	b.n	80002aa <MemManage_Handler+0x4>

080002ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler+0x4>

080002b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <UsageFault_Handler+0x4>

080002b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <UART5_IRQHandler+0x10>)
 80002ce:	f000 fa37 	bl	8000740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	2000001c 	.word	0x2000001c

080002dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80002e0:	4802      	ldr	r0, [pc, #8]	; (80002ec <TIM6_DAC_IRQHandler+0x10>)
 80002e2:	f000 f8df 	bl	80004a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000060 	.word	0x20000060

080002f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <SystemInit+0x20>)
 80002f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <SystemInit+0x20>)
 80002fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800034c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000330:	4c0b      	ldr	r4, [pc, #44]	; (8000360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800033e:	f7ff ffd7 	bl	80002f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000342:	f002 f851 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000346:	f7ff ff9d 	bl	8000284 <main>
  bx  lr    
 800034a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800034c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080024a8 	.word	0x080024a8
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	20000708 	.word	0x20000708

08000364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  return uwTick;
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <HAL_GetTick+0x14>)
 800036e:	681b      	ldr	r3, [r3, #0]
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	200000a8 	.word	0x200000a8

08000380 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800038e:	f7ff ffeb 	bl	8000368 <HAL_GetTick>
 8000392:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2b02      	cmp	r3, #2
 800039e:	d008      	beq.n	80003b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80003ae:	2301      	movs	r3, #1
 80003b0:	e052      	b.n	8000458 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f022 0216 	bic.w	r2, r2, #22
 80003c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	695a      	ldr	r2, [r3, #20]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d103      	bne.n	80003e2 <HAL_DMA_Abort+0x62>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d007      	beq.n	80003f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f022 0208 	bic.w	r2, r2, #8
 80003f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f022 0201 	bic.w	r2, r2, #1
 8000400:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000402:	e013      	b.n	800042c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000404:	f7ff ffb0 	bl	8000368 <HAL_GetTick>
 8000408:	4602      	mov	r2, r0
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	2b05      	cmp	r3, #5
 8000410:	d90c      	bls.n	800042c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2220      	movs	r2, #32
 8000416:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2203      	movs	r2, #3
 800041c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2200      	movs	r2, #0
 8000424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000428:	2303      	movs	r3, #3
 800042a:	e015      	b.n	8000458 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1e4      	bne.n	8000404 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800043e:	223f      	movs	r2, #63	; 0x3f
 8000440:	409a      	lsls	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2201      	movs	r2, #1
 800044a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b02      	cmp	r3, #2
 8000472:	d004      	beq.n	800047e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
 800047c:	e00c      	b.n	8000498 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2205      	movs	r2, #5
 8000482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f022 0201 	bic.w	r2, r2, #1
 8000494:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000496:	2300      	movs	r3, #0
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	f003 0302 	and.w	r3, r3, #2
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d122      	bne.n	8000500 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	f003 0302 	and.w	r3, r3, #2
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d11b      	bne.n	8000500 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f06f 0202 	mvn.w	r2, #2
 80004d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0303 	and.w	r3, r3, #3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d003      	beq.n	80004ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 f8f8 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 80004ec:	e005      	b.n	80004fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f8ea 	bl	80006c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 f8fb 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	2b04      	cmp	r3, #4
 800050c:	d122      	bne.n	8000554 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	2b04      	cmp	r3, #4
 800051a:	d11b      	bne.n	8000554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f06f 0204 	mvn.w	r2, #4
 8000524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2202      	movs	r2, #2
 800052a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000536:	2b00      	cmp	r3, #0
 8000538:	d003      	beq.n	8000542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f000 f8ce 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8000540:	e005      	b.n	800054e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f8c0 	bl	80006c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f8d1 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	691b      	ldr	r3, [r3, #16]
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	2b08      	cmp	r3, #8
 8000560:	d122      	bne.n	80005a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	2b08      	cmp	r3, #8
 800056e:	d11b      	bne.n	80005a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f06f 0208 	mvn.w	r2, #8
 8000578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2204      	movs	r2, #4
 800057e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f8a4 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8000594:	e005      	b.n	80005a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f896 	bl	80006c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f8a7 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	2b10      	cmp	r3, #16
 80005b4:	d122      	bne.n	80005fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	2b10      	cmp	r3, #16
 80005c2:	d11b      	bne.n	80005fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f06f 0210 	mvn.w	r2, #16
 80005cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2208      	movs	r2, #8
 80005d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d003      	beq.n	80005ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f87a 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 80005e8:	e005      	b.n	80005f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f86c 	bl	80006c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f87d 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10e      	bne.n	8000628 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	2b01      	cmp	r3, #1
 8000616:	d107      	bne.n	8000628 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f06f 0201 	mvn.w	r2, #1
 8000620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f846 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	2b80      	cmp	r3, #128	; 0x80
 8000634:	d10e      	bne.n	8000654 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000640:	2b80      	cmp	r3, #128	; 0x80
 8000642:	d107      	bne.n	8000654 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800064c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f86c 	bl	800072c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	691b      	ldr	r3, [r3, #16]
 800065a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065e:	2b40      	cmp	r3, #64	; 0x40
 8000660:	d10e      	bne.n	8000680 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066c:	2b40      	cmp	r3, #64	; 0x40
 800066e:	d107      	bne.n	8000680 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f842 	bl	8000704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f003 0320 	and.w	r3, r3, #32
 800068a:	2b20      	cmp	r3, #32
 800068c:	d10e      	bne.n	80006ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	f003 0320 	and.w	r3, r3, #32
 8000698:	2b20      	cmp	r3, #32
 800069a:	d107      	bne.n	80006ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f06f 0220 	mvn.w	r2, #32
 80006a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f836 	bl	8000718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0ba      	sub	sp, #232	; 0xe8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8000772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800077e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10f      	bne.n	80007a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	2b00      	cmp	r3, #0
 8000790:	d009      	beq.n	80007a6 <HAL_UART_IRQHandler+0x66>
 8000792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000796:	f003 0320 	and.w	r3, r3, #32
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 fb65 	bl	8000e6e <UART_Receive_IT>
      return;
 80007a4:	e256      	b.n	8000c54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80007a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f000 80de 	beq.w	800096c <HAL_UART_IRQHandler+0x22c>
 80007b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80007bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80007c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f000 80d1 	beq.w	800096c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80007ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00b      	beq.n	80007ee <HAL_UART_IRQHandler+0xae>
 80007d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80007da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f043 0201 	orr.w	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80007ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00b      	beq.n	8000812 <HAL_UART_IRQHandler+0xd2>
 80007fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d005      	beq.n	8000812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f043 0202 	orr.w	r2, r3, #2
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <HAL_UART_IRQHandler+0xf6>
 800081e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f043 0204 	orr.w	r2, r3, #4
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8000836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	2b00      	cmp	r3, #0
 8000840:	d011      	beq.n	8000866 <HAL_UART_IRQHandler+0x126>
 8000842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800084e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f043 0208 	orr.w	r2, r3, #8
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	2b00      	cmp	r3, #0
 800086c:	f000 81ed 	beq.w	8000c4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000874:	f003 0320 	and.w	r3, r3, #32
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <HAL_UART_IRQHandler+0x14e>
 800087c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 faf0 	bl	8000e6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000898:	2b40      	cmp	r3, #64	; 0x40
 800089a:	bf0c      	ite	eq
 800089c:	2301      	moveq	r3, #1
 800089e:	2300      	movne	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d103      	bne.n	80008ba <HAL_UART_IRQHandler+0x17a>
 80008b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d04f      	beq.n	800095a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f9f8 	bl	8000cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	2b40      	cmp	r3, #64	; 0x40
 80008cc:	d141      	bne.n	8000952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3314      	adds	r3, #20
 80008d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80008d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008dc:	e853 3f00 	ldrex	r3, [r3]
 80008e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80008e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3314      	adds	r3, #20
 80008f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80008fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80008fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800090a:	e841 2300 	strex	r3, r2, [r1]
 800090e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8000912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1d9      	bne.n	80008ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091e:	2b00      	cmp	r3, #0
 8000920:	d013      	beq.n	800094a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000926:	4a7d      	ldr	r2, [pc, #500]	; (8000b1c <HAL_UART_IRQHandler+0x3dc>)
 8000928:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fd96 	bl	8000460 <HAL_DMA_Abort_IT>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d016      	beq.n	8000968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000944:	4610      	mov	r0, r2
 8000946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000948:	e00e      	b.n	8000968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f99a 	bl	8000c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000950:	e00a      	b.n	8000968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f996 	bl	8000c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000958:	e006      	b.n	8000968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f992 	bl	8000c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8000966:	e170      	b.n	8000c4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000968:	bf00      	nop
    return;
 800096a:	e16e      	b.n	8000c4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	2b01      	cmp	r3, #1
 8000972:	f040 814a 	bne.w	8000c0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8000976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 8143 	beq.w	8000c0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8000984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 813c 	beq.w	8000c0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b2:	2b40      	cmp	r3, #64	; 0x40
 80009b4:	f040 80b4 	bne.w	8000b20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80009c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 8140 	beq.w	8000c4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80009d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80009d6:	429a      	cmp	r2, r3
 80009d8:	f080 8139 	bcs.w	8000c4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80009e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009ee:	f000 8088 	beq.w	8000b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	330c      	adds	r3, #12
 80009f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a00:	e853 3f00 	ldrex	r3, [r3]
 8000a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8000a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000a2e:	e841 2300 	strex	r3, r2, [r1]
 8000a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8000a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1d9      	bne.n	80009f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3314      	adds	r3, #20
 8000a44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a48:	e853 3f00 	ldrex	r3, [r3]
 8000a4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8000a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3314      	adds	r3, #20
 8000a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000a62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000a66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a6e:	e841 2300 	strex	r3, r2, [r1]
 8000a72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8000a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1e1      	bne.n	8000a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3314      	adds	r3, #20
 8000a80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a84:	e853 3f00 	ldrex	r3, [r3]
 8000a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8000a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3314      	adds	r3, #20
 8000a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000aa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000aa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000aa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000aa6:	e841 2300 	strex	r3, r2, [r1]
 8000aaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8000aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1e3      	bne.n	8000a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	330c      	adds	r3, #12
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000aca:	e853 3f00 	ldrex	r3, [r3]
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8000ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ad2:	f023 0310 	bic.w	r3, r3, #16
 8000ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	330c      	adds	r3, #12
 8000ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000ae4:	65ba      	str	r2, [r7, #88]	; 0x58
 8000ae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000aec:	e841 2300 	strex	r3, r2, [r1]
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8000af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e3      	bne.n	8000ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fc3f 	bl	8000380 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f8c0 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8000b18:	e099      	b.n	8000c4e <HAL_UART_IRQHandler+0x50e>
 8000b1a:	bf00      	nop
 8000b1c:	08000d77 	.word	0x08000d77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 808b 	beq.w	8000c52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8000b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f000 8086 	beq.w	8000c52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	330c      	adds	r3, #12
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	e853 3f00 	ldrex	r3, [r3]
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8000b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	330c      	adds	r3, #12
 8000b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8000b6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b72:	e841 2300 	strex	r3, r2, [r1]
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8000b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1e3      	bne.n	8000b46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3314      	adds	r3, #20
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	e853 3f00 	ldrex	r3, [r3]
 8000b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3314      	adds	r3, #20
 8000b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000baa:	e841 2300 	strex	r3, r2, [r1]
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8000bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1e3      	bne.n	8000b7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2220      	movs	r2, #32
 8000bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	330c      	adds	r3, #12
 8000bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	e853 3f00 	ldrex	r3, [r3]
 8000bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 0310 	bic.w	r3, r3, #16
 8000bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	330c      	adds	r3, #12
 8000be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000be8:	61fa      	str	r2, [r7, #28]
 8000bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000bec:	69b9      	ldr	r1, [r7, #24]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	e841 2300 	strex	r3, r2, [r1]
 8000bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1e3      	bne.n	8000bc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8000bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000c00:	4619      	mov	r1, r3
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f848 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8000c08:	e023      	b.n	8000c52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d009      	beq.n	8000c2a <HAL_UART_IRQHandler+0x4ea>
 8000c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f8bb 	bl	8000d9e <UART_Transmit_IT>
    return;
 8000c28:	e014      	b.n	8000c54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00e      	beq.n	8000c54 <HAL_UART_IRQHandler+0x514>
 8000c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d008      	beq.n	8000c54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f8fb 	bl	8000e3e <UART_EndTransmit_IT>
    return;
 8000c48:	e004      	b.n	8000c54 <HAL_UART_IRQHandler+0x514>
    return;
 8000c4a:	bf00      	nop
 8000c4c:	e002      	b.n	8000c54 <HAL_UART_IRQHandler+0x514>
      return;
 8000c4e:	bf00      	nop
 8000c50:	e000      	b.n	8000c54 <HAL_UART_IRQHandler+0x514>
      return;
 8000c52:	bf00      	nop
  }
}
 8000c54:	37e8      	adds	r7, #232	; 0xe8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop

08000c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b095      	sub	sp, #84	; 0x54
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc2:	e853 3f00 	ldrex	r3, [r3]
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8000cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cd8:	643a      	str	r2, [r7, #64]	; 0x40
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000cdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ce0:	e841 2300 	strex	r3, r2, [r1]
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8000ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1e5      	bne.n	8000cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3314      	adds	r3, #20
 8000cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000cf4:	6a3b      	ldr	r3, [r7, #32]
 8000cf6:	e853 3f00 	ldrex	r3, [r3]
 8000cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f023 0301 	bic.w	r3, r3, #1
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3314      	adds	r3, #20
 8000d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d14:	e841 2300 	strex	r3, r2, [r1]
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e5      	bne.n	8000cec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d119      	bne.n	8000d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	330c      	adds	r3, #12
 8000d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	e853 3f00 	ldrex	r3, [r3]
 8000d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	f023 0310 	bic.w	r3, r3, #16
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	330c      	adds	r3, #12
 8000d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d48:	61ba      	str	r2, [r7, #24]
 8000d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d4c:	6979      	ldr	r1, [r7, #20]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	e841 2300 	strex	r3, r2, [r1]
 8000d54:	613b      	str	r3, [r7, #16]
   return(result);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1e5      	bne.n	8000d28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000d6a:	bf00      	nop
 8000d6c:	3754      	adds	r7, #84	; 0x54
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2200      	movs	r2, #0
 8000d88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff ff77 	bl	8000c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b085      	sub	sp, #20
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b21      	cmp	r3, #33	; 0x21
 8000db0:	d13e      	bne.n	8000e30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dba:	d114      	bne.n	8000de6 <UART_Transmit_IT+0x48>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d110      	bne.n	8000de6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	1c9a      	adds	r2, r3, #2
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	621a      	str	r2, [r3, #32]
 8000de4:	e008      	b.n	8000df8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	1c59      	adds	r1, r3, #1
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6211      	str	r1, [r2, #32]
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10f      	bne.n	8000e2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e000      	b.n	8000e32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8000e30:	2302      	movs	r3, #2
  }
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fefc 	bl	8000c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b08c      	sub	sp, #48	; 0x30
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b22      	cmp	r3, #34	; 0x22
 8000e80:	f040 80ab 	bne.w	8000fda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e8c:	d117      	bne.n	8000ebe <UART_Receive_IT+0x50>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d113      	bne.n	8000ebe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	1c9a      	adds	r2, r3, #2
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
 8000ebc:	e026      	b.n	8000f0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ed0:	d007      	beq.n	8000ee2 <UART_Receive_IT+0x74>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10a      	bne.n	8000ef0 <UART_Receive_IT+0x82>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d106      	bne.n	8000ef0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e008      	b.n	8000f02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d15a      	bne.n	8000fd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0220 	bic.w	r2, r2, #32
 8000f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	695a      	ldr	r2, [r3, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2220      	movs	r2, #32
 8000f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d135      	bne.n	8000fcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	330c      	adds	r3, #12
 8000f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	e853 3f00 	ldrex	r3, [r3]
 8000f74:	613b      	str	r3, [r7, #16]
   return(result);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	f023 0310 	bic.w	r3, r3, #16
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	330c      	adds	r3, #12
 8000f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f86:	623a      	str	r2, [r7, #32]
 8000f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f8a:	69f9      	ldr	r1, [r7, #28]
 8000f8c:	6a3a      	ldr	r2, [r7, #32]
 8000f8e:	e841 2300 	strex	r3, r2, [r1]
 8000f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1e5      	bne.n	8000f66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d10a      	bne.n	8000fbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fe67 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
 8000fca:	e002      	b.n	8000fd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fe4f 	bl	8000c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e002      	b.n	8000fdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8000fda:	2302      	movs	r3, #2
  }
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3730      	adds	r7, #48	; 0x30
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6892      	ldr	r2, [r2, #8]
 8001042:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6852      	ldr	r2, [r2, #4]
 800104c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d103      	bne.n	8001060 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <xTaskIncrementTick+0x14c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 8092 	bne.w	80011b8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001094:	4b4e      	ldr	r3, [pc, #312]	; (80011d0 <xTaskIncrementTick+0x150>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <xTaskIncrementTick+0x150>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d120      	bne.n	80010ea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <xTaskIncrementTick+0x154>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00a      	beq.n	80010c8 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80010b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b6:	f383 8811 	msr	BASEPRI, r3
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80010c4:	bf00      	nop
 80010c6:	e7fe      	b.n	80010c6 <xTaskIncrementTick+0x46>
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <xTaskIncrementTick+0x154>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <xTaskIncrementTick+0x158>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <xTaskIncrementTick+0x154>)
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4a40      	ldr	r2, [pc, #256]	; (80011d8 <xTaskIncrementTick+0x158>)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <xTaskIncrementTick+0x15c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a3e      	ldr	r2, [pc, #248]	; (80011dc <xTaskIncrementTick+0x15c>)
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	f000 f8f1 	bl	80012cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <xTaskIncrementTick+0x160>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d34c      	bcc.n	800118e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <xTaskIncrementTick+0x154>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d104      	bne.n	8001108 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <xTaskIncrementTick+0x160>)
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	601a      	str	r2, [r3, #0]
                    break;
 8001106:	e042      	b.n	800118e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001108:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <xTaskIncrementTick+0x154>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	d203      	bcs.n	8001128 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001120:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <xTaskIncrementTick+0x160>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001126:	e032      	b.n	800118e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3304      	adds	r3, #4
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff7d 	bl	800102c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3318      	adds	r3, #24
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff74 	bl	800102c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4618      	mov	r0, r3
 8001148:	f001 f830 	bl	80021ac <SEGGER_SYSVIEW_OnTaskStartReady>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	2201      	movs	r2, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <xTaskIncrementTick+0x164>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4313      	orrs	r3, r2
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <xTaskIncrementTick+0x164>)
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <xTaskIncrementTick+0x168>)
 800116c:	441a      	add	r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3304      	adds	r3, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f7ff ff35 	bl	8000fe4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <xTaskIncrementTick+0x16c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	429a      	cmp	r2, r3
 8001186:	d3b5      	bcc.n	80010f4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800118c:	e7b2      	b.n	80010f4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <xTaskIncrementTick+0x16c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	4914      	ldr	r1, [pc, #80]	; (80011e8 <xTaskIncrementTick+0x168>)
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d901      	bls.n	80011aa <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <xTaskIncrementTick+0x170>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e004      	b.n	80011c2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <xTaskIncrementTick+0x174>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <xTaskIncrementTick+0x174>)
 80011c0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80011c2:	697b      	ldr	r3, [r7, #20]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000138 	.word	0x20000138
 80011d0:	2000011c 	.word	0x2000011c
 80011d4:	20000114 	.word	0x20000114
 80011d8:	20000118 	.word	0x20000118
 80011dc:	2000012c 	.word	0x2000012c
 80011e0:	20000130 	.word	0x20000130
 80011e4:	20000120 	.word	0x20000120
 80011e8:	200000b0 	.word	0x200000b0
 80011ec:	200000ac 	.word	0x200000ac
 80011f0:	20000128 	.word	0x20000128
 80011f4:	20000124 	.word	0x20000124

080011f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <vTaskSwitchContext+0xbc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <vTaskSwitchContext+0xc0>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800120c:	e04d      	b.n	80012aa <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <vTaskSwitchContext+0xc0>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <vTaskSwitchContext+0xc4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	fab3 f383 	clz	r3, r3
 8001220:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	f1c3 031f 	rsb	r3, r3, #31
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <vTaskSwitchContext+0xc8>)
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10a      	bne.n	8001254 <vTaskSwitchContext+0x5c>
        __asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	607b      	str	r3, [r7, #4]
    }
 8001250:	bf00      	nop
 8001252:	e7fe      	b.n	8001252 <vTaskSwitchContext+0x5a>
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <vTaskSwitchContext+0xc8>)
 8001260:	4413      	add	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	3308      	adds	r3, #8
 8001276:	429a      	cmp	r2, r3
 8001278:	d104      	bne.n	8001284 <vTaskSwitchContext+0x8c>
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <vTaskSwitchContext+0xcc>)
 800128c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <vTaskSwitchContext+0xcc>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <vTaskSwitchContext+0xd0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d102      	bne.n	80012a0 <vTaskSwitchContext+0xa8>
 800129a:	f000 ff29 	bl	80020f0 <SEGGER_SYSVIEW_OnIdle>
}
 800129e:	e004      	b.n	80012aa <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <vTaskSwitchContext+0xcc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 ff3f 	bl	8002128 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000138 	.word	0x20000138
 80012b8:	20000128 	.word	0x20000128
 80012bc:	20000120 	.word	0x20000120
 80012c0:	200000b0 	.word	0x200000b0
 80012c4:	200000ac 	.word	0x200000ac
 80012c8:	20000134 	.word	0x20000134

080012cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <prvResetNextTaskUnblockTime+0x30>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d104      	bne.n	80012e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <prvResetNextTaskUnblockTime+0x34>)
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80012e2:	e005      	b.n	80012f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <prvResetNextTaskUnblockTime+0x30>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <prvResetNextTaskUnblockTime+0x34>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000114 	.word	0x20000114
 8001300:	20000130 	.word	0x20000130
	...

08001310 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <pxCurrentTCBConst2>)
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	6808      	ldr	r0, [r1, #0]
 8001316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800131a:	f380 8809 	msr	PSP, r0
 800131e:	f3bf 8f6f 	isb	sy
 8001322:	f04f 0000 	mov.w	r0, #0
 8001326:	f380 8811 	msr	BASEPRI, r0
 800132a:	4770      	bx	lr
 800132c:	f3af 8000 	nop.w

08001330 <pxCurrentTCBConst2>:
 8001330:	200000ac 	.word	0x200000ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
	...

08001340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001340:	f3ef 8009 	mrs	r0, PSP
 8001344:	f3bf 8f6f 	isb	sy
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <pxCurrentTCBConst>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f01e 0f10 	tst.w	lr, #16
 8001350:	bf08      	it	eq
 8001352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800135a:	6010      	str	r0, [r2, #0]
 800135c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001364:	f380 8811 	msr	BASEPRI, r0
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	f3bf 8f6f 	isb	sy
 8001370:	f7ff ff42 	bl	80011f8 <vTaskSwitchContext>
 8001374:	f04f 0000 	mov.w	r0, #0
 8001378:	f380 8811 	msr	BASEPRI, r0
 800137c:	bc09      	pop	{r0, r3}
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	6808      	ldr	r0, [r1, #0]
 8001382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001386:	f01e 0f10 	tst.w	lr, #16
 800138a:	bf08      	it	eq
 800138c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001390:	f380 8809 	msr	PSP, r0
 8001394:	f3bf 8f6f 	isb	sy
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w

080013a0 <pxCurrentTCBConst>:
 80013a0:	200000ac 	.word	0x200000ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop

080013a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
        __asm volatile
 80013ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b2:	f383 8811 	msr	BASEPRI, r3
 80013b6:	f3bf 8f6f 	isb	sy
 80013ba:	f3bf 8f4f 	dsb	sy
 80013be:	607b      	str	r3, [r7, #4]
    }
 80013c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80013c2:	f000 fe1b 	bl	8001ffc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80013c6:	f7ff fe5b 	bl	8001080 <xTaskIncrementTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80013d0:	f000 fe72 	bl	80020b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <SysTick_Handler+0x50>)
 80013d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e001      	b.n	80013e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80013de:	f000 fe4f 	bl	8002080 <SEGGER_SYSVIEW_RecordExitISR>
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80013ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000ed04 	.word	0xe000ed04

080013fc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <_DoInit+0xa0>)
 8001404:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001406:	22a8      	movs	r2, #168	; 0xa8
 8001408:	2100      	movs	r1, #0
 800140a:	6838      	ldr	r0, [r7, #0]
 800140c:	f001 f81e 	bl	800244c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2203      	movs	r2, #3
 8001414:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2203      	movs	r2, #3
 800141a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <_DoInit+0xa4>)
 8001420:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <_DoInit+0xa8>)
 8001426:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <_DoInit+0xa4>)
 8001446:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <_DoInit+0xac>)
 800144c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2210      	movs	r2, #16
 8001452:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001466:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	e00c      	b.n	800148a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f1c3 030f 	rsb	r3, r3, #15
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <_DoInit+0xb0>)
 8001478:	5cd1      	ldrb	r1, [r2, r3]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	460a      	mov	r2, r1
 8001482:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3301      	adds	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d9ef      	bls.n	8001470 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001490:	f3bf 8f5f 	dmb	sy
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000013c 	.word	0x2000013c
 80014a0:	08002474 	.word	0x08002474
 80014a4:	200001e4 	.word	0x200001e4
 80014a8:	200005e4 	.word	0x200005e4
 80014ac:	08002480 	.word	0x08002480

080014b0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <SEGGER_RTT_ReadNoLock+0x108>)
 80014be:	623b      	str	r3, [r7, #32]
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <SEGGER_RTT_ReadNoLock+0x1e>
 80014ca:	f7ff ff97 	bl	80013fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	3360      	adds	r3, #96	; 0x60
 80014da:	4a37      	ldr	r2, [pc, #220]	; (80015b8 <SEGGER_RTT_ReadNoLock+0x108>)
 80014dc:	4413      	add	r3, r2
 80014de:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80014f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d92b      	bls.n	8001554 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4293      	cmp	r3, r2
 800150c:	bf28      	it	cs
 800150e:	4613      	movcs	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	4413      	add	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001522:	f000 ff85 	bl	8002430 <memcpy>
    NumBytesRead += NumBytesRem;
 8001526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	4413      	add	r3, r2
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	4413      	add	r3, r2
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800153e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4413      	add	r3, r2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154c:	429a      	cmp	r2, r3
 800154e:	d101      	bne.n	8001554 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4293      	cmp	r3, r2
 8001562:	bf28      	it	cs
 8001564:	4613      	movcs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d019      	beq.n	80015a2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	4413      	add	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	6939      	ldr	r1, [r7, #16]
 800157c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800157e:	f000 ff57 	bl	8002430 <memcpy>
    NumBytesRead += NumBytesRem;
 8001582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4413      	add	r3, r2
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800158a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4413      	add	r3, r2
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800159a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4413      	add	r3, r2
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000013c 	.word	0x2000013c

080015bc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00f      	beq.n	80015f2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80015d2:	e002      	b.n	80015da <_EncodeStr+0x1e>
      Len++;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	3301      	adds	r3, #1
 80015d8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f6      	bne.n	80015d4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d901      	bls.n	80015f2 <_EncodeStr+0x36>
      Len = Limit;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2bfe      	cmp	r3, #254	; 0xfe
 80015f6:	d806      	bhi.n	8001606 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60fa      	str	r2, [r7, #12]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e011      	b.n	800162a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	60fa      	str	r2, [r7, #12]
 800160c:	22ff      	movs	r2, #255	; 0xff
 800160e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	60fa      	str	r2, [r7, #12]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	0a19      	lsrs	r1, r3, #8
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60fa      	str	r2, [r7, #12]
 8001626:	b2ca      	uxtb	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800162e:	e00a      	b.n	8001646 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	1c53      	adds	r3, r2, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1c59      	adds	r1, r3, #1
 800163a:	60f9      	str	r1, [r7, #12]
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	701a      	strb	r2, [r3, #0]
    n++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3f0      	bcc.n	8001630 <_EncodeStr+0x74>
  }
  return pPayload;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3307      	adds	r3, #7
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <_HandleIncomingPacket+0xdc>)
 800167c:	7e1b      	ldrb	r3, [r3, #24]
 800167e:	4618      	mov	r0, r3
 8001680:	1cfb      	adds	r3, r7, #3
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff ff13 	bl	80014b0 <SEGGER_RTT_ReadNoLock>
 800168a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d052      	beq.n	8001738 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2b80      	cmp	r3, #128	; 0x80
 8001696:	d031      	beq.n	80016fc <_HandleIncomingPacket+0x88>
 8001698:	2b80      	cmp	r3, #128	; 0x80
 800169a:	dc40      	bgt.n	800171e <_HandleIncomingPacket+0xaa>
 800169c:	2b07      	cmp	r3, #7
 800169e:	dc15      	bgt.n	80016cc <_HandleIncomingPacket+0x58>
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	dd3c      	ble.n	800171e <_HandleIncomingPacket+0xaa>
 80016a4:	3b01      	subs	r3, #1
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d839      	bhi.n	800171e <_HandleIncomingPacket+0xaa>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <_HandleIncomingPacket+0x3c>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016d3 	.word	0x080016d3
 80016b4:	080016d9 	.word	0x080016d9
 80016b8:	080016df 	.word	0x080016df
 80016bc:	080016e5 	.word	0x080016e5
 80016c0:	080016eb 	.word	0x080016eb
 80016c4:	080016f1 	.word	0x080016f1
 80016c8:	080016f7 	.word	0x080016f7
 80016cc:	2b7f      	cmp	r3, #127	; 0x7f
 80016ce:	d035      	beq.n	800173c <_HandleIncomingPacket+0xc8>
 80016d0:	e025      	b.n	800171e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80016d2:	f000 fad3 	bl	8001c7c <SEGGER_SYSVIEW_Start>
      break;
 80016d6:	e036      	b.n	8001746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80016d8:	f000 fb8a 	bl	8001df0 <SEGGER_SYSVIEW_Stop>
      break;
 80016dc:	e033      	b.n	8001746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80016de:	f000 fc5b 	bl	8001f98 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80016e2:	e030      	b.n	8001746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80016e4:	f000 fc44 	bl	8001f70 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80016e8:	e02d      	b.n	8001746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80016ea:	f000 fba7 	bl	8001e3c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80016ee:	e02a      	b.n	8001746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80016f0:	f000 fe3c 	bl	800236c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80016f4:	e027      	b.n	8001746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80016f6:	f000 fe1b 	bl	8002330 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80016fa:	e024      	b.n	8001746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <_HandleIncomingPacket+0xdc>)
 80016fe:	7e1b      	ldrb	r3, [r3, #24]
 8001700:	4618      	mov	r0, r3
 8001702:	1cfb      	adds	r3, r7, #3
 8001704:	2201      	movs	r2, #1
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fed2 	bl	80014b0 <SEGGER_RTT_ReadNoLock>
 800170c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd8a 	bl	8002230 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800171c:	e010      	b.n	8001740 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	da0e      	bge.n	8001744 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <_HandleIncomingPacket+0xdc>)
 8001728:	7e1b      	ldrb	r3, [r3, #24]
 800172a:	4618      	mov	r0, r3
 800172c:	1cfb      	adds	r3, r7, #3
 800172e:	2201      	movs	r2, #1
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff febd 	bl	80014b0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001736:	e005      	b.n	8001744 <_HandleIncomingPacket+0xd0>
    }
  }
 8001738:	bf00      	nop
 800173a:	e004      	b.n	8001746 <_HandleIncomingPacket+0xd2>
      break;
 800173c:	bf00      	nop
 800173e:	e002      	b.n	8001746 <_HandleIncomingPacket+0xd2>
      break;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <_HandleIncomingPacket+0xd2>
      break;
 8001744:	bf00      	nop
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200005f4 	.word	0x200005f4

08001754 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800175a:	2301      	movs	r3, #1
 800175c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
 800176e:	e00b      	b.n	8001788 <_TrySendOverflowPacket+0x34>
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001772:	b2da      	uxtb	r2, r3
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	62f9      	str	r1, [r7, #44]	; 0x2c
 800177a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001784:	09db      	lsrs	r3, r3, #7
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	2b7f      	cmp	r3, #127	; 0x7f
 800178c:	d8f0      	bhi.n	8001770 <_TrySendOverflowPacket+0x1c>
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <_TrySendOverflowPacket+0xe0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	e00b      	b.n	80017d0 <_TrySendOverflowPacket+0x7c>
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	1c59      	adds	r1, r3, #1
 80017c0:	6279      	str	r1, [r7, #36]	; 0x24
 80017c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	09db      	lsrs	r3, r3, #7
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	2b7f      	cmp	r3, #127	; 0x7f
 80017d4:	d8f0      	bhi.n	80017b8 <_TrySendOverflowPacket+0x64>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	627a      	str	r2, [r7, #36]	; 0x24
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 80017e8:	785b      	ldrb	r3, [r3, #1]
 80017ea:	4618      	mov	r0, r3
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7fe fcfa 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80017fc:	4603      	mov	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	3b01      	subs	r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e004      	b.n	8001824 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <_TrySendOverflowPacket+0xdc>)
 8001822:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001824:	693b      	ldr	r3, [r7, #16]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3730      	adds	r7, #48	; 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200005f4 	.word	0x200005f4
 8001834:	e0001004 	.word	0xe0001004

08001838 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001844:	4b98      	ldr	r3, [pc, #608]	; (8001aa8 <_SendPacket+0x270>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d010      	beq.n	800186e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800184c:	4b96      	ldr	r3, [pc, #600]	; (8001aa8 <_SendPacket+0x270>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 812d 	beq.w	8001ab0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001856:	4b94      	ldr	r3, [pc, #592]	; (8001aa8 <_SendPacket+0x270>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d109      	bne.n	8001872 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800185e:	f7ff ff79 	bl	8001754 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001862:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <_SendPacket+0x270>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	f040 8124 	bne.w	8001ab4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800186c:	e001      	b.n	8001872 <_SendPacket+0x3a>
    goto Send;
 800186e:	bf00      	nop
 8001870:	e000      	b.n	8001874 <_SendPacket+0x3c>
Send:
 8001872:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b1f      	cmp	r3, #31
 8001878:	d809      	bhi.n	800188e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800187a:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <_SendPacket+0x270>)
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 8115 	bne.w	8001ab8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b17      	cmp	r3, #23
 8001892:	d807      	bhi.n	80018a4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3b01      	subs	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e0c4      	b.n	8001a2e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b7f      	cmp	r3, #127	; 0x7f
 80018b0:	d912      	bls.n	80018d8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	09da      	lsrs	r2, r3, #7
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	60fa      	str	r2, [r7, #12]
 80018cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e006      	b.n	80018e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3b01      	subs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b7e      	cmp	r3, #126	; 0x7e
 80018ea:	d807      	bhi.n	80018fc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e098      	b.n	8001a2e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001902:	d212      	bcs.n	800192a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	09da      	lsrs	r2, r3, #7
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	3a01      	subs	r2, #1
 800191c:	60fa      	str	r2, [r7, #12]
 800191e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001922:	b2da      	uxtb	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e081      	b.n	8001a2e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001930:	d21d      	bcs.n	800196e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0b9a      	lsrs	r2, r3, #14
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3b01      	subs	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	09db      	lsrs	r3, r3, #7
 8001946:	b2db      	uxtb	r3, r3
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	3a01      	subs	r2, #1
 800194c:	60fa      	str	r2, [r7, #12]
 800194e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	3a01      	subs	r2, #1
 8001960:	60fa      	str	r2, [r7, #12]
 8001962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001966:	b2da      	uxtb	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e05f      	b.n	8001a2e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001974:	d228      	bcs.n	80019c8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0d5a      	lsrs	r2, r3, #21
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3b01      	subs	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0b9b      	lsrs	r3, r3, #14
 800198a:	b2db      	uxtb	r3, r3
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	3a01      	subs	r2, #1
 8001990:	60fa      	str	r2, [r7, #12]
 8001992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	09db      	lsrs	r3, r3, #7
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	3a01      	subs	r2, #1
 80019a6:	60fa      	str	r2, [r7, #12]
 80019a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	3a01      	subs	r2, #1
 80019ba:	60fa      	str	r2, [r7, #12]
 80019bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e032      	b.n	8001a2e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0f1a      	lsrs	r2, r3, #28
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	0d5b      	lsrs	r3, r3, #21
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	3a01      	subs	r2, #1
 80019e2:	60fa      	str	r2, [r7, #12]
 80019e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0b9b      	lsrs	r3, r3, #14
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	3a01      	subs	r2, #1
 80019f8:	60fa      	str	r2, [r7, #12]
 80019fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	09db      	lsrs	r3, r3, #7
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	3a01      	subs	r2, #1
 8001a0e:	60fa      	str	r2, [r7, #12]
 8001a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	3a01      	subs	r2, #1
 8001a22:	60fa      	str	r2, [r7, #12]
 8001a24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <_SendPacket+0x274>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <_SendPacket+0x270>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	e00b      	b.n	8001a60 <_SendPacket+0x228>
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	1c59      	adds	r1, r3, #1
 8001a50:	6279      	str	r1, [r7, #36]	; 0x24
 8001a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	09db      	lsrs	r3, r3, #7
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	2b7f      	cmp	r3, #127	; 0x7f
 8001a64:	d8f0      	bhi.n	8001a48 <_SendPacket+0x210>
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	627a      	str	r2, [r7, #36]	; 0x24
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <_SendPacket+0x270>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	f7fe fbb3 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001a8a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_SendPacket+0x270>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	60d3      	str	r3, [r2, #12]
 8001a98:	e00f      	b.n	8001aba <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <_SendPacket+0x270>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b01      	ldr	r3, [pc, #4]	; (8001aa8 <_SendPacket+0x270>)
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e008      	b.n	8001aba <_SendPacket+0x282>
 8001aa8:	200005f4 	.word	0x200005f4
 8001aac:	e0001004 	.word	0xe0001004
    goto SendDone;
 8001ab0:	bf00      	nop
 8001ab2:	e002      	b.n	8001aba <_SendPacket+0x282>
      goto SendDone;
 8001ab4:	bf00      	nop
 8001ab6:	e000      	b.n	8001aba <_SendPacket+0x282>
      goto SendDone;
 8001ab8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <_SendPacket+0x2d4>)
 8001abc:	7e1b      	ldrb	r3, [r3, #24]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <_SendPacket+0x2d8>)
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	336c      	adds	r3, #108	; 0x6c
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <_SendPacket+0x2d4>)
 8001ad2:	7e1b      	ldrb	r3, [r3, #24]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <_SendPacket+0x2d8>)
 8001ad8:	4603      	mov	r3, r0
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4403      	add	r3, r0
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3370      	adds	r3, #112	; 0x70
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d00b      	beq.n	8001b02 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <_SendPacket+0x2d4>)
 8001aec:	789b      	ldrb	r3, [r3, #2]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d107      	bne.n	8001b02 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <_SendPacket+0x2d4>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001af8:	f7ff fdbc 	bl	8001674 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <_SendPacket+0x2d4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200005f4 	.word	0x200005f4
 8001b10:	2000013c 	.word	0x2000013c

08001b14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8001b20:	f04f 0120 	mov.w	r1, #32
 8001b24:	f381 8811 	msr	BASEPRI, r1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4808      	ldr	r0, [pc, #32]	; (8001b4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001b2c:	f7ff fd96 	bl	800165c <_PreparePacket>
 8001b30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	68b8      	ldr	r0, [r7, #8]
 8001b38:	f7ff fe7e 	bl	8001838 <_SendPacket>
  RECORD_END();
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f383 8811 	msr	BASEPRI, r3
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000624 	.word	0x20000624

08001b50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8001b5e:	f04f 0120 	mov.w	r1, #32
 8001b62:	f381 8811 	msr	BASEPRI, r1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	4816      	ldr	r0, [pc, #88]	; (8001bc4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001b6a:	f7ff fd77 	bl	800165c <_PreparePacket>
 8001b6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e00b      	b.n	8001b96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	1c59      	adds	r1, r3, #1
 8001b86:	61f9      	str	r1, [r7, #28]
 8001b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	09db      	lsrs	r3, r3, #7
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9a:	d8f0      	bhi.n	8001b7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	61fa      	str	r2, [r7, #28]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f7ff fe41 	bl	8001838 <_SendPacket>
  RECORD_END();
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f383 8811 	msr	BASEPRI, r3
}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000624 	.word	0x20000624

08001bc8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8001bd8:	f04f 0120 	mov.w	r1, #32
 8001bdc:	f381 8811 	msr	BASEPRI, r1
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	4825      	ldr	r0, [pc, #148]	; (8001c78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001be4:	f7ff fd3a 	bl	800165c <_PreparePacket>
 8001be8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf6:	e00b      	b.n	8001c10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	09db      	lsrs	r3, r3, #7
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	2b7f      	cmp	r3, #127	; 0x7f
 8001c14:	d8f0      	bhi.n	8001bf8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	623b      	str	r3, [r7, #32]
 8001c2e:	e00b      	b.n	8001c48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	6279      	str	r1, [r7, #36]	; 0x24
 8001c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	09db      	lsrs	r3, r3, #7
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4c:	d8f0      	bhi.n	8001c30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	627a      	str	r2, [r7, #36]	; 0x24
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	6979      	ldr	r1, [r7, #20]
 8001c62:	69b8      	ldr	r0, [r7, #24]
 8001c64:	f7ff fde8 	bl	8001838 <_SendPacket>
  RECORD_END();
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f383 8811 	msr	BASEPRI, r3
}
 8001c6e:	bf00      	nop
 8001c70:	3730      	adds	r7, #48	; 0x30
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000624 	.word	0x20000624

08001c7c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001c82:	4b58      	ldr	r3, [pc, #352]	; (8001de4 <SEGGER_SYSVIEW_Start+0x168>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001c88:	f3ef 8311 	mrs	r3, BASEPRI
 8001c8c:	f04f 0120 	mov.w	r1, #32
 8001c90:	f381 8811 	msr	BASEPRI, r1
 8001c94:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <SEGGER_SYSVIEW_Start+0x168>)
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	220a      	movs	r2, #10
 8001c9c:	4952      	ldr	r1, [pc, #328]	; (8001de8 <SEGGER_SYSVIEW_Start+0x16c>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe faa6 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001caa:	200a      	movs	r0, #10
 8001cac:	f7ff ff32 	bl	8001b14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8001cb4:	f04f 0120 	mov.w	r1, #32
 8001cb8:	f381 8811 	msr	BASEPRI, r1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	484b      	ldr	r0, [pc, #300]	; (8001dec <SEGGER_SYSVIEW_Start+0x170>)
 8001cc0:	f7ff fccc 	bl	800165c <_PreparePacket>
 8001cc4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <SEGGER_SYSVIEW_Start+0x168>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd4:	e00b      	b.n	8001cee <SEGGER_SYSVIEW_Start+0x72>
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	1c59      	adds	r1, r3, #1
 8001cde:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001ce0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	09db      	lsrs	r3, r3, #7
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf2:	d8f0      	bhi.n	8001cd6 <SEGGER_SYSVIEW_Start+0x5a>
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <SEGGER_SYSVIEW_Start+0x168>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	e00b      	b.n	8001d28 <SEGGER_SYSVIEW_Start+0xac>
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	1c59      	adds	r1, r3, #1
 8001d18:	6279      	str	r1, [r7, #36]	; 0x24
 8001d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	09db      	lsrs	r3, r3, #7
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2c:	d8f0      	bhi.n	8001d10 <SEGGER_SYSVIEW_Start+0x94>
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	627a      	str	r2, [r7, #36]	; 0x24
 8001d34:	6a3a      	ldr	r2, [r7, #32]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <SEGGER_SYSVIEW_Start+0x168>)
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	e00b      	b.n	8001d62 <SEGGER_SYSVIEW_Start+0xe6>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	1c59      	adds	r1, r3, #1
 8001d52:	61f9      	str	r1, [r7, #28]
 8001d54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	09db      	lsrs	r3, r3, #7
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b7f      	cmp	r3, #127	; 0x7f
 8001d66:	d8f0      	bhi.n	8001d4a <SEGGER_SYSVIEW_Start+0xce>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	61fa      	str	r2, [r7, #28]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	e00b      	b.n	8001d9a <SEGGER_SYSVIEW_Start+0x11e>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	1c59      	adds	r1, r3, #1
 8001d8a:	6179      	str	r1, [r7, #20]
 8001d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	09db      	lsrs	r3, r3, #7
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9e:	d8f0      	bhi.n	8001d82 <SEGGER_SYSVIEW_Start+0x106>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	617a      	str	r2, [r7, #20]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001db0:	2218      	movs	r2, #24
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fd3f 	bl	8001838 <_SendPacket>
      RECORD_END();
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <SEGGER_SYSVIEW_Start+0x168>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SEGGER_SYSVIEW_Start+0x168>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001dce:	f000 f8e3 	bl	8001f98 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001dd2:	f000 f8cd 	bl	8001f70 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001dd6:	f000 fac9 	bl	800236c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001dda:	bf00      	nop
 8001ddc:	3730      	adds	r7, #48	; 0x30
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200005f4 	.word	0x200005f4
 8001de8:	08002494 	.word	0x08002494
 8001dec:	20000624 	.word	0x20000624

08001df0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001df6:	f3ef 8311 	mrs	r3, BASEPRI
 8001dfa:	f04f 0120 	mov.w	r1, #32
 8001dfe:	f381 8811 	msr	BASEPRI, r1
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <SEGGER_SYSVIEW_Stop+0x44>)
 8001e06:	f7ff fc29 	bl	800165c <_PreparePacket>
 8001e0a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <SEGGER_SYSVIEW_Stop+0x48>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001e14:	220b      	movs	r2, #11
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f7ff fd0d 	bl	8001838 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <SEGGER_SYSVIEW_Stop+0x48>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f383 8811 	msr	BASEPRI, r3
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000624 	.word	0x20000624
 8001e38:	200005f4 	.word	0x200005f4

08001e3c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001e42:	f3ef 8311 	mrs	r3, BASEPRI
 8001e46:	f04f 0120 	mov.w	r1, #32
 8001e4a:	f381 8811 	msr	BASEPRI, r1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4845      	ldr	r0, [pc, #276]	; (8001f68 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001e52:	f7ff fc03 	bl	800165c <_PreparePacket>
 8001e56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e66:	e00b      	b.n	8001e80 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	09db      	lsrs	r3, r3, #7
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	2b7f      	cmp	r3, #127	; 0x7f
 8001e84:	d8f0      	bhi.n	8001e68 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	623b      	str	r3, [r7, #32]
 8001ea0:	e00b      	b.n	8001eba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	1c59      	adds	r1, r3, #1
 8001eaa:	6279      	str	r1, [r7, #36]	; 0x24
 8001eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	09db      	lsrs	r3, r3, #7
 8001eb8:	623b      	str	r3, [r7, #32]
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ebe:	d8f0      	bhi.n	8001ea2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e00b      	b.n	8001ef4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	1c59      	adds	r1, r3, #1
 8001ee4:	61f9      	str	r1, [r7, #28]
 8001ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	09db      	lsrs	r3, r3, #7
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ef8:	d8f0      	bhi.n	8001edc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	61fa      	str	r2, [r7, #28]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e00b      	b.n	8001f2c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	6179      	str	r1, [r7, #20]
 8001f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	09db      	lsrs	r3, r3, #7
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f30:	d8f0      	bhi.n	8001f14 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	617a      	str	r2, [r7, #20]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001f42:	2218      	movs	r2, #24
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f7ff fc76 	bl	8001838 <_SendPacket>
  RECORD_END();
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	4798      	blx	r3
  }
}
 8001f60:	bf00      	nop
 8001f62:	3730      	adds	r7, #48	; 0x30
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000624 	.word	0x20000624
 8001f6c:	200005f4 	.word	0x200005f4

08001f70 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001f86:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4798      	blx	r3
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200005f4 	.word	0x200005f4

08001f98 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01a      	beq.n	8001fdc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4798      	blx	r3
 8001fb8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001fbc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	000a      	movs	r2, r1
 8001fcc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001fce:	4613      	mov	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	200d      	movs	r0, #13
 8001fd6:	f7ff fdf7 	bl	8001bc8 <SEGGER_SYSVIEW_RecordU32x2>
 8001fda:	e006      	b.n	8001fea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	200c      	movs	r0, #12
 8001fe4:	f7ff fdb4 	bl	8001b50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200005f4 	.word	0x200005f4
 8001ff8:	e0001004 	.word	0xe0001004

08001ffc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002002:	f3ef 8311 	mrs	r3, BASEPRI
 8002006:	f04f 0120 	mov.w	r1, #32
 800200a:	f381 8811 	msr	BASEPRI, r1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4819      	ldr	r0, [pc, #100]	; (8002078 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002012:	f7ff fb23 	bl	800165c <_PreparePacket>
 8002016:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002024:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e00b      	b.n	8002048 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	6179      	str	r1, [r7, #20]
 800203a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	09db      	lsrs	r3, r3, #7
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b7f      	cmp	r3, #127	; 0x7f
 800204c:	d8f0      	bhi.n	8002030 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	617a      	str	r2, [r7, #20]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800205e:	2202      	movs	r2, #2
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68b8      	ldr	r0, [r7, #8]
 8002064:	f7ff fbe8 	bl	8001838 <_SendPacket>
  RECORD_END();
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f383 8811 	msr	BASEPRI, r3
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000624 	.word	0x20000624
 800207c:	e000ed04 	.word	0xe000ed04

08002080 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002086:	f3ef 8311 	mrs	r3, BASEPRI
 800208a:	f04f 0120 	mov.w	r1, #32
 800208e:	f381 8811 	msr	BASEPRI, r1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002096:	f7ff fae1 	bl	800165c <_PreparePacket>
 800209a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800209c:	2203      	movs	r2, #3
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	6838      	ldr	r0, [r7, #0]
 80020a2:	f7ff fbc9 	bl	8001838 <_SendPacket>
  RECORD_END();
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f383 8811 	msr	BASEPRI, r3
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000624 	.word	0x20000624

080020b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80020be:	f3ef 8311 	mrs	r3, BASEPRI
 80020c2:	f04f 0120 	mov.w	r1, #32
 80020c6:	f381 8811 	msr	BASEPRI, r1
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80020ce:	f7ff fac5 	bl	800165c <_PreparePacket>
 80020d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80020d4:	2212      	movs	r2, #18
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	6838      	ldr	r0, [r7, #0]
 80020da:	f7ff fbad 	bl	8001838 <_SendPacket>
  RECORD_END();
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f383 8811 	msr	BASEPRI, r3
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000624 	.word	0x20000624

080020f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80020f6:	f3ef 8311 	mrs	r3, BASEPRI
 80020fa:	f04f 0120 	mov.w	r1, #32
 80020fe:	f381 8811 	msr	BASEPRI, r1
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002106:	f7ff faa9 	bl	800165c <_PreparePacket>
 800210a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800210c:	2211      	movs	r2, #17
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f7ff fb91 	bl	8001838 <_SendPacket>
  RECORD_END();
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f383 8811 	msr	BASEPRI, r3
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000624 	.word	0x20000624

08002128 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002130:	f3ef 8311 	mrs	r3, BASEPRI
 8002134:	f04f 0120 	mov.w	r1, #32
 8002138:	f381 8811 	msr	BASEPRI, r1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	4819      	ldr	r0, [pc, #100]	; (80021a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8002140:	f7ff fa8c 	bl	800165c <_PreparePacket>
 8002144:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e00b      	b.n	8002176 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	61f9      	str	r1, [r7, #28]
 8002168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	09db      	lsrs	r3, r3, #7
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b7f      	cmp	r3, #127	; 0x7f
 800217a:	d8f0      	bhi.n	800215e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	61fa      	str	r2, [r7, #28]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800218c:	2204      	movs	r2, #4
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	6938      	ldr	r0, [r7, #16]
 8002192:	f7ff fb51 	bl	8001838 <_SendPacket>
  RECORD_END();
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f383 8811 	msr	BASEPRI, r3
}
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000624 	.word	0x20000624
 80021a8:	200005f4 	.word	0x200005f4

080021ac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80021b4:	f3ef 8311 	mrs	r3, BASEPRI
 80021b8:	f04f 0120 	mov.w	r1, #32
 80021bc:	f381 8811 	msr	BASEPRI, r1
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80021c4:	f7ff fa4a 	bl	800165c <_PreparePacket>
 80021c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	e00b      	b.n	80021fa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	1c59      	adds	r1, r3, #1
 80021ea:	61f9      	str	r1, [r7, #28]
 80021ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	09db      	lsrs	r3, r3, #7
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b7f      	cmp	r3, #127	; 0x7f
 80021fe:	d8f0      	bhi.n	80021e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	61fa      	str	r2, [r7, #28]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002210:	2206      	movs	r2, #6
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	6938      	ldr	r0, [r7, #16]
 8002216:	f7ff fb0f 	bl	8001838 <_SendPacket>
  RECORD_END();
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f383 8811 	msr	BASEPRI, r3
}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000624 	.word	0x20000624
 800222c:	200005f4 	.word	0x200005f4

08002230 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d06d      	beq.n	800231e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002242:	4b39      	ldr	r3, [pc, #228]	; (8002328 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
 800224c:	e008      	b.n	8002260 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	3301      	adds	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002264:	429a      	cmp	r2, r3
 8002266:	d3f2      	bcc.n	800224e <SEGGER_SYSVIEW_SendModule+0x1e>
 8002268:	e000      	b.n	800226c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800226a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d055      	beq.n	800231e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002272:	f3ef 8311 	mrs	r3, BASEPRI
 8002276:	f04f 0120 	mov.w	r1, #32
 800227a:	f381 8811 	msr	BASEPRI, r1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	482a      	ldr	r0, [pc, #168]	; (800232c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002282:	f7ff f9eb 	bl	800165c <_PreparePacket>
 8002286:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	e00b      	b.n	80022ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1c59      	adds	r1, r3, #1
 800229e:	6279      	str	r1, [r7, #36]	; 0x24
 80022a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	09db      	lsrs	r3, r3, #7
 80022ac:	623b      	str	r3, [r7, #32]
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	2b7f      	cmp	r3, #127	; 0x7f
 80022b2:	d8f0      	bhi.n	8002296 <SEGGER_SYSVIEW_SendModule+0x66>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	627a      	str	r2, [r7, #36]	; 0x24
 80022ba:	6a3a      	ldr	r2, [r7, #32]
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e00b      	b.n	80022e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	1c59      	adds	r1, r3, #1
 80022d8:	61f9      	str	r1, [r7, #28]
 80022da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	09db      	lsrs	r3, r3, #7
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b7f      	cmp	r3, #127	; 0x7f
 80022ec:	d8f0      	bhi.n	80022d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	61fa      	str	r2, [r7, #28]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	4619      	mov	r1, r3
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff f958 	bl	80015bc <_EncodeStr>
 800230c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800230e:	2216      	movs	r2, #22
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	6938      	ldr	r0, [r7, #16]
 8002314:	f7ff fa90 	bl	8001838 <_SendPacket>
      RECORD_END();
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800231e:	bf00      	nop
 8002320:	3730      	adds	r7, #48	; 0x30
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000061c 	.word	0x2000061c
 800232c:	20000624 	.word	0x20000624

08002330 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00f      	beq.n	800235e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f2      	bne.n	8002344 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000061c 	.word	0x2000061c

0800236c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002372:	f3ef 8311 	mrs	r3, BASEPRI
 8002376:	f04f 0120 	mov.w	r1, #32
 800237a:	f381 8811 	msr	BASEPRI, r1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4817      	ldr	r0, [pc, #92]	; (80023e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002382:	f7ff f96b 	bl	800165c <_PreparePacket>
 8002386:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e00b      	b.n	80023b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	6179      	str	r1, [r7, #20]
 80023a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	09db      	lsrs	r3, r3, #7
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b7f      	cmp	r3, #127	; 0x7f
 80023b4:	d8f0      	bhi.n	8002398 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	617a      	str	r2, [r7, #20]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80023c6:	221b      	movs	r2, #27
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68b8      	ldr	r0, [r7, #8]
 80023cc:	f7ff fa34 	bl	8001838 <_SendPacket>
  RECORD_END();
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f383 8811 	msr	BASEPRI, r3
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000624 	.word	0x20000624
 80023e4:	20000620 	.word	0x20000620

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	4d0d      	ldr	r5, [pc, #52]	; (8002420 <__libc_init_array+0x38>)
 80023ec:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <__libc_init_array+0x3c>)
 80023ee:	1b64      	subs	r4, r4, r5
 80023f0:	10a4      	asrs	r4, r4, #2
 80023f2:	2600      	movs	r6, #0
 80023f4:	42a6      	cmp	r6, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	4d0b      	ldr	r5, [pc, #44]	; (8002428 <__libc_init_array+0x40>)
 80023fa:	4c0c      	ldr	r4, [pc, #48]	; (800242c <__libc_init_array+0x44>)
 80023fc:	f000 f82e 	bl	800245c <_init>
 8002400:	1b64      	subs	r4, r4, r5
 8002402:	10a4      	asrs	r4, r4, #2
 8002404:	2600      	movs	r6, #0
 8002406:	42a6      	cmp	r6, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002410:	4798      	blx	r3
 8002412:	3601      	adds	r6, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	f855 3b04 	ldr.w	r3, [r5], #4
 800241a:	4798      	blx	r3
 800241c:	3601      	adds	r6, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	080024a0 	.word	0x080024a0
 8002424:	080024a0 	.word	0x080024a0
 8002428:	080024a0 	.word	0x080024a0
 800242c:	080024a4 	.word	0x080024a4

08002430 <memcpy>:
 8002430:	440a      	add	r2, r1
 8002432:	4291      	cmp	r1, r2
 8002434:	f100 33ff 	add.w	r3, r0, #4294967295
 8002438:	d100      	bne.n	800243c <memcpy+0xc>
 800243a:	4770      	bx	lr
 800243c:	b510      	push	{r4, lr}
 800243e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002446:	4291      	cmp	r1, r2
 8002448:	d1f9      	bne.n	800243e <memcpy+0xe>
 800244a:	bd10      	pop	{r4, pc}

0800244c <memset>:
 800244c:	4402      	add	r2, r0
 800244e:	4603      	mov	r3, r0
 8002450:	4293      	cmp	r3, r2
 8002452:	d100      	bne.n	8002456 <memset+0xa>
 8002454:	4770      	bx	lr
 8002456:	f803 1b01 	strb.w	r1, [r3], #1
 800245a:	e7f9      	b.n	8002450 <memset+0x4>

0800245c <_init>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr

08002468 <_fini>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	bf00      	nop
 800246c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246e:	bc08      	pop	{r3}
 8002470:	469e      	mov	lr, r3
 8002472:	4770      	bx	lr
