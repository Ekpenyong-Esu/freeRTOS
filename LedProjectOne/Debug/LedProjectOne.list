
LedProjectOne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006948  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00014488  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144b4  200144b4  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ac1  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed5  00000000  00000000  00034b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000379f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  00038d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c92  00000000  00000000  00039f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015537  00000000  00000000  0005fbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e733d  00000000  00000000  00075119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c456  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050f4  00000000  00000000  0015c4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ae0 	.word	0x08006ae0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000030 	.word	0x20000030
 80001ec:	08006ae0 	.word	0x08006ae0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e3c 	.word	0x20012e3c

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <GreenOn>:
#include "STM32_Disc1_Gpio.h"
#include "main.h"



void GreenOn ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);}
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <GreenOn+0x14>)
 8000594:	f000 ffb8 	bl	8001508 <HAL_GPIO_WritePin>
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021800 	.word	0x40021800

080005a0 <GreenOff>:
void GreenOff ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);}
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <GreenOff+0x14>)
 80005ac:	f000 ffac 	bl	8001508 <HAL_GPIO_WritePin>
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021800 	.word	0x40021800

080005b8 <BlueOn>:
LED GreenLed = { GreenOn, GreenOff };   // initialize the GreenLed struct




void BlueOn ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);}
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <BlueOn+0x14>)
 80005c4:	f000 ffa0 	bl	8001508 <HAL_GPIO_WritePin>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021800 	.word	0x40021800

080005d0 <BlueOff>:
void BlueOff ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <BlueOff+0x14>)
 80005dc:	f000 ff94 	bl	8001508 <HAL_GPIO_WritePin>
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021800 	.word	0x40021800

080005e8 <RedOn>:
LED BlueLed = { BlueOn, BlueOff }; // initialize the BlueLed struct




void RedOn ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);}
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4802      	ldr	r0, [pc, #8]	; (80005fc <RedOn+0x14>)
 80005f4:	f000 ff88 	bl	8001508 <HAL_GPIO_WritePin>
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021800 	.word	0x40021800

08000600 <RedOff>:
void RedOff ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);}
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	4802      	ldr	r0, [pc, #8]	; (8000614 <RedOff+0x14>)
 800060c:	f000 ff7c 	bl	8001508 <HAL_GPIO_WritePin>
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021800 	.word	0x40021800

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fca3 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f843 	bl	80006ac <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f8ad 	bl	8000784 <MX_GPIO_Init>
  // 128 * 4 = 512 bytes
  //(recommended min stack size per task)
  const static uint32_t stackSize = 128;


  SEGGER_SYSVIEW_Conf();
 800062a:	f006 f8cd 	bl	80067c8 <SEGGER_SYSVIEW_Conf>
  //HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS



  if (xTaskCreate(Task1, "task1", stackSize, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS)
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <main+0x78>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	b29a      	uxth	r2, r3
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	4915      	ldr	r1, [pc, #84]	; (8000694 <main+0x7c>)
 8000640:	4815      	ldr	r0, [pc, #84]	; (8000698 <main+0x80>)
 8000642:	f002 fced 	bl	8003020 <xTaskCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d11f      	bne.n	800068c <main+0x74>
  {
	  if (xTaskCreate(Task2, "task2", stackSize, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS)
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0x78>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	b29a      	uxth	r2, r3
 8000652:	2300      	movs	r3, #0
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2301      	movs	r3, #1
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	490f      	ldr	r1, [pc, #60]	; (800069c <main+0x84>)
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0x88>)
 8000660:	f002 fcde 	bl	8003020 <xTaskCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d110      	bne.n	800068c <main+0x74>
	  {
		  if (xTaskCreate(Task3, "task3", stackSize, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS)
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <main+0x78>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b29a      	uxth	r2, r3
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2301      	movs	r3, #1
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	490a      	ldr	r1, [pc, #40]	; (80006a4 <main+0x8c>)
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <main+0x90>)
 800067e:	f002 fccf 	bl	8003020 <xTaskCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d101      	bne.n	800068c <main+0x74>
		  {
			  //start the scheduler - shouldn't return unless there's a problem
			  vTaskStartScheduler();
 8000688:	f002 fe66 	bl	8003358 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x74>
 800068e:	bf00      	nop
 8000690:	08006c30 	.word	0x08006c30
 8000694:	08006af8 	.word	0x08006af8
 8000698:	08000c5d 	.word	0x08000c5d
 800069c:	08006b00 	.word	0x08006b00
 80006a0:	08000c8d 	.word	0x08000c8d
 80006a4:	08006b08 	.word	0x08006b08
 80006a8:	08000cbd 	.word	0x08000cbd

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fa08 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemClock_Config+0xd0>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a28      	ldr	r2, [pc, #160]	; (800077c <SystemClock_Config+0xd0>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemClock_Config+0xd0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemClock_Config+0xd4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xd4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000720:	2308      	movs	r3, #8
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000724:	2332      	movs	r3, #50	; 0x32
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000728:	2304      	movs	r3, #4
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072c:	2307      	movs	r3, #7
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 ff01 	bl	800153c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 fb0c 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000750:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f962 	bl	8001a2c <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800076e:	f000 faf5 	bl	8000d5c <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	4bb2      	ldr	r3, [pc, #712]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4ab1      	ldr	r2, [pc, #708]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4baf      	ldr	r3, [pc, #700]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	4bab      	ldr	r3, [pc, #684]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4aaa      	ldr	r2, [pc, #680]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4ba8      	ldr	r3, [pc, #672]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4ba4      	ldr	r3, [pc, #656]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4aa3      	ldr	r2, [pc, #652]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4ba1      	ldr	r3, [pc, #644]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b9d      	ldr	r3, [pc, #628]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a9c      	ldr	r2, [pc, #624]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b9a      	ldr	r3, [pc, #616]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b96      	ldr	r3, [pc, #600]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a95      	ldr	r2, [pc, #596]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b93      	ldr	r3, [pc, #588]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b8f      	ldr	r3, [pc, #572]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a8e      	ldr	r2, [pc, #568]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b8c      	ldr	r3, [pc, #560]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b88      	ldr	r3, [pc, #544]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a87      	ldr	r2, [pc, #540]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b85      	ldr	r3, [pc, #532]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a80      	ldr	r2, [pc, #512]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2116      	movs	r1, #22
 800087e:	487b      	ldr	r0, [pc, #492]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 8000880:	f000 fe42 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4879      	ldr	r0, [pc, #484]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 800088a:	f000 fe3d 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000894:	4877      	ldr	r0, [pc, #476]	; (8000a74 <MX_GPIO_Init+0x2f0>)
 8000896:	f000 fe37 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80008a0:	4875      	ldr	r0, [pc, #468]	; (8000a78 <MX_GPIO_Init+0x2f4>)
 80008a2:	f000 fe31 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	486e      	ldr	r0, [pc, #440]	; (8000a7c <MX_GPIO_Init+0x2f8>)
 80008c4:	f000 fc74 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80008c8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80008da:	2305      	movs	r3, #5
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4865      	ldr	r0, [pc, #404]	; (8000a7c <MX_GPIO_Init+0x2f8>)
 80008e6:	f000 fc63 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008fc:	230e      	movs	r3, #14
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	485d      	ldr	r0, [pc, #372]	; (8000a7c <MX_GPIO_Init+0x2f8>)
 8000908:	f000 fc52 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800090c:	2301      	movs	r3, #1
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800091c:	230c      	movs	r3, #12
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4851      	ldr	r0, [pc, #324]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 8000928:	f000 fc42 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800092c:	2316      	movs	r3, #22
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	484a      	ldr	r0, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 8000944:	f000 fc34 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000948:	f248 0307 	movw	r3, #32775	; 0x8007
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4844      	ldr	r0, [pc, #272]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 8000960:	f000 fc26 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000964:	f641 0358 	movw	r3, #6232	; 0x1858
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000976:	230e      	movs	r3, #14
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	483b      	ldr	r0, [pc, #236]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 8000982:	f000 fc15 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 800099e:	f000 fc07 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	482d      	ldr	r0, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 80009b8:	f000 fbfa 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009bc:	2303      	movs	r3, #3
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009cc:	2309      	movs	r3, #9
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	482a      	ldr	r0, [pc, #168]	; (8000a80 <MX_GPIO_Init+0x2fc>)
 80009d8:	f000 fbea 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009dc:	2304      	movs	r3, #4
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4824      	ldr	r0, [pc, #144]	; (8000a80 <MX_GPIO_Init+0x2fc>)
 80009f0:	f000 fbde 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009f4:	f248 1333 	movw	r3, #33075	; 0x8133
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a06:	230c      	movs	r3, #12
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4819      	ldr	r0, [pc, #100]	; (8000a78 <MX_GPIO_Init+0x2f4>)
 8000a12:	f000 fbcd 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a16:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x300>)
 8000a34:	f000 fbbc 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a38:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a4a:	230e      	movs	r3, #14
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <MX_GPIO_Init+0x2fc>)
 8000a56:	f000 fbab 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a5a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a64:	e010      	b.n	8000a88 <MX_GPIO_Init+0x304>
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	40021400 	.word	0x40021400
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a90:	230c      	movs	r3, #12
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	486b      	ldr	r0, [pc, #428]	; (8000c48 <MX_GPIO_Init+0x4c4>)
 8000a9c:	f000 fb88 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4864      	ldr	r0, [pc, #400]	; (8000c48 <MX_GPIO_Init+0x4c4>)
 8000ab6:	f000 fb7b 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000aba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	485d      	ldr	r0, [pc, #372]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000ad8:	f000 fb6a 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4856      	ldr	r0, [pc, #344]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000af2:	f000 fb5d 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000af6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	484f      	ldr	r0, [pc, #316]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000b10:	f000 fb4e 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b14:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b26:	230e      	movs	r3, #14
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4847      	ldr	r0, [pc, #284]	; (8000c50 <MX_GPIO_Init+0x4cc>)
 8000b32:	f000 fb3d 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b36:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b48:	230e      	movs	r3, #14
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4840      	ldr	r0, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x4d0>)
 8000b54:	f000 fb2c 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5e:	2312      	movs	r3, #18
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4837      	ldr	r0, [pc, #220]	; (8000c54 <MX_GPIO_Init+0x4d0>)
 8000b76:	f000 fb1b 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b80:	2312      	movs	r3, #18
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4830      	ldr	r0, [pc, #192]	; (8000c58 <MX_GPIO_Init+0x4d4>)
 8000b98:	f000 fb0a 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4827      	ldr	r0, [pc, #156]	; (8000c58 <MX_GPIO_Init+0x4d4>)
 8000bba:	f000 faf9 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bbe:	2348      	movs	r3, #72	; 0x48
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bce:	230e      	movs	r3, #14
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481c      	ldr	r0, [pc, #112]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000bda:	f000 fae9 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8000bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bf0:	2309      	movs	r3, #9
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4815      	ldr	r0, [pc, #84]	; (8000c50 <MX_GPIO_Init+0x4cc>)
 8000bfc:	f000 fad8 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000c00:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_GPIO_Init+0x4cc>)
 8000c1a:	f000 fac9 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c1e:	2360      	movs	r3, #96	; 0x60
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_GPIO_Init+0x4c4>)
 8000c3a:	f000 fab9 	bl	80011b0 <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020000 	.word	0x40020000

08000c5c <Task1>:




void Task1(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  while(1)
  {
	  SEGGER_SYSVIEW_PrintfHost("hey there!\n");
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <Task1+0x28>)
 8000c66:	f005 fd31 	bl	80066cc <SEGGER_SYSVIEW_PrintfHost>
	  GreenLed.On();
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <Task1+0x2c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4798      	blx	r3
	  vTaskDelay(105/ portTICK_PERIOD_MS);
 8000c70:	2069      	movs	r0, #105	; 0x69
 8000c72:	f002 fb39 	bl	80032e8 <vTaskDelay>
	  GreenLed.Off();
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <Task1+0x2c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4798      	blx	r3
	  vTaskDelay(100/ portTICK_PERIOD_MS);
 8000c7c:	2064      	movs	r0, #100	; 0x64
 8000c7e:	f002 fb33 	bl	80032e8 <vTaskDelay>
	  SEGGER_SYSVIEW_PrintfHost("hey there!\n");
 8000c82:	e7ef      	b.n	8000c64 <Task1+0x8>
 8000c84:	08006b10 	.word	0x08006b10
 8000c88:	20000000 	.word	0x20000000

08000c8c <Task2>:




void Task2( void* argument )
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("task 2 says 'Hi!'\n");
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <Task2+0x28>)
 8000c96:	f005 fd19 	bl	80066cc <SEGGER_SYSVIEW_PrintfHost>
		BlueLed.On();
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <Task2+0x2c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4798      	blx	r3
		vTaskDelay(200 / portTICK_PERIOD_MS);
 8000ca0:	20c8      	movs	r0, #200	; 0xc8
 8000ca2:	f002 fb21 	bl	80032e8 <vTaskDelay>
		BlueLed.Off();
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <Task2+0x2c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4798      	blx	r3
		vTaskDelay(200 / portTICK_PERIOD_MS);
 8000cac:	20c8      	movs	r0, #200	; 0xc8
 8000cae:	f002 fb1b 	bl	80032e8 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("task 2 says 'Hi!'\n");
 8000cb2:	e7ef      	b.n	8000c94 <Task2+0x8>
 8000cb4:	08006b1c 	.word	0x08006b1c
 8000cb8:	20000008 	.word	0x20000008

08000cbc <Task3>:
}



void Task3( void* argument )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		lookBusy();
 8000cc4:	f000 f816 	bl	8000cf4 <lookBusy>

		SEGGER_SYSVIEW_PrintfHost("task3\n");
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <Task3+0x30>)
 8000cca:	f005 fcff 	bl	80066cc <SEGGER_SYSVIEW_PrintfHost>
		RedLed.On();
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <Task3+0x34>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4798      	blx	r3
		vTaskDelay(500/ portTICK_PERIOD_MS);
 8000cd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd8:	f002 fb06 	bl	80032e8 <vTaskDelay>
		RedLed.Off();
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <Task3+0x34>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4798      	blx	r3
		vTaskDelay(500/ portTICK_PERIOD_MS);
 8000ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce6:	f002 faff 	bl	80032e8 <vTaskDelay>
		lookBusy();
 8000cea:	e7eb      	b.n	8000cc4 <Task3+0x8>
 8000cec:	08006b30 	.word	0x08006b30
 8000cf0:	20000010 	.word	0x20000010

08000cf4 <lookBusy>:
	}
}


void lookBusy( void )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	volatile uint32_t __attribute__((unused)) dontCare = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 50E3; i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	e00b      	b.n	8000d1c <lookBusy+0x28>
	{
		dontCare = i % 4;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	425a      	negs	r2, r3
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	f002 0203 	and.w	r2, r2, #3
 8000d10:	bf58      	it	pl
 8000d12:	4253      	negpl	r3, r2
 8000d14:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 50E3; i++)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d22:	4293      	cmp	r3, r2
 8000d24:	ddee      	ble.n	8000d04 <lookBusy+0x10>
	}
	SEGGER_SYSVIEW_PrintfHost("looking busy\n");
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <lookBusy+0x40>)
 8000d28:	f005 fcd0 	bl	80066cc <SEGGER_SYSVIEW_PrintfHost>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08006b38 	.word	0x08006b38

08000d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d4a:	f000 f92f 	bl	8000fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40001000 	.word	0x40001000

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <HAL_InitTick+0xe4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <HAL_InitTick+0xe4>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <HAL_InitTick+0xe4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de4:	f107 0210 	add.w	r2, r7, #16
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f828 	bl	8001e44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d103      	bne.n	8000e06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dfe:	f001 f80d 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8000e02:	6378      	str	r0, [r7, #52]	; 0x34
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e06:	f001 f809 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <HAL_InitTick+0xe8>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	0c9b      	lsrs	r3, r3, #18
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <HAL_InitTick+0xf0>)
 8000e22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e46:	f001 f82f 	bl	8001ea8 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d11b      	bne.n	8000e90 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <HAL_InitTick+0xec>)
 8000e5a:	f001 f87f 	bl	8001f5c <HAL_TIM_Base_Start_IT>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d111      	bne.n	8000e90 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e6c:	2036      	movs	r0, #54	; 0x36
 8000e6e:	f000 f991 	bl	8001194 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d808      	bhi.n	8000e8a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	2036      	movs	r0, #54	; 0x36
 8000e7e:	f000 f96d 	bl	800115c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_InitTick+0xf4>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e002      	b.n	8000e90 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	431bde83 	.word	0x431bde83
 8000ea4:	20000048 	.word	0x20000048
 8000ea8:	40001000 	.word	0x40001000
 8000eac:	2000001c 	.word	0x2000001c

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM6_DAC_IRQHandler+0x10>)
 8000ee2:	f001 f8ab 	bl	800203c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000048 	.word	0x20000048

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3e:	f7ff ffd7 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f005 fd83 	bl	8006a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb67 	bl	8000618 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f58:	08006c84 	.word	0x08006c84
  ldr r2, =_sbss
 8000f5c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000f60:	200144b4 	.word	0x200144b4

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f8d8 	bl	8001146 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f7ff ff0e 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fee4 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000020 	.word	0x20000020
 8000fd0:	20000090 	.word	0x20000090

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000090 	.word	0x20000090

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4907      	ldr	r1, [pc, #28]	; (8001088 <__NVIC_EnableIRQ+0x38>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff4c 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116e:	f7ff ff61 	bl	8001034 <__NVIC_GetPriorityGrouping>
 8001172:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	6978      	ldr	r0, [r7, #20]
 800117a:	f7ff ffb1 	bl	80010e0 <NVIC_EncodePriority>
 800117e:	4602      	mov	r2, r0
 8001180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff80 	bl	800108c <__NVIC_SetPriority>
}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff54 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e177      	b.n	80014bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 8166 	bne.w	80014b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d005      	beq.n	8001202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d130      	bne.n	8001264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001238:	2201      	movs	r2, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 0201 	and.w	r2, r3, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b03      	cmp	r3, #3
 800126e:	d017      	beq.n	80012a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	69b9      	ldr	r1, [r7, #24]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80c0 	beq.w	80014b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <HAL_GPIO_Init+0x324>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a65      	ldr	r2, [pc, #404]	; (80014d4 <HAL_GPIO_Init+0x324>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_GPIO_Init+0x324>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <HAL_GPIO_Init+0x328>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_GPIO_Init+0x32c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d037      	beq.n	80013ee <HAL_GPIO_Init+0x23e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d031      	beq.n	80013ea <HAL_GPIO_Init+0x23a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a56      	ldr	r2, [pc, #344]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d02b      	beq.n	80013e6 <HAL_GPIO_Init+0x236>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a55      	ldr	r2, [pc, #340]	; (80014e8 <HAL_GPIO_Init+0x338>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d025      	beq.n	80013e2 <HAL_GPIO_Init+0x232>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x33c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01f      	beq.n	80013de <HAL_GPIO_Init+0x22e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <HAL_GPIO_Init+0x340>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x22a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <HAL_GPIO_Init+0x344>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x348>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x222>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a50      	ldr	r2, [pc, #320]	; (80014fc <HAL_GPIO_Init+0x34c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x21e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <HAL_GPIO_Init+0x350>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x21a>
 80013c6:	2309      	movs	r3, #9
 80013c8:	e012      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ca:	230a      	movs	r3, #10
 80013cc:	e010      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ce:	2308      	movs	r3, #8
 80013d0:	e00e      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	; (80014d8 <HAL_GPIO_Init+0x328>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a34      	ldr	r2, [pc, #208]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x354>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a29      	ldr	r2, [pc, #164]	; (8001504 <HAL_GPIO_Init+0x354>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x354>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_GPIO_Init+0x354>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae84 	bls.w	80011cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40022000 	.word	0x40022000
 8001500:	40022400 	.word	0x40022400
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e267      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d075      	beq.n	8001646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155a:	4b88      	ldr	r3, [pc, #544]	; (800177c <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b04      	cmp	r3, #4
 8001564:	d00c      	beq.n	8001580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b85      	ldr	r3, [pc, #532]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156e:	2b08      	cmp	r3, #8
 8001570:	d112      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4b82      	ldr	r3, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157e:	d10b      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4b7e      	ldr	r3, [pc, #504]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d05b      	beq.n	8001644 <HAL_RCC_OscConfig+0x108>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d157      	bne.n	8001644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e242      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x74>
 80015a2:	4b76      	ldr	r3, [pc, #472]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a75      	ldr	r2, [pc, #468]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6f      	ldr	r2, [pc, #444]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6d      	ldr	r3, [pc, #436]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6c      	ldr	r2, [pc, #432]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015d4:	4b69      	ldr	r3, [pc, #420]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a68      	ldr	r2, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a65      	ldr	r2, [pc, #404]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fcee 	bl	8000fd4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fcea 	bl	8000fd4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e207      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xc0>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fcda 	bl	8000fd4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fcd6 	bl	8000fd4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1f3      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0xe8>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d063      	beq.n	800171a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166a:	4b44      	ldr	r3, [pc, #272]	; (800177c <HAL_RCC_OscConfig+0x240>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e1c7      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4937      	ldr	r1, [pc, #220]	; (800177c <HAL_RCC_OscConfig+0x240>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	e03a      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_RCC_OscConfig+0x244>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff fc8f 	bl	8000fd4 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fc8b 	bl	8000fd4 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1a8      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4925      	ldr	r1, [pc, #148]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_RCC_OscConfig+0x244>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc6e 	bl	8000fd4 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc6a 	bl	8000fd4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e187      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d036      	beq.n	8001794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_RCC_OscConfig+0x248>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fc4e 	bl	8000fd4 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fc4a 	bl	8000fd4 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e167      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x200>
 800175a:	e01b      	b.n	8001794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_OscConfig+0x248>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fc37 	bl	8000fd4 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	e00e      	b.n	8001788 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fc33 	bl	8000fd4 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d907      	bls.n	8001788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e150      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 800177c:	40023800 	.word	0x40023800
 8001780:	42470000 	.word	0x42470000
 8001784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800178a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ea      	bne.n	800176a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8097 	beq.w	80018d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b7d      	ldr	r3, [pc, #500]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a7c      	ldr	r2, [pc, #496]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b77      	ldr	r3, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b74      	ldr	r3, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a73      	ldr	r2, [pc, #460]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fbf3 	bl	8000fd4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f2:	f7ff fbef 	bl	8000fd4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e10c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x2ea>
 8001818:	4b64      	ldr	r3, [pc, #400]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	4a63      	ldr	r2, [pc, #396]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	; 0x70
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x30c>
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
 800183a:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a5b      	ldr	r2, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001848:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	; 0x70
 8001854:	4b55      	ldr	r3, [pc, #340]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a54      	ldr	r2, [pc, #336]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fbb4 	bl	8000fd4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff fbb0 	bl	8000fd4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0cb      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0ee      	beq.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fb9e 	bl	8000fd4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fb9a 	bl	8000fd4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0b5      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ee      	bne.n	800189c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a1 	beq.w	8001a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d05c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d141      	bne.n	8001972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_OscConfig+0x478>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb6e 	bl	8000fd4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fb6a 	bl	8000fd4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e087      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fb43 	bl	8000fd4 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff fb3f 	bl	8000fd4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e05c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x416>
 8001970:	e054      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fb2c 	bl	8000fd4 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff fb28 	bl	8000fd4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e045      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
 800199e:	e03d      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e038      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x4ec>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d028      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d121      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d11a      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cc      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d90c      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d044      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d119      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e06f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e067      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4934      	ldr	r1, [pc, #208]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff fa5a 	bl	8000fd4 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff fa56 	bl	8000fd4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d20c      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8f0 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08006c34 	.word	0x08006c34
 8001bf0:	20000018 	.word	0x20000018
 8001bf4:	2000001c 	.word	0x2000001c

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b094      	sub	sp, #80	; 0x50
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	647b      	str	r3, [r7, #68]	; 0x44
 8001c04:	2300      	movs	r3, #0
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c08:	2300      	movs	r3, #0
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d00d      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	f200 80e1 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2a:	e0db      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c30:	e0db      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c36:	e0d8      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c42:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
 8001c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7c:	0150      	lsls	r0, r2, #5
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4621      	mov	r1, r4
 8001c84:	1a51      	subs	r1, r2, r1
 8001c86:	6139      	str	r1, [r7, #16]
 8001c88:	4629      	mov	r1, r5
 8001c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	018b      	lsls	r3, r1, #6
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	018a      	lsls	r2, r1, #6
 8001caa:	4651      	mov	r1, sl
 8001cac:	ebb2 0801 	subs.w	r8, r2, r1
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cca:	4690      	mov	r8, r2
 8001ccc:	4699      	mov	r9, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	eb18 0303 	adds.w	r3, r8, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	462b      	mov	r3, r5
 8001cd8:	eb49 0303 	adc.w	r3, r9, r3
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cea:	4629      	mov	r1, r5
 8001cec:	024b      	lsls	r3, r1, #9
 8001cee:	4621      	mov	r1, r4
 8001cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	024a      	lsls	r2, r1, #9
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d08:	f7fe fabc 	bl	8000284 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4611      	mov	r1, r2
 8001d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d30:	4642      	mov	r2, r8
 8001d32:	464b      	mov	r3, r9
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	0159      	lsls	r1, r3, #5
 8001d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d42:	0150      	lsls	r0, r2, #5
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4641      	mov	r1, r8
 8001d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d68:	ebb2 040a 	subs.w	r4, r2, sl
 8001d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	00eb      	lsls	r3, r5, #3
 8001d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7e:	00e2      	lsls	r2, r4, #3
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	18e3      	adds	r3, r4, r3
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	eb45 0303 	adc.w	r3, r5, r3
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	028b      	lsls	r3, r1, #10
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da8:	4621      	mov	r1, r4
 8001daa:	028a      	lsls	r2, r1, #10
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	61fa      	str	r2, [r7, #28]
 8001db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dbc:	f7fe fa62 	bl	8000284 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3750      	adds	r7, #80	; 0x50
 8001df0:	46bd      	mov	sp, r7
 8001df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000018 	.word	0x20000018

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08006c44 	.word	0x08006c44

08001e44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	220f      	movs	r2, #15
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0203 	and.w	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCC_GetClockConfig+0x60>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40023c00 	.word	0x40023c00

08001ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e041      	b.n	8001f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f839 	bl	8001f46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 f9d8 	bl	800229c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e04e      	b.n	8002012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d022      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9e:	d01d      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d018      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_TIM_Base_Start_IT+0xd0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00e      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d010      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffe:	e007      	b.n	8002010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40010000 	.word	0x40010000
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40010400 	.word	0x40010400
 8002034:	40014000 	.word	0x40014000
 8002038:	40001800 	.word	0x40001800

0800203c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d122      	bne.n	8002098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d11b      	bne.n	8002098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0202 	mvn.w	r2, #2
 8002068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8ee 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8e0 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8f1 	bl	8002274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d122      	bne.n	80020ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d11b      	bne.n	80020ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0204 	mvn.w	r2, #4
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8c4 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8b6 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8c7 	bl	8002274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b08      	cmp	r3, #8
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0208 	mvn.w	r2, #8
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f89a 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f88c 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f89d 	bl	8002274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b10      	cmp	r3, #16
 800214c:	d122      	bne.n	8002194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b10      	cmp	r3, #16
 800215a:	d11b      	bne.n	8002194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0210 	mvn.w	r2, #16
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2208      	movs	r2, #8
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f870 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f862 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f873 	bl	8002274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0201 	mvn.w	r2, #1
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fdbc 	bl	8000d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b80      	cmp	r3, #128	; 0x80
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f902 	bl	80023f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f838 	bl	8002288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b20      	cmp	r3, #32
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b20      	cmp	r3, #32
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0220 	mvn.w	r2, #32
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8cc 	bl	80023dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <TIM_Base_SetConfig+0x114>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d00f      	beq.n	80022dc <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3d      	ldr	r2, [pc, #244]	; (80023b4 <TIM_Base_SetConfig+0x118>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00b      	beq.n	80022dc <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3c      	ldr	r2, [pc, #240]	; (80023b8 <TIM_Base_SetConfig+0x11c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <TIM_Base_SetConfig+0x40>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3b      	ldr	r2, [pc, #236]	; (80023bc <TIM_Base_SetConfig+0x120>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_Base_SetConfig+0x40>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3a      	ldr	r2, [pc, #232]	; (80023c0 <TIM_Base_SetConfig+0x124>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2f      	ldr	r2, [pc, #188]	; (80023b0 <TIM_Base_SetConfig+0x114>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d02b      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fc:	d027      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a2c      	ldr	r2, [pc, #176]	; (80023b4 <TIM_Base_SetConfig+0x118>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d023      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2b      	ldr	r2, [pc, #172]	; (80023b8 <TIM_Base_SetConfig+0x11c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01f      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2a      	ldr	r2, [pc, #168]	; (80023bc <TIM_Base_SetConfig+0x120>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01b      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <TIM_Base_SetConfig+0x124>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d017      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <TIM_Base_SetConfig+0x128>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <TIM_Base_SetConfig+0x12c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00f      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a26      	ldr	r2, [pc, #152]	; (80023cc <TIM_Base_SetConfig+0x130>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00b      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <TIM_Base_SetConfig+0x134>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <TIM_Base_SetConfig+0x138>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <TIM_Base_SetConfig+0x13c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d108      	bne.n	8002360 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <TIM_Base_SetConfig+0x114>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_Base_SetConfig+0xf8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <TIM_Base_SetConfig+0x124>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d103      	bne.n	800239c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	615a      	str	r2, [r3, #20]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	40010400 	.word	0x40010400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40014400 	.word	0x40014400
 80023cc:	40014800 	.word	0x40014800
 80023d0:	40001800 	.word	0x40001800
 80023d4:	40001c00 	.word	0x40001c00
 80023d8:	40002000 	.word	0x40002000

080023dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 0208 	add.w	r2, r3, #8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f103 0208 	add.w	r2, r3, #8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f103 0208 	add.w	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d103      	bne.n	80024c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	e00c      	b.n	80024e0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3308      	adds	r3, #8
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e002      	b.n	80024d4 <vListInsert+0x2e>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d2f6      	bcs.n	80024ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6892      	ldr	r2, [r2, #8]
 800252e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6852      	ldr	r2, [r2, #4]
 8002538:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d103      	bne.n	800254c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1e5a      	subs	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002596:	f002 f8d7 	bl	8004748 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	68f9      	ldr	r1, [r7, #12]
 80025a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	441a      	add	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	3b01      	subs	r3, #1
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	441a      	add	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	22ff      	movs	r2, #255	; 0xff
 80025da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d114      	bne.n	8002616 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01a      	beq.n	800262a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3310      	adds	r3, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 f957 	bl	80038ac <xTaskRemoveFromEventList>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <xQueueGenericReset+0xcc>)
 8002606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	e009      	b.n	800262a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3310      	adds	r3, #16
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fef2 	bl	8002404 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3324      	adds	r3, #36	; 0x24
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff feed 	bl	8002404 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800262a:	f002 f8bd 	bl	80047a8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	61bb      	str	r3, [r7, #24]
    }
 8002662:	bf00      	nop
 8002664:	e7fe      	b.n	8002664 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <xQueueGenericCreate+0x48>
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	429a      	cmp	r2, r3
 8002682:	d101      	bne.n	8002688 <xQueueGenericCreate+0x4c>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <xQueueGenericCreate+0x4e>
 8002688:	2300      	movs	r3, #0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <xQueueGenericCreate+0x68>
        __asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	617b      	str	r3, [r7, #20]
    }
 80026a0:	bf00      	nop
 80026a2:	e7fe      	b.n	80026a2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026aa:	d90a      	bls.n	80026c2 <xQueueGenericCreate+0x86>
        __asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	613b      	str	r3, [r7, #16]
    }
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	3350      	adds	r3, #80	; 0x50
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 f968 	bl	800499c <pvPortMalloc>
 80026cc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3350      	adds	r3, #80	; 0x50
 80026dc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026de:	79fa      	ldrb	r2, [r7, #7]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f805 	bl	80026fa <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026f0:	6a3b      	ldr	r3, [r7, #32]
    }
 80026f2:	4618      	mov	r0, r3
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e002      	b.n	800271c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002728:	2101      	movs	r1, #1
 800272a:	69b8      	ldr	r0, [r7, #24]
 800272c:	f7ff ff1e 	bl	800256c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	2073      	movs	r0, #115	; 0x73
 8002740:	f003 f94c 	bl	80059dc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b090      	sub	sp, #64	; 0x40
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueGenericSend+0x32>
        __asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <xQueueGenericSend+0x40>
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <xQueueGenericSend+0x44>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <xQueueGenericSend+0x46>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <xQueueGenericSend+0x60>
        __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d103      	bne.n	80027ba <xQueueGenericSend+0x6e>
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <xQueueGenericSend+0x72>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <xQueueGenericSend+0x74>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <xQueueGenericSend+0x8e>
        __asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	623b      	str	r3, [r7, #32]
    }
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027da:	f001 fa3f 	bl	8003c5c <xTaskGetSchedulerState>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <xQueueGenericSend+0x9e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <xQueueGenericSend+0xa2>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <xQueueGenericSend+0xa4>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <xQueueGenericSend+0xbe>
        __asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	61fb      	str	r3, [r7, #28]
    }
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800280a:	f001 ff9d 	bl	8004748 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	429a      	cmp	r2, r3
 8002818:	d302      	bcc.n	8002820 <xQueueGenericSend+0xd4>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d136      	bne.n	800288e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fe66 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	460b      	mov	r3, r1
 8002832:	4601      	mov	r1, r0
 8002834:	205a      	movs	r0, #90	; 0x5a
 8002836:	f003 f947 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002840:	f000 fa78 	bl	8002d34 <prvCopyDataToQueue>
 8002844:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	3324      	adds	r3, #36	; 0x24
 8002852:	4618      	mov	r0, r3
 8002854:	f001 f82a 	bl	80038ac <xTaskRemoveFromEventList>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d013      	beq.n	8002886 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800285e:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <xQueueGenericSend+0x248>)
 8002860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	e00a      	b.n	8002886 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <xQueueGenericSend+0x248>)
 8002878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002886:	f001 ff8f 	bl	80047a8 <vPortExitCritical>
                return pdPASS;
 800288a:	2301      	movs	r3, #1
 800288c:	e07d      	b.n	800298a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d110      	bne.n	80028b6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002894:	f001 ff88 	bl	80047a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	4618      	mov	r0, r3
 800289c:	f003 fe2a 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	460b      	mov	r3, r1
 80028aa:	4601      	mov	r1, r0
 80028ac:	205a      	movs	r0, #90	; 0x5a
 80028ae:	f003 f90b 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e069      	b.n	800298a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 f859 	bl	8003978 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028ca:	f001 ff6d 	bl	80047a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028ce:	f000 fda5 	bl	800341c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028d2:	f001 ff39 	bl	8004748 <vPortEnterCritical>
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d103      	bne.n	80028ec <xQueueGenericSend+0x1a0>
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d103      	bne.n	8002902 <xQueueGenericSend+0x1b6>
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002902:	f001 ff51 	bl	80047a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002906:	1d3a      	adds	r2, r7, #4
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f001 f848 	bl	80039a4 <xTaskCheckForTimeOut>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d124      	bne.n	8002964 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800291a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800291c:	f000 fb02 	bl	8002f24 <prvIsQueueFull>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d018      	beq.n	8002958 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	3310      	adds	r3, #16
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f000 ff6a 	bl	8003808 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002936:	f000 fa8d 	bl	8002e54 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800293a:	f000 fd7d 	bl	8003438 <xTaskResumeAll>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	f47f af62 	bne.w	800280a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <xQueueGenericSend+0x248>)
 8002948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	e758      	b.n	800280a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800295a:	f000 fa7b 	bl	8002e54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800295e:	f000 fd6b 	bl	8003438 <xTaskResumeAll>
 8002962:	e752      	b.n	800280a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002966:	f000 fa75 	bl	8002e54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800296a:	f000 fd65 	bl	8003438 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fdbf 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	460b      	mov	r3, r1
 8002980:	4601      	mov	r1, r0
 8002982:	205a      	movs	r0, #90	; 0x5a
 8002984:	f003 f8a0 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002988:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800298a:	4618      	mov	r0, r3
 800298c:	3738      	adds	r7, #56	; 0x38
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b090      	sub	sp, #64	; 0x40
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029c2:	bf00      	nop
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <xQueueGenericSendFromISR+0x3c>
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <xQueueGenericSendFromISR+0x40>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <xQueueGenericSendFromISR+0x42>
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d103      	bne.n	8002a02 <xQueueGenericSendFromISR+0x6a>
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <xQueueGenericSendFromISR+0x6e>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueGenericSendFromISR+0x70>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	623b      	str	r3, [r7, #32]
    }
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a22:	f001 ff7b 	bl	800491c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a26:	f3ef 8211 	mrs	r2, BASEPRI
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	61fa      	str	r2, [r7, #28]
 8002a3c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <xQueueGenericSendFromISR+0xbc>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d148      	bne.n	8002ae6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fd44 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	461a      	mov	r2, r3
 8002a72:	2060      	movs	r0, #96	; 0x60
 8002a74:	f002 ff58 	bl	8005928 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a7e:	f000 f959 	bl	8002d34 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d112      	bne.n	8002ab2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d025      	beq.n	8002ae0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	3324      	adds	r3, #36	; 0x24
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 ff07 	bl	80038ac <xTaskRemoveFromEventList>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01d      	beq.n	8002ae0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01a      	beq.n	8002ae0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e016      	b.n	8002ae0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002ab2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ab8:	d10a      	bne.n	8002ad0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	617b      	str	r3, [r7, #20]
    }
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	b25a      	sxtb	r2, r3
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ae4:	e00b      	b.n	8002afe <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 fd03 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002aee:	4601      	mov	r1, r0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	461a      	mov	r2, r3
 8002af4:	2060      	movs	r0, #96	; 0x60
 8002af6:	f002 ff17 	bl	8005928 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b08:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3740      	adds	r7, #64	; 0x40
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b08f      	sub	sp, #60	; 0x3c
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <xQueueReceive+0x30>
        __asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	623b      	str	r3, [r7, #32]
    }
 8002b40:	bf00      	nop
 8002b42:	e7fe      	b.n	8002b42 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <xQueueReceive+0x3e>
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <xQueueReceive+0x42>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <xQueueReceive+0x44>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueReceive+0x5e>
        __asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	61fb      	str	r3, [r7, #28]
    }
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b72:	f001 f873 	bl	8003c5c <xTaskGetSchedulerState>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <xQueueReceive+0x6e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <xQueueReceive+0x72>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <xQueueReceive+0x74>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <xQueueReceive+0x8e>
        __asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	61bb      	str	r3, [r7, #24]
    }
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ba2:	f001 fdd1 	bl	8004748 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02f      	beq.n	8002c12 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb6:	f000 f927 	bl	8002e08 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 fc99 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f003 fc95 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	9100      	str	r1, [sp, #0]
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	205c      	movs	r0, #92	; 0x5c
 8002bd6:	f002 ff77 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00f      	beq.n	8002c0a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	3310      	adds	r3, #16
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fe5c 	bl	80038ac <xTaskRemoveFromEventList>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bfa:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <xQueueReceive+0x21c>)
 8002bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c0a:	f001 fdcd 	bl	80047a8 <vPortExitCritical>
                return pdPASS;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e08a      	b.n	8002d28 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c18:	f001 fdc6 	bl	80047a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 fc68 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002c24:	4604      	mov	r4, r0
 8002c26:	2000      	movs	r0, #0
 8002c28:	f003 fc64 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2101      	movs	r1, #1
 8002c32:	9100      	str	r1, [sp, #0]
 8002c34:	4621      	mov	r1, r4
 8002c36:	205c      	movs	r0, #92	; 0x5c
 8002c38:	f002 ff46 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e073      	b.n	8002d28 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fe94 	bl	8003978 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c54:	f001 fda8 	bl	80047a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c58:	f000 fbe0 	bl	800341c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c5c:	f001 fd74 	bl	8004748 <vPortEnterCritical>
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d103      	bne.n	8002c76 <xQueueReceive+0x162>
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d103      	bne.n	8002c8c <xQueueReceive+0x178>
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8c:	f001 fd8c 	bl	80047a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c90:	1d3a      	adds	r2, r7, #4
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fe83 	bl	80039a4 <xTaskCheckForTimeOut>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d124      	bne.n	8002cee <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca6:	f000 f927 	bl	8002ef8 <prvIsQueueEmpty>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d018      	beq.n	8002ce2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fda5 	bl	8003808 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc0:	f000 f8c8 	bl	8002e54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cc4:	f000 fbb8 	bl	8003438 <xTaskResumeAll>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f af69 	bne.w	8002ba2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <xQueueReceive+0x21c>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	e75f      	b.n	8002ba2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce4:	f000 f8b6 	bl	8002e54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ce8:	f000 fba6 	bl	8003438 <xTaskResumeAll>
 8002cec:	e759      	b.n	8002ba2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf0:	f000 f8b0 	bl	8002e54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cf4:	f000 fba0 	bl	8003438 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfa:	f000 f8fd 	bl	8002ef8 <prvIsQueueEmpty>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f43f af4e 	beq.w	8002ba2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fbf3 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002d0e:	4604      	mov	r4, r0
 8002d10:	2000      	movs	r0, #0
 8002d12:	f003 fbef 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002d16:	4602      	mov	r2, r0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	9100      	str	r1, [sp, #0]
 8002d1e:	4621      	mov	r1, r4
 8002d20:	205c      	movs	r0, #92	; 0x5c
 8002d22:	f002 fed1 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d26:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3734      	adds	r7, #52	; 0x34
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd90      	pop	{r4, r7, pc}
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d14d      	bne.n	8002df6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 ff9a 	bl	8003c98 <xTaskPriorityDisinherit>
 8002d64:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	e043      	b.n	8002df6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d119      	bne.n	8002da8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6858      	ldr	r0, [r3, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	f003 fe98 	bl	8006ab4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	441a      	add	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d32b      	bcc.n	8002df6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	e026      	b.n	8002df6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68d8      	ldr	r0, [r3, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	461a      	mov	r2, r3
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	f003 fe7e 	bl	8006ab4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	441a      	add	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d207      	bcs.n	8002de4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	425b      	negs	r3, r3
 8002dde:	441a      	add	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d105      	bne.n	8002df6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002dfe:	697b      	ldr	r3, [r7, #20]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d018      	beq.n	8002e4c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	441a      	add	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d303      	bcc.n	8002e3c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68d9      	ldr	r1, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	461a      	mov	r2, r3
 8002e46:	6838      	ldr	r0, [r7, #0]
 8002e48:	f003 fe34 	bl	8006ab4 <memcpy>
    }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e5c:	f001 fc74 	bl	8004748 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e66:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e68:	e011      	b.n	8002e8e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3324      	adds	r3, #36	; 0x24
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fd18 	bl	80038ac <xTaskRemoveFromEventList>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e82:	f000 fdf5 	bl	8003a70 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dce9      	bgt.n	8002e6a <prvUnlockQueue+0x16>
 8002e96:	e000      	b.n	8002e9a <prvUnlockQueue+0x46>
                        break;
 8002e98:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ea2:	f001 fc81 	bl	80047a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ea6:	f001 fc4f 	bl	8004748 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eb2:	e011      	b.n	8002ed8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d012      	beq.n	8002ee2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3310      	adds	r3, #16
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fcf3 	bl	80038ac <xTaskRemoveFromEventList>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ecc:	f000 fdd0 	bl	8003a70 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ed0:	7bbb      	ldrb	r3, [r7, #14]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	dce9      	bgt.n	8002eb4 <prvUnlockQueue+0x60>
 8002ee0:	e000      	b.n	8002ee4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ee2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	22ff      	movs	r2, #255	; 0xff
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002eec:	f001 fc5c 	bl	80047a8 <vPortExitCritical>
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f00:	f001 fc22 	bl	8004748 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e001      	b.n	8002f16 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f16:	f001 fc47 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f2c:	f001 fc0c 	bl	8004748 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d102      	bne.n	8002f42 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e001      	b.n	8002f46 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f46:	f001 fc2f 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e01e      	b.n	8002fa2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f64:	4a13      	ldr	r2, [pc, #76]	; (8002fb4 <vQueueAddToRegistry+0x60>)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d115      	bne.n	8002f9c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f70:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <vQueueAddToRegistry+0x60>)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f7a:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <vQueueAddToRegistry+0x60>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 fab3 	bl	80064f4 <SEGGER_SYSVIEW_ShrinkId>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	2071      	movs	r0, #113	; 0x71
 8002f96:	f002 fcc7 	bl	8005928 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f9a:	e006      	b.n	8002faa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b07      	cmp	r3, #7
 8002fa6:	d9dd      	bls.n	8002f64 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000094 	.word	0x20000094

08002fb8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fc8:	f001 fbbe 	bl	8004748 <vPortEnterCritical>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d103      	bne.n	8002fe2 <vQueueWaitForMessageRestricted+0x2a>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d103      	bne.n	8002ff8 <vQueueWaitForMessageRestricted+0x40>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff8:	f001 fbd6 	bl	80047a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3324      	adds	r3, #36	; 0x24
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fc1f 	bl	8003850 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003012:	6978      	ldr	r0, [r7, #20]
 8003014:	f7ff ff1e 	bl	8002e54 <prvUnlockQueue>
    }
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af04      	add	r7, sp, #16
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f001 fcb1 	bl	800499c <pvPortMalloc>
 800303a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00e      	beq.n	8003060 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003042:	205c      	movs	r0, #92	; 0x5c
 8003044:	f001 fcaa 	bl	800499c <pvPortMalloc>
 8003048:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
 8003056:	e005      	b.n	8003064 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003058:	6978      	ldr	r0, [r7, #20]
 800305a:	f001 fd7f 	bl	8004b5c <vPortFree>
 800305e:	e001      	b.n	8003064 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d013      	beq.n	8003092 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	2300      	movs	r3, #0
 800306e:	9303      	str	r3, [sp, #12]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	9302      	str	r3, [sp, #8]
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f80e 	bl	80030a2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003086:	69f8      	ldr	r0, [r7, #28]
 8003088:	f000 f8a2 	bl	80031d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800308c:	2301      	movs	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e002      	b.n	8003098 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
 8003096:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003098:	69bb      	ldr	r3, [r7, #24]
    }
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b088      	sub	sp, #32
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	461a      	mov	r2, r3
 80030ba:	21a5      	movs	r1, #165	; 0xa5
 80030bc:	f003 fd08 	bl	8006ad0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030ca:	3b01      	subs	r3, #1
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f023 0307 	bic.w	r3, r3, #7
 80030d8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <prvInitialiseNewTask+0x58>
        __asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	617b      	str	r3, [r7, #20]
    }
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01f      	beq.n	8003140 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e012      	b.n	800312c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	7819      	ldrb	r1, [r3, #0]
 800310e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	3334      	adds	r3, #52	; 0x34
 8003116:	460a      	mov	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3301      	adds	r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b0f      	cmp	r3, #15
 8003130:	d9e9      	bls.n	8003106 <prvInitialiseNewTask+0x64>
 8003132:	e000      	b.n	8003136 <prvInitialiseNewTask+0x94>
            {
                break;
 8003134:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800313e:	e003      	b.n	8003148 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2b04      	cmp	r3, #4
 800314c:	d901      	bls.n	8003152 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800314e:	2304      	movs	r3, #4
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	2200      	movs	r2, #0
 8003162:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	3304      	adds	r3, #4
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff f96b 	bl	8002444 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	3318      	adds	r3, #24
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f966 	bl	8002444 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	f1c3 0205 	rsb	r2, r3, #5
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	3354      	adds	r3, #84	; 0x54
 8003192:	2204      	movs	r2, #4
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f003 fc9a 	bl	8006ad0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	3358      	adds	r3, #88	; 0x58
 80031a0:	2201      	movs	r2, #1
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fc93 	bl	8006ad0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	69b8      	ldr	r0, [r7, #24]
 80031b0:	f001 f998 	bl	80044e4 <pxPortInitialiseStack>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031c6:	bf00      	nop
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031d8:	f001 fab6 	bl	8004748 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031dc:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <prvAddNewTaskToReadyList+0xfc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a3a      	ldr	r2, [pc, #232]	; (80032cc <prvAddNewTaskToReadyList+0xfc>)
 80031e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <prvAddNewTaskToReadyList+0x100>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031ee:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <prvAddNewTaskToReadyList+0x100>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <prvAddNewTaskToReadyList+0xfc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d110      	bne.n	800321e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031fc:	f000 fc5c 	bl	8003ab8 <prvInitialiseTaskLists>
 8003200:	e00d      	b.n	800321e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003202:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <prvAddNewTaskToReadyList+0x104>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <prvAddNewTaskToReadyList+0x100>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	429a      	cmp	r2, r3
 8003216:	d802      	bhi.n	800321e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <prvAddNewTaskToReadyList+0x100>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800321e:	4b2e      	ldr	r3, [pc, #184]	; (80032d8 <prvAddNewTaskToReadyList+0x108>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <prvAddNewTaskToReadyList+0x108>)
 8003226:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <prvAddNewTaskToReadyList+0x108>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <prvAddNewTaskToReadyList+0x94>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 f835 	bl	80062a8 <SEGGER_SYSVIEW_OnTaskCreate>
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	461d      	mov	r5, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461c      	mov	r4, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	1ae3      	subs	r3, r4, r3
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	462b      	mov	r3, r5
 8003260:	f003 fb6a 	bl	8006938 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 f8a2 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2201      	movs	r2, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <prvAddNewTaskToReadyList+0x10c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <prvAddNewTaskToReadyList+0x10c>)
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <prvAddNewTaskToReadyList+0x110>)
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7ff f8e2 	bl	800245e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800329a:	f001 fa85 	bl	80047a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <prvAddNewTaskToReadyList+0x104>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <prvAddNewTaskToReadyList+0x100>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d207      	bcs.n	80032c4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <prvAddNewTaskToReadyList+0x114>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bdb0      	pop	{r4, r5, r7, pc}
 80032cc:	200001ac 	.word	0x200001ac
 80032d0:	200000d4 	.word	0x200000d4
 80032d4:	200001b8 	.word	0x200001b8
 80032d8:	200001c8 	.word	0x200001c8
 80032dc:	200001b4 	.word	0x200001b4
 80032e0:	200000d8 	.word	0x200000d8
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01b      	beq.n	8003332 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <vTaskDelay+0x68>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <vTaskDelay+0x30>
        __asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	60bb      	str	r3, [r7, #8]
    }
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003318:	f000 f880 	bl	800341c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	2023      	movs	r0, #35	; 0x23
 8003320:	f002 fac6 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003324:	2100      	movs	r1, #0
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fd36 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800332c:	f000 f884 	bl	8003438 <xTaskResumeAll>
 8003330:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <vTaskDelay+0x6c>)
 800333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200001d4 	.word	0x200001d4
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800335e:	4b27      	ldr	r3, [pc, #156]	; (80033fc <vTaskStartScheduler+0xa4>)
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	2300      	movs	r3, #0
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2300      	movs	r3, #0
 8003368:	2282      	movs	r2, #130	; 0x82
 800336a:	4925      	ldr	r1, [pc, #148]	; (8003400 <vTaskStartScheduler+0xa8>)
 800336c:	4825      	ldr	r0, [pc, #148]	; (8003404 <vTaskStartScheduler+0xac>)
 800336e:	f7ff fe57 	bl	8003020 <xTaskCreate>
 8003372:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800337a:	f000 fd85 	bl	8003e88 <xTimerCreateTimerTask>
 800337e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d124      	bne.n	80033d0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60bb      	str	r3, [r7, #8]
    }
 8003398:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <vTaskStartScheduler+0xb0>)
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <vTaskStartScheduler+0xb4>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <vTaskStartScheduler+0xb8>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <vTaskStartScheduler+0xbc>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <vTaskStartScheduler+0xa4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d102      	bne.n	80033c0 <vTaskStartScheduler+0x68>
 80033ba:	f002 ff59 	bl	8006270 <SEGGER_SYSVIEW_OnIdle>
 80033be:	e004      	b.n	80033ca <vTaskStartScheduler+0x72>
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <vTaskStartScheduler+0xbc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 ffb1 	bl	800632c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80033ca:	f001 f91b 	bl	8004604 <xPortStartScheduler>
 80033ce:	e00e      	b.n	80033ee <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d10a      	bne.n	80033ee <vTaskStartScheduler+0x96>
        __asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	607b      	str	r3, [r7, #4]
    }
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <vTaskStartScheduler+0xc0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200001d0 	.word	0x200001d0
 8003400:	08006b48 	.word	0x08006b48
 8003404:	08003a89 	.word	0x08003a89
 8003408:	200001cc 	.word	0x200001cc
 800340c:	200001b8 	.word	0x200001b8
 8003410:	200001b0 	.word	0x200001b0
 8003414:	200000d4 	.word	0x200000d4
 8003418:	20000024 	.word	0x20000024

0800341c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <vTaskSuspendAll+0x18>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	4a03      	ldr	r2, [pc, #12]	; (8003434 <vTaskSuspendAll+0x18>)
 8003428:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	200001d4 	.word	0x200001d4

08003438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003446:	4b43      	ldr	r3, [pc, #268]	; (8003554 <xTaskResumeAll+0x11c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <xTaskResumeAll+0x2c>
        __asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	603b      	str	r3, [r7, #0]
    }
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003464:	f001 f970 	bl	8004748 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003468:	4b3a      	ldr	r3, [pc, #232]	; (8003554 <xTaskResumeAll+0x11c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	4a39      	ldr	r2, [pc, #228]	; (8003554 <xTaskResumeAll+0x11c>)
 8003470:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <xTaskResumeAll+0x11c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d165      	bne.n	8003546 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <xTaskResumeAll+0x120>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d061      	beq.n	8003546 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003482:	e032      	b.n	80034ea <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <xTaskResumeAll+0x124>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3318      	adds	r3, #24
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f841 	bl	8002518 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3304      	adds	r3, #4
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f83c 	bl	8002518 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 ff84 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <xTaskResumeAll+0x128>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <xTaskResumeAll+0x128>)
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4a27      	ldr	r2, [pc, #156]	; (8003564 <xTaskResumeAll+0x12c>)
 80034c8:	441a      	add	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7fe ffc4 	bl	800245e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <xTaskResumeAll+0x130>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d302      	bcc.n	80034ea <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <xTaskResumeAll+0x134>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <xTaskResumeAll+0x124>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1c8      	bne.n	8003484 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80034f8:	f000 fb94 	bl	8003c24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034fc:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <xTaskResumeAll+0x138>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003508:	f000 f858 	bl	80035bc <xTaskIncrementTick>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <xTaskResumeAll+0x134>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f1      	bne.n	8003508 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <xTaskResumeAll+0x138>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <xTaskResumeAll+0x134>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <xTaskResumeAll+0x13c>)
 8003538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003546:	f001 f92f 	bl	80047a8 <vPortExitCritical>

    return xAlreadyYielded;
 800354a:	68bb      	ldr	r3, [r7, #8]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200001d4 	.word	0x200001d4
 8003558:	200001ac 	.word	0x200001ac
 800355c:	2000016c 	.word	0x2000016c
 8003560:	200001b4 	.word	0x200001b4
 8003564:	200000d8 	.word	0x200000d8
 8003568:	200000d4 	.word	0x200000d4
 800356c:	200001c0 	.word	0x200001c0
 8003570:	200001bc 	.word	0x200001bc
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <xTaskGetTickCount+0x1c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003584:	687b      	ldr	r3, [r7, #4]
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	200001b0 	.word	0x200001b0

08003598 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800359e:	f001 f9bd 	bl	800491c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <xTaskGetTickCountFromISR+0x20>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80035ac:	683b      	ldr	r3, [r7, #0]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200001b0 	.word	0x200001b0

080035bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c6:	4b50      	ldr	r3, [pc, #320]	; (8003708 <xTaskIncrementTick+0x14c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 8092 	bne.w	80036f4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <xTaskIncrementTick+0x150>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035d8:	4a4c      	ldr	r2, [pc, #304]	; (800370c <xTaskIncrementTick+0x150>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d120      	bne.n	8003626 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80035e4:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <xTaskIncrementTick+0x154>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <xTaskIncrementTick+0x48>
        __asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	603b      	str	r3, [r7, #0]
    }
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <xTaskIncrementTick+0x46>
 8003604:	4b42      	ldr	r3, [pc, #264]	; (8003710 <xTaskIncrementTick+0x154>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	4b42      	ldr	r3, [pc, #264]	; (8003714 <xTaskIncrementTick+0x158>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a40      	ldr	r2, [pc, #256]	; (8003710 <xTaskIncrementTick+0x154>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4a40      	ldr	r2, [pc, #256]	; (8003714 <xTaskIncrementTick+0x158>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <xTaskIncrementTick+0x15c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	4a3e      	ldr	r2, [pc, #248]	; (8003718 <xTaskIncrementTick+0x15c>)
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	f000 faff 	bl	8003c24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <xTaskIncrementTick+0x160>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d34c      	bcc.n	80036ca <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003630:	4b37      	ldr	r3, [pc, #220]	; (8003710 <xTaskIncrementTick+0x154>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d104      	bne.n	8003644 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <xTaskIncrementTick+0x160>)
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	601a      	str	r2, [r3, #0]
                    break;
 8003642:	e042      	b.n	80036ca <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003644:	4b32      	ldr	r3, [pc, #200]	; (8003710 <xTaskIncrementTick+0x154>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d203      	bcs.n	8003664 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800365c:	4a2f      	ldr	r2, [pc, #188]	; (800371c <xTaskIncrementTick+0x160>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003662:	e032      	b.n	80036ca <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3304      	adds	r3, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe ff55 	bl	8002518 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3318      	adds	r3, #24
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe ff4c 	bl	8002518 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f002 fe94 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	2201      	movs	r2, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <xTaskIncrementTick+0x164>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4313      	orrs	r3, r2
 8003696:	4a22      	ldr	r2, [pc, #136]	; (8003720 <xTaskIncrementTick+0x164>)
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <xTaskIncrementTick+0x168>)
 80036a8:	441a      	add	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f7fe fed4 	bl	800245e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <xTaskIncrementTick+0x16c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d3b5      	bcc.n	8003630 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80036c4:	2301      	movs	r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c8:	e7b2      	b.n	8003630 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <xTaskIncrementTick+0x16c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	4914      	ldr	r1, [pc, #80]	; (8003724 <xTaskIncrementTick+0x168>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d901      	bls.n	80036e6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <xTaskIncrementTick+0x170>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e004      	b.n	80036fe <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <xTaskIncrementTick+0x174>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <xTaskIncrementTick+0x174>)
 80036fc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200001d4 	.word	0x200001d4
 800370c:	200001b0 	.word	0x200001b0
 8003710:	20000164 	.word	0x20000164
 8003714:	20000168 	.word	0x20000168
 8003718:	200001c4 	.word	0x200001c4
 800371c:	200001cc 	.word	0x200001cc
 8003720:	200001b4 	.word	0x200001b4
 8003724:	200000d8 	.word	0x200000d8
 8003728:	200000d4 	.word	0x200000d4
 800372c:	200001c0 	.word	0x200001c0
 8003730:	200001bc 	.word	0x200001bc

08003734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <vTaskSwitchContext+0xbc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003742:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <vTaskSwitchContext+0xc0>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003748:	e04d      	b.n	80037e6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <vTaskSwitchContext+0xc0>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003750:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <vTaskSwitchContext+0xc4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	f1c3 031f 	rsb	r3, r3, #31
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	4925      	ldr	r1, [pc, #148]	; (80037fc <vTaskSwitchContext+0xc8>)
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <vTaskSwitchContext+0x5c>
        __asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	607b      	str	r3, [r7, #4]
    }
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <vTaskSwitchContext+0x5a>
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <vTaskSwitchContext+0xc8>)
 800379c:	4413      	add	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	3308      	adds	r3, #8
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d104      	bne.n	80037c0 <vTaskSwitchContext+0x8c>
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <vTaskSwitchContext+0xcc>)
 80037c8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <vTaskSwitchContext+0xcc>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <vTaskSwitchContext+0xd0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d102      	bne.n	80037dc <vTaskSwitchContext+0xa8>
 80037d6:	f002 fd4b 	bl	8006270 <SEGGER_SYSVIEW_OnIdle>
}
 80037da:	e004      	b.n	80037e6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <vTaskSwitchContext+0xcc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f002 fda3 	bl	800632c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80037e6:	bf00      	nop
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200001d4 	.word	0x200001d4
 80037f4:	200001c0 	.word	0x200001c0
 80037f8:	200001b4 	.word	0x200001b4
 80037fc:	200000d8 	.word	0x200000d8
 8003800:	200000d4 	.word	0x200000d4
 8003804:	200001d0 	.word	0x200001d0

08003808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60fb      	str	r3, [r7, #12]
    }
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <vTaskPlaceOnEventList+0x44>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3318      	adds	r3, #24
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe fe35 	bl	80024a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800383c:	2101      	movs	r1, #1
 800383e:	6838      	ldr	r0, [r7, #0]
 8003840:	f000 faaa 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200000d4 	.word	0x200000d4

08003850 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	617b      	str	r3, [r7, #20]
    }
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <vTaskPlaceOnEventListRestricted+0x58>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3318      	adds	r3, #24
 800387e:	4619      	mov	r1, r3
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7fe fdec 	bl	800245e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295
 8003890:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003892:	2024      	movs	r0, #36	; 0x24
 8003894:	f001 ffee 	bl	8005874 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	68b8      	ldr	r0, [r7, #8]
 800389c:	f000 fa7c 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
    }
 80038a0:	bf00      	nop
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	200000d4 	.word	0x200000d4

080038ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	60fb      	str	r3, [r7, #12]
    }
 80038d4:	bf00      	nop
 80038d6:	e7fe      	b.n	80038d6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	3318      	adds	r3, #24
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fe1b 	bl	8002518 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e2:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <xTaskRemoveFromEventList+0xb4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d120      	bne.n	800392c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fe12 	bl	8002518 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 fd5a 	bl	80063b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	2201      	movs	r2, #1
 8003902:	409a      	lsls	r2, r3
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <xTaskRemoveFromEventList+0xb8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <xTaskRemoveFromEventList+0xb8>)
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <xTaskRemoveFromEventList+0xbc>)
 800391c:	441a      	add	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3304      	adds	r3, #4
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fe fd9a 	bl	800245e <vListInsertEnd>
 800392a:	e005      	b.n	8003938 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3318      	adds	r3, #24
 8003930:	4619      	mov	r1, r3
 8003932:	480e      	ldr	r0, [pc, #56]	; (800396c <xTaskRemoveFromEventList+0xc0>)
 8003934:	f7fe fd93 	bl	800245e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <xTaskRemoveFromEventList+0xc4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	429a      	cmp	r2, r3
 8003944:	d905      	bls.n	8003952 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003946:	2301      	movs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <xTaskRemoveFromEventList+0xc8>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e001      	b.n	8003956 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003956:	697b      	ldr	r3, [r7, #20]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200001d4 	.word	0x200001d4
 8003964:	200001b4 	.word	0x200001b4
 8003968:	200000d8 	.word	0x200000d8
 800396c:	2000016c 	.word	0x2000016c
 8003970:	200000d4 	.word	0x200000d4
 8003974:	200001c0 	.word	0x200001c0

08003978 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <vTaskInternalSetTimeOutState+0x24>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <vTaskInternalSetTimeOutState+0x28>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	200001c4 	.word	0x200001c4
 80039a0:	200001b0 	.word	0x200001b0

080039a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	613b      	str	r3, [r7, #16]
    }
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60fb      	str	r3, [r7, #12]
    }
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80039e6:	f000 feaf 	bl	8004748 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039ea:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <xTaskCheckForTimeOut+0xc4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d102      	bne.n	8003a0a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e026      	b.n	8003a58 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <xTaskCheckForTimeOut+0xc8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d00a      	beq.n	8003a2c <xTaskCheckForTimeOut+0x88>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d305      	bcc.n	8003a2c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e015      	b.n	8003a58 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20b      	bcs.n	8003a4e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1ad2      	subs	r2, r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff98 	bl	8003978 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	e004      	b.n	8003a58 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a54:	2301      	movs	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a58:	f000 fea6 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200001b0 	.word	0x200001b0
 8003a6c:	200001c4 	.word	0x200001c4

08003a70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <vTaskMissedYield+0x14>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	200001c0 	.word	0x200001c0

08003a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a90:	f000 f852 	bl	8003b38 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <prvIdleTask+0x28>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d9f9      	bls.n	8003a90 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <prvIdleTask+0x2c>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003aac:	e7f0      	b.n	8003a90 <prvIdleTask+0x8>
 8003aae:	bf00      	nop
 8003ab0:	200000d8 	.word	0x200000d8
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	e00c      	b.n	8003ade <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <prvInitialiseTaskLists+0x60>)
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fc96 	bl	8002404 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3301      	adds	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d9ef      	bls.n	8003ac4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ae4:	480d      	ldr	r0, [pc, #52]	; (8003b1c <prvInitialiseTaskLists+0x64>)
 8003ae6:	f7fe fc8d 	bl	8002404 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003aea:	480d      	ldr	r0, [pc, #52]	; (8003b20 <prvInitialiseTaskLists+0x68>)
 8003aec:	f7fe fc8a 	bl	8002404 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003af0:	480c      	ldr	r0, [pc, #48]	; (8003b24 <prvInitialiseTaskLists+0x6c>)
 8003af2:	f7fe fc87 	bl	8002404 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003af6:	480c      	ldr	r0, [pc, #48]	; (8003b28 <prvInitialiseTaskLists+0x70>)
 8003af8:	f7fe fc84 	bl	8002404 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003afc:	480b      	ldr	r0, [pc, #44]	; (8003b2c <prvInitialiseTaskLists+0x74>)
 8003afe:	f7fe fc81 	bl	8002404 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <prvInitialiseTaskLists+0x78>)
 8003b04:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <prvInitialiseTaskLists+0x64>)
 8003b06:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvInitialiseTaskLists+0x7c>)
 8003b0a:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <prvInitialiseTaskLists+0x68>)
 8003b0c:	601a      	str	r2, [r3, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200000d8 	.word	0x200000d8
 8003b1c:	2000013c 	.word	0x2000013c
 8003b20:	20000150 	.word	0x20000150
 8003b24:	2000016c 	.word	0x2000016c
 8003b28:	20000180 	.word	0x20000180
 8003b2c:	20000198 	.word	0x20000198
 8003b30:	20000164 	.word	0x20000164
 8003b34:	20000168 	.word	0x20000168

08003b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b3e:	e019      	b.n	8003b74 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b40:	f000 fe02 	bl	8004748 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <prvCheckTasksWaitingTermination+0x50>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fce1 	bl	8002518 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <prvCheckTasksWaitingTermination+0x54>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <prvCheckTasksWaitingTermination+0x54>)
 8003b5e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <prvCheckTasksWaitingTermination+0x58>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <prvCheckTasksWaitingTermination+0x58>)
 8003b68:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003b6a:	f000 fe1d 	bl	80047a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f848 	bl	8003c04 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <prvCheckTasksWaitingTermination+0x58>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e1      	bne.n	8003b40 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000180 	.word	0x20000180
 8003b8c:	200001ac 	.word	0x200001ac
 8003b90:	20000194 	.word	0x20000194

08003b94 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003ba0:	e005      	b.n	8003bae <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	607b      	str	r3, [r7, #4]
            ulCount++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2ba5      	cmp	r3, #165	; 0xa5
 8003bb4:	d0f5      	beq.n	8003ba2 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	b29b      	uxth	r3, r3
    }
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <uxTaskGetStackHighWaterMark+0x14>
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <uxTaskGetStackHighWaterMark+0x34>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e000      	b.n	8003be2 <uxTaskGetStackHighWaterMark+0x16>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003bea:	6938      	ldr	r0, [r7, #16]
 8003bec:	f7ff ffd2 	bl	8003b94 <prvTaskCheckFreeStackSpace>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
    }
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200000d4 	.word	0x200000d4

08003c04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 ffa3 	bl	8004b5c <vPortFree>
                vPortFree( pxTCB );
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 ffa0 	bl	8004b5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <prvResetNextTaskUnblockTime+0x30>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <prvResetNextTaskUnblockTime+0x34>)
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c3a:	e005      	b.n	8003c48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <prvResetNextTaskUnblockTime+0x30>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <prvResetNextTaskUnblockTime+0x34>)
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000164 	.word	0x20000164
 8003c58:	200001cc 	.word	0x200001cc

08003c5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <xTaskGetSchedulerState+0x34>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	e008      	b.n	8003c82 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <xTaskGetSchedulerState+0x38>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e001      	b.n	8003c82 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c82:	687b      	ldr	r3, [r7, #4]
    }
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	200001b8 	.word	0x200001b8
 8003c94:	200001d4 	.word	0x200001d4

08003c98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d068      	beq.n	8003d80 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003cae:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <xTaskPriorityDisinherit+0xf4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d00a      	beq.n	8003cce <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	60fb      	str	r3, [r7, #12]
    }
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60bb      	str	r3, [r7, #8]
    }
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d03e      	beq.n	8003d80 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13a      	bne.n	8003d80 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fc02 	bl	8002518 <uxListRemove>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	2201      	movs	r2, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43da      	mvns	r2, r3
 8003d26:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4619      	mov	r1, r3
 8003d34:	204a      	movs	r0, #74	; 0x4a
 8003d36:	f001 fdbb 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	f1c3 0205 	rsb	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	2201      	movs	r2, #1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <xTaskPriorityDisinherit+0xfc>)
 8003d6e:	441a      	add	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f7fe fb71 	bl	800245e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d80:	697b      	ldr	r3, [r7, #20]
    }
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200000d4 	.word	0x200000d4
 8003d90:	200001b4 	.word	0x200001b4
 8003d94:	200000d8 	.word	0x200000d8

08003d98 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003da2:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fbb2 	bl	8002518 <uxListRemove>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003dba:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	4b2a      	ldr	r3, [pc, #168]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003dd0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d110      	bne.n	8003dfc <prvAddCurrentTaskToDelayedList+0x64>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	211b      	movs	r1, #27
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fb24 	bl	8006434 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dec:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4820      	ldr	r0, [pc, #128]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003df6:	f7fe fb32 	bl	800245e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dfa:	e032      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d20f      	bcs.n	8003e34 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2104      	movs	r1, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fb0a 	bl	8006434 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fb3a 	bl	80024a6 <vListInsert>
}
 8003e32:	e016      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2104      	movs	r1, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f002 fafa 	bl	8006434 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe fb2a 	bl	80024a6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d202      	bcs.n	8003e62 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6013      	str	r3, [r2, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200001b0 	.word	0x200001b0
 8003e70:	200000d4 	.word	0x200000d4
 8003e74:	200001b4 	.word	0x200001b4
 8003e78:	20000198 	.word	0x20000198
 8003e7c:	20000168 	.word	0x20000168
 8003e80:	20000164 	.word	0x20000164
 8003e84:	200001cc 	.word	0x200001cc

08003e88 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e92:	f000 faf1 	bl	8004478 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <xTimerCreateTimerTask+0x54>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <xTimerCreateTimerTask+0x58>)
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eac:	490d      	ldr	r1, [pc, #52]	; (8003ee4 <xTimerCreateTimerTask+0x5c>)
 8003eae:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <xTimerCreateTimerTask+0x60>)
 8003eb0:	f7ff f8b6 	bl	8003020 <xTaskCreate>
 8003eb4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	603b      	str	r3, [r7, #0]
    }
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ed2:	687b      	ldr	r3, [r7, #4]
    }
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000208 	.word	0x20000208
 8003ee0:	2000020c 	.word	0x2000020c
 8003ee4:	08006b60 	.word	0x08006b60
 8003ee8:	08004021 	.word	0x08004021

08003eec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	623b      	str	r3, [r7, #32]
    }
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02a      	beq.n	8003f78 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b05      	cmp	r3, #5
 8003f32:	dc18      	bgt.n	8003f66 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f34:	f7ff fe92 	bl	8003c5c <xTaskGetSchedulerState>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d109      	bne.n	8003f52 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	f107 0110 	add.w	r1, r7, #16
 8003f46:	2300      	movs	r3, #0
 8003f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4a:	f7fe fbff 	bl	800274c <xQueueGenericSend>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f50:	e012      	b.n	8003f78 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	f107 0110 	add.w	r1, r7, #16
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f7fe fbf5 	bl	800274c <xQueueGenericSend>
 8003f62:	6278      	str	r0, [r7, #36]	; 0x24
 8003f64:	e008      	b.n	8003f78 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	f107 0110 	add.w	r1, r7, #16
 8003f6e:	2300      	movs	r3, #0
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	f7fe fd11 	bl	8002998 <xQueueGenericSendFromISR>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000208 	.word	0x20000208

08003f88 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f92:	4b22      	ldr	r3, [pc, #136]	; (800401c <prvProcessExpiredTimer+0x94>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fab9 	bl	8002518 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d022      	beq.n	8003ffa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	18d1      	adds	r1, r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f000 f8d1 	bl	8004168 <prvInsertTimerInActiveList>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01f      	beq.n	800400c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7ff ff88 	bl	8003eec <xTimerGenericCommand>
 8003fdc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d113      	bne.n	800400c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	4798      	blx	r3
    }
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000200 	.word	0x20000200

08004020 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004028:	f107 0308 	add.w	r3, r7, #8
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f857 	bl	80040e0 <prvGetNextExpireTime>
 8004032:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4619      	mov	r1, r3
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f803 	bl	8004044 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800403e:	f000 f8d5 	bl	80041ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004042:	e7f1      	b.n	8004028 <prvTimerTask+0x8>

08004044 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800404e:	f7ff f9e5 	bl	800341c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f866 	bl	8004128 <prvSampleTimeNow>
 800405c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d130      	bne.n	80040c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <prvProcessTimerOrBlockTask+0x3c>
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	429a      	cmp	r2, r3
 8004070:	d806      	bhi.n	8004080 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004072:	f7ff f9e1 	bl	8003438 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ff85 	bl	8003f88 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800407e:	e024      	b.n	80040ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <prvProcessTimerOrBlockTask+0x90>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <prvProcessTimerOrBlockTask+0x50>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <prvProcessTimerOrBlockTask+0x52>
 8004094:	2300      	movs	r3, #0
 8004096:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <prvProcessTimerOrBlockTask+0x94>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f7fe ff87 	bl	8002fb8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040aa:	f7ff f9c5 	bl	8003438 <xTaskResumeAll>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <prvProcessTimerOrBlockTask+0x98>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
    }
 80040c4:	e001      	b.n	80040ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80040c6:	f7ff f9b7 	bl	8003438 <xTaskResumeAll>
    }
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000204 	.word	0x20000204
 80040d8:	20000208 	.word	0x20000208
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040e8:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <prvGetNextExpireTime+0x44>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <prvGetNextExpireTime+0x16>
 80040f2:	2201      	movs	r2, #1
 80040f4:	e000      	b.n	80040f8 <prvGetNextExpireTime+0x18>
 80040f6:	2200      	movs	r2, #0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <prvGetNextExpireTime+0x44>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e001      	b.n	8004114 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004114:	68fb      	ldr	r3, [r7, #12]
    }
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000200 	.word	0x20000200

08004128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004130:	f7ff fa22 	bl	8003578 <xTaskGetTickCount>
 8004134:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <prvSampleTimeNow+0x3c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	429a      	cmp	r2, r3
 800413e:	d205      	bcs.n	800414c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004140:	f000 f936 	bl	80043b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e002      	b.n	8004152 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <prvSampleTimeNow+0x3c>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004158:	68fb      	ldr	r3, [r7, #12]
    }
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000210 	.word	0x20000210

08004168 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d812      	bhi.n	80041b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e01b      	b.n	80041da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <prvInsertTimerInActiveList+0x7c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7fe f97a 	bl	80024a6 <vListInsert>
 80041b2:	e012      	b.n	80041da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d206      	bcs.n	80041ca <prvInsertTimerInActiveList+0x62>
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e007      	b.n	80041da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <prvInsertTimerInActiveList+0x80>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe f966 	bl	80024a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041da:	697b      	ldr	r3, [r7, #20]
    }
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000204 	.word	0x20000204
 80041e8:	20000200 	.word	0x20000200

080041ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08e      	sub	sp, #56	; 0x38
 80041f0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041f2:	e0ca      	b.n	800438a <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da18      	bge.n	800422c <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	3304      	adds	r3, #4
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <prvProcessReceivedCommands+0x30>
        __asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	61fb      	str	r3, [r7, #28]
    }
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004222:	6850      	ldr	r0, [r2, #4]
 8004224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004226:	6892      	ldr	r2, [r2, #8]
 8004228:	4611      	mov	r1, r2
 800422a:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f2c0 80aa 	blt.w	8004388 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d004      	beq.n	800424a <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	3304      	adds	r3, #4
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe f967 	bl	8002518 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800424a:	463b      	mov	r3, r7
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff6b 	bl	8004128 <prvSampleTimeNow>
 8004252:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b09      	cmp	r3, #9
 8004258:	f200 8097 	bhi.w	800438a <prvProcessReceivedCommands+0x19e>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <prvProcessReceivedCommands+0x78>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	0800428d 	.word	0x0800428d
 8004268:	0800428d 	.word	0x0800428d
 800426c:	0800428d 	.word	0x0800428d
 8004270:	08004301 	.word	0x08004301
 8004274:	08004315 	.word	0x08004315
 8004278:	0800435f 	.word	0x0800435f
 800427c:	0800428d 	.word	0x0800428d
 8004280:	0800428d 	.word	0x0800428d
 8004284:	08004301 	.word	0x08004301
 8004288:	08004315 	.word	0x08004315
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	18d1      	adds	r1, r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ac:	f7ff ff5c 	bl	8004168 <prvInsertTimerInActiveList>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d069      	beq.n	800438a <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042bc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05e      	beq.n	800438a <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	441a      	add	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2300      	movs	r3, #0
 80042da:	2100      	movs	r1, #0
 80042dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042de:	f7ff fe05 	bl	8003eec <xTimerGenericCommand>
 80042e2:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d14f      	bne.n	800438a <prvProcessReceivedCommands+0x19e>
        __asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	61bb      	str	r3, [r7, #24]
    }
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004312:	e03a      	b.n	800438a <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <prvProcessReceivedCommands+0x15e>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	617b      	str	r3, [r7, #20]
    }
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	18d1      	adds	r1, r2, r3
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004358:	f7ff ff06 	bl	8004168 <prvInsertTimerInActiveList>
                        break;
 800435c:	e015      	b.n	800438a <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 800436c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436e:	f000 fbf5 	bl	8004b5c <vPortFree>
 8004372:	e00a      	b.n	800438a <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004386:	e000      	b.n	800438a <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004388:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <prvProcessReceivedCommands+0x1c0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1d39      	adds	r1, r7, #4
 8004390:	2200      	movs	r2, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe fbbe 	bl	8002b14 <xQueueReceive>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	f47f af2a 	bne.w	80041f4 <prvProcessReceivedCommands+0x8>
        }
    }
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3730      	adds	r7, #48	; 0x30
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000208 	.word	0x20000208

080043b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043b6:	e048      	b.n	800444a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043b8:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <prvSwitchTimerLists+0xc0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c2:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <prvSwitchTimerLists+0xc0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe f8a1 	bl	8002518 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02e      	beq.n	800444a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d90e      	bls.n	800441c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <prvSwitchTimerLists+0xc0>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f7fe f846 	bl	80024a6 <vListInsert>
 800441a:	e016      	b.n	800444a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	2100      	movs	r1, #0
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff fd60 	bl	8003eec <xTimerGenericCommand>
 800442c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	603b      	str	r3, [r7, #0]
    }
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <prvSwitchTimerLists+0xc0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1b1      	bne.n	80043b8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <prvSwitchTimerLists+0xc0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <prvSwitchTimerLists+0xc4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a04      	ldr	r2, [pc, #16]	; (8004470 <prvSwitchTimerLists+0xc0>)
 8004460:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004462:	4a04      	ldr	r2, [pc, #16]	; (8004474 <prvSwitchTimerLists+0xc4>)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	6013      	str	r3, [r2, #0]
    }
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000200 	.word	0x20000200
 8004474:	20000204 	.word	0x20000204

08004478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800447c:	f000 f964 	bl	8004748 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004480:	4b12      	ldr	r3, [pc, #72]	; (80044cc <prvCheckForValidListAndQueue+0x54>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11d      	bne.n	80044c4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004488:	4811      	ldr	r0, [pc, #68]	; (80044d0 <prvCheckForValidListAndQueue+0x58>)
 800448a:	f7fd ffbb 	bl	8002404 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800448e:	4811      	ldr	r0, [pc, #68]	; (80044d4 <prvCheckForValidListAndQueue+0x5c>)
 8004490:	f7fd ffb8 	bl	8002404 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <prvCheckForValidListAndQueue+0x60>)
 8004496:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <prvCheckForValidListAndQueue+0x58>)
 8004498:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <prvCheckForValidListAndQueue+0x64>)
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <prvCheckForValidListAndQueue+0x5c>)
 800449e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044a0:	2200      	movs	r2, #0
 80044a2:	2110      	movs	r1, #16
 80044a4:	200a      	movs	r0, #10
 80044a6:	f7fe f8c9 	bl	800263c <xQueueGenericCreate>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4a07      	ldr	r2, [pc, #28]	; (80044cc <prvCheckForValidListAndQueue+0x54>)
 80044ae:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <prvCheckForValidListAndQueue+0x54>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <prvCheckForValidListAndQueue+0x54>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4908      	ldr	r1, [pc, #32]	; (80044e0 <prvCheckForValidListAndQueue+0x68>)
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fd48 	bl	8002f54 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044c4:	f000 f970 	bl	80047a8 <vPortExitCritical>
    }
 80044c8:	bf00      	nop
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000208 	.word	0x20000208
 80044d0:	200001d8 	.word	0x200001d8
 80044d4:	200001ec 	.word	0x200001ec
 80044d8:	20000200 	.word	0x20000200
 80044dc:	20000204 	.word	0x20000204
 80044e0:	08006b68 	.word	0x08006b68

080044e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b04      	subs	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b04      	subs	r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b04      	subs	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004514:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <pxPortInitialiseStack+0x64>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b14      	subs	r3, #20
 800451e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b04      	subs	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f06f 0202 	mvn.w	r2, #2
 8004532:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b20      	subs	r3, #32
 8004538:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800453a:	68fb      	ldr	r3, [r7, #12]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	0800454d 	.word	0x0800454d

0800454c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <prvTaskExitError+0x54>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d00a      	beq.n	8004576 <prvTaskExitError+0x2a>
        __asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
    }
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <prvTaskExitError+0x28>
        __asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60bb      	str	r3, [r7, #8]
    }
 8004588:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800458a:	bf00      	nop
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0fc      	beq.n	800458c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20000028 	.word	0x20000028
	...

080045b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <pxCurrentTCBConst2>)
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	6808      	ldr	r0, [r1, #0]
 80045b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	f380 8809 	msr	PSP, r0
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	4770      	bx	lr
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst2>:
 80045d0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045d8:	4808      	ldr	r0, [pc, #32]	; (80045fc <prvPortStartFirstTask+0x24>)
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	6800      	ldr	r0, [r0, #0]
 80045de:	f380 8808 	msr	MSP, r0
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f380 8814 	msr	CONTROL, r0
 80045ea:	b662      	cpsie	i
 80045ec:	b661      	cpsie	f
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	df00      	svc	0
 80045f8:	bf00      	nop
 80045fa:	0000      	.short	0x0000
 80045fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop

08004604 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800460a:	4b46      	ldr	r3, [pc, #280]	; (8004724 <xPortStartScheduler+0x120>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a46      	ldr	r2, [pc, #280]	; (8004728 <xPortStartScheduler+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10a      	bne.n	800462a <xPortStartScheduler+0x26>
        __asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	613b      	str	r3, [r7, #16]
    }
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <xPortStartScheduler+0x120>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <xPortStartScheduler+0x128>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10a      	bne.n	800464a <xPortStartScheduler+0x46>
        __asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60fb      	str	r3, [r7, #12]
    }
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <xPortStartScheduler+0x12c>)
 800464c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	22ff      	movs	r2, #255	; 0xff
 800465a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <xPortStartScheduler+0x130>)
 8004670:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <xPortStartScheduler+0x134>)
 8004674:	2207      	movs	r2, #7
 8004676:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004678:	e009      	b.n	800468e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <xPortStartScheduler+0x134>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <xPortStartScheduler+0x134>)
 8004682:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b80      	cmp	r3, #128	; 0x80
 8004698:	d0ef      	beq.n	800467a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <xPortStartScheduler+0x134>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1c3 0307 	rsb	r3, r3, #7
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d00a      	beq.n	80046bc <xPortStartScheduler+0xb8>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60bb      	str	r3, [r7, #8]
    }
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <xPortStartScheduler+0x134>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <xPortStartScheduler+0x134>)
 80046c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <xPortStartScheduler+0x134>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ce:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <xPortStartScheduler+0x134>)
 80046d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <xPortStartScheduler+0x138>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <xPortStartScheduler+0x138>)
 80046e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <xPortStartScheduler+0x138>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a14      	ldr	r2, [pc, #80]	; (800473c <xPortStartScheduler+0x138>)
 80046ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046f2:	f000 f8e3 	bl	80048bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <xPortStartScheduler+0x13c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046fc:	f000 f902 	bl	8004904 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <xPortStartScheduler+0x140>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <xPortStartScheduler+0x140>)
 8004706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800470a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800470c:	f7ff ff64 	bl	80045d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004710:	f7ff f810 	bl	8003734 <vTaskSwitchContext>
    prvTaskExitError();
 8004714:	f7ff ff1a 	bl	800454c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	e000ed00 	.word	0xe000ed00
 8004728:	410fc271 	.word	0x410fc271
 800472c:	410fc270 	.word	0x410fc270
 8004730:	e000e400 	.word	0xe000e400
 8004734:	20000214 	.word	0x20000214
 8004738:	20000218 	.word	0x20000218
 800473c:	e000ed20 	.word	0xe000ed20
 8004740:	20000028 	.word	0x20000028
 8004744:	e000ef34 	.word	0xe000ef34

08004748 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
        __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
    }
 8004760:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <vPortEnterCritical+0x58>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <vPortEnterCritical+0x58>)
 800476a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <vPortEnterCritical+0x58>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10f      	bne.n	8004794 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <vPortEnterCritical+0x5c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <vPortEnterCritical+0x4c>
        __asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	603b      	str	r3, [r7, #0]
    }
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <vPortEnterCritical+0x4a>
    }
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000028 	.word	0x20000028
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <vPortExitCritical+0x50>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <vPortExitCritical+0x24>
        __asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	607b      	str	r3, [r7, #4]
    }
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vPortExitCritical+0x50>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <vPortExitCritical+0x50>)
 80047d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <vPortExitCritical+0x50>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <vPortExitCritical+0x42>
 80047de:	2300      	movs	r3, #0
 80047e0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f383 8811 	msr	BASEPRI, r3
    }
 80047e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000028 	.word	0x20000028
 80047fc:	00000000 	.word	0x00000000

08004800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7fe ff80 	bl	8003734 <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
        __asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
    }
 8004880:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004882:	f001 fc7b 	bl	800617c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004886:	f7fe fe99 	bl	80035bc <xTaskIncrementTick>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d006      	beq.n	800489e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004890:	f001 fcd2 	bl	8006238 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <SysTick_Handler+0x50>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e001      	b.n	80048a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800489e:	f001 fcaf 	bl	8006200 <SEGGER_SYSVIEW_RecordExitISR>
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f383 8811 	msr	BASEPRI, r3
    }
 80048ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <vPortSetupTimerInterrupt+0x34>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <vPortSetupTimerInterrupt+0x38>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <vPortSetupTimerInterrupt+0x3c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <vPortSetupTimerInterrupt+0x40>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <vPortSetupTimerInterrupt+0x44>)
 80048da:	3b01      	subs	r3, #1
 80048dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048de:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <vPortSetupTimerInterrupt+0x34>)
 80048e0:	2207      	movs	r2, #7
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e010 	.word	0xe000e010
 80048f4:	e000e018 	.word	0xe000e018
 80048f8:	20000018 	.word	0x20000018
 80048fc:	10624dd3 	.word	0x10624dd3
 8004900:	e000e014 	.word	0xe000e014

08004904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004914 <vPortEnableVFP+0x10>
 8004908:	6801      	ldr	r1, [r0, #0]
 800490a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800490e:	6001      	str	r1, [r0, #0]
 8004910:	4770      	bx	lr
 8004912:	0000      	.short	0x0000
 8004914:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop

0800491c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004922:	f3ef 8305 	mrs	r3, IPSR
 8004926:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d914      	bls.n	8004958 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800492e:	4a17      	ldr	r2, [pc, #92]	; (800498c <vPortValidateInterruptPriority+0x70>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <vPortValidateInterruptPriority+0x74>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	7afa      	ldrb	r2, [r7, #11]
 800493e:	429a      	cmp	r2, r3
 8004940:	d20a      	bcs.n	8004958 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	607b      	str	r3, [r7, #4]
    }
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <vPortValidateInterruptPriority+0x78>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <vPortValidateInterruptPriority+0x7c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d90a      	bls.n	800497e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	603b      	str	r3, [r7, #0]
    }
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <vPortValidateInterruptPriority+0x60>
    }
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	e000e3f0 	.word	0xe000e3f0
 8004990:	20000214 	.word	0x20000214
 8004994:	e000ed0c 	.word	0xe000ed0c
 8004998:	20000218 	.word	0x20000218

0800499c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80049a8:	f7fe fd38 	bl	800341c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049ac:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <pvPortMalloc+0x1a8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049b4:	f000 f934 	bl	8004c20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049b8:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <pvPortMalloc+0x1ac>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4013      	ands	r3, r2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 80a7 	bne.w	8004b14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02d      	beq.n	8004a28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80049cc:	2208      	movs	r2, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d227      	bcs.n	8004a28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80049d8:	2208      	movs	r2, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d021      	beq.n	8004a2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f023 0307 	bic.w	r3, r3, #7
 80049f0:	3308      	adds	r3, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d214      	bcs.n	8004a22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	3308      	adds	r3, #8
 8004a00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <pvPortMalloc+0x92>
        __asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	617b      	str	r3, [r7, #20]
    }
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a26:	e002      	b.n	8004a2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	e000      	b.n	8004a30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d06e      	beq.n	8004b14 <pvPortMalloc+0x178>
 8004a36:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <pvPortMalloc+0x1b0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d869      	bhi.n	8004b14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a40:	4b43      	ldr	r3, [pc, #268]	; (8004b50 <pvPortMalloc+0x1b4>)
 8004a42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a44:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <pvPortMalloc+0x1b4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a4a:	e004      	b.n	8004a56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d903      	bls.n	8004a68 <pvPortMalloc+0xcc>
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f1      	bne.n	8004a4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <pvPortMalloc+0x1a8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d050      	beq.n	8004b14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2208      	movs	r2, #8
 8004a78:	4413      	add	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d91f      	bls.n	8004ad4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <pvPortMalloc+0x120>
        __asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	613b      	str	r3, [r7, #16]
    }
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1ad2      	subs	r2, r2, r3
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ace:	69b8      	ldr	r0, [r7, #24]
 8004ad0:	f000 f908 	bl	8004ce4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <pvPortMalloc+0x1b0>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <pvPortMalloc+0x1b0>)
 8004ae0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <pvPortMalloc+0x1b0>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <pvPortMalloc+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d203      	bcs.n	8004af6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <pvPortMalloc+0x1b0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <pvPortMalloc+0x1b8>)
 8004af4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <pvPortMalloc+0x1ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <pvPortMalloc+0x1bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <pvPortMalloc+0x1bc>)
 8004b12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b14:	f7fe fc90 	bl	8003438 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <pvPortMalloc+0x19c>
        __asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60fb      	str	r3, [r7, #12]
    }
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <pvPortMalloc+0x19a>
    return pvReturn;
 8004b38:	69fb      	ldr	r3, [r7, #28]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3728      	adds	r7, #40	; 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20012e24 	.word	0x20012e24
 8004b48:	20012e38 	.word	0x20012e38
 8004b4c:	20012e28 	.word	0x20012e28
 8004b50:	20012e1c 	.word	0x20012e1c
 8004b54:	20012e2c 	.word	0x20012e2c
 8004b58:	20012e30 	.word	0x20012e30

08004b5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d04d      	beq.n	8004c0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b6e:	2308      	movs	r3, #8
 8004b70:	425b      	negs	r3, r3
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4413      	add	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <vPortFree+0xb8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <vPortFree+0x44>
        __asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	60fb      	str	r3, [r7, #12]
    }
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <vPortFree+0x62>
        __asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60bb      	str	r3, [r7, #8]
    }
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <vPortFree+0xb8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01e      	beq.n	8004c0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11a      	bne.n	8004c0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <vPortFree+0xb8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	401a      	ands	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004be4:	f7fe fc1a 	bl	800341c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <vPortFree+0xbc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <vPortFree+0xbc>)
 8004bf4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bf6:	6938      	ldr	r0, [r7, #16]
 8004bf8:	f000 f874 	bl	8004ce4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <vPortFree+0xc0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	4a06      	ldr	r2, [pc, #24]	; (8004c1c <vPortFree+0xc0>)
 8004c04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c06:	f7fe fc17 	bl	8003438 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c0a:	bf00      	nop
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20012e38 	.word	0x20012e38
 8004c18:	20012e28 	.word	0x20012e28
 8004c1c:	20012e34 	.word	0x20012e34

08004c20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <prvHeapInit+0xac>)
 8004c2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00c      	beq.n	8004c54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3307      	adds	r3, #7
 8004c3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <prvHeapInit+0xac>)
 8004c50:	4413      	add	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <prvHeapInit+0xb0>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <prvHeapInit+0xb0>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0307 	bic.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <prvHeapInit+0xb4>)
 8004c80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <prvHeapInit+0xb4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <prvHeapInit+0xb4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	1ad2      	subs	r2, r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <prvHeapInit+0xb4>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <prvHeapInit+0xb8>)
 8004cae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a09      	ldr	r2, [pc, #36]	; (8004cdc <prvHeapInit+0xbc>)
 8004cb6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <prvHeapInit+0xc0>)
 8004cba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cbe:	601a      	str	r2, [r3, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	2000021c 	.word	0x2000021c
 8004cd0:	20012e1c 	.word	0x20012e1c
 8004cd4:	20012e24 	.word	0x20012e24
 8004cd8:	20012e2c 	.word	0x20012e2c
 8004cdc:	20012e28 	.word	0x20012e28
 8004ce0:	20012e38 	.word	0x20012e38

08004ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <prvInsertBlockIntoFreeList+0xac>)
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e002      	b.n	8004cf8 <prvInsertBlockIntoFreeList+0x14>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d8f7      	bhi.n	8004cf2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d108      	bne.n	8004d26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	441a      	add	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d118      	bne.n	8004d6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <prvInsertBlockIntoFreeList+0xb0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d00d      	beq.n	8004d62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e008      	b.n	8004d74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <prvInsertBlockIntoFreeList+0xb0>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e003      	b.n	8004d74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d002      	beq.n	8004d82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20012e1c 	.word	0x20012e1c
 8004d94:	20012e24 	.word	0x20012e24

08004d98 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <_DoInit+0xa0>)
 8004da0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004da2:	22a8      	movs	r2, #168	; 0xa8
 8004da4:	2100      	movs	r1, #0
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f001 fe92 	bl	8006ad0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2203      	movs	r2, #3
 8004db0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2203      	movs	r2, #3
 8004db6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <_DoInit+0xa4>)
 8004dbc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <_DoInit+0xa8>)
 8004dc2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <_DoInit+0xa4>)
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <_DoInit+0xac>)
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2210      	movs	r2, #16
 8004dee:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e02:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	e00c      	b.n	8004e26 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f1c3 030f 	rsb	r3, r3, #15
 8004e12:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <_DoInit+0xb0>)
 8004e14:	5cd1      	ldrb	r1, [r2, r3]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3301      	adds	r3, #1
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b0f      	cmp	r3, #15
 8004e2a:	d9ef      	bls.n	8004e0c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e2c:	f3bf 8f5f 	dmb	sy
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20012e3c 	.word	0x20012e3c
 8004e3c:	08006b70 	.word	0x08006b70
 8004e40:	20012ee4 	.word	0x20012ee4
 8004e44:	200132e4 	.word	0x200132e4
 8004e48:	08006c4c 	.word	0x08006c4c

08004e4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	; 0x30
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e58:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e66:	f7ff ff97 	bl	8004d98 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3360      	adds	r3, #96	; 0x60
 8004e76:	4a37      	ldr	r2, [pc, #220]	; (8004f54 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d92b      	bls.n	8004ef0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	bf28      	it	cs
 8004eaa:	4613      	movcs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	4413      	add	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	6939      	ldr	r1, [r7, #16]
 8004ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ebe:	f001 fdf9 	bl	8006ab4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d101      	bne.n	8004ef0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bf28      	it	cs
 8004f00:	4613      	movcs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d019      	beq.n	8004f3e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	4413      	add	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f1a:	f001 fdcb 	bl	8006ab4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3730      	adds	r7, #48	; 0x30
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20012e3c 	.word	0x20012e3c

08004f58 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f66:	4b3d      	ldr	r3, [pc, #244]	; (800505c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f74:	f7ff ff10 	bl	8004d98 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f78:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7c:	f04f 0120 	mov.w	r1, #32
 8004f80:	f381 8811 	msr	BASEPRI, r1
 8004f84:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f86:	4b35      	ldr	r3, [pc, #212]	; (800505c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f88:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	dbeb      	blt.n	8004f8e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004fb6:	e000      	b.n	8004fba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004fb8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	da3f      	bge.n	8005044 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004fc4:	6939      	ldr	r1, [r7, #16]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	440b      	add	r3, r1
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004fd8:	6939      	ldr	r1, [r7, #16]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3304      	adds	r3, #4
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004fee:	6939      	ldr	r1, [r7, #16]
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3320      	adds	r3, #32
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005002:	6939      	ldr	r1, [r7, #16]
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	4613      	mov	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	440b      	add	r3, r1
 8005010:	3328      	adds	r3, #40	; 0x28
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005016:	6939      	ldr	r1, [r7, #16]
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	440b      	add	r3, r1
 8005024:	3324      	adds	r3, #36	; 0x24
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	4613      	mov	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	4413      	add	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	440b      	add	r3, r1
 8005038:	332c      	adds	r3, #44	; 0x2c
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800503e:	f3bf 8f5f 	dmb	sy
 8005042:	e002      	b.n	800504a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005044:	f04f 33ff 	mov.w	r3, #4294967295
 8005048:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005050:	69fb      	ldr	r3, [r7, #28]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20012e3c 	.word	0x20012e3c

08005060 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800506e:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005070:	623b      	str	r3, [r7, #32]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800507c:	f7ff fe8c 	bl	8004d98 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005080:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005082:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d82c      	bhi.n	80050e4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800508a:	f3ef 8311 	mrs	r3, BASEPRI
 800508e:	f04f 0120 	mov.w	r1, #32
 8005092:	f381 8811 	msr	BASEPRI, r1
 8005096:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	3360      	adds	r3, #96	; 0x60
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00e      	beq.n	80050ce <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050d4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
 80050e2:	e002      	b.n	80050ea <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80050e4:	f04f 33ff 	mov.w	r3, #4294967295
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3728      	adds	r7, #40	; 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20012e3c 	.word	0x20012e3c

080050f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00f      	beq.n	800512e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800510e:	e002      	b.n	8005116 <_EncodeStr+0x1e>
      Len++;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	3301      	adds	r3, #1
 8005114:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f6      	bne.n	8005110 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	d901      	bls.n	800512e <_EncodeStr+0x36>
      Len = Limit;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2bfe      	cmp	r3, #254	; 0xfe
 8005132:	d806      	bhi.n	8005142 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	60fa      	str	r2, [r7, #12]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e011      	b.n	8005166 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	60fa      	str	r2, [r7, #12]
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	60fa      	str	r2, [r7, #12]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	0a19      	lsrs	r1, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	60fa      	str	r2, [r7, #12]
 8005162:	b2ca      	uxtb	r2, r1
 8005164:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800516a:	e00a      	b.n	8005182 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	1c53      	adds	r3, r2, #1
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	60f9      	str	r1, [r7, #12]
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	701a      	strb	r2, [r3, #0]
    n++;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3301      	adds	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d3f0      	bcc.n	800516c <_EncodeStr+0x74>
  }
  return pPayload;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3307      	adds	r3, #7
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051b6:	4b35      	ldr	r3, [pc, #212]	; (800528c <_HandleIncomingPacket+0xdc>)
 80051b8:	7e1b      	ldrb	r3, [r3, #24]
 80051ba:	4618      	mov	r0, r3
 80051bc:	1cfb      	adds	r3, r7, #3
 80051be:	2201      	movs	r2, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7ff fe43 	bl	8004e4c <SEGGER_RTT_ReadNoLock>
 80051c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d052      	beq.n	8005274 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d031      	beq.n	8005238 <_HandleIncomingPacket+0x88>
 80051d4:	2b80      	cmp	r3, #128	; 0x80
 80051d6:	dc40      	bgt.n	800525a <_HandleIncomingPacket+0xaa>
 80051d8:	2b07      	cmp	r3, #7
 80051da:	dc15      	bgt.n	8005208 <_HandleIncomingPacket+0x58>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	dd3c      	ble.n	800525a <_HandleIncomingPacket+0xaa>
 80051e0:	3b01      	subs	r3, #1
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d839      	bhi.n	800525a <_HandleIncomingPacket+0xaa>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <_HandleIncomingPacket+0x3c>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	0800520f 	.word	0x0800520f
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521b 	.word	0x0800521b
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005227 	.word	0x08005227
 8005200:	0800522d 	.word	0x0800522d
 8005204:	08005233 	.word	0x08005233
 8005208:	2b7f      	cmp	r3, #127	; 0x7f
 800520a:	d035      	beq.n	8005278 <_HandleIncomingPacket+0xc8>
 800520c:	e025      	b.n	800525a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800520e:	f000 fced 	bl	8005bec <SEGGER_SYSVIEW_Start>
      break;
 8005212:	e036      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005214:	f000 fda4 	bl	8005d60 <SEGGER_SYSVIEW_Stop>
      break;
 8005218:	e033      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800521a:	f000 ff7d 	bl	8006118 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800521e:	e030      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005220:	f000 ff42 	bl	80060a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005224:	e02d      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005226:	f000 fdc1 	bl	8005dac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800522a:	e02a      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800522c:	f001 fa10 	bl	8006650 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005230:	e027      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005232:	f001 f9ef 	bl	8006614 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005236:	e024      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005238:	4b14      	ldr	r3, [pc, #80]	; (800528c <_HandleIncomingPacket+0xdc>)
 800523a:	7e1b      	ldrb	r3, [r3, #24]
 800523c:	4618      	mov	r0, r3
 800523e:	1cfb      	adds	r3, r7, #3
 8005240:	2201      	movs	r2, #1
 8005242:	4619      	mov	r1, r3
 8005244:	f7ff fe02 	bl	8004e4c <SEGGER_RTT_ReadNoLock>
 8005248:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	4618      	mov	r0, r3
 8005254:	f001 f95e 	bl	8006514 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005258:	e010      	b.n	800527c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	b25b      	sxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	da0e      	bge.n	8005280 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <_HandleIncomingPacket+0xdc>)
 8005264:	7e1b      	ldrb	r3, [r3, #24]
 8005266:	4618      	mov	r0, r3
 8005268:	1cfb      	adds	r3, r7, #3
 800526a:	2201      	movs	r2, #1
 800526c:	4619      	mov	r1, r3
 800526e:	f7ff fded 	bl	8004e4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005272:	e005      	b.n	8005280 <_HandleIncomingPacket+0xd0>
    }
  }
 8005274:	bf00      	nop
 8005276:	e004      	b.n	8005282 <_HandleIncomingPacket+0xd2>
      break;
 8005278:	bf00      	nop
 800527a:	e002      	b.n	8005282 <_HandleIncomingPacket+0xd2>
      break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <_HandleIncomingPacket+0xd2>
      break;
 8005280:	bf00      	nop
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	200142fc 	.word	0x200142fc

08005290 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	; 0x30
 8005294:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005296:	2301      	movs	r3, #1
 8005298:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	3301      	adds	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a4:	4b31      	ldr	r3, [pc, #196]	; (800536c <_TrySendOverflowPacket+0xdc>)
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	e00b      	b.n	80052c4 <_TrySendOverflowPacket+0x34>
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	1c59      	adds	r1, r3, #1
 80052b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	09db      	lsrs	r3, r3, #7
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	2b7f      	cmp	r3, #127	; 0x7f
 80052c8:	d8f0      	bhi.n	80052ac <_TrySendOverflowPacket+0x1c>
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052da:	4b25      	ldr	r3, [pc, #148]	; (8005370 <_TrySendOverflowPacket+0xe0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052e0:	4b22      	ldr	r3, [pc, #136]	; (800536c <_TrySendOverflowPacket+0xdc>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	623b      	str	r3, [r7, #32]
 80052f2:	e00b      	b.n	800530c <_TrySendOverflowPacket+0x7c>
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	6279      	str	r1, [r7, #36]	; 0x24
 80052fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	09db      	lsrs	r3, r3, #7
 800530a:	623b      	str	r3, [r7, #32]
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	2b7f      	cmp	r3, #127	; 0x7f
 8005310:	d8f0      	bhi.n	80052f4 <_TrySendOverflowPacket+0x64>
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	627a      	str	r2, [r7, #36]	; 0x24
 8005318:	6a3a      	ldr	r2, [r7, #32]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <_TrySendOverflowPacket+0xdc>)
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	4618      	mov	r0, r3
 8005328:	1d3b      	adds	r3, r7, #4
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	461a      	mov	r2, r3
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	4619      	mov	r1, r3
 8005334:	f7fa ff5c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005338:	4603      	mov	r3, r0
 800533a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005342:	4a0a      	ldr	r2, [pc, #40]	; (800536c <_TrySendOverflowPacket+0xdc>)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <_TrySendOverflowPacket+0xdc>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	3b01      	subs	r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <_TrySendOverflowPacket+0xdc>)
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e004      	b.n	8005360 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <_TrySendOverflowPacket+0xdc>)
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	3301      	adds	r3, #1
 800535c:	4a03      	ldr	r2, [pc, #12]	; (800536c <_TrySendOverflowPacket+0xdc>)
 800535e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005360:	693b      	ldr	r3, [r7, #16]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3730      	adds	r7, #48	; 0x30
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200142fc 	.word	0x200142fc
 8005370:	e0001004 	.word	0xe0001004

08005374 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005380:	4b98      	ldr	r3, [pc, #608]	; (80055e4 <_SendPacket+0x270>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d010      	beq.n	80053aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005388:	4b96      	ldr	r3, [pc, #600]	; (80055e4 <_SendPacket+0x270>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 812d 	beq.w	80055ec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005392:	4b94      	ldr	r3, [pc, #592]	; (80055e4 <_SendPacket+0x270>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d109      	bne.n	80053ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800539a:	f7ff ff79 	bl	8005290 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800539e:	4b91      	ldr	r3, [pc, #580]	; (80055e4 <_SendPacket+0x270>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	f040 8124 	bne.w	80055f0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80053a8:	e001      	b.n	80053ae <_SendPacket+0x3a>
    goto Send;
 80053aa:	bf00      	nop
 80053ac:	e000      	b.n	80053b0 <_SendPacket+0x3c>
Send:
 80053ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b1f      	cmp	r3, #31
 80053b4:	d809      	bhi.n	80053ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053b6:	4b8b      	ldr	r3, [pc, #556]	; (80055e4 <_SendPacket+0x270>)
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f040 8115 	bne.w	80055f4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b17      	cmp	r3, #23
 80053ce:	d807      	bhi.n	80053e0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e0c4      	b.n	800556a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b7f      	cmp	r3, #127	; 0x7f
 80053ec:	d912      	bls.n	8005414 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	09da      	lsrs	r2, r3, #7
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	3a01      	subs	r2, #1
 8005406:	60fa      	str	r2, [r7, #12]
 8005408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e006      	b.n	8005422 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3b01      	subs	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b7e      	cmp	r3, #126	; 0x7e
 8005426:	d807      	bhi.n	8005438 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3b01      	subs	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e098      	b.n	800556a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800543e:	d212      	bcs.n	8005466 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	09da      	lsrs	r2, r3, #7
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3b01      	subs	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	3a01      	subs	r2, #1
 8005458:	60fa      	str	r2, [r7, #12]
 800545a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e081      	b.n	800556a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800546c:	d21d      	bcs.n	80054aa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0b9a      	lsrs	r2, r3, #14
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3b01      	subs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	09db      	lsrs	r3, r3, #7
 8005482:	b2db      	uxtb	r3, r3
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	3a01      	subs	r2, #1
 8005488:	60fa      	str	r2, [r7, #12]
 800548a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	3a01      	subs	r2, #1
 800549c:	60fa      	str	r2, [r7, #12]
 800549e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e05f      	b.n	800556a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b0:	d228      	bcs.n	8005504 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0d5a      	lsrs	r2, r3, #21
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0b9b      	lsrs	r3, r3, #14
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	3a01      	subs	r2, #1
 80054cc:	60fa      	str	r2, [r7, #12]
 80054ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	09db      	lsrs	r3, r3, #7
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	3a01      	subs	r2, #1
 80054e2:	60fa      	str	r2, [r7, #12]
 80054e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	3a01      	subs	r2, #1
 80054f6:	60fa      	str	r2, [r7, #12]
 80054f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e032      	b.n	800556a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	0f1a      	lsrs	r2, r3, #28
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3b01      	subs	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	0d5b      	lsrs	r3, r3, #21
 8005518:	b2db      	uxtb	r3, r3
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	3a01      	subs	r2, #1
 800551e:	60fa      	str	r2, [r7, #12]
 8005520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0b9b      	lsrs	r3, r3, #14
 800552e:	b2db      	uxtb	r3, r3
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	3a01      	subs	r2, #1
 8005534:	60fa      	str	r2, [r7, #12]
 8005536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800553a:	b2da      	uxtb	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	09db      	lsrs	r3, r3, #7
 8005544:	b2db      	uxtb	r3, r3
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	3a01      	subs	r2, #1
 800554a:	60fa      	str	r2, [r7, #12]
 800554c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005550:	b2da      	uxtb	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	3a01      	subs	r2, #1
 800555e:	60fa      	str	r2, [r7, #12]
 8005560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800556a:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <_SendPacket+0x274>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005570:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <_SendPacket+0x270>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	e00b      	b.n	800559c <_SendPacket+0x228>
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	6279      	str	r1, [r7, #36]	; 0x24
 800558e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	09db      	lsrs	r3, r3, #7
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	2b7f      	cmp	r3, #127	; 0x7f
 80055a0:	d8f0      	bhi.n	8005584 <_SendPacket+0x210>
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	627a      	str	r2, [r7, #36]	; 0x24
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80055b2:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <_SendPacket+0x270>)
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	4618      	mov	r0, r3
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	f7fa fe15 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055c6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <_SendPacket+0x270>)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	60d3      	str	r3, [r2, #12]
 80055d4:	e00f      	b.n	80055f6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80055d6:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <_SendPacket+0x270>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <_SendPacket+0x270>)
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e008      	b.n	80055f6 <_SendPacket+0x282>
 80055e4:	200142fc 	.word	0x200142fc
 80055e8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80055ec:	bf00      	nop
 80055ee:	e002      	b.n	80055f6 <_SendPacket+0x282>
      goto SendDone;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <_SendPacket+0x282>
      goto SendDone;
 80055f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <_SendPacket+0x2d4>)
 80055f8:	7e1b      	ldrb	r3, [r3, #24]
 80055fa:	4619      	mov	r1, r3
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <_SendPacket+0x2d8>)
 80055fe:	460b      	mov	r3, r1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	440b      	add	r3, r1
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	336c      	adds	r3, #108	; 0x6c
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <_SendPacket+0x2d4>)
 800560e:	7e1b      	ldrb	r3, [r3, #24]
 8005610:	4618      	mov	r0, r3
 8005612:	490e      	ldr	r1, [pc, #56]	; (800564c <_SendPacket+0x2d8>)
 8005614:	4603      	mov	r3, r0
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4403      	add	r3, r0
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	440b      	add	r3, r1
 800561e:	3370      	adds	r3, #112	; 0x70
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d00b      	beq.n	800563e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <_SendPacket+0x2d4>)
 8005628:	789b      	ldrb	r3, [r3, #2]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <_SendPacket+0x2d4>)
 8005630:	2201      	movs	r2, #1
 8005632:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005634:	f7ff fdbc 	bl	80051b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <_SendPacket+0x2d4>)
 800563a:	2200      	movs	r2, #0
 800563c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800563e:	bf00      	nop
 8005640:	3728      	adds	r7, #40	; 0x28
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	200142fc 	.word	0x200142fc
 800564c:	20012e3c 	.word	0x20012e3c

08005650 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b0a2      	sub	sp, #136	; 0x88
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8005666:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8005672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01d      	beq.n	80056b6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800567a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800567e:	2b25      	cmp	r3, #37	; 0x25
 8005680:	d1f1      	bne.n	8005666 <_VPrintHost+0x16>
      c = *p;
 8005682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	1d19      	adds	r1, r3, #4
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6011      	str	r1, [r2, #0]
 8005694:	6819      	ldr	r1, [r3, #0]
 8005696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056a0:	460a      	mov	r2, r1
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	3388      	adds	r3, #136	; 0x88
 80056a6:	443b      	add	r3, r7
 80056a8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 80056ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d002      	beq.n	80056ba <_VPrintHost+0x6a>
    c = *p++;
 80056b4:	e7d7      	b.n	8005666 <_VPrintHost+0x16>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <_VPrintHost+0x6c>
        break;
 80056ba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 80056bc:	f3ef 8311 	mrs	r3, BASEPRI
 80056c0:	f04f 0120 	mov.w	r1, #32
 80056c4:	f381 8811 	msr	BASEPRI, r1
 80056c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80056ca:	483f      	ldr	r0, [pc, #252]	; (80057c8 <_VPrintHost+0x178>)
 80056cc:	f7ff fd64 	bl	8005198 <_PreparePacket>
 80056d0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056d8:	f7ff fd0e 	bl	80050f8 <_EncodeStr>
 80056dc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 80056de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e0:	677b      	str	r3, [r7, #116]	; 0x74
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	673b      	str	r3, [r7, #112]	; 0x70
 80056e6:	e00b      	b.n	8005700 <_VPrintHost+0xb0>
 80056e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	6779      	str	r1, [r7, #116]	; 0x74
 80056f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fc:	09db      	lsrs	r3, r3, #7
 80056fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005702:	2b7f      	cmp	r3, #127	; 0x7f
 8005704:	d8f0      	bhi.n	80056e8 <_VPrintHost+0x98>
 8005706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	677a      	str	r2, [r7, #116]	; 0x74
 800570c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005714:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8005716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800571e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005720:	e00b      	b.n	800573a <_VPrintHost+0xea>
 8005722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	66f9      	str	r1, [r7, #108]	; 0x6c
 800572c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	66bb      	str	r3, [r7, #104]	; 0x68
 800573a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800573c:	2b7f      	cmp	r3, #127	; 0x7f
 800573e:	d8f0      	bhi.n	8005722 <_VPrintHost+0xd2>
 8005740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005758:	e022      	b.n	80057a0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800575a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575c:	667b      	str	r3, [r7, #100]	; 0x64
 800575e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	663b      	str	r3, [r7, #96]	; 0x60
 8005766:	e00b      	b.n	8005780 <_VPrintHost+0x130>
 8005768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576a:	b2da      	uxtb	r2, r3
 800576c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	6679      	str	r1, [r7, #100]	; 0x64
 8005772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577c:	09db      	lsrs	r3, r3, #7
 800577e:	663b      	str	r3, [r7, #96]	; 0x60
 8005780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005782:	2b7f      	cmp	r3, #127	; 0x7f
 8005784:	d8f0      	bhi.n	8005768 <_VPrintHost+0x118>
 8005786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	667a      	str	r2, [r7, #100]	; 0x64
 800578c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005794:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8005796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800579a:	3304      	adds	r3, #4
 800579c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80057a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1d5      	bne.n	800575a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057ae:	221a      	movs	r2, #26
 80057b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80057b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80057b4:	f7ff fdde 	bl	8005374 <_SendPacket>
    RECORD_END();
 80057b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3788      	adds	r7, #136	; 0x88
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	2001432c 	.word	0x2001432c

080057cc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057da:	2300      	movs	r3, #0
 80057dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057e0:	4917      	ldr	r1, [pc, #92]	; (8005840 <SEGGER_SYSVIEW_Init+0x74>)
 80057e2:	4818      	ldr	r0, [pc, #96]	; (8005844 <SEGGER_SYSVIEW_Init+0x78>)
 80057e4:	f7ff fbb8 	bl	8004f58 <SEGGER_RTT_AllocUpBuffer>
 80057e8:	4603      	mov	r3, r0
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	4b16      	ldr	r3, [pc, #88]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80057f0:	4b15      	ldr	r3, [pc, #84]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 80057f2:	785a      	ldrb	r2, [r3, #1]
 80057f4:	4b14      	ldr	r3, [pc, #80]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 80057f6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 80057fa:	7e1b      	ldrb	r3, [r3, #24]
 80057fc:	4618      	mov	r0, r3
 80057fe:	2300      	movs	r3, #0
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	2308      	movs	r3, #8
 8005804:	4a11      	ldr	r2, [pc, #68]	; (800584c <SEGGER_SYSVIEW_Init+0x80>)
 8005806:	490f      	ldr	r1, [pc, #60]	; (8005844 <SEGGER_SYSVIEW_Init+0x78>)
 8005808:	f7ff fc2a 	bl	8005060 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 800580e:	2200      	movs	r2, #0
 8005810:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <SEGGER_SYSVIEW_Init+0x84>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a0c      	ldr	r2, [pc, #48]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 8005818:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800581a:	4a0b      	ldr	r2, [pc, #44]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005820:	4a09      	ldr	r2, [pc, #36]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005826:	4a08      	ldr	r2, [pc, #32]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800582c:	4a06      	ldr	r2, [pc, #24]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <SEGGER_SYSVIEW_Init+0x7c>)
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200132f4 	.word	0x200132f4
 8005844:	08006b7c 	.word	0x08006b7c
 8005848:	200142fc 	.word	0x200142fc
 800584c:	200142f4 	.word	0x200142f4
 8005850:	e0001004 	.word	0xe0001004

08005854 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800585c:	4a04      	ldr	r2, [pc, #16]	; (8005870 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6113      	str	r3, [r2, #16]
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	200142fc 	.word	0x200142fc

08005874 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800587c:	f3ef 8311 	mrs	r3, BASEPRI
 8005880:	f04f 0120 	mov.w	r1, #32
 8005884:	f381 8811 	msr	BASEPRI, r1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4808      	ldr	r0, [pc, #32]	; (80058ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800588c:	f7ff fc84 	bl	8005198 <_PreparePacket>
 8005890:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68b8      	ldr	r0, [r7, #8]
 8005898:	f7ff fd6c 	bl	8005374 <_SendPacket>
  RECORD_END();
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f383 8811 	msr	BASEPRI, r3
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	2001432c 	.word	0x2001432c

080058b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058ba:	f3ef 8311 	mrs	r3, BASEPRI
 80058be:	f04f 0120 	mov.w	r1, #32
 80058c2:	f381 8811 	msr	BASEPRI, r1
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	4816      	ldr	r0, [pc, #88]	; (8005924 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058ca:	f7ff fc65 	bl	8005198 <_PreparePacket>
 80058ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	e00b      	b.n	80058f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	1c59      	adds	r1, r3, #1
 80058e6:	61f9      	str	r1, [r7, #28]
 80058e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	09db      	lsrs	r3, r3, #7
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b7f      	cmp	r3, #127	; 0x7f
 80058fa:	d8f0      	bhi.n	80058de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	61fa      	str	r2, [r7, #28]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	6938      	ldr	r0, [r7, #16]
 8005912:	f7ff fd2f 	bl	8005374 <_SendPacket>
  RECORD_END();
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f383 8811 	msr	BASEPRI, r3
}
 800591c:	bf00      	nop
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	2001432c 	.word	0x2001432c

08005928 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	; 0x30
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005934:	f3ef 8311 	mrs	r3, BASEPRI
 8005938:	f04f 0120 	mov.w	r1, #32
 800593c:	f381 8811 	msr	BASEPRI, r1
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	4825      	ldr	r0, [pc, #148]	; (80059d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005944:	f7ff fc28 	bl	8005198 <_PreparePacket>
 8005948:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
 8005956:	e00b      	b.n	8005970 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	b2da      	uxtb	r2, r3
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	1c59      	adds	r1, r3, #1
 8005960:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	09db      	lsrs	r3, r3, #7
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	2b7f      	cmp	r3, #127	; 0x7f
 8005974:	d8f0      	bhi.n	8005958 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800597c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	e00b      	b.n	80059a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	1c59      	adds	r1, r3, #1
 8005998:	6279      	str	r1, [r7, #36]	; 0x24
 800599a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	09db      	lsrs	r3, r3, #7
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b7f      	cmp	r3, #127	; 0x7f
 80059ac:	d8f0      	bhi.n	8005990 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	627a      	str	r2, [r7, #36]	; 0x24
 80059b4:	6a3a      	ldr	r2, [r7, #32]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	69b8      	ldr	r0, [r7, #24]
 80059c4:	f7ff fcd6 	bl	8005374 <_SendPacket>
  RECORD_END();
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f383 8811 	msr	BASEPRI, r3
}
 80059ce:	bf00      	nop
 80059d0:	3730      	adds	r7, #48	; 0x30
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	2001432c 	.word	0x2001432c

080059dc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80059ea:	f3ef 8311 	mrs	r3, BASEPRI
 80059ee:	f04f 0120 	mov.w	r1, #32
 80059f2:	f381 8811 	msr	BASEPRI, r1
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	4832      	ldr	r0, [pc, #200]	; (8005ac4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80059fa:	f7ff fbcd 	bl	8005198 <_PreparePacket>
 80059fe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0c:	e00b      	b.n	8005a26 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	6379      	str	r1, [r7, #52]	; 0x34
 8005a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	09db      	lsrs	r3, r3, #7
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2a:	d8f0      	bhi.n	8005a0e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	637a      	str	r2, [r7, #52]	; 0x34
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	e00b      	b.n	8005a5e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	1c59      	adds	r1, r3, #1
 8005a4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	09db      	lsrs	r3, r3, #7
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2b7f      	cmp	r3, #127	; 0x7f
 8005a62:	d8f0      	bhi.n	8005a46 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	e00b      	b.n	8005a96 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	6279      	str	r1, [r7, #36]	; 0x24
 8005a88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	09db      	lsrs	r3, r3, #7
 8005a94:	623b      	str	r3, [r7, #32]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9a:	d8f0      	bhi.n	8005a7e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa2:	6a3a      	ldr	r2, [r7, #32]
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	69b8      	ldr	r0, [r7, #24]
 8005ab2:	f7ff fc5f 	bl	8005374 <_SendPacket>
  RECORD_END();
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f383 8811 	msr	BASEPRI, r3
}
 8005abc:	bf00      	nop
 8005abe:	3738      	adds	r7, #56	; 0x38
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	2001432c 	.word	0x2001432c

08005ac8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b090      	sub	sp, #64	; 0x40
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8005ada:	f04f 0120 	mov.w	r1, #32
 8005ade:	f381 8811 	msr	BASEPRI, r1
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	4840      	ldr	r0, [pc, #256]	; (8005be8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ae6:	f7ff fb57 	bl	8005198 <_PreparePacket>
 8005aea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af8:	e00b      	b.n	8005b12 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	1c59      	adds	r1, r3, #1
 8005b02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	09db      	lsrs	r3, r3, #7
 8005b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	2b7f      	cmp	r3, #127	; 0x7f
 8005b16:	d8f0      	bhi.n	8005afa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	e00b      	b.n	8005b4a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	6379      	str	r1, [r7, #52]	; 0x34
 8005b3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	09db      	lsrs	r3, r3, #7
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4e:	d8f0      	bhi.n	8005b32 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	637a      	str	r2, [r7, #52]	; 0x34
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b68:	e00b      	b.n	8005b82 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	1c59      	adds	r1, r3, #1
 8005b72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	09db      	lsrs	r3, r3, #7
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	2b7f      	cmp	r3, #127	; 0x7f
 8005b86:	d8f0      	bhi.n	8005b6a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9e:	623b      	str	r3, [r7, #32]
 8005ba0:	e00b      	b.n	8005bba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	1c59      	adds	r1, r3, #1
 8005baa:	6279      	str	r1, [r7, #36]	; 0x24
 8005bac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	09db      	lsrs	r3, r3, #7
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bbe:	d8f0      	bhi.n	8005ba2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8005bc6:	6a3a      	ldr	r2, [r7, #32]
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	69b8      	ldr	r0, [r7, #24]
 8005bd6:	f7ff fbcd 	bl	8005374 <_SendPacket>
  RECORD_END();
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f383 8811 	msr	BASEPRI, r3
}
 8005be0:	bf00      	nop
 8005be2:	3740      	adds	r7, #64	; 0x40
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	2001432c 	.word	0x2001432c

08005bec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08c      	sub	sp, #48	; 0x30
 8005bf0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005bf2:	4b58      	ldr	r3, [pc, #352]	; (8005d54 <SEGGER_SYSVIEW_Start+0x168>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfc:	f04f 0120 	mov.w	r1, #32
 8005c00:	f381 8811 	msr	BASEPRI, r1
 8005c04:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c06:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <SEGGER_SYSVIEW_Start+0x168>)
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	220a      	movs	r2, #10
 8005c0c:	4952      	ldr	r1, [pc, #328]	; (8005d58 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fa faee 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c1a:	200a      	movs	r0, #10
 8005c1c:	f7ff fe2a 	bl	8005874 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c20:	f3ef 8311 	mrs	r3, BASEPRI
 8005c24:	f04f 0120 	mov.w	r1, #32
 8005c28:	f381 8811 	msr	BASEPRI, r1
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	484b      	ldr	r0, [pc, #300]	; (8005d5c <SEGGER_SYSVIEW_Start+0x170>)
 8005c30:	f7ff fab2 	bl	8005198 <_PreparePacket>
 8005c34:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3e:	4b45      	ldr	r3, [pc, #276]	; (8005d54 <SEGGER_SYSVIEW_Start+0x168>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c44:	e00b      	b.n	8005c5e <SEGGER_SYSVIEW_Start+0x72>
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	1c59      	adds	r1, r3, #1
 8005c4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	09db      	lsrs	r3, r3, #7
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	2b7f      	cmp	r3, #127	; 0x7f
 8005c62:	d8f0      	bhi.n	8005c46 <SEGGER_SYSVIEW_Start+0x5a>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
 8005c78:	4b36      	ldr	r3, [pc, #216]	; (8005d54 <SEGGER_SYSVIEW_Start+0x168>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	e00b      	b.n	8005c98 <SEGGER_SYSVIEW_Start+0xac>
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	6279      	str	r1, [r7, #36]	; 0x24
 8005c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	623b      	str	r3, [r7, #32]
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c9c:	d8f0      	bhi.n	8005c80 <SEGGER_SYSVIEW_Start+0x94>
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca4:	6a3a      	ldr	r2, [r7, #32]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <SEGGER_SYSVIEW_Start+0x168>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e00b      	b.n	8005cd2 <SEGGER_SYSVIEW_Start+0xe6>
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	61f9      	str	r1, [r7, #28]
 8005cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	09db      	lsrs	r3, r3, #7
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd6:	d8f0      	bhi.n	8005cba <SEGGER_SYSVIEW_Start+0xce>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e00b      	b.n	8005d0a <SEGGER_SYSVIEW_Start+0x11e>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1c59      	adds	r1, r3, #1
 8005cfa:	6179      	str	r1, [r7, #20]
 8005cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0e:	d8f0      	bhi.n	8005cf2 <SEGGER_SYSVIEW_Start+0x106>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	617a      	str	r2, [r7, #20]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d20:	2218      	movs	r2, #24
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fb25 	bl	8005374 <_SendPacket>
      RECORD_END();
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <SEGGER_SYSVIEW_Start+0x168>)
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <SEGGER_SYSVIEW_Start+0x168>)
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d3e:	f000 f9eb 	bl	8006118 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d42:	f000 f9b1 	bl	80060a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d46:	f000 fc83 	bl	8006650 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d4a:	bf00      	nop
 8005d4c:	3730      	adds	r7, #48	; 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200142fc 	.word	0x200142fc
 8005d58:	08006c60 	.word	0x08006c60
 8005d5c:	2001432c 	.word	0x2001432c

08005d60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d66:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6a:	f04f 0120 	mov.w	r1, #32
 8005d6e:	f381 8811 	msr	BASEPRI, r1
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d76:	f7ff fa0f 	bl	8005198 <_PreparePacket>
 8005d7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d84:	220b      	movs	r2, #11
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6838      	ldr	r0, [r7, #0]
 8005d8a:	f7ff faf3 	bl	8005374 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f383 8811 	msr	BASEPRI, r3
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	2001432c 	.word	0x2001432c
 8005da8:	200142fc 	.word	0x200142fc

08005dac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005db2:	f3ef 8311 	mrs	r3, BASEPRI
 8005db6:	f04f 0120 	mov.w	r1, #32
 8005dba:	f381 8811 	msr	BASEPRI, r1
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	4845      	ldr	r0, [pc, #276]	; (8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dc2:	f7ff f9e9 	bl	8005198 <_PreparePacket>
 8005dc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd0:	4b42      	ldr	r3, [pc, #264]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd6:	e00b      	b.n	8005df0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	1c59      	adds	r1, r3, #1
 8005de0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	09db      	lsrs	r3, r3, #7
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	2b7f      	cmp	r3, #127	; 0x7f
 8005df4:	d8f0      	bhi.n	8005dd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	4b34      	ldr	r3, [pc, #208]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	e00b      	b.n	8005e2a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1c59      	adds	r1, r3, #1
 8005e1a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	09db      	lsrs	r3, r3, #7
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e2e:	d8f0      	bhi.n	8005e12 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	627a      	str	r2, [r7, #36]	; 0x24
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e00b      	b.n	8005e64 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	1c59      	adds	r1, r3, #1
 8005e54:	61f9      	str	r1, [r7, #28]
 8005e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	09db      	lsrs	r3, r3, #7
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b7f      	cmp	r3, #127	; 0x7f
 8005e68:	d8f0      	bhi.n	8005e4c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	61fa      	str	r2, [r7, #28]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e00b      	b.n	8005e9c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1c59      	adds	r1, r3, #1
 8005e8c:	6179      	str	r1, [r7, #20]
 8005e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	09db      	lsrs	r3, r3, #7
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea0:	d8f0      	bhi.n	8005e84 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	617a      	str	r2, [r7, #20]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005eb2:	2218      	movs	r2, #24
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	68b8      	ldr	r0, [r7, #8]
 8005eb8:	f7ff fa5c 	bl	8005374 <_SendPacket>
  RECORD_END();
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005eca:	4b04      	ldr	r3, [pc, #16]	; (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	4798      	blx	r3
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3730      	adds	r7, #48	; 0x30
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	2001432c 	.word	0x2001432c
 8005edc:	200142fc 	.word	0x200142fc

08005ee0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b092      	sub	sp, #72	; 0x48
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8005eec:	f04f 0120 	mov.w	r1, #32
 8005ef0:	f381 8811 	msr	BASEPRI, r1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	486a      	ldr	r0, [pc, #424]	; (80060a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ef8:	f7ff f94e 	bl	8005198 <_PreparePacket>
 8005efc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b66      	ldr	r3, [pc, #408]	; (80060a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	643b      	str	r3, [r7, #64]	; 0x40
 8005f12:	e00b      	b.n	8005f2c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	6479      	str	r1, [r7, #68]	; 0x44
 8005f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	09db      	lsrs	r3, r3, #7
 8005f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f30:	d8f0      	bhi.n	8005f14 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	647a      	str	r2, [r7, #68]	; 0x44
 8005f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f4c:	e00b      	b.n	8005f66 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f54:	1c59      	adds	r1, r3, #1
 8005f56:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	09db      	lsrs	r3, r3, #7
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6a:	d8f0      	bhi.n	8005f4e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff f8b7 	bl	80050f8 <_EncodeStr>
 8005f8a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f8c:	2209      	movs	r2, #9
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6938      	ldr	r0, [r7, #16]
 8005f92:	f7ff f9ef 	bl	8005374 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005faa:	e00b      	b.n	8005fc4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	6379      	str	r1, [r7, #52]	; 0x34
 8005fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	09db      	lsrs	r3, r3, #7
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc8:	d8f0      	bhi.n	8005fac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	637a      	str	r2, [r7, #52]	; 0x34
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe4:	e00b      	b.n	8005ffe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	1c59      	adds	r1, r3, #1
 8005fee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	09db      	lsrs	r3, r3, #7
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	2b7f      	cmp	r3, #127	; 0x7f
 8006002:	d8f0      	bhi.n	8005fe6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	e00b      	b.n	8006038 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	6279      	str	r1, [r7, #36]	; 0x24
 800602a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	09db      	lsrs	r3, r3, #7
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b7f      	cmp	r3, #127	; 0x7f
 800603c:	d8f0      	bhi.n	8006020 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	627a      	str	r2, [r7, #36]	; 0x24
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e00b      	b.n	8006070 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	b2da      	uxtb	r2, r3
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	61f9      	str	r1, [r7, #28]
 8006062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	09db      	lsrs	r3, r3, #7
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b7f      	cmp	r3, #127	; 0x7f
 8006074:	d8f0      	bhi.n	8006058 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	61fa      	str	r2, [r7, #28]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006086:	2215      	movs	r2, #21
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f7ff f972 	bl	8005374 <_SendPacket>
  RECORD_END();
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f383 8811 	msr	BASEPRI, r3
}
 8006096:	bf00      	nop
 8006098:	3748      	adds	r7, #72	; 0x48
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	2001432c 	.word	0x2001432c
 80060a4:	200142fc 	.word	0x200142fc

080060a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060be:	4b03      	ldr	r3, [pc, #12]	; (80060cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4798      	blx	r3
  }
}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	200142fc 	.word	0x200142fc

080060d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060d8:	f3ef 8311 	mrs	r3, BASEPRI
 80060dc:	f04f 0120 	mov.w	r1, #32
 80060e0:	f381 8811 	msr	BASEPRI, r1
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	480b      	ldr	r0, [pc, #44]	; (8006114 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060e8:	f7ff f856 	bl	8005198 <_PreparePacket>
 80060ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	6938      	ldr	r0, [r7, #16]
 80060f4:	f7ff f800 	bl	80050f8 <_EncodeStr>
 80060f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80060fa:	220e      	movs	r2, #14
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f7ff f938 	bl	8005374 <_SendPacket>
  RECORD_END();
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f383 8811 	msr	BASEPRI, r3
}
 800610a:	bf00      	nop
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2001432c 	.word	0x2001432c

08006118 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01a      	beq.n	800615c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006126:	4b13      	ldr	r3, [pc, #76]	; (8006174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4798      	blx	r3
 8006138:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800613c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800613e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	000a      	movs	r2, r1
 800614c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800614e:	4613      	mov	r3, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4621      	mov	r1, r4
 8006154:	200d      	movs	r0, #13
 8006156:	f7ff fbe7 	bl	8005928 <SEGGER_SYSVIEW_RecordU32x2>
 800615a:	e006      	b.n	800616a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4619      	mov	r1, r3
 8006162:	200c      	movs	r0, #12
 8006164:	f7ff fba4 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bd90      	pop	{r4, r7, pc}
 8006172:	bf00      	nop
 8006174:	200142fc 	.word	0x200142fc
 8006178:	e0001004 	.word	0xe0001004

0800617c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006182:	f3ef 8311 	mrs	r3, BASEPRI
 8006186:	f04f 0120 	mov.w	r1, #32
 800618a:	f381 8811 	msr	BASEPRI, r1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	4819      	ldr	r0, [pc, #100]	; (80061f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006192:	f7ff f801 	bl	8005198 <_PreparePacket>
 8006196:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800619c:	4b17      	ldr	r3, [pc, #92]	; (80061fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	e00b      	b.n	80061c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1c59      	adds	r1, r3, #1
 80061b8:	6179      	str	r1, [r7, #20]
 80061ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	09db      	lsrs	r3, r3, #7
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b7f      	cmp	r3, #127	; 0x7f
 80061cc:	d8f0      	bhi.n	80061b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	617a      	str	r2, [r7, #20]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061de:	2202      	movs	r2, #2
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	68b8      	ldr	r0, [r7, #8]
 80061e4:	f7ff f8c6 	bl	8005374 <_SendPacket>
  RECORD_END();
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f383 8811 	msr	BASEPRI, r3
}
 80061ee:	bf00      	nop
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	2001432c 	.word	0x2001432c
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006206:	f3ef 8311 	mrs	r3, BASEPRI
 800620a:	f04f 0120 	mov.w	r1, #32
 800620e:	f381 8811 	msr	BASEPRI, r1
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	4807      	ldr	r0, [pc, #28]	; (8006234 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006216:	f7fe ffbf 	bl	8005198 <_PreparePacket>
 800621a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800621c:	2203      	movs	r2, #3
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6838      	ldr	r0, [r7, #0]
 8006222:	f7ff f8a7 	bl	8005374 <_SendPacket>
  RECORD_END();
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f383 8811 	msr	BASEPRI, r3
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	2001432c 	.word	0x2001432c

08006238 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800623e:	f3ef 8311 	mrs	r3, BASEPRI
 8006242:	f04f 0120 	mov.w	r1, #32
 8006246:	f381 8811 	msr	BASEPRI, r1
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	4807      	ldr	r0, [pc, #28]	; (800626c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800624e:	f7fe ffa3 	bl	8005198 <_PreparePacket>
 8006252:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006254:	2212      	movs	r2, #18
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f7ff f88b 	bl	8005374 <_SendPacket>
  RECORD_END();
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f383 8811 	msr	BASEPRI, r3
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	2001432c 	.word	0x2001432c

08006270 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006276:	f3ef 8311 	mrs	r3, BASEPRI
 800627a:	f04f 0120 	mov.w	r1, #32
 800627e:	f381 8811 	msr	BASEPRI, r1
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	4807      	ldr	r0, [pc, #28]	; (80062a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006286:	f7fe ff87 	bl	8005198 <_PreparePacket>
 800628a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800628c:	2211      	movs	r2, #17
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6838      	ldr	r0, [r7, #0]
 8006292:	f7ff f86f 	bl	8005374 <_SendPacket>
  RECORD_END();
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f383 8811 	msr	BASEPRI, r3
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	2001432c 	.word	0x2001432c

080062a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062b0:	f3ef 8311 	mrs	r3, BASEPRI
 80062b4:	f04f 0120 	mov.w	r1, #32
 80062b8:	f381 8811 	msr	BASEPRI, r1
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	4819      	ldr	r0, [pc, #100]	; (8006324 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062c0:	f7fe ff6a 	bl	8005198 <_PreparePacket>
 80062c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ca:	4b17      	ldr	r3, [pc, #92]	; (8006328 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	e00b      	b.n	80062f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	1c59      	adds	r1, r3, #1
 80062e6:	61f9      	str	r1, [r7, #28]
 80062e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	09db      	lsrs	r3, r3, #7
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b7f      	cmp	r3, #127	; 0x7f
 80062fa:	d8f0      	bhi.n	80062de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	61fa      	str	r2, [r7, #28]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800630c:	2208      	movs	r2, #8
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	6938      	ldr	r0, [r7, #16]
 8006312:	f7ff f82f 	bl	8005374 <_SendPacket>
  RECORD_END();
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f383 8811 	msr	BASEPRI, r3
}
 800631c:	bf00      	nop
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	2001432c 	.word	0x2001432c
 8006328:	200142fc 	.word	0x200142fc

0800632c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006334:	f3ef 8311 	mrs	r3, BASEPRI
 8006338:	f04f 0120 	mov.w	r1, #32
 800633c:	f381 8811 	msr	BASEPRI, r1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	4819      	ldr	r0, [pc, #100]	; (80063a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006344:	f7fe ff28 	bl	8005198 <_PreparePacket>
 8006348:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800634e:	4b17      	ldr	r3, [pc, #92]	; (80063ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e00b      	b.n	800637a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	61f9      	str	r1, [r7, #28]
 800636c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b7f      	cmp	r3, #127	; 0x7f
 800637e:	d8f0      	bhi.n	8006362 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	61fa      	str	r2, [r7, #28]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006390:	2204      	movs	r2, #4
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	6938      	ldr	r0, [r7, #16]
 8006396:	f7fe ffed 	bl	8005374 <_SendPacket>
  RECORD_END();
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f383 8811 	msr	BASEPRI, r3
}
 80063a0:	bf00      	nop
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	2001432c 	.word	0x2001432c
 80063ac:	200142fc 	.word	0x200142fc

080063b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063b8:	f3ef 8311 	mrs	r3, BASEPRI
 80063bc:	f04f 0120 	mov.w	r1, #32
 80063c0:	f381 8811 	msr	BASEPRI, r1
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	4819      	ldr	r0, [pc, #100]	; (800642c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063c8:	f7fe fee6 	bl	8005198 <_PreparePacket>
 80063cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e00b      	b.n	80063fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	61f9      	str	r1, [r7, #28]
 80063f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b7f      	cmp	r3, #127	; 0x7f
 8006402:	d8f0      	bhi.n	80063e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	61fa      	str	r2, [r7, #28]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006414:	2206      	movs	r2, #6
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6938      	ldr	r0, [r7, #16]
 800641a:	f7fe ffab 	bl	8005374 <_SendPacket>
  RECORD_END();
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f383 8811 	msr	BASEPRI, r3
}
 8006424:	bf00      	nop
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	2001432c 	.word	0x2001432c
 8006430:	200142fc 	.word	0x200142fc

08006434 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800643e:	f3ef 8311 	mrs	r3, BASEPRI
 8006442:	f04f 0120 	mov.w	r1, #32
 8006446:	f381 8811 	msr	BASEPRI, r1
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	4827      	ldr	r0, [pc, #156]	; (80064ec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800644e:	f7fe fea3 	bl	8005198 <_PreparePacket>
 8006452:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	e00b      	b.n	8006484 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	b2da      	uxtb	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	6279      	str	r1, [r7, #36]	; 0x24
 8006476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b7f      	cmp	r3, #127	; 0x7f
 8006488:	d8f0      	bhi.n	800646c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	627a      	str	r2, [r7, #36]	; 0x24
 8006490:	6a3a      	ldr	r2, [r7, #32]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	e00b      	b.n	80064bc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	61f9      	str	r1, [r7, #28]
 80064ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	09db      	lsrs	r3, r3, #7
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b7f      	cmp	r3, #127	; 0x7f
 80064c0:	d8f0      	bhi.n	80064a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	61fa      	str	r2, [r7, #28]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80064d2:	2207      	movs	r2, #7
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	6938      	ldr	r0, [r7, #16]
 80064d8:	f7fe ff4c 	bl	8005374 <_SendPacket>
  RECORD_END();
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f383 8811 	msr	BASEPRI, r3
}
 80064e2:	bf00      	nop
 80064e4:	3728      	adds	r7, #40	; 0x28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	2001432c 	.word	0x2001432c
 80064f0:	200142fc 	.word	0x200142fc

080064f4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80064fc:	4b04      	ldr	r3, [pc, #16]	; (8006510 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	1ad3      	subs	r3, r2, r3
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	200142fc 	.word	0x200142fc

08006514 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b08c      	sub	sp, #48	; 0x30
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800651e:	4b3b      	ldr	r3, [pc, #236]	; (800660c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d06d      	beq.n	8006602 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800652c:	2300      	movs	r3, #0
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006530:	e008      	b.n	8006544 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	3301      	adds	r3, #1
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006548:	429a      	cmp	r2, r3
 800654a:	d3f2      	bcc.n	8006532 <SEGGER_SYSVIEW_SendModule+0x1e>
 800654c:	e000      	b.n	8006550 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800654e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d055      	beq.n	8006602 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006556:	f3ef 8311 	mrs	r3, BASEPRI
 800655a:	f04f 0120 	mov.w	r1, #32
 800655e:	f381 8811 	msr	BASEPRI, r1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	482a      	ldr	r0, [pc, #168]	; (8006610 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006566:	f7fe fe17 	bl	8005198 <_PreparePacket>
 800656a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	623b      	str	r3, [r7, #32]
 8006578:	e00b      	b.n	8006592 <SEGGER_SYSVIEW_SendModule+0x7e>
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	6279      	str	r1, [r7, #36]	; 0x24
 8006584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	623b      	str	r3, [r7, #32]
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	2b7f      	cmp	r3, #127	; 0x7f
 8006596:	d8f0      	bhi.n	800657a <SEGGER_SYSVIEW_SendModule+0x66>
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	627a      	str	r2, [r7, #36]	; 0x24
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e00b      	b.n	80065cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	61f9      	str	r1, [r7, #28]
 80065be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	09db      	lsrs	r3, r3, #7
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b7f      	cmp	r3, #127	; 0x7f
 80065d0:	d8f0      	bhi.n	80065b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	61fa      	str	r2, [r7, #28]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2280      	movs	r2, #128	; 0x80
 80065e8:	4619      	mov	r1, r3
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7fe fd84 	bl	80050f8 <_EncodeStr>
 80065f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80065f2:	2216      	movs	r2, #22
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	6938      	ldr	r0, [r7, #16]
 80065f8:	f7fe febc 	bl	8005374 <_SendPacket>
      RECORD_END();
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006602:	bf00      	nop
 8006604:	3730      	adds	r7, #48	; 0x30
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20014324 	.word	0x20014324
 8006610:	2001432c 	.word	0x2001432c

08006614 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800661a:	4b0c      	ldr	r3, [pc, #48]	; (800664c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f2      	bne.n	8006628 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20014324 	.word	0x20014324

08006650 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006656:	f3ef 8311 	mrs	r3, BASEPRI
 800665a:	f04f 0120 	mov.w	r1, #32
 800665e:	f381 8811 	msr	BASEPRI, r1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	4817      	ldr	r0, [pc, #92]	; (80066c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006666:	f7fe fd97 	bl	8005198 <_PreparePacket>
 800666a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e00b      	b.n	8006694 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	6179      	str	r1, [r7, #20]
 8006686:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	09db      	lsrs	r3, r3, #7
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b7f      	cmp	r3, #127	; 0x7f
 8006698:	d8f0      	bhi.n	800667c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	617a      	str	r2, [r7, #20]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80066aa:	221b      	movs	r2, #27
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	68b8      	ldr	r0, [r7, #8]
 80066b0:	f7fe fe60 	bl	8005374 <_SendPacket>
  RECORD_END();
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f383 8811 	msr	BASEPRI, r3
}
 80066ba:	bf00      	nop
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2001432c 	.word	0x2001432c
 80066c8:	20014328 	.word	0x20014328

080066cc <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80066cc:	b40f      	push	{r0, r1, r2, r3}
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80066da:	1d3b      	adds	r3, r7, #4
 80066dc:	461a      	mov	r2, r3
 80066de:	2100      	movs	r1, #0
 80066e0:	6938      	ldr	r0, [r7, #16]
 80066e2:	f7fe ffb5 	bl	8005650 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066f0:	b004      	add	sp, #16
 80066f2:	4770      	bx	lr

080066f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006700:	f04f 0120 	mov.w	r1, #32
 8006704:	f381 8811 	msr	BASEPRI, r1
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	4827      	ldr	r0, [pc, #156]	; (80067a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800670c:	f7fe fd44 	bl	8005198 <_PreparePacket>
 8006710:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	6938      	ldr	r0, [r7, #16]
 8006718:	f7fe fcee 	bl	80050f8 <_EncodeStr>
 800671c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
 8006722:	2301      	movs	r3, #1
 8006724:	623b      	str	r3, [r7, #32]
 8006726:	e00b      	b.n	8006740 <SEGGER_SYSVIEW_Warn+0x4c>
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	1c59      	adds	r1, r3, #1
 8006730:	6279      	str	r1, [r7, #36]	; 0x24
 8006732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	09db      	lsrs	r3, r3, #7
 800673e:	623b      	str	r3, [r7, #32]
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	2b7f      	cmp	r3, #127	; 0x7f
 8006744:	d8f0      	bhi.n	8006728 <SEGGER_SYSVIEW_Warn+0x34>
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	627a      	str	r2, [r7, #36]	; 0x24
 800674c:	6a3a      	ldr	r2, [r7, #32]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	2300      	movs	r3, #0
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e00b      	b.n	8006778 <SEGGER_SYSVIEW_Warn+0x84>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	1c59      	adds	r1, r3, #1
 8006768:	61f9      	str	r1, [r7, #28]
 800676a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	09db      	lsrs	r3, r3, #7
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	2b7f      	cmp	r3, #127	; 0x7f
 800677c:	d8f0      	bhi.n	8006760 <SEGGER_SYSVIEW_Warn+0x6c>
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	61fa      	str	r2, [r7, #28]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800678e:	221a      	movs	r2, #26
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	6938      	ldr	r0, [r7, #16]
 8006794:	f7fe fdee 	bl	8005374 <_SendPacket>
  RECORD_END();
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f383 8811 	msr	BASEPRI, r3
}
 800679e:	bf00      	nop
 80067a0:	3728      	adds	r7, #40	; 0x28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	2001432c 	.word	0x2001432c

080067ac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80067b0:	4803      	ldr	r0, [pc, #12]	; (80067c0 <_cbSendSystemDesc+0x14>)
 80067b2:	f7ff fc8d 	bl	80060d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80067b6:	4803      	ldr	r0, [pc, #12]	; (80067c4 <_cbSendSystemDesc+0x18>)
 80067b8:	f7ff fc8a 	bl	80060d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80067bc:	bf00      	nop
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	08006b84 	.word	0x08006b84
 80067c4:	08006bc8 	.word	0x08006bc8

080067c8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <SEGGER_SYSVIEW_Conf+0x24>)
 80067d6:	4a06      	ldr	r2, [pc, #24]	; (80067f0 <SEGGER_SYSVIEW_Conf+0x28>)
 80067d8:	f7fe fff8 	bl	80057cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80067dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80067e0:	f7ff f838 	bl	8005854 <SEGGER_SYSVIEW_SetRAMBase>
}
 80067e4:	bf00      	nop
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000018 	.word	0x20000018
 80067ec:	080067ad 	.word	0x080067ad
 80067f0:	08006c6c 	.word	0x08006c6c

080067f4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80067f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
 80067fe:	e048      	b.n	8006892 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8006800:	4929      	ldr	r1, [pc, #164]	; (80068a8 <_cbSendTaskList+0xb4>)
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f7fd f9db 	bl	8003bcc <uxTaskGetStackHighWaterMark>
 8006816:	4601      	mov	r1, r0
 8006818:	4823      	ldr	r0, [pc, #140]	; (80068a8 <_cbSendTaskList+0xb4>)
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4403      	add	r3, r0
 8006826:	3310      	adds	r3, #16
 8006828:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800682a:	491f      	ldr	r1, [pc, #124]	; (80068a8 <_cbSendTaskList+0xb4>)
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	491b      	ldr	r1, [pc, #108]	; (80068a8 <_cbSendTaskList+0xb4>)
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	3304      	adds	r3, #4
 800684a:	6819      	ldr	r1, [r3, #0]
 800684c:	4c16      	ldr	r4, [pc, #88]	; (80068a8 <_cbSendTaskList+0xb4>)
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4423      	add	r3, r4
 800685a:	3308      	adds	r3, #8
 800685c:	681c      	ldr	r4, [r3, #0]
 800685e:	4d12      	ldr	r5, [pc, #72]	; (80068a8 <_cbSendTaskList+0xb4>)
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	442b      	add	r3, r5
 800686c:	330c      	adds	r3, #12
 800686e:	681d      	ldr	r5, [r3, #0]
 8006870:	4e0d      	ldr	r6, [pc, #52]	; (80068a8 <_cbSendTaskList+0xb4>)
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4433      	add	r3, r6
 800687e:	3310      	adds	r3, #16
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	462b      	mov	r3, r5
 8006886:	4622      	mov	r2, r4
 8006888:	f000 f8be 	bl	8006a08 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3301      	adds	r3, #1
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <_cbSendTaskList+0xb8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	429a      	cmp	r2, r3
 800689a:	d3b1      	bcc.n	8006800 <_cbSendTaskList+0xc>
  }
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20014410 	.word	0x20014410
 80068ac:	200144b0 	.word	0x200144b0

080068b0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80068b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80068b8:	f7fc fe6e 	bl	8003598 <xTaskGetTickCountFromISR>
 80068bc:	4603      	mov	r3, r0
 80068be:	2200      	movs	r2, #0
 80068c0:	469a      	mov	sl, r3
 80068c2:	4693      	mov	fp, r2
 80068c4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80068c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	f04f 0a00 	mov.w	sl, #0
 80068d4:	f04f 0b00 	mov.w	fp, #0
 80068d8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80068dc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80068e0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80068e4:	4652      	mov	r2, sl
 80068e6:	465b      	mov	r3, fp
 80068e8:	1a14      	subs	r4, r2, r0
 80068ea:	eb63 0501 	sbc.w	r5, r3, r1
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	00ab      	lsls	r3, r5, #2
 80068f8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80068fc:	00a2      	lsls	r2, r4, #2
 80068fe:	4614      	mov	r4, r2
 8006900:	461d      	mov	r5, r3
 8006902:	eb14 0800 	adds.w	r8, r4, r0
 8006906:	eb45 0901 	adc.w	r9, r5, r1
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800691a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800691e:	4690      	mov	r8, r2
 8006920:	4699      	mov	r9, r3
 8006922:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006926:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006938 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006946:	2205      	movs	r2, #5
 8006948:	492b      	ldr	r1, [pc, #172]	; (80069f8 <SYSVIEW_AddTask+0xc0>)
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f000 f8a2 	bl	8006a94 <memcmp>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d04b      	beq.n	80069ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006956:	4b29      	ldr	r3, [pc, #164]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b07      	cmp	r3, #7
 800695c:	d903      	bls.n	8006966 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800695e:	4828      	ldr	r0, [pc, #160]	; (8006a00 <SYSVIEW_AddTask+0xc8>)
 8006960:	f7ff fec8 	bl	80066f4 <SEGGER_SYSVIEW_Warn>
    return;
 8006964:	e044      	b.n	80069f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006966:	4b25      	ldr	r3, [pc, #148]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4926      	ldr	r1, [pc, #152]	; (8006a04 <SYSVIEW_AddTask+0xcc>)
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800697a:	4b20      	ldr	r3, [pc, #128]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4921      	ldr	r1, [pc, #132]	; (8006a04 <SYSVIEW_AddTask+0xcc>)
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	3304      	adds	r3, #4
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006990:	4b1a      	ldr	r3, [pc, #104]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	491b      	ldr	r1, [pc, #108]	; (8006a04 <SYSVIEW_AddTask+0xcc>)
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	3308      	adds	r3, #8
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	4916      	ldr	r1, [pc, #88]	; (8006a04 <SYSVIEW_AddTask+0xcc>)
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	330c      	adds	r3, #12
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4910      	ldr	r1, [pc, #64]	; (8006a04 <SYSVIEW_AddTask+0xcc>)
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	3310      	adds	r3, #16
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <SYSVIEW_AddTask+0xc4>)
 80069da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f80e 	bl	8006a08 <SYSVIEW_SendTaskInfo>
 80069ec:	e000      	b.n	80069f0 <SYSVIEW_AddTask+0xb8>
    return;
 80069ee:	bf00      	nop

}
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	08006bd8 	.word	0x08006bd8
 80069fc:	200144b0 	.word	0x200144b0
 8006a00:	08006be0 	.word	0x08006be0
 8006a04:	20014410 	.word	0x20014410

08006a08 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	2214      	movs	r2, #20
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f856 	bl	8006ad0 <memset>
  TaskInfo.TaskID     = TaskID;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff fa4f 	bl	8005ee0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006a42:	bf00      	nop
 8006a44:	3728      	adds	r7, #40	; 0x28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <__libc_init_array>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4d0d      	ldr	r5, [pc, #52]	; (8006a84 <__libc_init_array+0x38>)
 8006a50:	4c0d      	ldr	r4, [pc, #52]	; (8006a88 <__libc_init_array+0x3c>)
 8006a52:	1b64      	subs	r4, r4, r5
 8006a54:	10a4      	asrs	r4, r4, #2
 8006a56:	2600      	movs	r6, #0
 8006a58:	42a6      	cmp	r6, r4
 8006a5a:	d109      	bne.n	8006a70 <__libc_init_array+0x24>
 8006a5c:	4d0b      	ldr	r5, [pc, #44]	; (8006a8c <__libc_init_array+0x40>)
 8006a5e:	4c0c      	ldr	r4, [pc, #48]	; (8006a90 <__libc_init_array+0x44>)
 8006a60:	f000 f83e 	bl	8006ae0 <_init>
 8006a64:	1b64      	subs	r4, r4, r5
 8006a66:	10a4      	asrs	r4, r4, #2
 8006a68:	2600      	movs	r6, #0
 8006a6a:	42a6      	cmp	r6, r4
 8006a6c:	d105      	bne.n	8006a7a <__libc_init_array+0x2e>
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a74:	4798      	blx	r3
 8006a76:	3601      	adds	r6, #1
 8006a78:	e7ee      	b.n	8006a58 <__libc_init_array+0xc>
 8006a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7e:	4798      	blx	r3
 8006a80:	3601      	adds	r6, #1
 8006a82:	e7f2      	b.n	8006a6a <__libc_init_array+0x1e>
 8006a84:	08006c7c 	.word	0x08006c7c
 8006a88:	08006c7c 	.word	0x08006c7c
 8006a8c:	08006c7c 	.word	0x08006c7c
 8006a90:	08006c80 	.word	0x08006c80

08006a94 <memcmp>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	3901      	subs	r1, #1
 8006a98:	4402      	add	r2, r0
 8006a9a:	4290      	cmp	r0, r2
 8006a9c:	d101      	bne.n	8006aa2 <memcmp+0xe>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e005      	b.n	8006aae <memcmp+0x1a>
 8006aa2:	7803      	ldrb	r3, [r0, #0]
 8006aa4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	d001      	beq.n	8006ab0 <memcmp+0x1c>
 8006aac:	1b18      	subs	r0, r3, r4
 8006aae:	bd10      	pop	{r4, pc}
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	e7f2      	b.n	8006a9a <memcmp+0x6>

08006ab4 <memcpy>:
 8006ab4:	440a      	add	r2, r1
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006abc:	d100      	bne.n	8006ac0 <memcpy+0xc>
 8006abe:	4770      	bx	lr
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aca:	4291      	cmp	r1, r2
 8006acc:	d1f9      	bne.n	8006ac2 <memcpy+0xe>
 8006ace:	bd10      	pop	{r4, pc}

08006ad0 <memset>:
 8006ad0:	4402      	add	r2, r0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <_init>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr

08006aec <_fini>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr
