
pushBttonTask_FromISR2_flag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a08  08007a08  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a10  08007a10  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014494  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001483f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da9  00000000  00000000  00034883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  00038928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025734  00000000  00000000  00039aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001464e  00000000  00000000  0005f1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6306  00000000  00000000  0007382a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159b30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f60  00000000  00000000  00159b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007850 	.word	0x08007850

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08007850 	.word	0x08007850

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e30 	.word	0x20012e30

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fcff 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f855 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8bf 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <main+0x98>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a20      	ldr	r2, [pc, #128]	; (8000620 <main+0x98>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005a6:	f006 ff21 	bl	80073ec <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005aa:	f006 f931 	bl	8006810 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(ledGreenHandler,"Led_Green_Task", 200, NULL, 2, &led_Green_handle);
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0x9c>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2302      	movs	r3, #2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	22c8      	movs	r2, #200	; 0xc8
 80005ba:	491b      	ldr	r1, [pc, #108]	; (8000628 <main+0xa0>)
 80005bc:	481b      	ldr	r0, [pc, #108]	; (800062c <main+0xa4>)
 80005be:	f002 fd81 	bl	80030c4 <xTaskCreate>
 80005c2:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d00a      	beq.n	80005e0 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ce:	f383 8811 	msr	BASEPRI, r3
 80005d2:	f3bf 8f6f 	isb	sy
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005dc:	bf00      	nop
 80005de:	e7fe      	b.n	80005de <main+0x56>


  next_task_handle = led_Green_handle;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0x9c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0xa8>)
 80005e6:	6013      	str	r3, [r2, #0]



  status = xTaskCreate(ledRedHandler, "Led_Red_Task", 200, NULL, 1, &led_Red_Handle);
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <main+0xac>)
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2301      	movs	r3, #1
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	22c8      	movs	r2, #200	; 0xc8
 80005f4:	4910      	ldr	r1, [pc, #64]	; (8000638 <main+0xb0>)
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <main+0xb4>)
 80005f8:	f002 fd64 	bl	80030c4 <xTaskCreate>
 80005fc:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00a      	beq.n	800061a <main+0x92>
        __asm volatile
 8000604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000608:	f383 8811 	msr	BASEPRI, r3
 800060c:	f3bf 8f6f 	isb	sy
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	607b      	str	r3, [r7, #4]
    }
 8000616:	bf00      	nop
 8000618:	e7fe      	b.n	8000618 <main+0x90>

  //status = xTaskCreate(button_handler,"Button_Task", 200, NULL, 3, &button_Handle);
  //configASSERT(status == pdPASS);


  vTaskStartScheduler();
 800061a:	f002 ff61 	bl	80034e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x96>
 8000620:	e0001000 	.word	0xe0001000
 8000624:	20000030 	.word	0x20000030
 8000628:	08007868 	.word	0x08007868
 800062c:	08000c19 	.word	0x08000c19
 8000630:	20000038 	.word	0x20000038
 8000634:	20000034 	.word	0x20000034
 8000638:	08007878 	.word	0x08007878
 800063c:	08000c89 	.word	0x08000c89

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 f8f6 	bl	8007840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a28      	ldr	r2, [pc, #160]	; (8000710 <SystemClock_Config+0xd0>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd4>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b8:	2332      	movs	r3, #50	; 0x32
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 ff89 	bl	80015e0 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d4:	f000 fb4c 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f9ea 	bl	8001ad0 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f000 fb35 	bl	8000d70 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
 8000732:	4bb2      	ldr	r3, [pc, #712]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4ab1      	ldr	r2, [pc, #708]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4baf      	ldr	r3, [pc, #700]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	623b      	str	r3, [r7, #32]
 8000748:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	4bab      	ldr	r3, [pc, #684]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4aaa      	ldr	r2, [pc, #680]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4ba8      	ldr	r3, [pc, #672]	; (80009fc <MX_GPIO_Init+0x2e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4ba4      	ldr	r3, [pc, #656]	; (80009fc <MX_GPIO_Init+0x2e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4aa3      	ldr	r2, [pc, #652]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4ba1      	ldr	r3, [pc, #644]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b9d      	ldr	r3, [pc, #628]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a9c      	ldr	r2, [pc, #624]	; (80009fc <MX_GPIO_Init+0x2e4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b9a      	ldr	r3, [pc, #616]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b96      	ldr	r3, [pc, #600]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a95      	ldr	r2, [pc, #596]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b93      	ldr	r3, [pc, #588]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b8f      	ldr	r3, [pc, #572]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a8e      	ldr	r2, [pc, #568]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b8c      	ldr	r3, [pc, #560]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b88      	ldr	r3, [pc, #544]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a87      	ldr	r2, [pc, #540]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b85      	ldr	r3, [pc, #532]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b81      	ldr	r3, [pc, #516]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a80      	ldr	r2, [pc, #512]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b7e      	ldr	r3, [pc, #504]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2116      	movs	r1, #22
 8000812:	487b      	ldr	r0, [pc, #492]	; (8000a00 <MX_GPIO_Init+0x2e8>)
 8000814:	f000 fe8c 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	4879      	ldr	r0, [pc, #484]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 800081e:	f000 fe87 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000828:	4877      	ldr	r0, [pc, #476]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 800082a:	f000 fe81 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000834:	4875      	ldr	r0, [pc, #468]	; (8000a0c <MX_GPIO_Init+0x2f4>)
 8000836:	f000 fe7b 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800083a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084c:	230c      	movs	r3, #12
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	486e      	ldr	r0, [pc, #440]	; (8000a10 <MX_GPIO_Init+0x2f8>)
 8000858:	f000 fcbe 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800085c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800086e:	2305      	movs	r3, #5
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4865      	ldr	r0, [pc, #404]	; (8000a10 <MX_GPIO_Init+0x2f8>)
 800087a:	f000 fcad 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000890:	230e      	movs	r3, #14
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	485d      	ldr	r0, [pc, #372]	; (8000a10 <MX_GPIO_Init+0x2f8>)
 800089c:	f000 fc9c 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008a0:	2301      	movs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b0:	230c      	movs	r3, #12
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4851      	ldr	r0, [pc, #324]	; (8000a00 <MX_GPIO_Init+0x2e8>)
 80008bc:	f000 fc8c 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008c0:	2316      	movs	r3, #22
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	484a      	ldr	r0, [pc, #296]	; (8000a00 <MX_GPIO_Init+0x2e8>)
 80008d8:	f000 fc7e 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008dc:	2301      	movs	r3, #1
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	4844      	ldr	r0, [pc, #272]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 80008f2:	f000 fc71 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008f6:	f248 0306 	movw	r3, #32774	; 0x8006
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	483d      	ldr	r0, [pc, #244]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 800090e:	f000 fc63 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000912:	f641 0358 	movw	r3, #6232	; 0x1858
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000924:	230e      	movs	r3, #14
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4835      	ldr	r0, [pc, #212]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 8000930:	f000 fc52 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	482e      	ldr	r0, [pc, #184]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 800094c:	f000 fc44 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000950:	2320      	movs	r3, #32
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000954:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <MX_GPIO_Init+0x2e8>)
 8000966:	f000 fc37 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800096a:	2303      	movs	r3, #3
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800097a:	2309      	movs	r3, #9
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4823      	ldr	r0, [pc, #140]	; (8000a14 <MX_GPIO_Init+0x2fc>)
 8000986:	f000 fc27 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098a:	2304      	movs	r3, #4
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	481d      	ldr	r0, [pc, #116]	; (8000a14 <MX_GPIO_Init+0x2fc>)
 800099e:	f000 fc1b 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009a2:	f248 1333 	movw	r3, #33075	; 0x8133
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b4:	230c      	movs	r3, #12
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <MX_GPIO_Init+0x2f4>)
 80009c0:	f000 fc0a 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d6:	230c      	movs	r3, #12
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_GPIO_Init+0x300>)
 80009e2:	f000 fbf9 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009e6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
 80009f8:	e010      	b.n	8000a1c <MX_GPIO_Init+0x304>
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40021800 	.word	0x40021800
 8000a10:	40021400 	.word	0x40021400
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a1c:	230e      	movs	r3, #14
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4877      	ldr	r0, [pc, #476]	; (8000c04 <MX_GPIO_Init+0x4ec>)
 8000a28:	f000 fbd6 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a2c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	486e      	ldr	r0, [pc, #440]	; (8000c04 <MX_GPIO_Init+0x4ec>)
 8000a4a:	f000 fbc5 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4868      	ldr	r0, [pc, #416]	; (8000c04 <MX_GPIO_Init+0x4ec>)
 8000a64:	f000 fbb8 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a68:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4860      	ldr	r0, [pc, #384]	; (8000c08 <MX_GPIO_Init+0x4f0>)
 8000a86:	f000 fba7 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	485a      	ldr	r0, [pc, #360]	; (8000c08 <MX_GPIO_Init+0x4f0>)
 8000aa0:	f000 fb9a 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000aa4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4852      	ldr	r0, [pc, #328]	; (8000c08 <MX_GPIO_Init+0x4f0>)
 8000abe:	f000 fb8b 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ac2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad4:	230e      	movs	r3, #14
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	484b      	ldr	r0, [pc, #300]	; (8000c0c <MX_GPIO_Init+0x4f4>)
 8000ae0:	f000 fb7a 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ae4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af6:	230e      	movs	r3, #14
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4843      	ldr	r0, [pc, #268]	; (8000c10 <MX_GPIO_Init+0x4f8>)
 8000b02:	f000 fb69 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	483b      	ldr	r0, [pc, #236]	; (8000c10 <MX_GPIO_Init+0x4f8>)
 8000b24:	f000 fb58 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	4833      	ldr	r0, [pc, #204]	; (8000c14 <MX_GPIO_Init+0x4fc>)
 8000b46:	f000 fb47 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	482b      	ldr	r0, [pc, #172]	; (8000c14 <MX_GPIO_Init+0x4fc>)
 8000b68:	f000 fb36 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b6c:	2348      	movs	r3, #72	; 0x48
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b7c:	230e      	movs	r3, #14
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4820      	ldr	r0, [pc, #128]	; (8000c08 <MX_GPIO_Init+0x4f0>)
 8000b88:	f000 fb26 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b9e:	2309      	movs	r3, #9
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_GPIO_Init+0x4f4>)
 8000baa:	f000 fb15 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <MX_GPIO_Init+0x4f4>)
 8000bc8:	f000 fb06 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bdc:	230c      	movs	r3, #12
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_GPIO_Init+0x4ec>)
 8000be8:	f000 faf6 	bl	80011d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2106      	movs	r1, #6
 8000bf0:	2006      	movs	r0, #6
 8000bf2:	f000 fac7 	bl	8001184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f000 fae0 	bl	80011bc <HAL_NVIC_EnableIRQ>

}
 8000bfc:	bf00      	nop
 8000bfe:	3738      	adds	r7, #56	; 0x38
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40020800 	.word	0x40020800
 8000c14:	40020000 	.word	0x40020000

08000c18 <ledGreenHandler>:

/* USER CODE BEGIN 4 */


static void ledGreenHandler(void* parameters){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
		{

		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <ledGreenHandler+0x5c>)
 8000c22:	f006 fb65 	bl	80072f0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledGreen);
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <ledGreenHandler+0x60>)
 8000c2c:	f000 fc99 	bl	8001562 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000c30:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2300      	movs	r3, #0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f003 f937 	bl	8003eb0 <xTaskGenericNotifyWait>
 8000c42:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d1ea      	bne.n	8000c20 <ledGreenHandler+0x8>
		{
			portENTER_CRITICAL();
 8000c4a:	f004 f803 	bl	8004c54 <vPortEnterCritical>
			next_task_handle = led_Red_Handle;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <ledGreenHandler+0x64>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <ledGreenHandler+0x68>)
 8000c54:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOG, ledGreen,GPIO_PIN_SET); // TURN ON THE LED BEFORE DELETING
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <ledGreenHandler+0x60>)
 8000c5e:	f000 fc67 	bl	8001530 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete GREEN LED task");
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <ledGreenHandler+0x6c>)
 8000c64:	f006 fb44 	bl	80072f0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000c68:	f004 f824 	bl	8004cb4 <vPortExitCritical>
			vTaskDelete(NULL); // WE USE NULL SINCE THE TASK IS DELETING ITSELF
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f002 fb8d 	bl	800338c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000c72:	e7d5      	b.n	8000c20 <ledGreenHandler+0x8>
 8000c74:	08007888 	.word	0x08007888
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	20000034 	.word	0x20000034
 8000c80:	20000038 	.word	0x20000038
 8000c84:	080078a0 	.word	0x080078a0

08000c88 <ledRedHandler>:

}



static void ledRedHandler(void* parameters){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
		{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <ledRedHandler+0x5c>)
 8000c92:	f006 fb2d 	bl	80072f0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledRed);
 8000c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <ledRedHandler+0x60>)
 8000c9c:	f000 fc61 	bl	8001562 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f003 f8ff 	bl	8003eb0 <xTaskGenericNotifyWait>
 8000cb2:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d1ea      	bne.n	8000c90 <ledRedHandler+0x8>
		{
			portENTER_CRITICAL();
 8000cba:	f003 ffcb 	bl	8004c54 <vPortEnterCritical>
			next_task_handle = NULL;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <ledRedHandler+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOG, ledRed,GPIO_PIN_SET); // TURN ON THE LED BEFORE DELETING
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cca:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <ledRedHandler+0x60>)
 8000ccc:	f000 fc30 	bl	8001530 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete RED LED task");
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <ledRedHandler+0x68>)
 8000cd2:	f006 fb0d 	bl	80072f0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000cd6:	f003 ffed 	bl	8004cb4 <vPortExitCritical>
			vTaskDelete(NULL); // WE USE NULL SINCE THE TASK IS DELETING ITSELF
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f002 fb56 	bl	800338c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000ce0:	e7d6      	b.n	8000c90 <ledRedHandler+0x8>
 8000ce2:	bf00      	nop
 8000ce4:	080078b8 	.word	0x080078b8
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	20000038 	.word	0x20000038
 8000cf0:	080078cc 	.word	0x080078cc

08000cf4 <button_interrupt_handler>:




void button_interrupt_handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();// we put this because of the Segger software we use in tracing
 8000cfe:	f006 f84f 	bl	8006da0 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction, &pxHigherPriorityTaskWoken);
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <button_interrupt_handler+0x50>)
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	f003 f954 	bl	8003fc0 <xTaskGenericNotifyFromISR>
	/* once the ISR exits, the below macro makes higher priority task which got unblocked to resume on the CPU */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00a      	beq.n	8000d34 <button_interrupt_handler+0x40>
 8000d1e:	f006 f89d 	bl	8006e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <button_interrupt_handler+0x54>)
 8000d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	f3bf 8f4f 	dsb	sy
 8000d2e:	f3bf 8f6f 	isb	sy
 8000d32:	e001      	b.n	8000d38 <button_interrupt_handler+0x44>
 8000d34:	f006 f876 	bl	8006e24 <SEGGER_SYSVIEW_RecordExitISR>
	traceISR_EXIT();
 8000d38:	f006 f874 	bl	8006e24 <SEGGER_SYSVIEW_RecordExitISR>


}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000038 	.word	0x20000038
 8000d48:	e000ed04 	.word	0xe000ed04

08000d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5e:	f000 f939 	bl	8000fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40001000 	.word	0x40001000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
    vInitPrioGroupValue();
 8000dba:	f003 fecd 	bl	8004b58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <HAL_InitTick+0xe4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <HAL_InitTick+0xe4>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <HAL_InitTick+0xe4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df8:	f107 0210 	add.w	r2, r7, #16
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 f870 	bl	8001ee8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d103      	bne.n	8000e1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e12:	f001 f855 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8000e16:	6378      	str	r0, [r7, #52]	; 0x34
 8000e18:	e004      	b.n	8000e24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e1a:	f001 f851 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <HAL_InitTick+0xe8>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	0c9b      	lsrs	r3, r3, #18
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <HAL_InitTick+0xf0>)
 8000e36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e58:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e5a:	f001 f877 	bl	8001f4c <HAL_TIM_Base_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d11b      	bne.n	8000ea4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e6c:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <HAL_InitTick+0xec>)
 8000e6e:	f001 f8c7 	bl	8002000 <HAL_TIM_Base_Start_IT>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d111      	bne.n	8000ea4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e80:	2036      	movs	r0, #54	; 0x36
 8000e82:	f000 f99b 	bl	80011bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d808      	bhi.n	8000e9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f000 f977 	bl	8001184 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_InitTick+0xf4>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e002      	b.n	8000ea4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3738      	adds	r7, #56	; 0x38
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	431bde83 	.word	0x431bde83
 8000eb8:	2000003c 	.word	0x2000003c
 8000ebc:	40001000 	.word	0x40001000
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000ef4:	f7ff fefe 	bl	8000cf4 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f000 fb4d 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <TIM6_DAC_IRQHandler+0x10>)
 8000f0a:	f001 f8e9 	bl	80020e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000003c 	.word	0x2000003c

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f006 fc27 	bl	80077bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fb0b 	bl	8000588 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f80:	08007a18 	.word	0x08007a18
  ldr r2, =_sbss
 8000f84:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f88:	200144a8 	.word	0x200144a8

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f8d8 	bl	800116e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f7ff ff04 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff feda 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000084 	.word	0x20000084

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000084 	.word	0x20000084

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0b      	blt.n	80010a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <__NVIC_EnableIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff4c 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001196:	f7ff ff61 	bl	800105c <__NVIC_GetPriorityGrouping>
 800119a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff ffb1 	bl	8001108 <NVIC_EncodePriority>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff80 	bl	80010b4 <__NVIC_SetPriority>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff54 	bl	8001078 <__NVIC_EnableIRQ>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e177      	b.n	80014e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 8166 	bne.w	80014de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	2b02      	cmp	r3, #2
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80c0 	beq.w	80014de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b66      	ldr	r3, [pc, #408]	; (80014fc <HAL_GPIO_Init+0x324>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_GPIO_Init+0x324>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b63      	ldr	r3, [pc, #396]	; (80014fc <HAL_GPIO_Init+0x324>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137a:	4a61      	ldr	r2, [pc, #388]	; (8001500 <HAL_GPIO_Init+0x328>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a58      	ldr	r2, [pc, #352]	; (8001504 <HAL_GPIO_Init+0x32c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d037      	beq.n	8001416 <HAL_GPIO_Init+0x23e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a57      	ldr	r2, [pc, #348]	; (8001508 <HAL_GPIO_Init+0x330>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d031      	beq.n	8001412 <HAL_GPIO_Init+0x23a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a56      	ldr	r2, [pc, #344]	; (800150c <HAL_GPIO_Init+0x334>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d02b      	beq.n	800140e <HAL_GPIO_Init+0x236>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a55      	ldr	r2, [pc, #340]	; (8001510 <HAL_GPIO_Init+0x338>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d025      	beq.n	800140a <HAL_GPIO_Init+0x232>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_GPIO_Init+0x33c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d01f      	beq.n	8001406 <HAL_GPIO_Init+0x22e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a53      	ldr	r2, [pc, #332]	; (8001518 <HAL_GPIO_Init+0x340>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_GPIO_Init+0x22a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_GPIO_Init+0x344>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x226>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a51      	ldr	r2, [pc, #324]	; (8001520 <HAL_GPIO_Init+0x348>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x222>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a50      	ldr	r2, [pc, #320]	; (8001524 <HAL_GPIO_Init+0x34c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x21e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4f      	ldr	r2, [pc, #316]	; (8001528 <HAL_GPIO_Init+0x350>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x21a>
 80013ee:	2309      	movs	r3, #9
 80013f0:	e012      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013f2:	230a      	movs	r3, #10
 80013f4:	e010      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013f6:	2308      	movs	r3, #8
 80013f8:	e00e      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00c      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013fe:	2306      	movs	r3, #6
 8001400:	e00a      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001402:	2305      	movs	r3, #5
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001406:	2304      	movs	r3, #4
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x240>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x240>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001428:	4935      	ldr	r1, [pc, #212]	; (8001500 <HAL_GPIO_Init+0x328>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <HAL_GPIO_Init+0x354>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145a:	4a34      	ldr	r2, [pc, #208]	; (800152c <HAL_GPIO_Init+0x354>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <HAL_GPIO_Init+0x354>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_GPIO_Init+0x354>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <HAL_GPIO_Init+0x354>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ae:	4a1f      	ldr	r2, [pc, #124]	; (800152c <HAL_GPIO_Init+0x354>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_GPIO_Init+0x354>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_GPIO_Init+0x354>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f ae84 	bls.w	80011f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40013800 	.word	0x40013800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40021400 	.word	0x40021400
 800151c:	40021800 	.word	0x40021800
 8001520:	40021c00 	.word	0x40021c00
 8001524:	40022000 	.word	0x40022000
 8001528:	40022400 	.word	0x40022400
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001574:	887a      	ldrh	r2, [r7, #2]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43d9      	mvns	r1, r3
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	400b      	ands	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f806 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e267      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d075      	beq.n	80016ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fe:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d00c      	beq.n	8001624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001612:	2b08      	cmp	r3, #8
 8001614:	d112      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b82      	ldr	r3, [pc, #520]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001622:	d10b      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	4b7e      	ldr	r3, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d05b      	beq.n	80016e8 <HAL_RCC_OscConfig+0x108>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d157      	bne.n	80016e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e242      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x74>
 8001646:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a75      	ldr	r2, [pc, #468]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x98>
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6f      	ldr	r2, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6c      	ldr	r2, [pc, #432]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001678:	4b69      	ldr	r3, [pc, #420]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a68      	ldr	r2, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fcb0 	bl	8000ffc <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcac 	bl	8000ffc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e207      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5b      	ldr	r3, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xc0>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc9c 	bl	8000ffc <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc98 	bl	8000ffc <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1f3      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0xe8>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1c7      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4937      	ldr	r1, [pc, #220]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_RCC_OscConfig+0x244>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fc51 	bl	8000ffc <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc4d 	bl	8000ffc <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a8      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4925      	ldr	r1, [pc, #148]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_OscConfig+0x244>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fc30 	bl	8000ffc <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc2c 	bl	8000ffc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e187      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d036      	beq.n	8001838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x248>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc10 	bl	8000ffc <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc0c 	bl	8000ffc <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e167      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80017f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x200>
 80017fe:	e01b      	b.n	8001838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_OscConfig+0x248>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fbf9 	bl	8000ffc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	e00e      	b.n	800182c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fbf5 	bl	8000ffc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d907      	bls.n	800182c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e150      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	42470000 	.word	0x42470000
 8001828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ea      	bne.n	800180e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8097 	beq.w	8001974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b81      	ldr	r3, [pc, #516]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b7d      	ldr	r3, [pc, #500]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a7c      	ldr	r2, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b77      	ldr	r3, [pc, #476]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a73      	ldr	r2, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff fbb5 	bl	8000ffc <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7ff fbb1 	bl	8000ffc <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e10c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x2ea>
 80018bc:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x30c>
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a5b      	ldr	r2, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ec:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a54      	ldr	r2, [pc, #336]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0304 	bic.w	r3, r3, #4
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fb76 	bl	8000ffc <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fb72 	bl	8000ffc <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0cb      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0ee      	beq.n	8001914 <HAL_RCC_OscConfig+0x334>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fb60 	bl	8000ffc <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fb5c 	bl	8000ffc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0b5      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a1 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b08      	cmp	r3, #8
 8001988:	d05c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d141      	bne.n	8001a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb30 	bl	8000ffc <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fb2c 	bl	8000ffc <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e087      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb05 	bl	8000ffc <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f6:	f7ff fb01 	bl	8000ffc <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e05c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x416>
 8001a14:	e054      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff faee 	bl	8000ffc <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff faea 	bl	8000ffc <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e045      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x444>
 8001a42:	e03d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e038      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
 8001a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x4ec>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d028      	beq.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d121      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d11a      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0cc      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d90c      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d044      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d119      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e067      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4934      	ldr	r1, [pc, #208]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fa1c 	bl	8000ffc <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff fa18 	bl	8000ffc <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e04f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d20c      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	490a      	ldr	r1, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f8a8 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	080079b8 	.word	0x080079b8
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca0:	b094      	sub	sp, #80	; 0x50
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca8:	2300      	movs	r3, #0
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb4:	4b79      	ldr	r3, [pc, #484]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d00d      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x40>
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	f200 80e1 	bhi.w	8001e88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cce:	e0db      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cd4:	e0db      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd6:	4b73      	ldr	r3, [pc, #460]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cda:	e0d8      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d0e:	4622      	mov	r2, r4
 8001d10:	462b      	mov	r3, r5
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	0159      	lsls	r1, r3, #5
 8001d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d20:	0150      	lsls	r0, r2, #5
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4621      	mov	r1, r4
 8001d28:	1a51      	subs	r1, r2, r1
 8001d2a:	6139      	str	r1, [r7, #16]
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d40:	4659      	mov	r1, fp
 8001d42:	018b      	lsls	r3, r1, #6
 8001d44:	4651      	mov	r1, sl
 8001d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	018a      	lsls	r2, r1, #6
 8001d4e:	4651      	mov	r1, sl
 8001d50:	ebb2 0801 	subs.w	r8, r2, r1
 8001d54:	4659      	mov	r1, fp
 8001d56:	eb63 0901 	sbc.w	r9, r3, r1
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6e:	4690      	mov	r8, r2
 8001d70:	4699      	mov	r9, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	eb18 0303 	adds.w	r3, r8, r3
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	462b      	mov	r3, r5
 8001d7c:	eb49 0303 	adc.w	r3, r9, r3
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	024b      	lsls	r3, r1, #9
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d98:	4621      	mov	r1, r4
 8001d9a:	024a      	lsls	r2, r1, #9
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da2:	2200      	movs	r2, #0
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dac:	f7fe fa6a 	bl	8000284 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001db8:	e058      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dd4:	4642      	mov	r2, r8
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	f04f 0000 	mov.w	r0, #0
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	0159      	lsls	r1, r3, #5
 8001de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de6:	0150      	lsls	r0, r2, #5
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4641      	mov	r1, r8
 8001dee:	ebb2 0a01 	subs.w	sl, r2, r1
 8001df2:	4649      	mov	r1, r9
 8001df4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e0c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e10:	eb63 050b 	sbc.w	r5, r3, fp
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	00eb      	lsls	r3, r5, #3
 8001e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e22:	00e2      	lsls	r2, r4, #3
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	4643      	mov	r3, r8
 8001e2a:	18e3      	adds	r3, r4, r3
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	464b      	mov	r3, r9
 8001e30:	eb45 0303 	adc.w	r3, r5, r3
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e42:	4629      	mov	r1, r5
 8001e44:	028b      	lsls	r3, r1, #10
 8001e46:	4621      	mov	r1, r4
 8001e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	028a      	lsls	r2, r1, #10
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e56:	2200      	movs	r2, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	61fa      	str	r2, [r7, #28]
 8001e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e60:	f7fe fa10 	bl	8000284 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	3301      	adds	r3, #1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3750      	adds	r7, #80	; 0x50
 8001e94:	46bd      	mov	sp, r7
 8001e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	007a1200 	.word	0x007a1200

08001ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec4:	f7ff fff0 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	080079c8 	.word	0x080079c8

08001ee8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_GetClockConfig+0x5c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0203 	and.w	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCC_GetClockConfig+0x5c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_GetClockConfig+0x5c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCC_GetClockConfig+0x60>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40023c00 	.word	0x40023c00

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f839 	bl	8001fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 f9d8 	bl	8002340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e04e      	b.n	80020b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d022      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x80>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002042:	d01d      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x80>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d018      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x80>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_TIM_Base_Start_IT+0xcc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x80>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00e      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x80>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x80>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x80>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_TIM_Base_Start_IT+0xdc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d111      	bne.n	80020a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b06      	cmp	r3, #6
 8002090:	d010      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a2:	e007      	b.n	80020b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40010400 	.word	0x40010400
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40001800 	.word	0x40001800

080020e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0202 	mvn.w	r2, #2
 800210c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8ee 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8e0 	bl	80022f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8f1 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b04      	cmp	r3, #4
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0204 	mvn.w	r2, #4
 8002160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8c4 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8b6 	bl	80022f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8c7 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b08      	cmp	r3, #8
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0208 	mvn.w	r2, #8
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2204      	movs	r2, #4
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f89a 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f88c 	bl	80022f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f89d 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0210 	mvn.w	r2, #16
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2208      	movs	r2, #8
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f870 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f862 	bl	80022f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f873 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0201 	mvn.w	r2, #1
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fd74 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	2b80      	cmp	r3, #128	; 0x80
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f902 	bl	8002494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d10e      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d107      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f838 	bl	800232c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d10e      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d107      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0220 	mvn.w	r2, #32
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8cc 	bl	8002480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a40      	ldr	r2, [pc, #256]	; (8002454 <TIM_Base_SetConfig+0x114>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d013      	beq.n	8002380 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d00f      	beq.n	8002380 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3d      	ldr	r2, [pc, #244]	; (8002458 <TIM_Base_SetConfig+0x118>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00b      	beq.n	8002380 <TIM_Base_SetConfig+0x40>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3c      	ldr	r2, [pc, #240]	; (800245c <TIM_Base_SetConfig+0x11c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <TIM_Base_SetConfig+0x40>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <TIM_Base_SetConfig+0x120>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d003      	beq.n	8002380 <TIM_Base_SetConfig+0x40>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3a      	ldr	r2, [pc, #232]	; (8002464 <TIM_Base_SetConfig+0x124>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d108      	bne.n	8002392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <TIM_Base_SetConfig+0x114>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d02b      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d027      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2c      	ldr	r2, [pc, #176]	; (8002458 <TIM_Base_SetConfig+0x118>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d023      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2b      	ldr	r2, [pc, #172]	; (800245c <TIM_Base_SetConfig+0x11c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2a      	ldr	r2, [pc, #168]	; (8002460 <TIM_Base_SetConfig+0x120>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01b      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a29      	ldr	r2, [pc, #164]	; (8002464 <TIM_Base_SetConfig+0x124>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d017      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <TIM_Base_SetConfig+0x128>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <TIM_Base_SetConfig+0x12c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00f      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <TIM_Base_SetConfig+0x130>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00b      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <TIM_Base_SetConfig+0x134>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <TIM_Base_SetConfig+0x138>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d003      	beq.n	80023f2 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <TIM_Base_SetConfig+0x13c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d108      	bne.n	8002404 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <TIM_Base_SetConfig+0x114>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <TIM_Base_SetConfig+0xf8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <TIM_Base_SetConfig+0x124>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d103      	bne.n	8002440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	615a      	str	r2, [r3, #20]
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800
 8002460:	40000c00 	.word	0x40000c00
 8002464:	40010400 	.word	0x40010400
 8002468:	40014000 	.word	0x40014000
 800246c:	40014400 	.word	0x40014400
 8002470:	40014800 	.word	0x40014800
 8002474:	40001800 	.word	0x40001800
 8002478:	40001c00 	.word	0x40001c00
 800247c:	40002000 	.word	0x40002000

08002480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f103 0208 	add.w	r2, r3, #8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f103 0208 	add.w	r2, r3, #8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f103 0208 	add.w	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	601a      	str	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d103      	bne.n	800256a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e00c      	b.n	8002584 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3308      	adds	r3, #8
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e002      	b.n	8002578 <vListInsert+0x2e>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	d2f6      	bcs.n	8002572 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6852      	ldr	r2, [r2, #4]
 80025dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d103      	bne.n	80025f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1e5a      	subs	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <xQueueGenericReset+0x2a>
        __asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	60bb      	str	r3, [r7, #8]
    }
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800263a:	f002 fb0b 	bl	8004c54 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	441a      	add	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	3b01      	subs	r3, #1
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	441a      	add	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d114      	bne.n	80026ba <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01a      	beq.n	80026ce <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3310      	adds	r3, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f9c9 	bl	8003a34 <xTaskRemoveFromEventList>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d012      	beq.n	80026ce <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <xQueueGenericReset+0xcc>)
 80026aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	e009      	b.n	80026ce <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3310      	adds	r3, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fef2 	bl	80024a8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff feed 	bl	80024a8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80026ce:	f002 faf1 	bl	8004cb4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	e000ed04 	.word	0xe000ed04

080026e0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <xQueueGenericCreate+0x2a>
        __asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	61bb      	str	r3, [r7, #24]
    }
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <xQueueGenericCreate+0x48>
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	429a      	cmp	r2, r3
 8002726:	d101      	bne.n	800272c <xQueueGenericCreate+0x4c>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <xQueueGenericCreate+0x4e>
 800272c:	2300      	movs	r3, #0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <xQueueGenericCreate+0x68>
        __asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	617b      	str	r3, [r7, #20]
    }
 8002744:	bf00      	nop
 8002746:	e7fe      	b.n	8002746 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800274e:	d90a      	bls.n	8002766 <xQueueGenericCreate+0x86>
        __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	613b      	str	r3, [r7, #16]
    }
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	3350      	adds	r3, #80	; 0x50
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fb9e 	bl	8004eac <pvPortMalloc>
 8002770:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00d      	beq.n	8002794 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3350      	adds	r3, #80	; 0x50
 8002780:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f805 	bl	800279e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002794:	6a3b      	ldr	r3, [r7, #32]
    }
 8002796:	4618      	mov	r0, r3
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e002      	b.n	80027c0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027cc:	2101      	movs	r1, #1
 80027ce:	69b8      	ldr	r0, [r7, #24]
 80027d0:	f7ff ff1e 	bl	8002610 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	2073      	movs	r0, #115	; 0x73
 80027e4:	f003 fe5e 	bl	80064a4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b090      	sub	sp, #64	; 0x40
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericSend+0x32>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <xQueueGenericSend+0x40>
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <xQueueGenericSend+0x44>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <xQueueGenericSend+0x46>
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <xQueueGenericSend+0x60>
        __asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <xQueueGenericSend+0x6e>
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <xQueueGenericSend+0x72>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueGenericSend+0x74>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueGenericSend+0x8e>
        __asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	623b      	str	r3, [r7, #32]
    }
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287e:	f001 fa79 	bl	8003d74 <xTaskGetSchedulerState>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <xQueueGenericSend+0x9e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <xQueueGenericSend+0xa2>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueGenericSend+0xa4>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueGenericSend+0xbe>
        __asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	61fb      	str	r3, [r7, #28]
    }
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028ae:	f002 f9d1 	bl	8004c54 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <xQueueGenericSend+0xd4>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d136      	bne.n	8002932 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fc26 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	460b      	mov	r3, r1
 80028d6:	4601      	mov	r1, r0
 80028d8:	205a      	movs	r0, #90	; 0x5a
 80028da:	f003 fe59 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e4:	f000 fa78 	bl	8002dd8 <prvCopyDataToQueue>
 80028e8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	3324      	adds	r3, #36	; 0x24
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f89c 	bl	8003a34 <xTaskRemoveFromEventList>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d013      	beq.n	800292a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002902:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <xQueueGenericSend+0x248>)
 8002904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	e00a      	b.n	800292a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <xQueueGenericSend+0x248>)
 800291c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800292a:	f002 f9c3 	bl	8004cb4 <vPortExitCritical>
                return pdPASS;
 800292e:	2301      	movs	r3, #1
 8002930:	e07d      	b.n	8002a2e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d110      	bne.n	800295a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002938:	f002 f9bc 	bl	8004cb4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fbea 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	460b      	mov	r3, r1
 800294e:	4601      	mov	r1, r0
 8002950:	205a      	movs	r0, #90	; 0x5a
 8002952:	f003 fe1d 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002956:	2300      	movs	r3, #0
 8002958:	e069      	b.n	8002a2e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4618      	mov	r0, r3
 8002966:	f001 f8cb 	bl	8003b00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800296a:	2301      	movs	r3, #1
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800296e:	f002 f9a1 	bl	8004cb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002972:	f000 fe17 	bl	80035a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002976:	f002 f96d 	bl	8004c54 <vPortEnterCritical>
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002980:	b25b      	sxtb	r3, r3
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d103      	bne.n	8002990 <xQueueGenericSend+0x1a0>
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002996:	b25b      	sxtb	r3, r3
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d103      	bne.n	80029a6 <xQueueGenericSend+0x1b6>
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a6:	f002 f985 	bl	8004cb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029aa:	1d3a      	adds	r2, r7, #4
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 f8ba 	bl	8003b2c <xTaskCheckForTimeOut>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d124      	bne.n	8002a08 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029c0:	f000 fb02 	bl	8002fc8 <prvIsQueueFull>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d018      	beq.n	80029fc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	3310      	adds	r3, #16
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 ffdc 	bl	8003990 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80029d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029da:	f000 fa8d 	bl	8002ef8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80029de:	f000 fdef 	bl	80035c0 <xTaskResumeAll>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af62 	bne.w	80028ae <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <xQueueGenericSend+0x248>)
 80029ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	e758      	b.n	80028ae <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029fe:	f000 fa7b 	bl	8002ef8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a02:	f000 fddd 	bl	80035c0 <xTaskResumeAll>
 8002a06:	e752      	b.n	80028ae <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a0a:	f000 fa75 	bl	8002ef8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a0e:	f000 fdd7 	bl	80035c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 fb7f 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	460b      	mov	r3, r1
 8002a24:	4601      	mov	r1, r0
 8002a26:	205a      	movs	r0, #90	; 0x5a
 8002a28:	f003 fdb2 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002a2c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3738      	adds	r7, #56	; 0x38
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	e000ed04 	.word	0xe000ed04

08002a3c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b090      	sub	sp, #64	; 0x40
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <xQueueGenericSendFromISR+0x3c>
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <xQueueGenericSendFromISR+0x40>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <xQueueGenericSendFromISR+0x42>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d103      	bne.n	8002aa6 <xQueueGenericSendFromISR+0x6a>
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <xQueueGenericSendFromISR+0x6e>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <xQueueGenericSendFromISR+0x70>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	623b      	str	r3, [r7, #32]
    }
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ac6:	f002 f9b1 	bl	8004e2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002aca:	f3ef 8211 	mrs	r2, BASEPRI
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	61fa      	str	r2, [r7, #28]
 8002ae0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <xQueueGenericSendFromISR+0xbc>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d148      	bne.n	8002b8a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fb04 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002b10:	4601      	mov	r1, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	461a      	mov	r2, r3
 8002b16:	2060      	movs	r0, #96	; 0x60
 8002b18:	f003 fc6a 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b22:	f000 f959 	bl	8002dd8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002b26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d112      	bne.n	8002b56 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d025      	beq.n	8002b84 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	3324      	adds	r3, #36	; 0x24
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 ff79 	bl	8003a34 <xTaskRemoveFromEventList>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01d      	beq.n	8002b84 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01a      	beq.n	8002b84 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e016      	b.n	8002b84 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b5c:	d10a      	bne.n	8002b74 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	617b      	str	r3, [r7, #20]
    }
 8002b70:	bf00      	nop
 8002b72:	e7fe      	b.n	8002b72 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	b25a      	sxtb	r2, r3
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b84:	2301      	movs	r3, #1
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b88:	e00b      	b.n	8002ba2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 fac3 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002b92:	4601      	mov	r1, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	2060      	movs	r0, #96	; 0x60
 8002b9a:	f003 fc29 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002bac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3740      	adds	r7, #64	; 0x40
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b08f      	sub	sp, #60	; 0x3c
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <xQueueReceive+0x30>
        __asm volatile
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	623b      	str	r3, [r7, #32]
    }
 8002be4:	bf00      	nop
 8002be6:	e7fe      	b.n	8002be6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <xQueueReceive+0x3e>
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <xQueueReceive+0x42>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <xQueueReceive+0x44>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <xQueueReceive+0x5e>
        __asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	61fb      	str	r3, [r7, #28]
    }
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c16:	f001 f8ad 	bl	8003d74 <xTaskGetSchedulerState>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <xQueueReceive+0x6e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <xQueueReceive+0x72>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <xQueueReceive+0x74>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xQueueReceive+0x8e>
        __asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	61bb      	str	r3, [r7, #24]
    }
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c46:	f002 f805 	bl	8004c54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02f      	beq.n	8002cb6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c5a:	f000 f927 	bl	8002eac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fa59 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002c66:	4604      	mov	r4, r0
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f004 fa55 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2101      	movs	r1, #1
 8002c74:	9100      	str	r1, [sp, #0]
 8002c76:	4621      	mov	r1, r4
 8002c78:	205c      	movs	r0, #92	; 0x5c
 8002c7a:	f003 fc89 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00f      	beq.n	8002cae <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	3310      	adds	r3, #16
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fece 	bl	8003a34 <xTaskRemoveFromEventList>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <xQueueReceive+0x21c>)
 8002ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002cae:	f002 f801 	bl	8004cb4 <vPortExitCritical>
                return pdPASS;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e08a      	b.n	8002dcc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d113      	bne.n	8002ce4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cbc:	f001 fffa 	bl	8004cb4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f004 fa28 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002cc8:	4604      	mov	r4, r0
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f004 fa24 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	9100      	str	r1, [sp, #0]
 8002cd8:	4621      	mov	r1, r4
 8002cda:	205c      	movs	r0, #92	; 0x5c
 8002cdc:	f003 fc58 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e073      	b.n	8002dcc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 ff06 	bl	8003b00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cf8:	f001 ffdc 	bl	8004cb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cfc:	f000 fc52 	bl	80035a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d00:	f001 ffa8 	bl	8004c54 <vPortEnterCritical>
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d103      	bne.n	8002d1a <xQueueReceive+0x162>
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d103      	bne.n	8002d30 <xQueueReceive+0x178>
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d30:	f001 ffc0 	bl	8004cb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d34:	1d3a      	adds	r2, r7, #4
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fef5 	bl	8003b2c <xTaskCheckForTimeOut>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d124      	bne.n	8002d92 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4a:	f000 f927 	bl	8002f9c <prvIsQueueEmpty>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d018      	beq.n	8002d86 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	3324      	adds	r3, #36	; 0x24
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fe17 	bl	8003990 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d64:	f000 f8c8 	bl	8002ef8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d68:	f000 fc2a 	bl	80035c0 <xTaskResumeAll>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f47f af69 	bne.w	8002c46 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <xQueueReceive+0x21c>)
 8002d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	e75f      	b.n	8002c46 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d88:	f000 f8b6 	bl	8002ef8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d8c:	f000 fc18 	bl	80035c0 <xTaskResumeAll>
 8002d90:	e759      	b.n	8002c46 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d94:	f000 f8b0 	bl	8002ef8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d98:	f000 fc12 	bl	80035c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9e:	f000 f8fd 	bl	8002f9c <prvIsQueueEmpty>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f43f af4e 	beq.w	8002c46 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f9b3 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002db2:	4604      	mov	r4, r0
 8002db4:	2000      	movs	r0, #0
 8002db6:	f004 f9af 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	9100      	str	r1, [sp, #0]
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	205c      	movs	r0, #92	; 0x5c
 8002dc6:	f003 fbe3 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002dca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3734      	adds	r7, #52	; 0x34
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	e000ed04 	.word	0xe000ed04

08002dd8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d14d      	bne.n	8002e9a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 ffd4 	bl	8003db0 <xTaskPriorityDisinherit>
 8002e08:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	e043      	b.n	8002e9a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d119      	bne.n	8002e4c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6858      	ldr	r0, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	461a      	mov	r2, r3
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	f004 fcfe 	bl	8007824 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	441a      	add	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d32b      	bcc.n	8002e9a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	e026      	b.n	8002e9a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68d8      	ldr	r0, [r3, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	461a      	mov	r2, r3
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	f004 fce4 	bl	8007824 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	425b      	negs	r3, r3
 8002e66:	441a      	add	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	425b      	negs	r3, r3
 8002e82:	441a      	add	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d105      	bne.n	8002e9a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002ea2:	697b      	ldr	r3, [r7, #20]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	441a      	add	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d303      	bcc.n	8002ee0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68d9      	ldr	r1, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6838      	ldr	r0, [r7, #0]
 8002eec:	f004 fc9a 	bl	8007824 <memcpy>
    }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f00:	f001 fea8 	bl	8004c54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f0c:	e011      	b.n	8002f32 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3324      	adds	r3, #36	; 0x24
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fd8a 	bl	8003a34 <xTaskRemoveFromEventList>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002f26:	f000 fe67 	bl	8003bf8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	dce9      	bgt.n	8002f0e <prvUnlockQueue+0x16>
 8002f3a:	e000      	b.n	8002f3e <prvUnlockQueue+0x46>
                        break;
 8002f3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002f46:	f001 feb5 	bl	8004cb4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f4a:	f001 fe83 	bl	8004c54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f56:	e011      	b.n	8002f7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3310      	adds	r3, #16
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fd65 	bl	8003a34 <xTaskRemoveFromEventList>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f70:	f000 fe42 	bl	8003bf8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f74:	7bbb      	ldrb	r3, [r7, #14]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	dce9      	bgt.n	8002f58 <prvUnlockQueue+0x60>
 8002f84:	e000      	b.n	8002f88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f90:	f001 fe90 	bl	8004cb4 <vPortExitCritical>
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fa4:	f001 fe56 	bl	8004c54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e001      	b.n	8002fba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fba:	f001 fe7b 	bl	8004cb4 <vPortExitCritical>

    return xReturn;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fd0:	f001 fe40 	bl	8004c54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d102      	bne.n	8002fe6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fea:	f001 fe63 	bl	8004cb4 <vPortExitCritical>

    return xReturn;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e01e      	b.n	8003046 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <vQueueAddToRegistry+0x60>)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003014:	4910      	ldr	r1, [pc, #64]	; (8003058 <vQueueAddToRegistry+0x60>)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800301e:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <vQueueAddToRegistry+0x60>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f004 f873 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8003032:	4601      	mov	r1, r0
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	2071      	movs	r0, #113	; 0x71
 800303a:	f003 f9d9 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800303e:	e006      	b.n	800304e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b07      	cmp	r3, #7
 800304a:	d9dd      	bls.n	8003008 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000088 	.word	0x20000088

0800305c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800306c:	f001 fdf2 	bl	8004c54 <vPortEnterCritical>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003076:	b25b      	sxtb	r3, r3
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d103      	bne.n	8003086 <vQueueWaitForMessageRestricted+0x2a>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308c:	b25b      	sxtb	r3, r3
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d103      	bne.n	800309c <vQueueWaitForMessageRestricted+0x40>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800309c:	f001 fe0a 	bl	8004cb4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc91 	bl	80039d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff1e 	bl	8002ef8 <prvUnlockQueue>
    }
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af04      	add	r7, sp, #16
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 fee7 	bl	8004eac <pvPortMalloc>
 80030de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030e6:	2058      	movs	r0, #88	; 0x58
 80030e8:	f001 fee0 	bl	8004eac <pvPortMalloc>
 80030ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
 80030fa:	e005      	b.n	8003108 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030fc:	6978      	ldr	r0, [r7, #20]
 80030fe:	f001 ffb5 	bl	800506c <vPortFree>
 8003102:	e001      	b.n	8003108 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d013      	beq.n	8003136 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	2300      	movs	r3, #0
 8003112:	9303      	str	r3, [sp, #12]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f80e 	bl	8003146 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800312a:	69f8      	ldr	r0, [r7, #28]
 800312c:	f000 f8a2 	bl	8003274 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003130:	2301      	movs	r3, #1
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e002      	b.n	800313c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800313c:	69bb      	ldr	r3, [r7, #24]
    }
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b088      	sub	sp, #32
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	21a5      	movs	r1, #165	; 0xa5
 8003160:	f004 fb6e 	bl	8007840 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800316e:	3b01      	subs	r3, #1
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f023 0307 	bic.w	r3, r3, #7
 800317c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <prvInitialiseNewTask+0x58>
        __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	617b      	str	r3, [r7, #20]
    }
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01f      	beq.n	80031e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	e012      	b.n	80031d0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	4413      	add	r3, r2
 80031b0:	7819      	ldrb	r1, [r3, #0]
 80031b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	4413      	add	r3, r2
 80031b8:	3334      	adds	r3, #52	; 0x34
 80031ba:	460a      	mov	r2, r1
 80031bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d006      	beq.n	80031d8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b09      	cmp	r3, #9
 80031d4:	d9e9      	bls.n	80031aa <prvInitialiseNewTask+0x64>
 80031d6:	e000      	b.n	80031da <prvInitialiseNewTask+0x94>
            {
                break;
 80031d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031e2:	e003      	b.n	80031ec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d901      	bls.n	80031f6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031f2:	2304      	movs	r3, #4
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003200:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	2200      	movs	r2, #0
 8003206:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	3304      	adds	r3, #4
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f96b 	bl	80024e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	3318      	adds	r3, #24
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f966 	bl	80024e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003220:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	f1c3 0205 	rsb	r2, r3, #5
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	3350      	adds	r3, #80	; 0x50
 8003236:	2204      	movs	r2, #4
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f004 fb00 	bl	8007840 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	3354      	adds	r3, #84	; 0x54
 8003244:	2201      	movs	r2, #1
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f004 faf9 	bl	8007840 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	68f9      	ldr	r1, [r7, #12]
 8003252:	69b8      	ldr	r0, [r7, #24]
 8003254:	f001 fb54 	bl	8004900 <pxPortInitialiseStack>
 8003258:	4602      	mov	r2, r0
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003268:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800326a:	bf00      	nop
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003274:	b5b0      	push	{r4, r5, r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800327c:	f001 fcea 	bl	8004c54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <prvAddNewTaskToReadyList+0xfc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <prvAddNewTaskToReadyList+0xfc>)
 8003288:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <prvAddNewTaskToReadyList+0x100>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003292:	4a38      	ldr	r2, [pc, #224]	; (8003374 <prvAddNewTaskToReadyList+0x100>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <prvAddNewTaskToReadyList+0xfc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d110      	bne.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80032a0:	f000 fcce 	bl	8003c40 <prvInitialiseTaskLists>
 80032a4:	e00d      	b.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80032a6:	4b34      	ldr	r3, [pc, #208]	; (8003378 <prvAddNewTaskToReadyList+0x104>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <prvAddNewTaskToReadyList+0x100>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d802      	bhi.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032bc:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <prvAddNewTaskToReadyList+0x100>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <prvAddNewTaskToReadyList+0x108>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	4a2c      	ldr	r2, [pc, #176]	; (800337c <prvAddNewTaskToReadyList+0x108>)
 80032ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032cc:	4b2b      	ldr	r3, [pc, #172]	; (800337c <prvAddNewTaskToReadyList+0x108>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <prvAddNewTaskToReadyList+0x94>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 fdf5 	bl	8006ecc <SEGGER_SYSVIEW_OnTaskCreate>
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	461d      	mov	r5, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461c      	mov	r4, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	1ae3      	subs	r3, r4, r3
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	462b      	mov	r3, r5
 8003304:	f004 f914 	bl	8007530 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fe62 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <prvAddNewTaskToReadyList+0x10c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	4a18      	ldr	r2, [pc, #96]	; (8003380 <prvAddNewTaskToReadyList+0x10c>)
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <prvAddNewTaskToReadyList+0x110>)
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f7ff f8e2 	bl	8002502 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800333e:	f001 fcb9 	bl	8004cb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <prvAddNewTaskToReadyList+0x104>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00e      	beq.n	8003368 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <prvAddNewTaskToReadyList+0x100>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <prvAddNewTaskToReadyList+0x114>)
 800335a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bdb0      	pop	{r4, r5, r7, pc}
 8003370:	200001a0 	.word	0x200001a0
 8003374:	200000c8 	.word	0x200000c8
 8003378:	200001ac 	.word	0x200001ac
 800337c:	200001bc 	.word	0x200001bc
 8003380:	200001a8 	.word	0x200001a8
 8003384:	200000cc 	.word	0x200000cc
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003394:	f001 fc5e 	bl	8004c54 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <vTaskDelete+0x18>
 800339e:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <vTaskDelete+0x12c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e000      	b.n	80033a6 <vTaskDelete+0x1a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff f905 	bl	80025bc <uxListRemove>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d115      	bne.n	80033e4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	493f      	ldr	r1, [pc, #252]	; (80034bc <vTaskDelete+0x130>)
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <vTaskDelete+0x58>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43da      	mvns	r2, r3
 80033da:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <vTaskDelete+0x134>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4013      	ands	r3, r2
 80033e0:	4a37      	ldr	r2, [pc, #220]	; (80034c0 <vTaskDelete+0x134>)
 80033e2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3318      	adds	r3, #24
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff f8e3 	bl	80025bc <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <vTaskDelete+0x138>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a31      	ldr	r2, [pc, #196]	; (80034c4 <vTaskDelete+0x138>)
 80033fe:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <vTaskDelete+0x12c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	429a      	cmp	r2, r3
 8003408:	d118      	bne.n	800343c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	482d      	ldr	r0, [pc, #180]	; (80034c8 <vTaskDelete+0x13c>)
 8003412:	f7ff f876 	bl	8002502 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003416:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <vTaskDelete+0x140>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <vTaskDelete+0x140>)
 800341e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4618      	mov	r0, r3
 8003424:	f003 fe78 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8003428:	4603      	mov	r3, r0
 800342a:	4619      	mov	r1, r3
 800342c:	2022      	movs	r0, #34	; 0x22
 800342e:	f002 ffa3 	bl	8006378 <SEGGER_SYSVIEW_RecordU32>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f004 f8e3 	bl	8007600 <SYSVIEW_DeleteTask>
 800343a:	e016      	b.n	800346a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800343c:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <vTaskDelete+0x144>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3b01      	subs	r3, #1
 8003442:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <vTaskDelete+0x144>)
 8003444:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fe65 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 800344e:	4603      	mov	r3, r0
 8003450:	4619      	mov	r1, r3
 8003452:	2022      	movs	r0, #34	; 0x22
 8003454:	f002 ff90 	bl	8006378 <SEGGER_SYSVIEW_RecordU32>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4618      	mov	r0, r3
 800345c:	f004 f8d0 	bl	8007600 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fc5b 	bl	8003d1c <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003466:	f000 fc69 	bl	8003d3c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800346a:	f001 fc23 	bl	8004cb4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <vTaskDelete+0x148>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01b      	beq.n	80034ae <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <vTaskDelete+0x12c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	d116      	bne.n	80034ae <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <vTaskDelete+0x14c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <vTaskDelete+0x112>
        __asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60bb      	str	r3, [r7, #8]
    }
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <vTaskDelete+0x150>)
 80034a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200000c8 	.word	0x200000c8
 80034bc:	200000cc 	.word	0x200000cc
 80034c0:	200001a8 	.word	0x200001a8
 80034c4:	200001bc 	.word	0x200001bc
 80034c8:	20000174 	.word	0x20000174
 80034cc:	20000188 	.word	0x20000188
 80034d0:	200001a0 	.word	0x200001a0
 80034d4:	200001ac 	.word	0x200001ac
 80034d8:	200001c8 	.word	0x200001c8
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <vTaskStartScheduler+0xa4>)
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2300      	movs	r3, #0
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	2282      	movs	r2, #130	; 0x82
 80034f2:	4925      	ldr	r1, [pc, #148]	; (8003588 <vTaskStartScheduler+0xa8>)
 80034f4:	4825      	ldr	r0, [pc, #148]	; (800358c <vTaskStartScheduler+0xac>)
 80034f6:	f7ff fde5 	bl	80030c4 <xTaskCreate>
 80034fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d102      	bne.n	8003508 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003502:	f000 feeb 	bl	80042dc <xTimerCreateTimerTask>
 8003506:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d124      	bne.n	8003558 <vTaskStartScheduler+0x78>
        __asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60bb      	str	r3, [r7, #8]
    }
 8003520:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <vTaskStartScheduler+0xb0>)
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <vTaskStartScheduler+0xb4>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <vTaskStartScheduler+0xb8>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <vTaskStartScheduler+0xbc>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <vTaskStartScheduler+0xa4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d102      	bne.n	8003548 <vTaskStartScheduler+0x68>
 8003542:	f003 fca7 	bl	8006e94 <SEGGER_SYSVIEW_OnIdle>
 8003546:	e004      	b.n	8003552 <vTaskStartScheduler+0x72>
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <vTaskStartScheduler+0xbc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f003 fcff 	bl	8006f50 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003552:	f001 fa5f 	bl	8004a14 <xPortStartScheduler>
 8003556:	e00e      	b.n	8003576 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d10a      	bne.n	8003576 <vTaskStartScheduler+0x96>
        __asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	607b      	str	r3, [r7, #4]
    }
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <vTaskStartScheduler+0xc0>)
 8003578:	681b      	ldr	r3, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200001c4 	.word	0x200001c4
 8003588:	080078e0 	.word	0x080078e0
 800358c:	08003c11 	.word	0x08003c11
 8003590:	200001c0 	.word	0x200001c0
 8003594:	200001ac 	.word	0x200001ac
 8003598:	200001a4 	.word	0x200001a4
 800359c:	200000c8 	.word	0x200000c8
 80035a0:	2000000c 	.word	0x2000000c

080035a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <vTaskSuspendAll+0x18>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	4a03      	ldr	r2, [pc, #12]	; (80035bc <vTaskSuspendAll+0x18>)
 80035b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	200001c8 	.word	0x200001c8

080035c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <xTaskResumeAll+0x11c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <xTaskResumeAll+0x2c>
        __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	603b      	str	r3, [r7, #0]
    }
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035ec:	f001 fb32 	bl	8004c54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035f0:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <xTaskResumeAll+0x11c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a39      	ldr	r2, [pc, #228]	; (80036dc <xTaskResumeAll+0x11c>)
 80035f8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <xTaskResumeAll+0x11c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d165      	bne.n	80036ce <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <xTaskResumeAll+0x120>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d061      	beq.n	80036ce <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800360a:	e032      	b.n	8003672 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800360c:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <xTaskResumeAll+0x124>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3318      	adds	r3, #24
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe ffcf 	bl	80025bc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3304      	adds	r3, #4
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe ffca 	bl	80025bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4618      	mov	r0, r3
 800362c:	f003 fcd2 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <xTaskResumeAll+0x128>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <xTaskResumeAll+0x128>)
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4a27      	ldr	r2, [pc, #156]	; (80036ec <xTaskResumeAll+0x12c>)
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7fe ff52 	bl	8002502 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <xTaskResumeAll+0x130>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <xTaskResumeAll+0x134>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <xTaskResumeAll+0x124>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1c8      	bne.n	800360c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003680:	f000 fb5c 	bl	8003d3c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <xTaskResumeAll+0x138>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003690:	f000 f858 	bl	8003744 <xTaskIncrementTick>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <xTaskResumeAll+0x134>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f1      	bne.n	8003690 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <xTaskResumeAll+0x138>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <xTaskResumeAll+0x134>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <xTaskResumeAll+0x13c>)
 80036c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80036ce:	f001 faf1 	bl	8004cb4 <vPortExitCritical>

    return xAlreadyYielded;
 80036d2:	68bb      	ldr	r3, [r7, #8]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200001c8 	.word	0x200001c8
 80036e0:	200001a0 	.word	0x200001a0
 80036e4:	20000160 	.word	0x20000160
 80036e8:	200001a8 	.word	0x200001a8
 80036ec:	200000cc 	.word	0x200000cc
 80036f0:	200000c8 	.word	0x200000c8
 80036f4:	200001b4 	.word	0x200001b4
 80036f8:	200001b0 	.word	0x200001b0
 80036fc:	e000ed04 	.word	0xe000ed04

08003700 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <xTaskGetTickCount+0x1c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800370c:	687b      	ldr	r3, [r7, #4]
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	200001a4 	.word	0x200001a4

08003720 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003726:	f001 fb81 	bl	8004e2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <xTaskGetTickCountFromISR+0x20>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003734:	683b      	ldr	r3, [r7, #0]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200001a4 	.word	0x200001a4

08003744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800374e:	4b50      	ldr	r3, [pc, #320]	; (8003890 <xTaskIncrementTick+0x14c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8092 	bne.w	800387c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003758:	4b4e      	ldr	r3, [pc, #312]	; (8003894 <xTaskIncrementTick+0x150>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003760:	4a4c      	ldr	r2, [pc, #304]	; (8003894 <xTaskIncrementTick+0x150>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d120      	bne.n	80037ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800376c:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <xTaskIncrementTick+0x154>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <xTaskIncrementTick+0x48>
        __asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	603b      	str	r3, [r7, #0]
    }
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <xTaskIncrementTick+0x46>
 800378c:	4b42      	ldr	r3, [pc, #264]	; (8003898 <xTaskIncrementTick+0x154>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b42      	ldr	r3, [pc, #264]	; (800389c <xTaskIncrementTick+0x158>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a40      	ldr	r2, [pc, #256]	; (8003898 <xTaskIncrementTick+0x154>)
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4a40      	ldr	r2, [pc, #256]	; (800389c <xTaskIncrementTick+0x158>)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <xTaskIncrementTick+0x15c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	4a3e      	ldr	r2, [pc, #248]	; (80038a0 <xTaskIncrementTick+0x15c>)
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	f000 fac7 	bl	8003d3c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <xTaskIncrementTick+0x160>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d34c      	bcc.n	8003852 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b8:	4b37      	ldr	r3, [pc, #220]	; (8003898 <xTaskIncrementTick+0x154>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c2:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <xTaskIncrementTick+0x160>)
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	601a      	str	r2, [r3, #0]
                    break;
 80037ca:	e042      	b.n	8003852 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037cc:	4b32      	ldr	r3, [pc, #200]	; (8003898 <xTaskIncrementTick+0x154>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d203      	bcs.n	80037ec <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80037e4:	4a2f      	ldr	r2, [pc, #188]	; (80038a4 <xTaskIncrementTick+0x160>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037ea:	e032      	b.n	8003852 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fee3 	bl	80025bc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3318      	adds	r3, #24
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe feda 	bl	80025bc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f003 fbe2 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <xTaskIncrementTick+0x164>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4313      	orrs	r3, r2
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <xTaskIncrementTick+0x164>)
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <xTaskIncrementTick+0x168>)
 8003830:	441a      	add	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fe fe62 	bl	8002502 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <xTaskIncrementTick+0x16c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d3b5      	bcc.n	80037b8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003850:	e7b2      	b.n	80037b8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <xTaskIncrementTick+0x16c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	4914      	ldr	r1, [pc, #80]	; (80038ac <xTaskIncrementTick+0x168>)
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d901      	bls.n	800386e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800386a:	2301      	movs	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <xTaskIncrementTick+0x170>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e004      	b.n	8003886 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <xTaskIncrementTick+0x174>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <xTaskIncrementTick+0x174>)
 8003884:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003886:	697b      	ldr	r3, [r7, #20]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	200001c8 	.word	0x200001c8
 8003894:	200001a4 	.word	0x200001a4
 8003898:	20000158 	.word	0x20000158
 800389c:	2000015c 	.word	0x2000015c
 80038a0:	200001b8 	.word	0x200001b8
 80038a4:	200001c0 	.word	0x200001c0
 80038a8:	200001a8 	.word	0x200001a8
 80038ac:	200000cc 	.word	0x200000cc
 80038b0:	200000c8 	.word	0x200000c8
 80038b4:	200001b4 	.word	0x200001b4
 80038b8:	200001b0 	.word	0x200001b0

080038bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <vTaskSwitchContext+0xbc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80038ca:	4b2c      	ldr	r3, [pc, #176]	; (800397c <vTaskSwitchContext+0xc0>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80038d0:	e04d      	b.n	800396e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <vTaskSwitchContext+0xc0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d8:	4b29      	ldr	r3, [pc, #164]	; (8003980 <vTaskSwitchContext+0xc4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	f1c3 031f 	rsb	r3, r3, #31
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	4925      	ldr	r1, [pc, #148]	; (8003984 <vTaskSwitchContext+0xc8>)
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	607b      	str	r3, [r7, #4]
    }
 8003914:	bf00      	nop
 8003916:	e7fe      	b.n	8003916 <vTaskSwitchContext+0x5a>
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <vTaskSwitchContext+0xc8>)
 8003924:	4413      	add	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	3308      	adds	r3, #8
 800393a:	429a      	cmp	r2, r3
 800393c:	d104      	bne.n	8003948 <vTaskSwitchContext+0x8c>
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <vTaskSwitchContext+0xcc>)
 8003950:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <vTaskSwitchContext+0xcc>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <vTaskSwitchContext+0xd0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d102      	bne.n	8003964 <vTaskSwitchContext+0xa8>
 800395e:	f003 fa99 	bl	8006e94 <SEGGER_SYSVIEW_OnIdle>
}
 8003962:	e004      	b.n	800396e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <vTaskSwitchContext+0xcc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f003 faf1 	bl	8006f50 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200001c8 	.word	0x200001c8
 800397c:	200001b4 	.word	0x200001b4
 8003980:	200001a8 	.word	0x200001a8
 8003984:	200000cc 	.word	0x200000cc
 8003988:	200000c8 	.word	0x200000c8
 800398c:	200001c4 	.word	0x200001c4

08003990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
    }
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <vTaskPlaceOnEventList+0x44>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3318      	adds	r3, #24
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fdc3 	bl	800254a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039c4:	2101      	movs	r1, #1
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	f000 fc10 	bl	80041ec <prvAddCurrentTaskToDelayedList>
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200000c8 	.word	0x200000c8

080039d8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	617b      	str	r3, [r7, #20]
    }
 80039fc:	bf00      	nop
 80039fe:	e7fe      	b.n	80039fe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <vTaskPlaceOnEventListRestricted+0x58>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3318      	adds	r3, #24
 8003a06:	4619      	mov	r1, r3
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7fe fd7a 	bl	8002502 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003a1a:	2024      	movs	r0, #36	; 0x24
 8003a1c:	f002 fc8e 	bl	800633c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68b8      	ldr	r0, [r7, #8]
 8003a24:	f000 fbe2 	bl	80041ec <prvAddCurrentTaskToDelayedList>
    }
 8003a28:	bf00      	nop
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200000c8 	.word	0x200000c8

08003a34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60fb      	str	r3, [r7, #12]
    }
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3318      	adds	r3, #24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fda9 	bl	80025bc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <xTaskRemoveFromEventList+0xb4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d120      	bne.n	8003ab4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fda0 	bl	80025bc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 faa8 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <xTaskRemoveFromEventList+0xb8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <xTaskRemoveFromEventList+0xb8>)
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <xTaskRemoveFromEventList+0xbc>)
 8003aa4:	441a      	add	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fe fd28 	bl	8002502 <vListInsertEnd>
 8003ab2:	e005      	b.n	8003ac0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	4619      	mov	r1, r3
 8003aba:	480e      	ldr	r0, [pc, #56]	; (8003af4 <xTaskRemoveFromEventList+0xc0>)
 8003abc:	f7fe fd21 	bl	8002502 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <xTaskRemoveFromEventList+0xc4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d905      	bls.n	8003ada <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <xTaskRemoveFromEventList+0xc8>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e001      	b.n	8003ade <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003ade:	697b      	ldr	r3, [r7, #20]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200001c8 	.word	0x200001c8
 8003aec:	200001a8 	.word	0x200001a8
 8003af0:	200000cc 	.word	0x200000cc
 8003af4:	20000160 	.word	0x20000160
 8003af8:	200000c8 	.word	0x200000c8
 8003afc:	200001b4 	.word	0x200001b4

08003b00 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <vTaskInternalSetTimeOutState+0x24>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <vTaskInternalSetTimeOutState+0x28>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	605a      	str	r2, [r3, #4]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	200001b8 	.word	0x200001b8
 8003b28:	200001a4 	.word	0x200001a4

08003b2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	613b      	str	r3, [r7, #16]
    }
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	60fb      	str	r3, [r7, #12]
    }
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b6e:	f001 f871 	bl	8004c54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b72:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <xTaskCheckForTimeOut+0xc4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d102      	bne.n	8003b92 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	e026      	b.n	8003be0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <xTaskCheckForTimeOut+0xc8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d00a      	beq.n	8003bb4 <xTaskCheckForTimeOut+0x88>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d305      	bcc.n	8003bb4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e015      	b.n	8003be0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20b      	bcs.n	8003bd6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad2      	subs	r2, r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff98 	bl	8003b00 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e004      	b.n	8003be0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003be0:	f001 f868 	bl	8004cb4 <vPortExitCritical>

    return xReturn;
 8003be4:	69fb      	ldr	r3, [r7, #28]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200001a4 	.word	0x200001a4
 8003bf4:	200001b8 	.word	0x200001b8

08003bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <vTaskMissedYield+0x14>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	200001b4 	.word	0x200001b4

08003c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c18:	f000 f852 	bl	8003cc0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <prvIdleTask+0x28>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d9f9      	bls.n	8003c18 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <prvIdleTask+0x2c>)
 8003c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c34:	e7f0      	b.n	8003c18 <prvIdleTask+0x8>
 8003c36:	bf00      	nop
 8003c38:	200000cc 	.word	0x200000cc
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	e00c      	b.n	8003c66 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <prvInitialiseTaskLists+0x60>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fc24 	bl	80024a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3301      	adds	r3, #1
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d9ef      	bls.n	8003c4c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c6c:	480d      	ldr	r0, [pc, #52]	; (8003ca4 <prvInitialiseTaskLists+0x64>)
 8003c6e:	f7fe fc1b 	bl	80024a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c72:	480d      	ldr	r0, [pc, #52]	; (8003ca8 <prvInitialiseTaskLists+0x68>)
 8003c74:	f7fe fc18 	bl	80024a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c78:	480c      	ldr	r0, [pc, #48]	; (8003cac <prvInitialiseTaskLists+0x6c>)
 8003c7a:	f7fe fc15 	bl	80024a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c7e:	480c      	ldr	r0, [pc, #48]	; (8003cb0 <prvInitialiseTaskLists+0x70>)
 8003c80:	f7fe fc12 	bl	80024a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c84:	480b      	ldr	r0, [pc, #44]	; (8003cb4 <prvInitialiseTaskLists+0x74>)
 8003c86:	f7fe fc0f 	bl	80024a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <prvInitialiseTaskLists+0x78>)
 8003c8c:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <prvInitialiseTaskLists+0x64>)
 8003c8e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <prvInitialiseTaskLists+0x7c>)
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <prvInitialiseTaskLists+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200000cc 	.word	0x200000cc
 8003ca4:	20000130 	.word	0x20000130
 8003ca8:	20000144 	.word	0x20000144
 8003cac:	20000160 	.word	0x20000160
 8003cb0:	20000174 	.word	0x20000174
 8003cb4:	2000018c 	.word	0x2000018c
 8003cb8:	20000158 	.word	0x20000158
 8003cbc:	2000015c 	.word	0x2000015c

08003cc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cc6:	e019      	b.n	8003cfc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003cc8:	f000 ffc4 	bl	8004c54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <prvCheckTasksWaitingTermination+0x50>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fc6f 	bl	80025bc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <prvCheckTasksWaitingTermination+0x54>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <prvCheckTasksWaitingTermination+0x54>)
 8003ce6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <prvCheckTasksWaitingTermination+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <prvCheckTasksWaitingTermination+0x58>)
 8003cf0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003cf2:	f000 ffdf 	bl	8004cb4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f810 	bl	8003d1c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <prvCheckTasksWaitingTermination+0x58>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e1      	bne.n	8003cc8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000174 	.word	0x20000174
 8003d14:	200001a0 	.word	0x200001a0
 8003d18:	20000188 	.word	0x20000188

08003d1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 f99f 	bl	800506c <vPortFree>
                vPortFree( pxTCB );
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f001 f99c 	bl	800506c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <prvResetNextTaskUnblockTime+0x30>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <prvResetNextTaskUnblockTime+0x34>)
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d52:	e005      	b.n	8003d60 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <prvResetNextTaskUnblockTime+0x30>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <prvResetNextTaskUnblockTime+0x34>)
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000158 	.word	0x20000158
 8003d70:	200001c0 	.word	0x200001c0

08003d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <xTaskGetSchedulerState+0x34>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d82:	2301      	movs	r3, #1
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e008      	b.n	8003d9a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <xTaskGetSchedulerState+0x38>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d90:	2302      	movs	r3, #2
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	e001      	b.n	8003d9a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d9a:	687b      	ldr	r3, [r7, #4]
    }
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	200001ac 	.word	0x200001ac
 8003dac:	200001c8 	.word	0x200001c8

08003db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d068      	beq.n	8003e98 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003dc6:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <xTaskPriorityDisinherit+0xf4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d00a      	beq.n	8003de6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	60fb      	str	r3, [r7, #12]
    }
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	60bb      	str	r3, [r7, #8]
    }
 8003e00:	bf00      	nop
 8003e02:	e7fe      	b.n	8003e02 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d03e      	beq.n	8003e98 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d13a      	bne.n	8003e98 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fbc8 	bl	80025bc <uxListRemove>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	2201      	movs	r2, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <xTaskPriorityDisinherit+0xf8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4013      	ands	r3, r2
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <xTaskPriorityDisinherit+0xf8>)
 8003e46:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	204a      	movs	r0, #74	; 0x4a
 8003e4e:	f002 fa93 	bl	8006378 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f1c3 0205 	rsb	r2, r3, #5
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <xTaskPriorityDisinherit+0xf8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <xTaskPriorityDisinherit+0xf8>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <xTaskPriorityDisinherit+0xfc>)
 8003e86:	441a      	add	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fe fb37 	bl	8002502 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e98:	697b      	ldr	r3, [r7, #20]
    }
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200000c8 	.word	0x200000c8
 8003ea8:	200001a8 	.word	0x200001a8
 8003eac:	200000cc 	.word	0x200000cc

08003eb0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	613b      	str	r3, [r7, #16]
    }
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003eda:	f000 febb 	bl	8004c54 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003ede:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <xTaskGenericNotifyWait+0x108>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3354      	adds	r3, #84	; 0x54
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d022      	beq.n	8003f36 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <xTaskGenericNotifyWait+0x108>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	3214      	adds	r2, #20
 8003ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	43d2      	mvns	r2, r2
 8003f00:	4011      	ands	r1, r2
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	3214      	adds	r2, #20
 8003f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <xTaskGenericNotifyWait+0x108>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	3354      	adds	r3, #84	; 0x54
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f1e:	2101      	movs	r1, #1
 8003f20:	6a38      	ldr	r0, [r7, #32]
 8003f22:	f000 f963 	bl	80041ec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003f26:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <xTaskGenericNotifyWait+0x10c>)
 8003f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f36:	f000 febd 	bl	8004cb4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003f3a:	f000 fe8b 	bl	8004c54 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	2040      	movs	r0, #64	; 0x40
 8003f4c:	f002 fb20 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <xTaskGenericNotifyWait+0x108>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	3214      	adds	r2, #20
 8003f5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <xTaskGenericNotifyWait+0x108>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3354      	adds	r3, #84	; 0x54
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d002      	beq.n	8003f7e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e00e      	b.n	8003f9c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <xTaskGenericNotifyWait+0x108>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	3214      	adds	r2, #20
 8003f86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	43d2      	mvns	r2, r2
 8003f8e:	4011      	ands	r1, r2
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	3214      	adds	r2, #20
 8003f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <xTaskGenericNotifyWait+0x108>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3354      	adds	r3, #84	; 0x54
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003faa:	f000 fe83 	bl	8004cb4 <vPortExitCritical>

        return xReturn;
 8003fae:	697b      	ldr	r3, [r7, #20]
    }
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200000c8 	.word	0x200000c8
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b092      	sub	sp, #72	; 0x48
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800400a:	f000 ff0f 	bl	8004e2c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8004012:	f3ef 8211 	mrs	r2, BASEPRI
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	627a      	str	r2, [r7, #36]	; 0x24
 8004028:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800402e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004030:	2b00      	cmp	r3, #0
 8004032:	d006      	beq.n	8004042 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	3214      	adds	r2, #20
 800403a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800403e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004040:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4413      	add	r3, r2
 8004048:	3354      	adds	r3, #84	; 0x54
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4413      	add	r3, r2
 8004056:	3354      	adds	r3, #84	; 0x54
 8004058:	2202      	movs	r2, #2
 800405a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d83b      	bhi.n	80040da <xTaskGenericNotifyFromISR+0x11a>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <xTaskGenericNotifyFromISR+0xa8>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	080040f9 	.word	0x080040f9
 800406c:	0800407d 	.word	0x0800407d
 8004070:	08004099 	.word	0x08004099
 8004074:	080040b1 	.word	0x080040b1
 8004078:	080040bf 	.word	0x080040bf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	3214      	adds	r2, #20
 8004082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	ea42 0103 	orr.w	r1, r2, r3
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	3214      	adds	r2, #20
 8004092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004096:	e032      	b.n	80040fe <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	3214      	adds	r2, #20
 800409e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	3214      	adds	r2, #20
 80040aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040ae:	e026      	b.n	80040fe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	3214      	adds	r2, #20
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040bc:	e01f      	b.n	80040fe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80040be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d006      	beq.n	80040d4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	3214      	adds	r2, #20
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80040d2:	e014      	b.n	80040fe <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80040d8:	e011      	b.n	80040fe <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80040da:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <xTaskGenericNotifyFromISR+0x210>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	61fb      	str	r3, [r7, #28]
    }
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80040fc:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	4618      	mov	r0, r3
 8004102:	f003 f809 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8004106:	78f9      	ldrb	r1, [r7, #3]
 8004108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800410c:	9201      	str	r2, [sp, #4]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	460b      	mov	r3, r1
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4601      	mov	r1, r0
 8004116:	203f      	movs	r0, #63	; 0x3f
 8004118:	f002 facc 	bl	80066b4 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800411c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004120:	2b01      	cmp	r3, #1
 8004122:	d149      	bne.n	80041b8 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	61bb      	str	r3, [r7, #24]
    }
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <xTaskGenericNotifyFromISR+0x214>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d120      	bne.n	800418c <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fa34 	bl	80025bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	4618      	mov	r0, r3
 8004158:	f002 ff3c 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	2201      	movs	r2, #1
 8004162:	409a      	lsls	r2, r3
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <xTaskGenericNotifyFromISR+0x218>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <xTaskGenericNotifyFromISR+0x218>)
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <xTaskGenericNotifyFromISR+0x21c>)
 800417c:	441a      	add	r2, r3
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe f9bc 	bl	8002502 <vListInsertEnd>
 800418a:	e005      	b.n	8004198 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	3318      	adds	r3, #24
 8004190:	4619      	mov	r1, r3
 8004192:	4813      	ldr	r0, [pc, #76]	; (80041e0 <xTaskGenericNotifyFromISR+0x220>)
 8004194:	f7fe f9b5 	bl	8002502 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <xTaskGenericNotifyFromISR+0x224>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d908      	bls.n	80041b8 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80041a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80041ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <xTaskGenericNotifyFromISR+0x228>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	617b      	str	r3, [r7, #20]
        __asm volatile
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f383 8811 	msr	BASEPRI, r3
    }
 80041c2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80041c6:	4618      	mov	r0, r3
 80041c8:	3740      	adds	r7, #64	; 0x40
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	200001a4 	.word	0x200001a4
 80041d4:	200001c8 	.word	0x200001c8
 80041d8:	200001a8 	.word	0x200001a8
 80041dc:	200000cc 	.word	0x200000cc
 80041e0:	20000160 	.word	0x20000160
 80041e4:	200000c8 	.word	0x200000c8
 80041e8:	200001b4 	.word	0x200001b4

080041ec <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80041f6:	4b32      	ldr	r3, [pc, #200]	; (80042c0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe f9da 	bl	80025bc <uxListRemove>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	2201      	movs	r2, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43da      	mvns	r2, r3
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4013      	ands	r3, r2
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004224:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d110      	bne.n	8004250 <prvAddCurrentTaskToDelayedList+0x64>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	211b      	movs	r1, #27
 800423a:	4618      	mov	r0, r3
 800423c:	f002 ff0c 	bl	8007058 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4820      	ldr	r0, [pc, #128]	; (80042cc <prvAddCurrentTaskToDelayedList+0xe0>)
 800424a:	f7fe f95a 	bl	8002502 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800424e:	e032      	b.n	80042b6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d20f      	bcs.n	8004288 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2104      	movs	r1, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f002 fef2 	bl	8007058 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7fe f962 	bl	800254a <vListInsert>
}
 8004286:	e016      	b.n	80042b6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2104      	movs	r1, #4
 800428e:	4618      	mov	r0, r3
 8004290:	f002 fee2 	bl	8007058 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe f952 	bl	800254a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d202      	bcs.n	80042b6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80042b0:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6013      	str	r3, [r2, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200001a4 	.word	0x200001a4
 80042c4:	200000c8 	.word	0x200000c8
 80042c8:	200001a8 	.word	0x200001a8
 80042cc:	2000018c 	.word	0x2000018c
 80042d0:	2000015c 	.word	0x2000015c
 80042d4:	20000158 	.word	0x20000158
 80042d8:	200001c0 	.word	0x200001c0

080042dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80042e6:	f000 fad5 	bl	8004894 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <xTimerCreateTimerTask+0x54>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <xTimerCreateTimerTask+0x58>)
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	2302      	movs	r3, #2
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004300:	490d      	ldr	r1, [pc, #52]	; (8004338 <xTimerCreateTimerTask+0x5c>)
 8004302:	480e      	ldr	r0, [pc, #56]	; (800433c <xTimerCreateTimerTask+0x60>)
 8004304:	f7fe fede 	bl	80030c4 <xTaskCreate>
 8004308:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	603b      	str	r3, [r7, #0]
    }
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004326:	687b      	ldr	r3, [r7, #4]
    }
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200001fc 	.word	0x200001fc
 8004334:	20000200 	.word	0x20000200
 8004338:	080078e8 	.word	0x080078e8
 800433c:	08004475 	.word	0x08004475

08004340 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	623b      	str	r3, [r7, #32]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <xTimerGenericCommand+0x98>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d02a      	beq.n	80043cc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b05      	cmp	r3, #5
 8004386:	dc18      	bgt.n	80043ba <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004388:	f7ff fcf4 	bl	8003d74 <xTaskGetSchedulerState>
 800438c:	4603      	mov	r3, r0
 800438e:	2b02      	cmp	r3, #2
 8004390:	d109      	bne.n	80043a6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <xTimerGenericCommand+0x98>)
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f107 0114 	add.w	r1, r7, #20
 800439a:	2300      	movs	r3, #0
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	f7fe fa27 	bl	80027f0 <xQueueGenericSend>
 80043a2:	6278      	str	r0, [r7, #36]	; 0x24
 80043a4:	e012      	b.n	80043cc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <xTimerGenericCommand+0x98>)
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	f107 0114 	add.w	r1, r7, #20
 80043ae:	2300      	movs	r3, #0
 80043b0:	2200      	movs	r2, #0
 80043b2:	f7fe fa1d 	bl	80027f0 <xQueueGenericSend>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24
 80043b8:	e008      	b.n	80043cc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <xTimerGenericCommand+0x98>)
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	f107 0114 	add.w	r1, r7, #20
 80043c2:	2300      	movs	r3, #0
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	f7fe fb39 	bl	8002a3c <xQueueGenericSendFromISR>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80043ce:	4618      	mov	r0, r3
 80043d0:	3728      	adds	r7, #40	; 0x28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	200001fc 	.word	0x200001fc

080043dc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <prvProcessExpiredTimer+0x94>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe f8e1 	bl	80025bc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d022      	beq.n	800444e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	18d1      	adds	r1, r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	6978      	ldr	r0, [r7, #20]
 8004416:	f000 f8d1 	bl	80045bc <prvInsertTimerInActiveList>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01f      	beq.n	8004460 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	2100      	movs	r1, #0
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff88 	bl	8004340 <xTimerGenericCommand>
 8004430:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d113      	bne.n	8004460 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
    }
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	b2da      	uxtb	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	4798      	blx	r3
    }
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	200001f4 	.word	0x200001f4

08004474 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f857 	bl	8004534 <prvGetNextExpireTime>
 8004486:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4619      	mov	r1, r3
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f803 	bl	8004498 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004492:	f000 f8d5 	bl	8004640 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004496:	e7f1      	b.n	800447c <prvTimerTask+0x8>

08004498 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044a2:	f7ff f87f 	bl	80035a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f866 	bl	800457c <prvSampleTimeNow>
 80044b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d130      	bne.n	800451a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <prvProcessTimerOrBlockTask+0x3c>
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d806      	bhi.n	80044d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80044c6:	f7ff f87b 	bl	80035c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff85 	bl	80043dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80044d2:	e024      	b.n	800451e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044da:	4b13      	ldr	r3, [pc, #76]	; (8004528 <prvProcessTimerOrBlockTask+0x90>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <prvProcessTimerOrBlockTask+0x50>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <prvProcessTimerOrBlockTask+0x52>
 80044e8:	2300      	movs	r3, #0
 80044ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <prvProcessTimerOrBlockTask+0x94>)
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	f7fe fdaf 	bl	800305c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80044fe:	f7ff f85f 	bl	80035c0 <xTaskResumeAll>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <prvProcessTimerOrBlockTask+0x98>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
    }
 8004518:	e001      	b.n	800451e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800451a:	f7ff f851 	bl	80035c0 <xTaskResumeAll>
    }
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200001f8 	.word	0x200001f8
 800452c:	200001fc 	.word	0x200001fc
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <prvGetNextExpireTime+0x44>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <prvGetNextExpireTime+0x16>
 8004546:	2201      	movs	r2, #1
 8004548:	e000      	b.n	800454c <prvGetNextExpireTime+0x18>
 800454a:	2200      	movs	r2, #0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvGetNextExpireTime+0x44>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e001      	b.n	8004568 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004568:	68fb      	ldr	r3, [r7, #12]
    }
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	200001f4 	.word	0x200001f4

0800457c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004584:	f7ff f8bc 	bl	8003700 <xTaskGetTickCount>
 8004588:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <prvSampleTimeNow+0x3c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	429a      	cmp	r2, r3
 8004592:	d205      	bcs.n	80045a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004594:	f000 f91a 	bl	80047cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e002      	b.n	80045a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045a6:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <prvSampleTimeNow+0x3c>)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045ac:	68fb      	ldr	r3, [r7, #12]
    }
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000204 	.word	0x20000204

080045bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d812      	bhi.n	8004608 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e01b      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <prvInsertTimerInActiveList+0x7c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fd ffa2 	bl	800254a <vListInsert>
 8004606:	e012      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d206      	bcs.n	800461e <prvInsertTimerInActiveList+0x62>
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e007      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <prvInsertTimerInActiveList+0x80>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7fd ff8e 	bl	800254a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800462e:	697b      	ldr	r3, [r7, #20]
    }
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200001f8 	.word	0x200001f8
 800463c:	200001f4 	.word	0x200001f4

08004640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	; 0x30
 8004644:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004646:	e0ae      	b.n	80047a6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f2c0 80aa 	blt.w	80047a4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd ffab 	bl	80025bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff87 	bl	800457c <prvSampleTimeNow>
 800466e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b09      	cmp	r3, #9
 8004674:	f200 8097 	bhi.w	80047a6 <prvProcessReceivedCommands+0x166>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <prvProcessReceivedCommands+0x40>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046a9 	.word	0x080046a9
 800468c:	0800471d 	.word	0x0800471d
 8004690:	08004731 	.word	0x08004731
 8004694:	0800477b 	.word	0x0800477b
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046a9 	.word	0x080046a9
 80046a0:	0800471d 	.word	0x0800471d
 80046a4:	08004731 	.word	0x08004731
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	18d1      	adds	r1, r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046c8:	f7ff ff78 	bl	80045bc <prvInsertTimerInActiveList>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d069      	beq.n	80047a6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046d8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d05e      	beq.n	80047a6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	441a      	add	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	2300      	movs	r3, #0
 80046f6:	2100      	movs	r1, #0
 80046f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046fa:	f7ff fe21 	bl	8004340 <xTimerGenericCommand>
 80046fe:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d14f      	bne.n	80047a6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61bb      	str	r3, [r7, #24]
    }
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	b2da      	uxtb	r2, r3
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800472e:	e03a      	b.n	80047a6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	617b      	str	r3, [r7, #20]
    }
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	18d1      	adds	r1, r2, r3
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004774:	f7ff ff22 	bl	80045bc <prvInsertTimerInActiveList>
                        break;
 8004778:	e015      	b.n	80047a6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d103      	bne.n	8004790 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800478a:	f000 fc6f 	bl	800506c <vPortFree>
 800478e:	e00a      	b.n	80047a6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80047a2:	e000      	b.n	80047a6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80047a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <prvProcessReceivedCommands+0x188>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f107 0108 	add.w	r1, r7, #8
 80047ae:	2200      	movs	r2, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fa01 	bl	8002bb8 <xQueueReceive>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af45 	bne.w	8004648 <prvProcessReceivedCommands+0x8>
        }
    }
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	3728      	adds	r7, #40	; 0x28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200001fc 	.word	0x200001fc

080047cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047d2:	e048      	b.n	8004866 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047d4:	4b2d      	ldr	r3, [pc, #180]	; (800488c <prvSwitchTimerLists+0xc0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047de:	4b2b      	ldr	r3, [pc, #172]	; (800488c <prvSwitchTimerLists+0xc0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fd fee5 	bl	80025bc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02e      	beq.n	8004866 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90e      	bls.n	8004838 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <prvSwitchTimerLists+0xc0>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fd fe8a 	bl	800254a <vListInsert>
 8004836:	e016      	b.n	8004866 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	2100      	movs	r1, #0
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fd7c 	bl	8004340 <xTimerGenericCommand>
 8004848:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	603b      	str	r3, [r7, #0]
    }
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <prvSwitchTimerLists+0xc0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1b1      	bne.n	80047d4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvSwitchTimerLists+0xc0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <prvSwitchTimerLists+0xc4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a04      	ldr	r2, [pc, #16]	; (800488c <prvSwitchTimerLists+0xc0>)
 800487c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <prvSwitchTimerLists+0xc4>)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6013      	str	r3, [r2, #0]
    }
 8004884:	bf00      	nop
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200001f4 	.word	0x200001f4
 8004890:	200001f8 	.word	0x200001f8

08004894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004898:	f000 f9dc 	bl	8004c54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11d      	bne.n	80048e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048a4:	4811      	ldr	r0, [pc, #68]	; (80048ec <prvCheckForValidListAndQueue+0x58>)
 80048a6:	f7fd fdff 	bl	80024a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048aa:	4811      	ldr	r0, [pc, #68]	; (80048f0 <prvCheckForValidListAndQueue+0x5c>)
 80048ac:	f7fd fdfc 	bl	80024a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <prvCheckForValidListAndQueue+0x60>)
 80048b2:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <prvCheckForValidListAndQueue+0x58>)
 80048b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <prvCheckForValidListAndQueue+0x64>)
 80048b8:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <prvCheckForValidListAndQueue+0x5c>)
 80048ba:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80048bc:	2200      	movs	r2, #0
 80048be:	210c      	movs	r1, #12
 80048c0:	200a      	movs	r0, #10
 80048c2:	f7fd ff0d 	bl	80026e0 <xQueueGenericCreate>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048ca:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4908      	ldr	r1, [pc, #32]	; (80048fc <prvCheckForValidListAndQueue+0x68>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fb8c 	bl	8002ff8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80048e0:	f000 f9e8 	bl	8004cb4 <vPortExitCritical>
    }
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	200001fc 	.word	0x200001fc
 80048ec:	200001cc 	.word	0x200001cc
 80048f0:	200001e0 	.word	0x200001e0
 80048f4:	200001f4 	.word	0x200001f4
 80048f8:	200001f8 	.word	0x200001f8
 80048fc:	080078f0 	.word	0x080078f0

08004900 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b04      	subs	r3, #4
 8004910:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b04      	subs	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b04      	subs	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004930:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <pxPortInitialiseStack+0x64>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3b14      	subs	r3, #20
 800493a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b04      	subs	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f06f 0202 	mvn.w	r2, #2
 800494e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b20      	subs	r3, #32
 8004954:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004956:	68fb      	ldr	r3, [r7, #12]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	08004969 	.word	0x08004969

08004968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <prvTaskExitError+0x54>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d00a      	beq.n	8004992 <prvTaskExitError+0x2a>
        __asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	60fb      	str	r3, [r7, #12]
    }
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <prvTaskExitError+0x28>
        __asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60bb      	str	r3, [r7, #8]
    }
 80049a4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049a6:	bf00      	nop
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0fc      	beq.n	80049a8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	20000010 	.word	0x20000010

080049c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <pxCurrentTCBConst2>)
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f380 8809 	msr	PSP, r0
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	4770      	bx	lr
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst2>:
 80049e0:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <prvPortStartFirstTask+0x24>)
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f380 8808 	msr	MSP, r0
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8814 	msr	CONTROL, r0
 80049fa:	b662      	cpsie	i
 80049fc:	b661      	cpsie	f
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	df00      	svc	0
 8004a08:	bf00      	nop
 8004a0a:	0000      	.short	0x0000
 8004a0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop

08004a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a1a:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <xPortStartScheduler+0x120>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a46      	ldr	r2, [pc, #280]	; (8004b38 <xPortStartScheduler+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d10a      	bne.n	8004a3a <xPortStartScheduler+0x26>
        __asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	613b      	str	r3, [r7, #16]
    }
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <xPortStartScheduler+0x120>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3f      	ldr	r2, [pc, #252]	; (8004b3c <xPortStartScheduler+0x128>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10a      	bne.n	8004a5a <xPortStartScheduler+0x46>
        __asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60fb      	str	r3, [r7, #12]
    }
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <xPortStartScheduler+0x12c>)
 8004a5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <xPortStartScheduler+0x130>)
 8004a80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a82:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a84:	2207      	movs	r2, #7
 8004a86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a88:	e009      	b.n	8004a9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a8a:	4b2f      	ldr	r3, [pc, #188]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d0ef      	beq.n	8004a8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aaa:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <xPortStartScheduler+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1c3 0307 	rsb	r3, r3, #7
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d00a      	beq.n	8004acc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	60bb      	str	r3, [r7, #8]
    }
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004acc:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ad4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ae0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <xPortStartScheduler+0x138>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <xPortStartScheduler+0x138>)
 8004af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004af6:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <xPortStartScheduler+0x138>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <xPortStartScheduler+0x138>)
 8004afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b02:	f000 f963 	bl	8004dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <xPortStartScheduler+0x13c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b0c:	f000 f982 	bl	8004e14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <xPortStartScheduler+0x140>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <xPortStartScheduler+0x140>)
 8004b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b1c:	f7ff ff64 	bl	80049e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b20:	f7fe fecc 	bl	80038bc <vTaskSwitchContext>
    prvTaskExitError();
 8004b24:	f7ff ff20 	bl	8004968 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	e000ed00 	.word	0xe000ed00
 8004b38:	410fc271 	.word	0x410fc271
 8004b3c:	410fc270 	.word	0x410fc270
 8004b40:	e000e400 	.word	0xe000e400
 8004b44:	20000208 	.word	0x20000208
 8004b48:	2000020c 	.word	0x2000020c
 8004b4c:	e000ed20 	.word	0xe000ed20
 8004b50:	20000010 	.word	0x20000010
 8004b54:	e000ef34 	.word	0xe000ef34

08004b58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <vInitPrioGroupValue+0xe4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a37      	ldr	r2, [pc, #220]	; (8004c40 <vInitPrioGroupValue+0xe8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d10a      	bne.n	8004b7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	613b      	str	r3, [r7, #16]
    }
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <vInitPrioGroupValue+0xe4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <vInitPrioGroupValue+0xec>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10a      	bne.n	8004b9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60fb      	str	r3, [r7, #12]
    }
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <vInitPrioGroupValue+0xf0>)
 8004ba0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	22ff      	movs	r2, #255	; 0xff
 8004bae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <vInitPrioGroupValue+0xf4>)
 8004bc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bc8:	2207      	movs	r2, #7
 8004bca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bcc:	e009      	b.n	8004be2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d0ef      	beq.n	8004bce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1c3 0307 	rsb	r3, r3, #7
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d00a      	beq.n	8004c10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60bb      	str	r3, [r7, #8]
    }
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c22:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	e000ed00 	.word	0xe000ed00
 8004c40:	410fc271 	.word	0x410fc271
 8004c44:	410fc270 	.word	0x410fc270
 8004c48:	e000e400 	.word	0xe000e400
 8004c4c:	20000208 	.word	0x20000208
 8004c50:	2000020c 	.word	0x2000020c

08004c54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
        __asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
    }
 8004c6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortEnterCritical+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <vPortEnterCritical+0x58>)
 8004c76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vPortEnterCritical+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortEnterCritical+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	603b      	str	r3, [r7, #0]
    }
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vPortEnterCritical+0x4a>
    }
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <vPortExitCritical+0x50>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vPortExitCritical+0x24>
        __asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
    }
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <vPortExitCritical+0x50>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <vPortExitCritical+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f383 8811 	msr	BASEPRI, r3
    }
 8004cf4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000010 	.word	0x20000010
	...

08004d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d10:	f3ef 8009 	mrs	r0, PSP
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <pxCurrentTCBConst>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f01e 0f10 	tst.w	lr, #16
 8004d20:	bf08      	it	eq
 8004d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d34:	f380 8811 	msr	BASEPRI, r0
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f7fe fdbc 	bl	80038bc <vTaskSwitchContext>
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f380 8811 	msr	BASEPRI, r0
 8004d4c:	bc09      	pop	{r0, r3}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	f01e 0f10 	tst.w	lr, #16
 8004d5a:	bf08      	it	eq
 8004d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d60:	f380 8809 	msr	PSP, r0
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst>:
 8004d70:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
    }
 8004d90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d92:	f002 f805 	bl	8006da0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d96:	f7fe fcd5 	bl	8003744 <xTaskIncrementTick>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004da0:	f002 f85c 	bl	8006e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <SysTick_Handler+0x50>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e001      	b.n	8004db2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004dae:	f002 f839 	bl	8006e24 <SEGGER_SYSVIEW_RecordExitISR>
 8004db2:	2300      	movs	r3, #0
 8004db4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f383 8811 	msr	BASEPRI, r3
    }
 8004dbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <vPortSetupTimerInterrupt+0x38>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <vPortSetupTimerInterrupt+0x3c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <vPortSetupTimerInterrupt+0x40>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <vPortSetupTimerInterrupt+0x44>)
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e010 	.word	0xe000e010
 8004e04:	e000e018 	.word	0xe000e018
 8004e08:	20000000 	.word	0x20000000
 8004e0c:	10624dd3 	.word	0x10624dd3
 8004e10:	e000e014 	.word	0xe000e014

08004e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e24 <vPortEnableVFP+0x10>
 8004e18:	6801      	ldr	r1, [r0, #0]
 8004e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e1e:	6001      	str	r1, [r0, #0]
 8004e20:	4770      	bx	lr
 8004e22:	0000      	.short	0x0000
 8004e24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop

08004e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004e32:	f3ef 8305 	mrs	r3, IPSR
 8004e36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b0f      	cmp	r3, #15
 8004e3c:	d914      	bls.n	8004e68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <vPortValidateInterruptPriority+0x70>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <vPortValidateInterruptPriority+0x74>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	7afa      	ldrb	r2, [r7, #11]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d20a      	bcs.n	8004e68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
    }
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e68:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <vPortValidateInterruptPriority+0x78>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <vPortValidateInterruptPriority+0x7c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d90a      	bls.n	8004e8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	603b      	str	r3, [r7, #0]
    }
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <vPortValidateInterruptPriority+0x60>
    }
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	e000e3f0 	.word	0xe000e3f0
 8004ea0:	20000208 	.word	0x20000208
 8004ea4:	e000ed0c 	.word	0xe000ed0c
 8004ea8:	2000020c 	.word	0x2000020c

08004eac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004eb8:	f7fe fb74 	bl	80035a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ebc:	4b65      	ldr	r3, [pc, #404]	; (8005054 <pvPortMalloc+0x1a8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ec4:	f000 f934 	bl	8005130 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ec8:	4b63      	ldr	r3, [pc, #396]	; (8005058 <pvPortMalloc+0x1ac>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f040 80a7 	bne.w	8005024 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02d      	beq.n	8004f38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004edc:	2208      	movs	r2, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d227      	bcs.n	8004f38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ee8:	2208      	movs	r2, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d021      	beq.n	8004f3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f023 0307 	bic.w	r3, r3, #7
 8004f00:	3308      	adds	r3, #8
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d214      	bcs.n	8004f32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f023 0307 	bic.w	r3, r3, #7
 8004f0e:	3308      	adds	r3, #8
 8004f10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <pvPortMalloc+0x92>
        __asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	617b      	str	r3, [r7, #20]
    }
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f36:	e002      	b.n	8004f3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	e000      	b.n	8004f40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d06e      	beq.n	8005024 <pvPortMalloc+0x178>
 8004f46:	4b45      	ldr	r3, [pc, #276]	; (800505c <pvPortMalloc+0x1b0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d869      	bhi.n	8005024 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f50:	4b43      	ldr	r3, [pc, #268]	; (8005060 <pvPortMalloc+0x1b4>)
 8004f52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f54:	4b42      	ldr	r3, [pc, #264]	; (8005060 <pvPortMalloc+0x1b4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f5a:	e004      	b.n	8004f66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d903      	bls.n	8004f78 <pvPortMalloc+0xcc>
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f78:	4b36      	ldr	r3, [pc, #216]	; (8005054 <pvPortMalloc+0x1a8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d050      	beq.n	8005024 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2208      	movs	r2, #8
 8004f88:	4413      	add	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	1ad2      	subs	r2, r2, r3
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d91f      	bls.n	8004fe4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4413      	add	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <pvPortMalloc+0x120>
        __asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	613b      	str	r3, [r7, #16]
    }
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fde:	69b8      	ldr	r0, [r7, #24]
 8004fe0:	f000 f908 	bl	80051f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <pvPortMalloc+0x1b0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <pvPortMalloc+0x1b0>)
 8004ff0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	; (800505c <pvPortMalloc+0x1b0>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <pvPortMalloc+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d203      	bcs.n	8005006 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ffe:	4b17      	ldr	r3, [pc, #92]	; (800505c <pvPortMalloc+0x1b0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <pvPortMalloc+0x1b8>)
 8005004:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <pvPortMalloc+0x1ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	431a      	orrs	r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <pvPortMalloc+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	4a11      	ldr	r2, [pc, #68]	; (8005068 <pvPortMalloc+0x1bc>)
 8005022:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005024:	f7fe facc 	bl	80035c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <pvPortMalloc+0x19c>
        __asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
    }
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <pvPortMalloc+0x19a>
    return pvReturn;
 8005048:	69fb      	ldr	r3, [r7, #28]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3728      	adds	r7, #40	; 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20012e18 	.word	0x20012e18
 8005058:	20012e2c 	.word	0x20012e2c
 800505c:	20012e1c 	.word	0x20012e1c
 8005060:	20012e10 	.word	0x20012e10
 8005064:	20012e20 	.word	0x20012e20
 8005068:	20012e24 	.word	0x20012e24

0800506c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04d      	beq.n	800511a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800507e:	2308      	movs	r3, #8
 8005080:	425b      	negs	r3, r3
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4413      	add	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <vPortFree+0xb8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <vPortFree+0x44>
        __asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60fb      	str	r3, [r7, #12]
    }
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <vPortFree+0x62>
        __asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60bb      	str	r3, [r7, #8]
    }
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4b14      	ldr	r3, [pc, #80]	; (8005124 <vPortFree+0xb8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d11a      	bne.n	800511a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <vPortFree+0xb8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80050f4:	f7fe fa56 	bl	80035a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <vPortFree+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4413      	add	r3, r2
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <vPortFree+0xbc>)
 8005104:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005106:	6938      	ldr	r0, [r7, #16]
 8005108:	f000 f874 	bl	80051f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <vPortFree+0xc0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	4a06      	ldr	r2, [pc, #24]	; (800512c <vPortFree+0xc0>)
 8005114:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005116:	f7fe fa53 	bl	80035c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20012e2c 	.word	0x20012e2c
 8005128:	20012e1c 	.word	0x20012e1c
 800512c:	20012e28 	.word	0x20012e28

08005130 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005136:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800513a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <prvHeapInit+0xac>)
 800513e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3307      	adds	r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <prvHeapInit+0xac>)
 8005160:	4413      	add	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <prvHeapInit+0xb0>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <prvHeapInit+0xb0>)
 8005170:	2200      	movs	r2, #0
 8005172:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800517c:	2208      	movs	r2, #8
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <prvHeapInit+0xb4>)
 8005190:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <prvHeapInit+0xb4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <prvHeapInit+0xb4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	1ad2      	subs	r2, r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <prvHeapInit+0xb4>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <prvHeapInit+0xb8>)
 80051be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4a09      	ldr	r2, [pc, #36]	; (80051ec <prvHeapInit+0xbc>)
 80051c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051c8:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <prvHeapInit+0xc0>)
 80051ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051ce:	601a      	str	r2, [r3, #0]
}
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000210 	.word	0x20000210
 80051e0:	20012e10 	.word	0x20012e10
 80051e4:	20012e18 	.word	0x20012e18
 80051e8:	20012e20 	.word	0x20012e20
 80051ec:	20012e1c 	.word	0x20012e1c
 80051f0:	20012e2c 	.word	0x20012e2c

080051f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051fc:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <prvInsertBlockIntoFreeList+0xac>)
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e002      	b.n	8005208 <prvInsertBlockIntoFreeList+0x14>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d8f7      	bhi.n	8005202 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d108      	bne.n	8005236 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d118      	bne.n	800527c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d00d      	beq.n	8005272 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e008      	b.n	8005284 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e003      	b.n	8005284 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d002      	beq.n	8005292 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20012e10 	.word	0x20012e10
 80052a4:	20012e18 	.word	0x20012e18

080052a8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <_DoInit+0xa0>)
 80052b0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80052b2:	22a8      	movs	r2, #168	; 0xa8
 80052b4:	2100      	movs	r1, #0
 80052b6:	6838      	ldr	r0, [r7, #0]
 80052b8:	f002 fac2 	bl	8007840 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2203      	movs	r2, #3
 80052c0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2203      	movs	r2, #3
 80052c6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4a20      	ldr	r2, [pc, #128]	; (800534c <_DoInit+0xa4>)
 80052cc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	4a1f      	ldr	r2, [pc, #124]	; (8005350 <_DoInit+0xa8>)
 80052d2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052da:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2200      	movs	r2, #0
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	4a16      	ldr	r2, [pc, #88]	; (800534c <_DoInit+0xa4>)
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4a17      	ldr	r2, [pc, #92]	; (8005354 <_DoInit+0xac>)
 80052f8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2210      	movs	r2, #16
 80052fe:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2200      	movs	r2, #0
 800530a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005312:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e00c      	b.n	8005336 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f1c3 030f 	rsb	r3, r3, #15
 8005322:	4a0d      	ldr	r2, [pc, #52]	; (8005358 <_DoInit+0xb0>)
 8005324:	5cd1      	ldrb	r1, [r2, r3]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	460a      	mov	r2, r1
 800532e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3301      	adds	r3, #1
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b0f      	cmp	r3, #15
 800533a:	d9ef      	bls.n	800531c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800533c:	f3bf 8f5f 	dmb	sy
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20012e30 	.word	0x20012e30
 800534c:	080078f8 	.word	0x080078f8
 8005350:	20012ed8 	.word	0x20012ed8
 8005354:	200132d8 	.word	0x200132d8
 8005358:	080079d0 	.word	0x080079d0

0800535c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	; 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005368:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <SEGGER_RTT_ReadNoLock+0x108>)
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <SEGGER_RTT_ReadNoLock+0x1e>
 8005376:	f7ff ff97 	bl	80052a8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4613      	mov	r3, r2
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	4413      	add	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	3360      	adds	r3, #96	; 0x60
 8005386:	4a37      	ldr	r2, [pc, #220]	; (8005464 <SEGGER_RTT_ReadNoLock+0x108>)
 8005388:	4413      	add	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d92b      	bls.n	8005400 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bf28      	it	cs
 80053ba:	4613      	movcs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	4413      	add	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ce:	f002 fa29 	bl	8007824 <memcpy>
    NumBytesRead += NumBytesRem;
 80053d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d101      	bne.n	8005400 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4293      	cmp	r3, r2
 800540e:	bf28      	it	cs
 8005410:	4613      	movcs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d019      	beq.n	800544e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	4413      	add	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800542a:	f002 f9fb 	bl	8007824 <memcpy>
    NumBytesRead += NumBytesRem;
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4413      	add	r3, r2
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005458:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	; 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20012e30 	.word	0x20012e30

08005468 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005476:	4b3d      	ldr	r3, [pc, #244]	; (800556c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005484:	f7ff ff10 	bl	80052a8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005488:	f3ef 8311 	mrs	r3, BASEPRI
 800548c:	f04f 0120 	mov.w	r1, #32
 8005490:	f381 8811 	msr	BASEPRI, r1
 8005494:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005496:	4b35      	ldr	r3, [pc, #212]	; (800556c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005498:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800549e:	6939      	ldr	r1, [r7, #16]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	440b      	add	r3, r1
 80054ae:	3304      	adds	r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3301      	adds	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	dbeb      	blt.n	800549e <SEGGER_RTT_AllocUpBuffer+0x36>
 80054c6:	e000      	b.n	80054ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80054c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	da3f      	bge.n	8005554 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80054d4:	6939      	ldr	r1, [r7, #16]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80054e8:	6939      	ldr	r1, [r7, #16]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	4613      	mov	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4413      	add	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	440b      	add	r3, r1
 80054f8:	3304      	adds	r3, #4
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	440b      	add	r3, r1
 800550c:	3320      	adds	r3, #32
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005512:	6939      	ldr	r1, [r7, #16]
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	4613      	mov	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4413      	add	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	440b      	add	r3, r1
 8005520:	3328      	adds	r3, #40	; 0x28
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	440b      	add	r3, r1
 8005534:	3324      	adds	r3, #36	; 0x24
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800553a:	6939      	ldr	r1, [r7, #16]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	440b      	add	r3, r1
 8005548:	332c      	adds	r3, #44	; 0x2c
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800554e:	f3bf 8f5f 	dmb	sy
 8005552:	e002      	b.n	800555a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
 8005558:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005560:	69fb      	ldr	r3, [r7, #28]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20012e30 	.word	0x20012e30

08005570 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800558c:	f7ff fe8c 	bl	80052a8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005592:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d82c      	bhi.n	80055f4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800559a:	f3ef 8311 	mrs	r3, BASEPRI
 800559e:	f04f 0120 	mov.w	r1, #32
 80055a2:	f381 8811 	msr	BASEPRI, r1
 80055a6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	3360      	adds	r3, #96	; 0x60
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00e      	beq.n	80055de <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2200      	movs	r2, #0
 80055dc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	e002      	b.n	80055fa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	; 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20012e30 	.word	0x20012e30

08005608 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00f      	beq.n	800563e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800561e:	e002      	b.n	8005626 <_EncodeStr+0x1e>
      Len++;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	3301      	adds	r3, #1
 8005624:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f6      	bne.n	8005620 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d901      	bls.n	800563e <_EncodeStr+0x36>
      Len = Limit;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2bfe      	cmp	r3, #254	; 0xfe
 8005642:	d806      	bhi.n	8005652 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	60fa      	str	r2, [r7, #12]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e011      	b.n	8005676 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	60fa      	str	r2, [r7, #12]
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	60fa      	str	r2, [r7, #12]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	0a19      	lsrs	r1, r3, #8
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	60fa      	str	r2, [r7, #12]
 8005672:	b2ca      	uxtb	r2, r1
 8005674:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800567a:	e00a      	b.n	8005692 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	1c53      	adds	r3, r2, #1
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	60f9      	str	r1, [r7, #12]
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	701a      	strb	r2, [r3, #0]
    n++;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3301      	adds	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	429a      	cmp	r2, r3
 8005698:	d3f0      	bcc.n	800567c <_EncodeStr+0x74>
  }
  return pPayload;
 800569a:	68fb      	ldr	r3, [r7, #12]
}
 800569c:	4618      	mov	r0, r3
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3307      	adds	r3, #7
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056c6:	4b35      	ldr	r3, [pc, #212]	; (800579c <_HandleIncomingPacket+0xdc>)
 80056c8:	7e1b      	ldrb	r3, [r3, #24]
 80056ca:	4618      	mov	r0, r3
 80056cc:	1cfb      	adds	r3, r7, #3
 80056ce:	2201      	movs	r2, #1
 80056d0:	4619      	mov	r1, r3
 80056d2:	f7ff fe43 	bl	800535c <SEGGER_RTT_ReadNoLock>
 80056d6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d052      	beq.n	8005784 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d031      	beq.n	8005748 <_HandleIncomingPacket+0x88>
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	dc40      	bgt.n	800576a <_HandleIncomingPacket+0xaa>
 80056e8:	2b07      	cmp	r3, #7
 80056ea:	dc15      	bgt.n	8005718 <_HandleIncomingPacket+0x58>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dd3c      	ble.n	800576a <_HandleIncomingPacket+0xaa>
 80056f0:	3b01      	subs	r3, #1
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d839      	bhi.n	800576a <_HandleIncomingPacket+0xaa>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <_HandleIncomingPacket+0x3c>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	0800571f 	.word	0x0800571f
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005731 	.word	0x08005731
 800570c:	08005737 	.word	0x08005737
 8005710:	0800573d 	.word	0x0800573d
 8005714:	08005743 	.word	0x08005743
 8005718:	2b7f      	cmp	r3, #127	; 0x7f
 800571a:	d035      	beq.n	8005788 <_HandleIncomingPacket+0xc8>
 800571c:	e025      	b.n	800576a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800571e:	f001 f877 	bl	8006810 <SEGGER_SYSVIEW_Start>
      break;
 8005722:	e036      	b.n	8005792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005724:	f001 f92e 	bl	8006984 <SEGGER_SYSVIEW_Stop>
      break;
 8005728:	e033      	b.n	8005792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800572a:	f001 fb07 	bl	8006d3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800572e:	e030      	b.n	8005792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005730:	f001 facc 	bl	8006ccc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005734:	e02d      	b.n	8005792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005736:	f001 f94b 	bl	80069d0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800573a:	e02a      	b.n	8005792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800573c:	f001 fd9a 	bl	8007274 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005740:	e027      	b.n	8005792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005742:	f001 fd79 	bl	8007238 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005746:	e024      	b.n	8005792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <_HandleIncomingPacket+0xdc>)
 800574a:	7e1b      	ldrb	r3, [r3, #24]
 800574c:	4618      	mov	r0, r3
 800574e:	1cfb      	adds	r3, r7, #3
 8005750:	2201      	movs	r2, #1
 8005752:	4619      	mov	r1, r3
 8005754:	f7ff fe02 	bl	800535c <SEGGER_RTT_ReadNoLock>
 8005758:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	4618      	mov	r0, r3
 8005764:	f001 fce8 	bl	8007138 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005768:	e010      	b.n	800578c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	b25b      	sxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	da0e      	bge.n	8005790 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <_HandleIncomingPacket+0xdc>)
 8005774:	7e1b      	ldrb	r3, [r3, #24]
 8005776:	4618      	mov	r0, r3
 8005778:	1cfb      	adds	r3, r7, #3
 800577a:	2201      	movs	r2, #1
 800577c:	4619      	mov	r1, r3
 800577e:	f7ff fded 	bl	800535c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005782:	e005      	b.n	8005790 <_HandleIncomingPacket+0xd0>
    }
  }
 8005784:	bf00      	nop
 8005786:	e004      	b.n	8005792 <_HandleIncomingPacket+0xd2>
      break;
 8005788:	bf00      	nop
 800578a:	e002      	b.n	8005792 <_HandleIncomingPacket+0xd2>
      break;
 800578c:	bf00      	nop
 800578e:	e000      	b.n	8005792 <_HandleIncomingPacket+0xd2>
      break;
 8005790:	bf00      	nop
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	200142f0 	.word	0x200142f0

080057a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08c      	sub	sp, #48	; 0x30
 80057a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80057a6:	2301      	movs	r3, #1
 80057a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b4:	4b31      	ldr	r3, [pc, #196]	; (800587c <_TrySendOverflowPacket+0xdc>)
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ba:	e00b      	b.n	80057d4 <_TrySendOverflowPacket+0x34>
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	09db      	lsrs	r3, r3, #7
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	2b7f      	cmp	r3, #127	; 0x7f
 80057d8:	d8f0      	bhi.n	80057bc <_TrySendOverflowPacket+0x1c>
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057ea:	4b25      	ldr	r3, [pc, #148]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057f0:	4b22      	ldr	r3, [pc, #136]	; (800587c <_TrySendOverflowPacket+0xdc>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	e00b      	b.n	800581c <_TrySendOverflowPacket+0x7c>
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	6279      	str	r1, [r7, #36]	; 0x24
 800580e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	09db      	lsrs	r3, r3, #7
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b7f      	cmp	r3, #127	; 0x7f
 8005820:	d8f0      	bhi.n	8005804 <_TrySendOverflowPacket+0x64>
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	627a      	str	r2, [r7, #36]	; 0x24
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <_TrySendOverflowPacket+0xdc>)
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	4618      	mov	r0, r3
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	461a      	mov	r2, r3
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	4619      	mov	r1, r3
 8005844:	f7fa fcd4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005848:	4603      	mov	r3, r0
 800584a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <_TrySendOverflowPacket+0xdc>)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005858:	4b08      	ldr	r3, [pc, #32]	; (800587c <_TrySendOverflowPacket+0xdc>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	3b01      	subs	r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <_TrySendOverflowPacket+0xdc>)
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e004      	b.n	8005870 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005866:	4b05      	ldr	r3, [pc, #20]	; (800587c <_TrySendOverflowPacket+0xdc>)
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	3301      	adds	r3, #1
 800586c:	4a03      	ldr	r2, [pc, #12]	; (800587c <_TrySendOverflowPacket+0xdc>)
 800586e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005870:	693b      	ldr	r3, [r7, #16]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3730      	adds	r7, #48	; 0x30
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200142f0 	.word	0x200142f0
 8005880:	e0001004 	.word	0xe0001004

08005884 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005890:	4b98      	ldr	r3, [pc, #608]	; (8005af4 <_SendPacket+0x270>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d010      	beq.n	80058ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005898:	4b96      	ldr	r3, [pc, #600]	; (8005af4 <_SendPacket+0x270>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 812d 	beq.w	8005afc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80058a2:	4b94      	ldr	r3, [pc, #592]	; (8005af4 <_SendPacket+0x270>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d109      	bne.n	80058be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80058aa:	f7ff ff79 	bl	80057a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80058ae:	4b91      	ldr	r3, [pc, #580]	; (8005af4 <_SendPacket+0x270>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f040 8124 	bne.w	8005b00 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80058b8:	e001      	b.n	80058be <_SendPacket+0x3a>
    goto Send;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <_SendPacket+0x3c>
Send:
 80058be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b1f      	cmp	r3, #31
 80058c4:	d809      	bhi.n	80058da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80058c6:	4b8b      	ldr	r3, [pc, #556]	; (8005af4 <_SendPacket+0x270>)
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 8115 	bne.w	8005b04 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b17      	cmp	r3, #23
 80058de:	d807      	bhi.n	80058f0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e0c4      	b.n	8005a7a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b7f      	cmp	r3, #127	; 0x7f
 80058fc:	d912      	bls.n	8005924 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	09da      	lsrs	r2, r3, #7
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b01      	subs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	3a01      	subs	r2, #1
 8005916:	60fa      	str	r2, [r7, #12]
 8005918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e006      	b.n	8005932 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3b01      	subs	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b7e      	cmp	r3, #126	; 0x7e
 8005936:	d807      	bhi.n	8005948 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e098      	b.n	8005a7a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594e:	d212      	bcs.n	8005976 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	09da      	lsrs	r2, r3, #7
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3b01      	subs	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	3a01      	subs	r2, #1
 8005968:	60fa      	str	r2, [r7, #12]
 800596a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e081      	b.n	8005a7a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800597c:	d21d      	bcs.n	80059ba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	0b9a      	lsrs	r2, r3, #14
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b01      	subs	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	09db      	lsrs	r3, r3, #7
 8005992:	b2db      	uxtb	r3, r3
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	3a01      	subs	r2, #1
 8005998:	60fa      	str	r2, [r7, #12]
 800599a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	3a01      	subs	r2, #1
 80059ac:	60fa      	str	r2, [r7, #12]
 80059ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e05f      	b.n	8005a7a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059c0:	d228      	bcs.n	8005a14 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0d5a      	lsrs	r2, r3, #21
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0b9b      	lsrs	r3, r3, #14
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	3a01      	subs	r2, #1
 80059dc:	60fa      	str	r2, [r7, #12]
 80059de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	09db      	lsrs	r3, r3, #7
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	3a01      	subs	r2, #1
 80059f2:	60fa      	str	r2, [r7, #12]
 80059f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	3a01      	subs	r2, #1
 8005a06:	60fa      	str	r2, [r7, #12]
 8005a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e032      	b.n	8005a7a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	0f1a      	lsrs	r2, r3, #28
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0d5b      	lsrs	r3, r3, #21
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	3a01      	subs	r2, #1
 8005a2e:	60fa      	str	r2, [r7, #12]
 8005a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	0b9b      	lsrs	r3, r3, #14
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	3a01      	subs	r2, #1
 8005a44:	60fa      	str	r2, [r7, #12]
 8005a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	3a01      	subs	r2, #1
 8005a5a:	60fa      	str	r2, [r7, #12]
 8005a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	60fa      	str	r2, [r7, #12]
 8005a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a7a:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <_SendPacket+0x274>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a80:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <_SendPacket+0x270>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	e00b      	b.n	8005aac <_SendPacket+0x228>
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	09db      	lsrs	r3, r3, #7
 8005aaa:	623b      	str	r3, [r7, #32]
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab0:	d8f0      	bhi.n	8005a94 <_SendPacket+0x210>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005ac2:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <_SendPacket+0x270>)
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68f9      	ldr	r1, [r7, #12]
 8005ad2:	f7fa fb8d 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ad6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ade:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <_SendPacket+0x270>)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	60d3      	str	r3, [r2, #12]
 8005ae4:	e00f      	b.n	8005b06 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005ae6:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <_SendPacket+0x270>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4b01      	ldr	r3, [pc, #4]	; (8005af4 <_SendPacket+0x270>)
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	e008      	b.n	8005b06 <_SendPacket+0x282>
 8005af4:	200142f0 	.word	0x200142f0
 8005af8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <_SendPacket+0x282>
      goto SendDone;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <_SendPacket+0x282>
      goto SendDone;
 8005b04:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <_SendPacket+0x2d4>)
 8005b08:	7e1b      	ldrb	r3, [r3, #24]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <_SendPacket+0x2d8>)
 8005b0e:	460b      	mov	r3, r1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	440b      	add	r3, r1
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	336c      	adds	r3, #108	; 0x6c
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <_SendPacket+0x2d4>)
 8005b1e:	7e1b      	ldrb	r3, [r3, #24]
 8005b20:	4618      	mov	r0, r3
 8005b22:	490e      	ldr	r1, [pc, #56]	; (8005b5c <_SendPacket+0x2d8>)
 8005b24:	4603      	mov	r3, r0
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	4403      	add	r3, r0
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3370      	adds	r3, #112	; 0x70
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d00b      	beq.n	8005b4e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b36:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <_SendPacket+0x2d4>)
 8005b38:	789b      	ldrb	r3, [r3, #2]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b3e:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <_SendPacket+0x2d4>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b44:	f7ff fdbc 	bl	80056c0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <_SendPacket+0x2d4>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b4e:	bf00      	nop
 8005b50:	3728      	adds	r7, #40	; 0x28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	200142f0 	.word	0x200142f0
 8005b5c:	20012e30 	.word	0x20012e30

08005b60 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3301      	adds	r3, #1
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d80a      	bhi.n	8005b90 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6051      	str	r1, [r2, #4]
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d15a      	bne.n	8005c4e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	e00b      	b.n	8005bd2 <_StoreChar+0x72>
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	09db      	lsrs	r3, r3, #7
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd6:	d8f0      	bhi.n	8005bba <_StoreChar+0x5a>
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e00b      	b.n	8005c0a <_StoreChar+0xaa>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	1c59      	adds	r1, r3, #1
 8005bfa:	61f9      	str	r1, [r7, #28]
 8005bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0e:	d8f0      	bhi.n	8005bf2 <_StoreChar+0x92>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	221a      	movs	r2, #26
 8005c26:	6939      	ldr	r1, [r7, #16]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff fe2b 	bl	8005884 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fd38 	bl	80056a8 <_PreparePacket>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3728      	adds	r7, #40	; 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c72:	e007      	b.n	8005c84 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	623b      	str	r3, [r7, #32]
    Width++;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d2f3      	bcs.n	8005c74 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d901      	bls.n	8005c98 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11f      	bne.n	8005ce2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01c      	beq.n	8005ce2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <_PrintUnsigned+0x66>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <_PrintUnsigned+0x66>
        c = '0';
 8005cb8:	2330      	movs	r3, #48	; 0x30
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e001      	b.n	8005cc2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cc2:	e007      	b.n	8005cd4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005cca:	7efb      	ldrb	r3, [r7, #27]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff ff46 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <_PrintUnsigned+0x8a>
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d3f0      	bcc.n	8005cc4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d903      	bls.n	8005cf0 <_PrintUnsigned+0x98>
      NumDigits--;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	e009      	b.n	8005d04 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d200      	bcs.n	8005d04 <_PrintUnsigned+0xac>
        break;
 8005d02:	e005      	b.n	8005d10 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d0e:	e7e8      	b.n	8005ce2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <_PrintUnsigned+0x128>)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	4619      	mov	r1, r3
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff ff14 	bl	8005b60 <_StoreChar>
    Digit /= Base;
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e3      	bne.n	8005d10 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d011      	beq.n	8005d76 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00e      	beq.n	8005d76 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d58:	e006      	b.n	8005d68 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005d60:	2120      	movs	r1, #32
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff fefc 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <_PrintUnsigned+0x11e>
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d3f1      	bcc.n	8005d5a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005d76:	bf00      	nop
 8005d78:	3728      	adds	r7, #40	; 0x28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	080079f0 	.word	0x080079f0

08005d84 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bfb8      	it	lt
 8005d98:	425b      	neglt	r3, r3
 8005d9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005da0:	e007      	b.n	8005db2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005daa:	613b      	str	r3, [r7, #16]
    Width++;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3301      	adds	r3, #1
 8005db0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	daf3      	bge.n	8005da2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d901      	bls.n	8005dc6 <_PrintInt+0x42>
    Width = NumDigits;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <_PrintInt+0x5e>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db04      	blt.n	8005ddc <_PrintInt+0x58>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <_PrintInt+0x5e>
    FieldWidth--;
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <_PrintInt+0x6e>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <_PrintInt+0x9c>
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d111      	bne.n	8005e20 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e02:	e006      	b.n	8005e12 <_PrintInt+0x8e>
        FieldWidth--;
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fea7 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <_PrintInt+0x9c>
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3f1      	bcc.n	8005e04 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da07      	bge.n	8005e36 <_PrintInt+0xb2>
    v = -v;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	425b      	negs	r3, r3
 8005e2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005e2c:	212d      	movs	r1, #45	; 0x2d
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff fe96 	bl	8005b60 <_StoreChar>
 8005e34:	e008      	b.n	8005e48 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005e40:	212b      	movs	r1, #43	; 0x2b
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff fe8c 	bl	8005b60 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d019      	beq.n	8005e86 <_PrintInt+0x102>
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d114      	bne.n	8005e86 <_PrintInt+0x102>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d111      	bne.n	8005e86 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00e      	beq.n	8005e86 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e68:	e006      	b.n	8005e78 <_PrintInt+0xf4>
        FieldWidth--;
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005e70:	2130      	movs	r1, #48	; 0x30
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fe74 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <_PrintInt+0x102>
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d3f1      	bcc.n	8005e6a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff fedf 	bl	8005c58 <_PrintUnsigned>
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b098      	sub	sp, #96	; 0x60
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb4:	f04f 0120 	mov.w	r1, #32
 8005eb8:	f381 8811 	msr	BASEPRI, r1
 8005ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ebe:	48b7      	ldr	r0, [pc, #732]	; (800619c <_VPrintTarget+0x2f8>)
 8005ec0:	f7ff fbf2 	bl	80056a8 <_PreparePacket>
 8005ec4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ec6:	4bb5      	ldr	r3, [pc, #724]	; (800619c <_VPrintTarget+0x2f8>)
 8005ec8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005eea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8183 	beq.w	80061fa <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ef8:	2b25      	cmp	r3, #37	; 0x25
 8005efa:	f040 8170 	bne.w	80061de <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005efe:	2300      	movs	r3, #0
 8005f00:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005f02:	2301      	movs	r3, #1
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f12:	3b23      	subs	r3, #35	; 0x23
 8005f14:	2b0d      	cmp	r3, #13
 8005f16:	d83f      	bhi.n	8005f98 <_VPrintTarget+0xf4>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <_VPrintTarget+0x7c>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005f99 	.word	0x08005f99
 8005f28:	08005f99 	.word	0x08005f99
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	08005f99 	.word	0x08005f99
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005f79 	.word	0x08005f79
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005f59 	.word	0x08005f59
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f69 	.word	0x08005f69
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e01a      	b.n	8005f9e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e012      	b.n	8005f9e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	f043 0304 	orr.w	r3, r3, #4
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e00a      	b.n	8005f9e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	f043 0308 	orr.w	r3, r3, #8
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e002      	b.n	8005f9e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9c:	bf00      	nop
        }
      } while (v);
 8005f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1b0      	bne.n	8005f06 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb4:	2b2f      	cmp	r3, #47	; 0x2f
 8005fb6:	d912      	bls.n	8005fde <_VPrintTarget+0x13a>
 8005fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fbc:	2b39      	cmp	r3, #57	; 0x39
 8005fbe:	d80e      	bhi.n	8005fde <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3b30      	subs	r3, #48	; 0x30
 8005fda:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005fdc:	e7e4      	b.n	8005fa8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005fea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fee:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff0:	d11d      	bne.n	800602e <_VPrintTarget+0x18a>
        sFormat++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006004:	2b2f      	cmp	r3, #47	; 0x2f
 8006006:	d912      	bls.n	800602e <_VPrintTarget+0x18a>
 8006008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800600c:	2b39      	cmp	r3, #57	; 0x39
 800600e:	d80e      	bhi.n	800602e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	461a      	mov	r2, r3
 8006022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006026:	4413      	add	r3, r2
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800602c:	e7e4      	b.n	8005ff8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006036:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800603a:	2b6c      	cmp	r3, #108	; 0x6c
 800603c:	d003      	beq.n	8006046 <_VPrintTarget+0x1a2>
 800603e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006042:	2b68      	cmp	r3, #104	; 0x68
 8006044:	d107      	bne.n	8006056 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006054:	e7ef      	b.n	8006036 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800605a:	2b25      	cmp	r3, #37	; 0x25
 800605c:	f000 80b3 	beq.w	80061c6 <_VPrintTarget+0x322>
 8006060:	2b25      	cmp	r3, #37	; 0x25
 8006062:	f2c0 80b7 	blt.w	80061d4 <_VPrintTarget+0x330>
 8006066:	2b78      	cmp	r3, #120	; 0x78
 8006068:	f300 80b4 	bgt.w	80061d4 <_VPrintTarget+0x330>
 800606c:	2b58      	cmp	r3, #88	; 0x58
 800606e:	f2c0 80b1 	blt.w	80061d4 <_VPrintTarget+0x330>
 8006072:	3b58      	subs	r3, #88	; 0x58
 8006074:	2b20      	cmp	r3, #32
 8006076:	f200 80ad 	bhi.w	80061d4 <_VPrintTarget+0x330>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <_VPrintTarget+0x1dc>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006177 	.word	0x08006177
 8006084:	080061d5 	.word	0x080061d5
 8006088:	080061d5 	.word	0x080061d5
 800608c:	080061d5 	.word	0x080061d5
 8006090:	080061d5 	.word	0x080061d5
 8006094:	080061d5 	.word	0x080061d5
 8006098:	080061d5 	.word	0x080061d5
 800609c:	080061d5 	.word	0x080061d5
 80060a0:	080061d5 	.word	0x080061d5
 80060a4:	080061d5 	.word	0x080061d5
 80060a8:	080061d5 	.word	0x080061d5
 80060ac:	08006105 	.word	0x08006105
 80060b0:	0800612b 	.word	0x0800612b
 80060b4:	080061d5 	.word	0x080061d5
 80060b8:	080061d5 	.word	0x080061d5
 80060bc:	080061d5 	.word	0x080061d5
 80060c0:	080061d5 	.word	0x080061d5
 80060c4:	080061d5 	.word	0x080061d5
 80060c8:	080061d5 	.word	0x080061d5
 80060cc:	080061d5 	.word	0x080061d5
 80060d0:	080061d5 	.word	0x080061d5
 80060d4:	080061d5 	.word	0x080061d5
 80060d8:	080061d5 	.word	0x080061d5
 80060dc:	080061d5 	.word	0x080061d5
 80060e0:	080061a1 	.word	0x080061a1
 80060e4:	080061d5 	.word	0x080061d5
 80060e8:	080061d5 	.word	0x080061d5
 80060ec:	080061d5 	.word	0x080061d5
 80060f0:	080061d5 	.word	0x080061d5
 80060f4:	08006151 	.word	0x08006151
 80060f8:	080061d5 	.word	0x080061d5
 80060fc:	080061d5 	.word	0x080061d5
 8006100:	08006177 	.word	0x08006177
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	1d19      	adds	r1, r3, #4
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6011      	str	r1, [r2, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006118:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800611c:	f107 0314 	add.w	r3, r7, #20
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff fd1c 	bl	8005b60 <_StoreChar>
        break;
 8006128:	e055      	b.n	80061d6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	1d19      	adds	r1, r3, #4
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6011      	str	r1, [r2, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006138:	f107 0014 	add.w	r0, r7, #20
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006146:	220a      	movs	r2, #10
 8006148:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800614a:	f7ff fe1b 	bl	8005d84 <_PrintInt>
        break;
 800614e:	e042      	b.n	80061d6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6011      	str	r1, [r2, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800615e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006160:	f107 0014 	add.w	r0, r7, #20
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616e:	220a      	movs	r2, #10
 8006170:	f7ff fd72 	bl	8005c58 <_PrintUnsigned>
        break;
 8006174:	e02f      	b.n	80061d6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	1d19      	adds	r1, r3, #4
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6011      	str	r1, [r2, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006186:	f107 0014 	add.w	r0, r7, #20
 800618a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	2210      	movs	r2, #16
 8006196:	f7ff fd5f 	bl	8005c58 <_PrintUnsigned>
        break;
 800619a:	e01c      	b.n	80061d6 <_VPrintTarget+0x332>
 800619c:	20014320 	.word	0x20014320
      case 'p':
        v = va_arg(*pParamList, int);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	1d19      	adds	r1, r3, #4
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6011      	str	r1, [r2, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80061ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061b0:	f107 0014 	add.w	r0, r7, #20
 80061b4:	2300      	movs	r3, #0
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	2308      	movs	r3, #8
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2308      	movs	r3, #8
 80061be:	2210      	movs	r2, #16
 80061c0:	f7ff fd4a 	bl	8005c58 <_PrintUnsigned>
        break;
 80061c4:	e007      	b.n	80061d6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80061c6:	f107 0314 	add.w	r3, r7, #20
 80061ca:	2125      	movs	r1, #37	; 0x25
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fcc7 	bl	8005b60 <_StoreChar>
        break;
 80061d2:	e000      	b.n	80061d6 <_VPrintTarget+0x332>
      default:
        break;
 80061d4:	bf00      	nop
      }
      sFormat++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e007      	b.n	80061ee <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80061de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80061e2:	f107 0314 	add.w	r3, r7, #20
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fcb9 	bl	8005b60 <_StoreChar>
    }
  } while (*sFormat);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f47f ae72 	bne.w	8005edc <_VPrintTarget+0x38>
 80061f8:	e000      	b.n	80061fc <_VPrintTarget+0x358>
      break;
 80061fa:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d041      	beq.n	8006286 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	643b      	str	r3, [r7, #64]	; 0x40
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006212:	e00b      	b.n	800622c <_VPrintTarget+0x388>
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	b2da      	uxtb	r2, r3
 8006218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	6439      	str	r1, [r7, #64]	; 0x40
 800621e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d8f0      	bhi.n	8006214 <_VPrintTarget+0x370>
 8006232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	643a      	str	r2, [r7, #64]	; 0x40
 8006238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006240:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
 800624a:	e00b      	b.n	8006264 <_VPrintTarget+0x3c0>
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	63b9      	str	r1, [r7, #56]	; 0x38
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
 8006264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <_VPrintTarget+0x3a8>
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	221a      	movs	r2, #26
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff faff 	bl	8005884 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800628c:	bf00      	nop
 800628e:	3758      	adds	r7, #88	; 0x58
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062a2:	2300      	movs	r3, #0
 80062a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062a8:	4917      	ldr	r1, [pc, #92]	; (8006308 <SEGGER_SYSVIEW_Init+0x74>)
 80062aa:	4818      	ldr	r0, [pc, #96]	; (800630c <SEGGER_SYSVIEW_Init+0x78>)
 80062ac:	f7ff f8dc 	bl	8005468 <SEGGER_RTT_AllocUpBuffer>
 80062b0:	4603      	mov	r3, r0
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062b6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062ba:	785a      	ldrb	r2, [r3, #1]
 80062bc:	4b14      	ldr	r3, [pc, #80]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062be:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062c0:	4b13      	ldr	r3, [pc, #76]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062c2:	7e1b      	ldrb	r3, [r3, #24]
 80062c4:	4618      	mov	r0, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	2308      	movs	r3, #8
 80062cc:	4a11      	ldr	r2, [pc, #68]	; (8006314 <SEGGER_SYSVIEW_Init+0x80>)
 80062ce:	490f      	ldr	r1, [pc, #60]	; (800630c <SEGGER_SYSVIEW_Init+0x78>)
 80062d0:	f7ff f94e 	bl	8005570 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <SEGGER_SYSVIEW_Init+0x84>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a0c      	ldr	r2, [pc, #48]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062e0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80062e2:	4a0b      	ldr	r2, [pc, #44]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80062e8:	4a09      	ldr	r2, [pc, #36]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80062ee:	4a08      	ldr	r2, [pc, #32]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80062f4:	4a06      	ldr	r2, [pc, #24]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	200132e8 	.word	0x200132e8
 800630c:	08007904 	.word	0x08007904
 8006310:	200142f0 	.word	0x200142f0
 8006314:	200142e8 	.word	0x200142e8
 8006318:	e0001004 	.word	0xe0001004

0800631c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006324:	4a04      	ldr	r2, [pc, #16]	; (8006338 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6113      	str	r3, [r2, #16]
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	200142f0 	.word	0x200142f0

0800633c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006344:	f3ef 8311 	mrs	r3, BASEPRI
 8006348:	f04f 0120 	mov.w	r1, #32
 800634c:	f381 8811 	msr	BASEPRI, r1
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	4808      	ldr	r0, [pc, #32]	; (8006374 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006354:	f7ff f9a8 	bl	80056a8 <_PreparePacket>
 8006358:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68b8      	ldr	r0, [r7, #8]
 8006360:	f7ff fa90 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f383 8811 	msr	BASEPRI, r3
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20014320 	.word	0x20014320

08006378 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006382:	f3ef 8311 	mrs	r3, BASEPRI
 8006386:	f04f 0120 	mov.w	r1, #32
 800638a:	f381 8811 	msr	BASEPRI, r1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	4816      	ldr	r0, [pc, #88]	; (80063ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006392:	f7ff f989 	bl	80056a8 <_PreparePacket>
 8006396:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e00b      	b.n	80063be <SEGGER_SYSVIEW_RecordU32+0x46>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	61f9      	str	r1, [r7, #28]
 80063b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d8f0      	bhi.n	80063a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	61fa      	str	r2, [r7, #28]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	6938      	ldr	r0, [r7, #16]
 80063da:	f7ff fa53 	bl	8005884 <_SendPacket>
  RECORD_END();
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f383 8811 	msr	BASEPRI, r3
}
 80063e4:	bf00      	nop
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20014320 	.word	0x20014320

080063f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	; 0x30
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006400:	f04f 0120 	mov.w	r1, #32
 8006404:	f381 8811 	msr	BASEPRI, r1
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	4825      	ldr	r0, [pc, #148]	; (80064a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800640c:	f7ff f94c 	bl	80056a8 <_PreparePacket>
 8006410:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
 800641e:	e00b      	b.n	8006438 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	62f9      	str	r1, [r7, #44]	; 0x2c
 800642a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	2b7f      	cmp	r3, #127	; 0x7f
 800643c:	d8f0      	bhi.n	8006420 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	e00b      	b.n	8006470 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	6279      	str	r1, [r7, #36]	; 0x24
 8006462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	09db      	lsrs	r3, r3, #7
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	2b7f      	cmp	r3, #127	; 0x7f
 8006474:	d8f0      	bhi.n	8006458 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	627a      	str	r2, [r7, #36]	; 0x24
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	6979      	ldr	r1, [r7, #20]
 800648a:	69b8      	ldr	r0, [r7, #24]
 800648c:	f7ff f9fa 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f383 8811 	msr	BASEPRI, r3
}
 8006496:	bf00      	nop
 8006498:	3730      	adds	r7, #48	; 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20014320 	.word	0x20014320

080064a4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08e      	sub	sp, #56	; 0x38
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80064b2:	f3ef 8311 	mrs	r3, BASEPRI
 80064b6:	f04f 0120 	mov.w	r1, #32
 80064ba:	f381 8811 	msr	BASEPRI, r1
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	4832      	ldr	r0, [pc, #200]	; (800658c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80064c2:	f7ff f8f1 	bl	80056a8 <_PreparePacket>
 80064c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
 80064d4:	e00b      	b.n	80064ee <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	1c59      	adds	r1, r3, #1
 80064de:	6379      	str	r1, [r7, #52]	; 0x34
 80064e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	09db      	lsrs	r3, r3, #7
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	2b7f      	cmp	r3, #127	; 0x7f
 80064f2:	d8f0      	bhi.n	80064d6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	637a      	str	r2, [r7, #52]	; 0x34
 80064fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
 800650c:	e00b      	b.n	8006526 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	b2da      	uxtb	r2, r3
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2b7f      	cmp	r3, #127	; 0x7f
 800652a:	d8f0      	bhi.n	800650e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	e00b      	b.n	800655e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	6279      	str	r1, [r7, #36]	; 0x24
 8006550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	09db      	lsrs	r3, r3, #7
 800655c:	623b      	str	r3, [r7, #32]
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b7f      	cmp	r3, #127	; 0x7f
 8006562:	d8f0      	bhi.n	8006546 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	627a      	str	r2, [r7, #36]	; 0x24
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	6979      	ldr	r1, [r7, #20]
 8006578:	69b8      	ldr	r0, [r7, #24]
 800657a:	f7ff f983 	bl	8005884 <_SendPacket>
  RECORD_END();
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f383 8811 	msr	BASEPRI, r3
}
 8006584:	bf00      	nop
 8006586:	3738      	adds	r7, #56	; 0x38
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20014320 	.word	0x20014320

08006590 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b090      	sub	sp, #64	; 0x40
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800659e:	f3ef 8311 	mrs	r3, BASEPRI
 80065a2:	f04f 0120 	mov.w	r1, #32
 80065a6:	f381 8811 	msr	BASEPRI, r1
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	4840      	ldr	r0, [pc, #256]	; (80066b0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80065ae:	f7ff f87b 	bl	80056a8 <_PreparePacket>
 80065b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c0:	e00b      	b.n	80065da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	09db      	lsrs	r3, r3, #7
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	2b7f      	cmp	r3, #127	; 0x7f
 80065de:	d8f0      	bhi.n	80065c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	6379      	str	r1, [r7, #52]	; 0x34
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	633b      	str	r3, [r7, #48]	; 0x30
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	637a      	str	r2, [r7, #52]	; 0x34
 800661e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006630:	e00b      	b.n	800664a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800663c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	2b7f      	cmp	r3, #127	; 0x7f
 800664e:	d8f0      	bhi.n	8006632 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
 8006664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	e00b      	b.n	8006682 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	6279      	str	r1, [r7, #36]	; 0x24
 8006674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	09db      	lsrs	r3, r3, #7
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	2b7f      	cmp	r3, #127	; 0x7f
 8006686:	d8f0      	bhi.n	800666a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	627a      	str	r2, [r7, #36]	; 0x24
 800668e:	6a3a      	ldr	r2, [r7, #32]
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6979      	ldr	r1, [r7, #20]
 800669c:	69b8      	ldr	r0, [r7, #24]
 800669e:	f7ff f8f1 	bl	8005884 <_SendPacket>
  RECORD_END();
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f383 8811 	msr	BASEPRI, r3
}
 80066a8:	bf00      	nop
 80066aa:	3740      	adds	r7, #64	; 0x40
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20014320 	.word	0x20014320

080066b4 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b092      	sub	sp, #72	; 0x48
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80066c2:	f3ef 8311 	mrs	r3, BASEPRI
 80066c6:	f04f 0120 	mov.w	r1, #32
 80066ca:	f381 8811 	msr	BASEPRI, r1
 80066ce:	61fb      	str	r3, [r7, #28]
 80066d0:	484e      	ldr	r0, [pc, #312]	; (800680c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80066d2:	f7fe ffe9 	bl	80056a8 <_PreparePacket>
 80066d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	647b      	str	r3, [r7, #68]	; 0x44
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	643b      	str	r3, [r7, #64]	; 0x40
 80066e4:	e00b      	b.n	80066fe <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80066e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ec:	1c59      	adds	r1, r3, #1
 80066ee:	6479      	str	r1, [r7, #68]	; 0x44
 80066f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fa:	09db      	lsrs	r3, r3, #7
 80066fc:	643b      	str	r3, [r7, #64]	; 0x40
 80066fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006700:	2b7f      	cmp	r3, #127	; 0x7f
 8006702:	d8f0      	bhi.n	80066e6 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	647a      	str	r2, [r7, #68]	; 0x44
 800670a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006712:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
 800671c:	e00b      	b.n	8006736 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006724:	1c59      	adds	r1, r3, #1
 8006726:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	63bb      	str	r3, [r7, #56]	; 0x38
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	2b7f      	cmp	r3, #127	; 0x7f
 800673a:	d8f0      	bhi.n	800671e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	633b      	str	r3, [r7, #48]	; 0x30
 8006754:	e00b      	b.n	800676e <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	b2da      	uxtb	r2, r3
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	1c59      	adds	r1, r3, #1
 800675e:	6379      	str	r1, [r7, #52]	; 0x34
 8006760:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	09db      	lsrs	r3, r3, #7
 800676c:	633b      	str	r3, [r7, #48]	; 0x30
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b7f      	cmp	r3, #127	; 0x7f
 8006772:	d8f0      	bhi.n	8006756 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	637a      	str	r2, [r7, #52]	; 0x34
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
 800678c:	e00b      	b.n	80067a6 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	b2da      	uxtb	r2, r3
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	1c59      	adds	r1, r3, #1
 8006796:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	09db      	lsrs	r3, r3, #7
 80067a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	2b7f      	cmp	r3, #127	; 0x7f
 80067aa:	d8f0      	bhi.n	800678e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
 80067c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	e00b      	b.n	80067de <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	6279      	str	r1, [r7, #36]	; 0x24
 80067d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	09db      	lsrs	r3, r3, #7
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b7f      	cmp	r3, #127	; 0x7f
 80067e2:	d8f0      	bhi.n	80067c6 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	627a      	str	r2, [r7, #36]	; 0x24
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	6979      	ldr	r1, [r7, #20]
 80067f8:	69b8      	ldr	r0, [r7, #24]
 80067fa:	f7ff f843 	bl	8005884 <_SendPacket>
  RECORD_END();
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f383 8811 	msr	BASEPRI, r3
}
 8006804:	bf00      	nop
 8006806:	3748      	adds	r7, #72	; 0x48
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20014320 	.word	0x20014320

08006810 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006816:	4b58      	ldr	r3, [pc, #352]	; (8006978 <SEGGER_SYSVIEW_Start+0x168>)
 8006818:	2201      	movs	r2, #1
 800681a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800681c:	f3ef 8311 	mrs	r3, BASEPRI
 8006820:	f04f 0120 	mov.w	r1, #32
 8006824:	f381 8811 	msr	BASEPRI, r1
 8006828:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800682a:	4b53      	ldr	r3, [pc, #332]	; (8006978 <SEGGER_SYSVIEW_Start+0x168>)
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	220a      	movs	r2, #10
 8006830:	4952      	ldr	r1, [pc, #328]	; (800697c <SEGGER_SYSVIEW_Start+0x16c>)
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fcdc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800683e:	200a      	movs	r0, #10
 8006840:	f7ff fd7c 	bl	800633c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006844:	f3ef 8311 	mrs	r3, BASEPRI
 8006848:	f04f 0120 	mov.w	r1, #32
 800684c:	f381 8811 	msr	BASEPRI, r1
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	484b      	ldr	r0, [pc, #300]	; (8006980 <SEGGER_SYSVIEW_Start+0x170>)
 8006854:	f7fe ff28 	bl	80056a8 <_PreparePacket>
 8006858:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006862:	4b45      	ldr	r3, [pc, #276]	; (8006978 <SEGGER_SYSVIEW_Start+0x168>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
 8006868:	e00b      	b.n	8006882 <SEGGER_SYSVIEW_Start+0x72>
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	b2da      	uxtb	r2, r3
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	09db      	lsrs	r3, r3, #7
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	2b7f      	cmp	r3, #127	; 0x7f
 8006886:	d8f0      	bhi.n	800686a <SEGGER_SYSVIEW_Start+0x5a>
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800688e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <SEGGER_SYSVIEW_Start+0x168>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	623b      	str	r3, [r7, #32]
 80068a2:	e00b      	b.n	80068bc <SEGGER_SYSVIEW_Start+0xac>
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	6279      	str	r1, [r7, #36]	; 0x24
 80068ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	623b      	str	r3, [r7, #32]
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	2b7f      	cmp	r3, #127	; 0x7f
 80068c0:	d8f0      	bhi.n	80068a4 <SEGGER_SYSVIEW_Start+0x94>
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	627a      	str	r2, [r7, #36]	; 0x24
 80068c8:	6a3a      	ldr	r2, [r7, #32]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	4b28      	ldr	r3, [pc, #160]	; (8006978 <SEGGER_SYSVIEW_Start+0x168>)
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e00b      	b.n	80068f6 <SEGGER_SYSVIEW_Start+0xe6>
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	1c59      	adds	r1, r3, #1
 80068e6:	61f9      	str	r1, [r7, #28]
 80068e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	09db      	lsrs	r3, r3, #7
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b7f      	cmp	r3, #127	; 0x7f
 80068fa:	d8f0      	bhi.n	80068de <SEGGER_SYSVIEW_Start+0xce>
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	61fa      	str	r2, [r7, #28]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	e00b      	b.n	800692e <SEGGER_SYSVIEW_Start+0x11e>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	1c59      	adds	r1, r3, #1
 800691e:	6179      	str	r1, [r7, #20]
 8006920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	09db      	lsrs	r3, r3, #7
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b7f      	cmp	r3, #127	; 0x7f
 8006932:	d8f0      	bhi.n	8006916 <SEGGER_SYSVIEW_Start+0x106>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	617a      	str	r2, [r7, #20]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006944:	2218      	movs	r2, #24
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fe ff9b 	bl	8005884 <_SendPacket>
      RECORD_END();
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006954:	4b08      	ldr	r3, [pc, #32]	; (8006978 <SEGGER_SYSVIEW_Start+0x168>)
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <SEGGER_SYSVIEW_Start+0x168>)
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006962:	f000 f9eb 	bl	8006d3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006966:	f000 f9b1 	bl	8006ccc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800696a:	f000 fc83 	bl	8007274 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800696e:	bf00      	nop
 8006970:	3730      	adds	r7, #48	; 0x30
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200142f0 	.word	0x200142f0
 800697c:	080079e4 	.word	0x080079e4
 8006980:	20014320 	.word	0x20014320

08006984 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800698a:	f3ef 8311 	mrs	r3, BASEPRI
 800698e:	f04f 0120 	mov.w	r1, #32
 8006992:	f381 8811 	msr	BASEPRI, r1
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	480b      	ldr	r0, [pc, #44]	; (80069c8 <SEGGER_SYSVIEW_Stop+0x44>)
 800699a:	f7fe fe85 	bl	80056a8 <_PreparePacket>
 800699e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80069a0:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <SEGGER_SYSVIEW_Stop+0x48>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80069a8:	220b      	movs	r2, #11
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6838      	ldr	r0, [r7, #0]
 80069ae:	f7fe ff69 	bl	8005884 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <SEGGER_SYSVIEW_Stop+0x48>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20014320 	.word	0x20014320
 80069cc:	200142f0 	.word	0x200142f0

080069d0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08c      	sub	sp, #48	; 0x30
 80069d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069d6:	f3ef 8311 	mrs	r3, BASEPRI
 80069da:	f04f 0120 	mov.w	r1, #32
 80069de:	f381 8811 	msr	BASEPRI, r1
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	4845      	ldr	r0, [pc, #276]	; (8006afc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069e6:	f7fe fe5f 	bl	80056a8 <_PreparePacket>
 80069ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f4:	4b42      	ldr	r3, [pc, #264]	; (8006b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fa:	e00b      	b.n	8006a14 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	09db      	lsrs	r3, r3, #7
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	2b7f      	cmp	r3, #127	; 0x7f
 8006a18:	d8f0      	bhi.n	80069fc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	623b      	str	r3, [r7, #32]
 8006a34:	e00b      	b.n	8006a4e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1c59      	adds	r1, r3, #1
 8006a3e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2b7f      	cmp	r3, #127	; 0x7f
 8006a52:	d8f0      	bhi.n	8006a36 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	627a      	str	r2, [r7, #36]	; 0x24
 8006a5a:	6a3a      	ldr	r2, [r7, #32]
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	e00b      	b.n	8006a88 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	1c59      	adds	r1, r3, #1
 8006a78:	61f9      	str	r1, [r7, #28]
 8006a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	09db      	lsrs	r3, r3, #7
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8c:	d8f0      	bhi.n	8006a70 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	61fa      	str	r2, [r7, #28]
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	e00b      	b.n	8006ac0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	6179      	str	r1, [r7, #20]
 8006ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	09db      	lsrs	r3, r3, #7
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac4:	d8f0      	bhi.n	8006aa8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ad6:	2218      	movs	r2, #24
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f7fe fed2 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	4798      	blx	r3
  }
}
 8006af4:	bf00      	nop
 8006af6:	3730      	adds	r7, #48	; 0x30
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20014320 	.word	0x20014320
 8006b00:	200142f0 	.word	0x200142f0

08006b04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b092      	sub	sp, #72	; 0x48
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b10:	f04f 0120 	mov.w	r1, #32
 8006b14:	f381 8811 	msr	BASEPRI, r1
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	486a      	ldr	r0, [pc, #424]	; (8006cc4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006b1c:	f7fe fdc4 	bl	80056a8 <_PreparePacket>
 8006b20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	647b      	str	r3, [r7, #68]	; 0x44
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b66      	ldr	r3, [pc, #408]	; (8006cc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	643b      	str	r3, [r7, #64]	; 0x40
 8006b36:	e00b      	b.n	8006b50 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	6479      	str	r1, [r7, #68]	; 0x44
 8006b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4c:	09db      	lsrs	r3, r3, #7
 8006b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b52:	2b7f      	cmp	r3, #127	; 0x7f
 8006b54:	d8f0      	bhi.n	8006b38 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b70:	e00b      	b.n	8006b8a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b78:	1c59      	adds	r1, r3, #1
 8006b7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	09db      	lsrs	r3, r3, #7
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8e:	d8f0      	bhi.n	8006b72 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7fe fd2d 	bl	8005608 <_EncodeStr>
 8006bae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006bb0:	2209      	movs	r2, #9
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	6938      	ldr	r0, [r7, #16]
 8006bb6:	f7fe fe65 	bl	8005884 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b40      	ldr	r3, [pc, #256]	; (8006cc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8006bce:	e00b      	b.n	8006be8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	1c59      	adds	r1, r3, #1
 8006bd8:	6379      	str	r1, [r7, #52]	; 0x34
 8006bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	09db      	lsrs	r3, r3, #7
 8006be6:	633b      	str	r3, [r7, #48]	; 0x30
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2b7f      	cmp	r3, #127	; 0x7f
 8006bec:	d8f0      	bhi.n	8006bd0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	637a      	str	r2, [r7, #52]	; 0x34
 8006bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c08:	e00b      	b.n	8006c22 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	1c59      	adds	r1, r3, #1
 8006c12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	09db      	lsrs	r3, r3, #7
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2b7f      	cmp	r3, #127	; 0x7f
 8006c26:	d8f0      	bhi.n	8006c0a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	e00b      	b.n	8006c5c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	1c59      	adds	r1, r3, #1
 8006c4c:	6279      	str	r1, [r7, #36]	; 0x24
 8006c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	09db      	lsrs	r3, r3, #7
 8006c5a:	623b      	str	r3, [r7, #32]
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c60:	d8f0      	bhi.n	8006c44 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	627a      	str	r2, [r7, #36]	; 0x24
 8006c68:	6a3a      	ldr	r2, [r7, #32]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e00b      	b.n	8006c94 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	61f9      	str	r1, [r7, #28]
 8006c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	09db      	lsrs	r3, r3, #7
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b7f      	cmp	r3, #127	; 0x7f
 8006c98:	d8f0      	bhi.n	8006c7c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	61fa      	str	r2, [r7, #28]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006caa:	2215      	movs	r2, #21
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f7fe fde8 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f383 8811 	msr	BASEPRI, r3
}
 8006cba:	bf00      	nop
 8006cbc:	3748      	adds	r7, #72	; 0x48
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20014320 	.word	0x20014320
 8006cc8:	200142f0 	.word	0x200142f0

08006ccc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4798      	blx	r3
  }
}
 8006cea:	bf00      	nop
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200142f0 	.word	0x200142f0

08006cf4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8006d00:	f04f 0120 	mov.w	r1, #32
 8006d04:	f381 8811 	msr	BASEPRI, r1
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	480b      	ldr	r0, [pc, #44]	; (8006d38 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006d0c:	f7fe fccc 	bl	80056a8 <_PreparePacket>
 8006d10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d12:	2280      	movs	r2, #128	; 0x80
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	6938      	ldr	r0, [r7, #16]
 8006d18:	f7fe fc76 	bl	8005608 <_EncodeStr>
 8006d1c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006d1e:	220e      	movs	r2, #14
 8006d20:	68f9      	ldr	r1, [r7, #12]
 8006d22:	6938      	ldr	r0, [r7, #16]
 8006d24:	f7fe fdae 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20014320 	.word	0x20014320

08006d3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01a      	beq.n	8006d80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d4a:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d015      	beq.n	8006d80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d54:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4798      	blx	r3
 8006d5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	000a      	movs	r2, r1
 8006d70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d72:	4613      	mov	r3, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4621      	mov	r1, r4
 8006d78:	200d      	movs	r0, #13
 8006d7a:	f7ff fb39 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
 8006d7e:	e006      	b.n	8006d8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4619      	mov	r1, r3
 8006d86:	200c      	movs	r0, #12
 8006d88:	f7ff faf6 	bl	8006378 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd90      	pop	{r4, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200142f0 	.word	0x200142f0
 8006d9c:	e0001004 	.word	0xe0001004

08006da0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006da6:	f3ef 8311 	mrs	r3, BASEPRI
 8006daa:	f04f 0120 	mov.w	r1, #32
 8006dae:	f381 8811 	msr	BASEPRI, r1
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	4819      	ldr	r0, [pc, #100]	; (8006e1c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006db6:	f7fe fc77 	bl	80056a8 <_PreparePacket>
 8006dba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	e00b      	b.n	8006dec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	6179      	str	r1, [r7, #20]
 8006dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	09db      	lsrs	r3, r3, #7
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b7f      	cmp	r3, #127	; 0x7f
 8006df0:	d8f0      	bhi.n	8006dd4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	617a      	str	r2, [r7, #20]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006e02:	2202      	movs	r2, #2
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	68b8      	ldr	r0, [r7, #8]
 8006e08:	f7fe fd3c 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f383 8811 	msr	BASEPRI, r3
}
 8006e12:	bf00      	nop
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20014320 	.word	0x20014320
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2e:	f04f 0120 	mov.w	r1, #32
 8006e32:	f381 8811 	msr	BASEPRI, r1
 8006e36:	607b      	str	r3, [r7, #4]
 8006e38:	4807      	ldr	r0, [pc, #28]	; (8006e58 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006e3a:	f7fe fc35 	bl	80056a8 <_PreparePacket>
 8006e3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006e40:	2203      	movs	r2, #3
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6838      	ldr	r0, [r7, #0]
 8006e46:	f7fe fd1d 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f383 8811 	msr	BASEPRI, r3
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20014320 	.word	0x20014320

08006e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e62:	f3ef 8311 	mrs	r3, BASEPRI
 8006e66:	f04f 0120 	mov.w	r1, #32
 8006e6a:	f381 8811 	msr	BASEPRI, r1
 8006e6e:	607b      	str	r3, [r7, #4]
 8006e70:	4807      	ldr	r0, [pc, #28]	; (8006e90 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e72:	f7fe fc19 	bl	80056a8 <_PreparePacket>
 8006e76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e78:	2212      	movs	r2, #18
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f7fe fd01 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f383 8811 	msr	BASEPRI, r3
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20014320 	.word	0x20014320

08006e94 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9e:	f04f 0120 	mov.w	r1, #32
 8006ea2:	f381 8811 	msr	BASEPRI, r1
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	4807      	ldr	r0, [pc, #28]	; (8006ec8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006eaa:	f7fe fbfd 	bl	80056a8 <_PreparePacket>
 8006eae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006eb0:	2211      	movs	r2, #17
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6838      	ldr	r0, [r7, #0]
 8006eb6:	f7fe fce5 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f383 8811 	msr	BASEPRI, r3
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20014320 	.word	0x20014320

08006ecc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed8:	f04f 0120 	mov.w	r1, #32
 8006edc:	f381 8811 	msr	BASEPRI, r1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	4819      	ldr	r0, [pc, #100]	; (8006f48 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ee4:	f7fe fbe0 	bl	80056a8 <_PreparePacket>
 8006ee8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eee:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e00b      	b.n	8006f1a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	61f9      	str	r1, [r7, #28]
 8006f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	09db      	lsrs	r3, r3, #7
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f1e:	d8f0      	bhi.n	8006f02 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	61fa      	str	r2, [r7, #28]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f30:	2208      	movs	r2, #8
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6938      	ldr	r0, [r7, #16]
 8006f36:	f7fe fca5 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f383 8811 	msr	BASEPRI, r3
}
 8006f40:	bf00      	nop
 8006f42:	3720      	adds	r7, #32
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20014320 	.word	0x20014320
 8006f4c:	200142f0 	.word	0x200142f0

08006f50 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f58:	f3ef 8311 	mrs	r3, BASEPRI
 8006f5c:	f04f 0120 	mov.w	r1, #32
 8006f60:	f381 8811 	msr	BASEPRI, r1
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	4819      	ldr	r0, [pc, #100]	; (8006fcc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f68:	f7fe fb9e 	bl	80056a8 <_PreparePacket>
 8006f6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f72:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	e00b      	b.n	8006f9e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	1c59      	adds	r1, r3, #1
 8006f8e:	61f9      	str	r1, [r7, #28]
 8006f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	09db      	lsrs	r3, r3, #7
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa2:	d8f0      	bhi.n	8006f86 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	61fa      	str	r2, [r7, #28]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	6938      	ldr	r0, [r7, #16]
 8006fba:	f7fe fc63 	bl	8005884 <_SendPacket>
  RECORD_END();
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f383 8811 	msr	BASEPRI, r3
}
 8006fc4:	bf00      	nop
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20014320 	.word	0x20014320
 8006fd0:	200142f0 	.word	0x200142f0

08006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe0:	f04f 0120 	mov.w	r1, #32
 8006fe4:	f381 8811 	msr	BASEPRI, r1
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	4819      	ldr	r0, [pc, #100]	; (8007050 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fec:	f7fe fb5c 	bl	80056a8 <_PreparePacket>
 8006ff0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ff6:	4b17      	ldr	r3, [pc, #92]	; (8007054 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e00b      	b.n	8007022 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	1c59      	adds	r1, r3, #1
 8007012:	61f9      	str	r1, [r7, #28]
 8007014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	09db      	lsrs	r3, r3, #7
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b7f      	cmp	r3, #127	; 0x7f
 8007026:	d8f0      	bhi.n	800700a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	61fa      	str	r2, [r7, #28]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007038:	2206      	movs	r2, #6
 800703a:	68f9      	ldr	r1, [r7, #12]
 800703c:	6938      	ldr	r0, [r7, #16]
 800703e:	f7fe fc21 	bl	8005884 <_SendPacket>
  RECORD_END();
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f383 8811 	msr	BASEPRI, r3
}
 8007048:	bf00      	nop
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20014320 	.word	0x20014320
 8007054:	200142f0 	.word	0x200142f0

08007058 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007062:	f3ef 8311 	mrs	r3, BASEPRI
 8007066:	f04f 0120 	mov.w	r1, #32
 800706a:	f381 8811 	msr	BASEPRI, r1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	4827      	ldr	r0, [pc, #156]	; (8007110 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007072:	f7fe fb19 	bl	80056a8 <_PreparePacket>
 8007076:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800707c:	4b25      	ldr	r3, [pc, #148]	; (8007114 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	e00b      	b.n	80070a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	6279      	str	r1, [r7, #36]	; 0x24
 800709a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	09db      	lsrs	r3, r3, #7
 80070a6:	623b      	str	r3, [r7, #32]
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	2b7f      	cmp	r3, #127	; 0x7f
 80070ac:	d8f0      	bhi.n	8007090 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	627a      	str	r2, [r7, #36]	; 0x24
 80070b4:	6a3a      	ldr	r2, [r7, #32]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	e00b      	b.n	80070e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	1c59      	adds	r1, r3, #1
 80070d0:	61f9      	str	r1, [r7, #28]
 80070d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	09db      	lsrs	r3, r3, #7
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b7f      	cmp	r3, #127	; 0x7f
 80070e4:	d8f0      	bhi.n	80070c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	61fa      	str	r2, [r7, #28]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070f6:	2207      	movs	r2, #7
 80070f8:	68f9      	ldr	r1, [r7, #12]
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f7fe fbc2 	bl	8005884 <_SendPacket>
  RECORD_END();
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f383 8811 	msr	BASEPRI, r3
}
 8007106:	bf00      	nop
 8007108:	3728      	adds	r7, #40	; 0x28
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20014320 	.word	0x20014320
 8007114:	200142f0 	.word	0x200142f0

08007118 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	1ad3      	subs	r3, r2, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	200142f0 	.word	0x200142f0

08007138 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b08c      	sub	sp, #48	; 0x30
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007142:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d06d      	beq.n	8007226 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800714a:	4b39      	ldr	r3, [pc, #228]	; (8007230 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007150:	2300      	movs	r3, #0
 8007152:	62bb      	str	r3, [r7, #40]	; 0x28
 8007154:	e008      	b.n	8007168 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	3301      	adds	r3, #1
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800716c:	429a      	cmp	r2, r3
 800716e:	d3f2      	bcc.n	8007156 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007170:	e000      	b.n	8007174 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007172:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d055      	beq.n	8007226 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800717a:	f3ef 8311 	mrs	r3, BASEPRI
 800717e:	f04f 0120 	mov.w	r1, #32
 8007182:	f381 8811 	msr	BASEPRI, r1
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	482a      	ldr	r0, [pc, #168]	; (8007234 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800718a:	f7fe fa8d 	bl	80056a8 <_PreparePacket>
 800718e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	e00b      	b.n	80071b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	1c59      	adds	r1, r3, #1
 80071a6:	6279      	str	r1, [r7, #36]	; 0x24
 80071a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	09db      	lsrs	r3, r3, #7
 80071b4:	623b      	str	r3, [r7, #32]
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ba:	d8f0      	bhi.n	800719e <SEGGER_SYSVIEW_SendModule+0x66>
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	627a      	str	r2, [r7, #36]	; 0x24
 80071c2:	6a3a      	ldr	r2, [r7, #32]
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	e00b      	b.n	80071f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	61f9      	str	r1, [r7, #28]
 80071e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	09db      	lsrs	r3, r3, #7
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b7f      	cmp	r3, #127	; 0x7f
 80071f4:	d8f0      	bhi.n	80071d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	61fa      	str	r2, [r7, #28]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2280      	movs	r2, #128	; 0x80
 800720c:	4619      	mov	r1, r3
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7fe f9fa 	bl	8005608 <_EncodeStr>
 8007214:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007216:	2216      	movs	r2, #22
 8007218:	68f9      	ldr	r1, [r7, #12]
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f7fe fb32 	bl	8005884 <_SendPacket>
      RECORD_END();
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007226:	bf00      	nop
 8007228:	3730      	adds	r7, #48	; 0x30
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20014318 	.word	0x20014318
 8007234:	20014320 	.word	0x20014320

08007238 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800723e:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f2      	bne.n	800724c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20014318 	.word	0x20014318

08007274 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800727a:	f3ef 8311 	mrs	r3, BASEPRI
 800727e:	f04f 0120 	mov.w	r1, #32
 8007282:	f381 8811 	msr	BASEPRI, r1
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	4817      	ldr	r0, [pc, #92]	; (80072e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800728a:	f7fe fa0d 	bl	80056a8 <_PreparePacket>
 800728e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	4b14      	ldr	r3, [pc, #80]	; (80072ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	e00b      	b.n	80072b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	1c59      	adds	r1, r3, #1
 80072a8:	6179      	str	r1, [r7, #20]
 80072aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	09db      	lsrs	r3, r3, #7
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b7f      	cmp	r3, #127	; 0x7f
 80072bc:	d8f0      	bhi.n	80072a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	617a      	str	r2, [r7, #20]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072ce:	221b      	movs	r2, #27
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	68b8      	ldr	r0, [r7, #8]
 80072d4:	f7fe fad6 	bl	8005884 <_SendPacket>
  RECORD_END();
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f383 8811 	msr	BASEPRI, r3
}
 80072de:	bf00      	nop
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20014320 	.word	0x20014320
 80072ec:	2001431c 	.word	0x2001431c

080072f0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80072f0:	b40f      	push	{r0, r1, r2, r3}
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80072f8:	f107 0314 	add.w	r3, r7, #20
 80072fc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	461a      	mov	r2, r3
 8007302:	2100      	movs	r1, #0
 8007304:	6938      	ldr	r0, [r7, #16]
 8007306:	f7fe fdcd 	bl	8005ea4 <_VPrintTarget>
  va_end(ParamList);
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007314:	b004      	add	sp, #16
 8007316:	4770      	bx	lr

08007318 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007320:	f3ef 8311 	mrs	r3, BASEPRI
 8007324:	f04f 0120 	mov.w	r1, #32
 8007328:	f381 8811 	msr	BASEPRI, r1
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	4827      	ldr	r0, [pc, #156]	; (80073cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007330:	f7fe f9ba 	bl	80056a8 <_PreparePacket>
 8007334:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	f7fe f964 	bl	8005608 <_EncodeStr>
 8007340:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
 8007346:	2301      	movs	r3, #1
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	e00b      	b.n	8007364 <SEGGER_SYSVIEW_Warn+0x4c>
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	1c59      	adds	r1, r3, #1
 8007354:	6279      	str	r1, [r7, #36]	; 0x24
 8007356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	09db      	lsrs	r3, r3, #7
 8007362:	623b      	str	r3, [r7, #32]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2b7f      	cmp	r3, #127	; 0x7f
 8007368:	d8f0      	bhi.n	800734c <SEGGER_SYSVIEW_Warn+0x34>
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	627a      	str	r2, [r7, #36]	; 0x24
 8007370:	6a3a      	ldr	r2, [r7, #32]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	2300      	movs	r3, #0
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e00b      	b.n	800739c <SEGGER_SYSVIEW_Warn+0x84>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	61f9      	str	r1, [r7, #28]
 800738e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	09db      	lsrs	r3, r3, #7
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b7f      	cmp	r3, #127	; 0x7f
 80073a0:	d8f0      	bhi.n	8007384 <SEGGER_SYSVIEW_Warn+0x6c>
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	61fa      	str	r2, [r7, #28]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80073b2:	221a      	movs	r2, #26
 80073b4:	68f9      	ldr	r1, [r7, #12]
 80073b6:	6938      	ldr	r0, [r7, #16]
 80073b8:	f7fe fa64 	bl	8005884 <_SendPacket>
  RECORD_END();
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f383 8811 	msr	BASEPRI, r3
}
 80073c2:	bf00      	nop
 80073c4:	3728      	adds	r7, #40	; 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20014320 	.word	0x20014320

080073d0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80073d4:	4803      	ldr	r0, [pc, #12]	; (80073e4 <_cbSendSystemDesc+0x14>)
 80073d6:	f7ff fc8d 	bl	8006cf4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80073da:	4803      	ldr	r0, [pc, #12]	; (80073e8 <_cbSendSystemDesc+0x18>)
 80073dc:	f7ff fc8a 	bl	8006cf4 <SEGGER_SYSVIEW_SendSysDesc>
}
 80073e0:	bf00      	nop
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	0800790c 	.word	0x0800790c
 80073e8:	08007950 	.word	0x08007950

080073ec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80073f0:	4b06      	ldr	r3, [pc, #24]	; (800740c <SEGGER_SYSVIEW_Conf+0x20>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <SEGGER_SYSVIEW_Conf+0x20>)
 80073f6:	6819      	ldr	r1, [r3, #0]
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <SEGGER_SYSVIEW_Conf+0x24>)
 80073fa:	4a06      	ldr	r2, [pc, #24]	; (8007414 <SEGGER_SYSVIEW_Conf+0x28>)
 80073fc:	f7fe ff4a 	bl	8006294 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007400:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007404:	f7fe ff8a 	bl	800631c <SEGGER_SYSVIEW_SetRAMBase>
}
 8007408:	bf00      	nop
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000000 	.word	0x20000000
 8007410:	080073d1 	.word	0x080073d1
 8007414:	08007a00 	.word	0x08007a00

08007418 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741a:	b085      	sub	sp, #20
 800741c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800741e:	2300      	movs	r3, #0
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	e033      	b.n	800748c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007424:	491e      	ldr	r1, [pc, #120]	; (80074a0 <_cbSendTaskList+0x88>)
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	491a      	ldr	r1, [pc, #104]	; (80074a0 <_cbSendTaskList+0x88>)
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3304      	adds	r3, #4
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	4c16      	ldr	r4, [pc, #88]	; (80074a0 <_cbSendTaskList+0x88>)
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4423      	add	r3, r4
 8007454:	3308      	adds	r3, #8
 8007456:	681c      	ldr	r4, [r3, #0]
 8007458:	4d11      	ldr	r5, [pc, #68]	; (80074a0 <_cbSendTaskList+0x88>)
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	442b      	add	r3, r5
 8007466:	330c      	adds	r3, #12
 8007468:	681d      	ldr	r5, [r3, #0]
 800746a:	4e0d      	ldr	r6, [pc, #52]	; (80074a0 <_cbSendTaskList+0x88>)
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4433      	add	r3, r6
 8007478:	3310      	adds	r3, #16
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	462b      	mov	r3, r5
 8007480:	4622      	mov	r2, r4
 8007482:	f000 f979 	bl	8007778 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3301      	adds	r3, #1
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <_cbSendTaskList+0x8c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d3c6      	bcc.n	8007424 <_cbSendTaskList+0xc>
  }
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a0:	20014404 	.word	0x20014404
 80074a4:	200144a4 	.word	0x200144a4

080074a8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80074a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80074b0:	f7fc f936 	bl	8003720 <xTaskGetTickCountFromISR>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2200      	movs	r2, #0
 80074b8:	469a      	mov	sl, r3
 80074ba:	4693      	mov	fp, r2
 80074bc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80074c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	f04f 0a00 	mov.w	sl, #0
 80074cc:	f04f 0b00 	mov.w	fp, #0
 80074d0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80074d4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80074d8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80074dc:	4652      	mov	r2, sl
 80074de:	465b      	mov	r3, fp
 80074e0:	1a14      	subs	r4, r2, r0
 80074e2:	eb63 0501 	sbc.w	r5, r3, r1
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	00ab      	lsls	r3, r5, #2
 80074f0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80074f4:	00a2      	lsls	r2, r4, #2
 80074f6:	4614      	mov	r4, r2
 80074f8:	461d      	mov	r5, r3
 80074fa:	eb14 0800 	adds.w	r8, r4, r0
 80074fe:	eb45 0901 	adc.w	r9, r5, r1
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800750e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007516:	4690      	mov	r8, r2
 8007518:	4699      	mov	r9, r3
 800751a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800751e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007530 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800753e:	2205      	movs	r2, #5
 8007540:	492b      	ldr	r1, [pc, #172]	; (80075f0 <SYSVIEW_AddTask+0xc0>)
 8007542:	68b8      	ldr	r0, [r7, #8]
 8007544:	f000 f95e 	bl	8007804 <memcmp>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04b      	beq.n	80075e6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800754e:	4b29      	ldr	r3, [pc, #164]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b07      	cmp	r3, #7
 8007554:	d903      	bls.n	800755e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007556:	4828      	ldr	r0, [pc, #160]	; (80075f8 <SYSVIEW_AddTask+0xc8>)
 8007558:	f7ff fede 	bl	8007318 <SEGGER_SYSVIEW_Warn>
    return;
 800755c:	e044      	b.n	80075e8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800755e:	4b25      	ldr	r3, [pc, #148]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4926      	ldr	r1, [pc, #152]	; (80075fc <SYSVIEW_AddTask+0xcc>)
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007572:	4b20      	ldr	r3, [pc, #128]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4921      	ldr	r1, [pc, #132]	; (80075fc <SYSVIEW_AddTask+0xcc>)
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	3304      	adds	r3, #4
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	491b      	ldr	r1, [pc, #108]	; (80075fc <SYSVIEW_AddTask+0xcc>)
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	3308      	adds	r3, #8
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800759e:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	4916      	ldr	r1, [pc, #88]	; (80075fc <SYSVIEW_AddTask+0xcc>)
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	330c      	adds	r3, #12
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80075b4:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	4910      	ldr	r1, [pc, #64]	; (80075fc <SYSVIEW_AddTask+0xcc>)
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	440b      	add	r3, r1
 80075c4:	3310      	adds	r3, #16
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80075ca:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3301      	adds	r3, #1
 80075d0:	4a08      	ldr	r2, [pc, #32]	; (80075f4 <SYSVIEW_AddTask+0xc4>)
 80075d2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f8ca 	bl	8007778 <SYSVIEW_SendTaskInfo>
 80075e4:	e000      	b.n	80075e8 <SYSVIEW_AddTask+0xb8>
    return;
 80075e6:	bf00      	nop

}
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	08007960 	.word	0x08007960
 80075f4:	200144a4 	.word	0x200144a4
 80075f8:	08007968 	.word	0x08007968
 80075fc:	20014404 	.word	0x20014404

08007600 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8007608:	4b59      	ldr	r3, [pc, #356]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80ab 	beq.w	8007768 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	e00d      	b.n	8007634 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8007618:	4956      	ldr	r1, [pc, #344]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d008      	beq.n	8007640 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	4b4e      	ldr	r3, [pc, #312]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	429a      	cmp	r2, r3
 800763c:	d3ec      	bcc.n	8007618 <SYSVIEW_DeleteTask+0x18>
 800763e:	e000      	b.n	8007642 <SYSVIEW_DeleteTask+0x42>
      break;
 8007640:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8007642:	4b4b      	ldr	r3, [pc, #300]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3b01      	subs	r3, #1
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	429a      	cmp	r2, r3
 800764c:	d111      	bne.n	8007672 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4a46      	ldr	r2, [pc, #280]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 800765a:	4413      	add	r3, r2
 800765c:	2214      	movs	r2, #20
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f8ed 	bl	8007840 <memset>
    _NumTasks--;
 8007666:	4b42      	ldr	r3, [pc, #264]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3b01      	subs	r3, #1
 800766c:	4a40      	ldr	r2, [pc, #256]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	e07b      	b.n	800776a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8007672:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	429a      	cmp	r2, r3
 800767a:	d276      	bcs.n	800776a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800767c:	4b3c      	ldr	r3, [pc, #240]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	1e5a      	subs	r2, r3, #1
 8007682:	493c      	ldr	r1, [pc, #240]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	4838      	ldr	r0, [pc, #224]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4403      	add	r3, r0
 800769e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80076a0:	4b33      	ldr	r3, [pc, #204]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	1e5a      	subs	r2, r3, #1
 80076a6:	4933      	ldr	r1, [pc, #204]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	3304      	adds	r3, #4
 80076b4:	6819      	ldr	r1, [r3, #0]
 80076b6:	482f      	ldr	r0, [pc, #188]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4403      	add	r3, r0
 80076c4:	3304      	adds	r3, #4
 80076c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80076c8:	4b29      	ldr	r3, [pc, #164]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	1e5a      	subs	r2, r3, #1
 80076ce:	4929      	ldr	r1, [pc, #164]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	3308      	adds	r3, #8
 80076dc:	6819      	ldr	r1, [r3, #0]
 80076de:	4825      	ldr	r0, [pc, #148]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4403      	add	r3, r0
 80076ec:	3308      	adds	r3, #8
 80076ee:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80076f0:	4b1f      	ldr	r3, [pc, #124]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	491f      	ldr	r1, [pc, #124]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	330c      	adds	r3, #12
 8007704:	6819      	ldr	r1, [r3, #0]
 8007706:	481b      	ldr	r0, [pc, #108]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4403      	add	r3, r0
 8007714:	330c      	adds	r3, #12
 8007716:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	4915      	ldr	r1, [pc, #84]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	3310      	adds	r3, #16
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	4811      	ldr	r0, [pc, #68]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4403      	add	r3, r0
 800773c:	3310      	adds	r3, #16
 800773e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	1e5a      	subs	r2, r3, #1
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4a09      	ldr	r2, [pc, #36]	; (8007774 <SYSVIEW_DeleteTask+0x174>)
 8007750:	4413      	add	r3, r2
 8007752:	2214      	movs	r2, #20
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f872 	bl	8007840 <memset>
    _NumTasks--;
 800775c:	4b04      	ldr	r3, [pc, #16]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3b01      	subs	r3, #1
 8007762:	4a03      	ldr	r2, [pc, #12]	; (8007770 <SYSVIEW_DeleteTask+0x170>)
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	e000      	b.n	800776a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8007768:	bf00      	nop
  }
}
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	200144a4 	.word	0x200144a4
 8007774:	20014404 	.word	0x20014404

08007778 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007786:	f107 0314 	add.w	r3, r7, #20
 800778a:	2214      	movs	r2, #20
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f856 	bl	8007840 <memset>
  TaskInfo.TaskID     = TaskID;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80077a8:	f107 0314 	add.w	r3, r7, #20
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff f9a9 	bl	8006b04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80077b2:	bf00      	nop
 80077b4:	3728      	adds	r7, #40	; 0x28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <__libc_init_array>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4d0d      	ldr	r5, [pc, #52]	; (80077f4 <__libc_init_array+0x38>)
 80077c0:	4c0d      	ldr	r4, [pc, #52]	; (80077f8 <__libc_init_array+0x3c>)
 80077c2:	1b64      	subs	r4, r4, r5
 80077c4:	10a4      	asrs	r4, r4, #2
 80077c6:	2600      	movs	r6, #0
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	d109      	bne.n	80077e0 <__libc_init_array+0x24>
 80077cc:	4d0b      	ldr	r5, [pc, #44]	; (80077fc <__libc_init_array+0x40>)
 80077ce:	4c0c      	ldr	r4, [pc, #48]	; (8007800 <__libc_init_array+0x44>)
 80077d0:	f000 f83e 	bl	8007850 <_init>
 80077d4:	1b64      	subs	r4, r4, r5
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	2600      	movs	r6, #0
 80077da:	42a6      	cmp	r6, r4
 80077dc:	d105      	bne.n	80077ea <__libc_init_array+0x2e>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e4:	4798      	blx	r3
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7ee      	b.n	80077c8 <__libc_init_array+0xc>
 80077ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ee:	4798      	blx	r3
 80077f0:	3601      	adds	r6, #1
 80077f2:	e7f2      	b.n	80077da <__libc_init_array+0x1e>
 80077f4:	08007a10 	.word	0x08007a10
 80077f8:	08007a10 	.word	0x08007a10
 80077fc:	08007a10 	.word	0x08007a10
 8007800:	08007a14 	.word	0x08007a14

08007804 <memcmp>:
 8007804:	b510      	push	{r4, lr}
 8007806:	3901      	subs	r1, #1
 8007808:	4402      	add	r2, r0
 800780a:	4290      	cmp	r0, r2
 800780c:	d101      	bne.n	8007812 <memcmp+0xe>
 800780e:	2000      	movs	r0, #0
 8007810:	e005      	b.n	800781e <memcmp+0x1a>
 8007812:	7803      	ldrb	r3, [r0, #0]
 8007814:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007818:	42a3      	cmp	r3, r4
 800781a:	d001      	beq.n	8007820 <memcmp+0x1c>
 800781c:	1b18      	subs	r0, r3, r4
 800781e:	bd10      	pop	{r4, pc}
 8007820:	3001      	adds	r0, #1
 8007822:	e7f2      	b.n	800780a <memcmp+0x6>

08007824 <memcpy>:
 8007824:	440a      	add	r2, r1
 8007826:	4291      	cmp	r1, r2
 8007828:	f100 33ff 	add.w	r3, r0, #4294967295
 800782c:	d100      	bne.n	8007830 <memcpy+0xc>
 800782e:	4770      	bx	lr
 8007830:	b510      	push	{r4, lr}
 8007832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783a:	4291      	cmp	r1, r2
 800783c:	d1f9      	bne.n	8007832 <memcpy+0xe>
 800783e:	bd10      	pop	{r4, pc}

08007840 <memset>:
 8007840:	4402      	add	r2, r0
 8007842:	4603      	mov	r3, r0
 8007844:	4293      	cmp	r3, r2
 8007846:	d100      	bne.n	800784a <memset+0xa>
 8007848:	4770      	bx	lr
 800784a:	f803 1b01 	strb.w	r1, [r3], #1
 800784e:	e7f9      	b.n	8007844 <memset+0x4>

08007850 <_init>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr

0800785c <_fini>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	bf00      	nop
 8007860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007862:	bc08      	pop	{r3}
 8007864:	469e      	mov	lr, r3
 8007866:	4770      	bx	lr
