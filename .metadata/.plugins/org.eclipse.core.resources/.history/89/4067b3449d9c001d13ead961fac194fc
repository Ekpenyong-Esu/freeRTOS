/*
 * STM32_Disc1_Gpio.c
 *
 *  Created on: Jan 21, 2023
 *      Author: mahon
 */

#include "STM32_Disc1_Gpio.h"
#include "main.h"

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize );

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize );

void GreenOn ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);}
void GreenOff ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);}
LED GreenLed = { GreenOn, GreenOff };   // initialize the GreenLed struct




void BlueOn ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);}
void BlueOff ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);}
LED BlueLed = { BlueOn, BlueOff }; // initialize the BlueLed struct




void RedOn ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);}
void RedOff ( void ) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);}
LED RedLed = { RedOn, RedOff };// initialize the RedLed struct

uint8_t ReadPushButton( void ){ return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);}






/* Define the size of the stack and heap that the idle task should use. */
#define IDLE_TASK_STACK_SIZE configMINIMAL_STACK_SIZE
#define IDLE_TASK_HEAP_SIZE  (configMINIMAL_STACK_SIZE * 4)

/* Allocate the stack and heap for the idle task. */
static StackType_t idle_task_stack[IDLE_TASK_STACK_SIZE];
static StaticTask_t idle_task_tcb;
static uint8_t idle_task_heap[IDLE_TASK_HEAP_SIZE];

/* Implement the vApplicationGetIdleTaskMemory() callback function. */
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
    /* Pass the address of the idle task's TCB and stack to the kernel. */
    *ppxIdleTaskTCBBuffer = &idle_task_tcb;
    *ppxIdleTaskStackBuffer = idle_task_stack;
    *pulIdleTaskStackSize = IDLE_TASK_STACK_SIZE;
}

