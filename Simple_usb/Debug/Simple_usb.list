
Simple_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800cb6c  0800cb6c  0001cb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce88  0800ce88  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce88  0800ce88  0001ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce90  0800ce90  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce94  0800ce94  0001ce94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800ce98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          000160d8  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200161dc  200161dc  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   000225e6  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ae7  00000000  00000000  0004271a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  00047208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a40  00000000  00000000  00048e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299ad  00000000  00000000  0004a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002502f  00000000  00000000  0007423d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec958  00000000  00000000  0009926c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00185bc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076e4  00000000  00000000  00185c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000104 	.word	0x20000104
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cb54 	.word	0x0800cb54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000108 	.word	0x20000108
 80001ec:	0800cb54 	.word	0x0800cb54

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20014b64 	.word	0x20014b64

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fa83 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f825 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8b9 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f88d 	bl	80006b8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800059e:	f007 fb31 	bl	8007c04 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  SEGGER_SYSVIEW_Conf();
 80005a2:	f00c f961 	bl	800c868 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 fb8a 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  //setup tasks, making sure they have been properly created before moving on
  assert_param(xTaskCreate(usbPrintOutTask, "usbprint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 80005ac:	2300      	movs	r3, #0
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	4906      	ldr	r1, [pc, #24]	; (80005d4 <main+0x4c>)
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x50>)
 80005bc:	f008 fe1c 	bl	80091f8 <xTaskCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d003      	beq.n	80005ce <main+0x46>
 80005c6:	216f      	movs	r1, #111	; 0x6f
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <main+0x54>)
 80005ca:	f000 f900 	bl	80007ce <assert_failed>

  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 80005ce:	f008 ffa1 	bl	8009514 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x4a>
 80005d4:	0800cb6c 	.word	0x0800cb6c
 80005d8:	0800075d 	.word	0x0800075d
 80005dc:	0800cb78 	.word	0x0800cb78

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f00c faa8 	bl	800cb44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd4>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000658:	2348      	movs	r3, #72	; 0x48
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000660:	2303      	movs	r3, #3
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f93f 	bl	80028ec <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f8a6 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800068a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fc50 	bl	8002f3c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f88f 	bl	80007c4 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f003 fada 	bl	8003ca8 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f863 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000120 	.word	0x20000120
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_GPIO_Init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_GPIO_Init+0x4c>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_GPIO_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_GPIO_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <MX_GPIO_Init+0x4c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_GPIO_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <usbPrintOutTask>:

/* USER CODE BEGIN 4 */


void usbPrintOutTask( void* NotUsed)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("print test over USB");
 8000764:	480a      	ldr	r0, [pc, #40]	; (8000790 <usbPrintOutTask+0x34>)
 8000766:	f00c f801 	bl	800c76c <SEGGER_SYSVIEW_PrintfHost>
		CDC_Transmit_FS((uint8_t*)"test\n", 5);
 800076a:	2105      	movs	r1, #5
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <usbPrintOutTask+0x38>)
 800076e:	f007 fb07 	bl	8007d80 <CDC_Transmit_FS>
		vTaskDelay(100);
 8000772:	2064      	movs	r0, #100	; 0x64
 8000774:	f008 fe96 	bl	80094a4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("print message over USB");
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <usbPrintOutTask+0x3c>)
 800077a:	f00b fff7 	bl	800c76c <SEGGER_SYSVIEW_PrintfHost>
		CDC_Transmit_FS((uint8_t*)"message\n", 8);
 800077e:	2108      	movs	r1, #8
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <usbPrintOutTask+0x40>)
 8000782:	f007 fafd 	bl	8007d80 <CDC_Transmit_FS>
		vTaskDelay(100);
 8000786:	2064      	movs	r0, #100	; 0x64
 8000788:	f008 fe8c 	bl	80094a4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("print test over USB");
 800078c:	e7ea      	b.n	8000764 <usbPrintOutTask+0x8>
 800078e:	bf00      	nop
 8000790:	0800cb8c 	.word	0x0800cb8c
 8000794:	0800cba0 	.word	0x0800cba0
 8000798:	0800cba8 	.word	0x0800cba8
 800079c:	0800cbc0 	.word	0x0800cbc0

080007a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f000 f993 	bl	8000adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40001000 	.word	0x40001000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>

080007ce <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000822:	2007      	movs	r0, #7
 8000824:	f000 fa4c 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_UART_MspInit+0x84>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12b      	bne.n	80008ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_UART_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_UART_MspInit+0x88>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800088e:	230c      	movs	r3, #12
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_UART_MspInit+0x8c>)
 80008aa:	f000 fa6d 	bl	8000d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <HAL_InitTick+0xe4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <HAL_InitTick+0xe4>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
 80008e4:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <HAL_InitTick+0xe4>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f0:	f107 0210 	add.w	r2, r7, #16
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fdfe 	bl	80034fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090a:	f002 fdcf 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 800090e:	6378      	str	r0, [r7, #52]	; 0x34
 8000910:	e004      	b.n	800091c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000912:	f002 fdcb 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8000916:	4603      	mov	r3, r0
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <HAL_InitTick+0xe8>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	0c9b      	lsrs	r3, r3, #18
 8000926:	3b01      	subs	r3, #1
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <HAL_InitTick+0xec>)
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <HAL_InitTick+0xf0>)
 800092e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <HAL_InitTick+0xec>)
 8000932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000936:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <HAL_InitTick+0xec>)
 800093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_InitTick+0xec>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <HAL_InitTick+0xec>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_InitTick+0xec>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000950:	4817      	ldr	r0, [pc, #92]	; (80009b0 <HAL_InitTick+0xec>)
 8000952:	f002 fe05 	bl	8003560 <HAL_TIM_Base_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800095c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11b      	bne.n	800099c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <HAL_InitTick+0xec>)
 8000966:	f002 fef5 	bl	8003754 <HAL_TIM_Base_Start_IT>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000974:	2b00      	cmp	r3, #0
 8000976:	d111      	bne.n	800099c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000978:	2036      	movs	r0, #54	; 0x36
 800097a:	f000 f9ed 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d808      	bhi.n	8000996 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	2036      	movs	r0, #54	; 0x36
 800098a:	f000 f9b9 	bl	8000d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_InitTick+0xf4>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	e002      	b.n	800099c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800099c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3738      	adds	r7, #56	; 0x38
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	431bde83 	.word	0x431bde83
 80009b0:	20000164 	.word	0x20000164
 80009b4:	40001000 	.word	0x40001000
 80009b8:	20000004 	.word	0x20000004

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <TIM6_DAC_IRQHandler+0x10>)
 80009ee:	f002 ff77 	bl	80038e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000164 	.word	0x20000164

080009fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <OTG_FS_IRQHandler+0x20>)
 8000a02:	f000 fe46 	bl	8001692 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2043      	movs	r0, #67	; 0x43
 8000a0c:	f000 f978 	bl	8000d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000a10:	2043      	movs	r0, #67	; 0x43
 8000a12:	f000 f9a1 	bl	8000d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20001690 	.word	0x20001690

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd7 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f00c f825 	bl	800cac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd87 	bl	8000588 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000a88:	0800ce98 	.word	0x0800ce98
  ldr r2, =_sbss
 8000a8c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000a90:	200161dc 	.word	0x200161dc

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f8fd 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff fefc 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fe8a 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200001ac 	.word	0x200001ac

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200001ac 	.word	0x200001ac

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff ffee 	bl	8000b04 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffde 	bl	8000b04 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b07      	cmp	r3, #7
 8000ccc:	d00f      	beq.n	8000cee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b06      	cmp	r3, #6
 8000cd2:	d00c      	beq.n	8000cee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d009      	beq.n	8000cee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d006      	beq.n	8000cee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d003      	beq.n	8000cee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ce6:	2190      	movs	r1, #144	; 0x90
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000cea:	f7ff fd70 	bl	80007ce <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff38 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	0800cbcc 	.word	0x0800cbcc

08000d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d903      	bls.n	8000d20 <HAL_NVIC_SetPriority+0x20>
 8000d18:	21a8      	movs	r1, #168	; 0xa8
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <HAL_NVIC_SetPriority+0x54>)
 8000d1c:	f7ff fd57 	bl	80007ce <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d903      	bls.n	8000d2e <HAL_NVIC_SetPriority+0x2e>
 8000d26:	21a9      	movs	r1, #169	; 0xa9
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <HAL_NVIC_SetPriority+0x54>)
 8000d2a:	f7ff fd50 	bl	80007ce <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2e:	f7ff ff3d 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	6978      	ldr	r0, [r7, #20]
 8000d3a:	f7ff ff8d 	bl	8000c58 <NVIC_EncodePriority>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff5c 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	0800cbcc 	.word	0x0800cbcc

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	da03      	bge.n	8000d72 <HAL_NVIC_EnableIRQ+0x1a>
 8000d6a:	21bc      	movs	r1, #188	; 0xbc
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d6e:	f7ff fd2e 	bl	80007ce <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff26 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	0800cbcc 	.word	0x0800cbcc

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a3d      	ldr	r2, [pc, #244]	; (8000e98 <HAL_GPIO_Init+0x110>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d02b      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a3c      	ldr	r2, [pc, #240]	; (8000e9c <HAL_GPIO_Init+0x114>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d027      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a3b      	ldr	r2, [pc, #236]	; (8000ea0 <HAL_GPIO_Init+0x118>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d023      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a3a      	ldr	r2, [pc, #232]	; (8000ea4 <HAL_GPIO_Init+0x11c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01f      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a39      	ldr	r2, [pc, #228]	; (8000ea8 <HAL_GPIO_Init+0x120>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01b      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a38      	ldr	r2, [pc, #224]	; (8000eac <HAL_GPIO_Init+0x124>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d017      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a37      	ldr	r2, [pc, #220]	; (8000eb0 <HAL_GPIO_Init+0x128>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <HAL_GPIO_Init+0x12c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00f      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <HAL_GPIO_Init+0x130>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00b      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <HAL_GPIO_Init+0x134>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a33      	ldr	r2, [pc, #204]	; (8000ec0 <HAL_GPIO_Init+0x138>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x76>
 8000df6:	21ac      	movs	r1, #172	; 0xac
 8000df8:	4832      	ldr	r0, [pc, #200]	; (8000ec4 <HAL_GPIO_Init+0x13c>)
 8000dfa:	f7ff fce8 	bl	80007ce <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x8c>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0c1b      	lsrs	r3, r3, #16
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x94>
 8000e14:	21ad      	movs	r1, #173	; 0xad
 8000e16:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <HAL_GPIO_Init+0x13c>)
 8000e18:	f7ff fcd9 	bl	80007ce <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d035      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d031      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b11      	cmp	r3, #17
 8000e32:	d02d      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d029      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b12      	cmp	r3, #18
 8000e42:	d025      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000e4c:	d020      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000e56:	d01b      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000e60:	d016      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000e6a:	d011      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000e74:	d00c      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x108>
 8000e88:	21ae      	movs	r1, #174	; 0xae
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <HAL_GPIO_Init+0x13c>)
 8000e8c:	f7ff fc9f 	bl	80007ce <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	e274      	b.n	8001380 <HAL_GPIO_Init+0x5f8>
 8000e96:	bf00      	nop
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40021800 	.word	0x40021800
 8000eb4:	40021c00 	.word	0x40021c00
 8000eb8:	40022000 	.word	0x40022000
 8000ebc:	40022400 	.word	0x40022400
 8000ec0:	40022800 	.word	0x40022800
 8000ec4:	0800cc08 	.word	0x0800cc08
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 824a 	bne.w	800137a <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d005      	beq.n	8000efe <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d144      	bne.n	8000f88 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00f      	beq.n	8000f26 <HAL_GPIO_Init+0x19e>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d00b      	beq.n	8000f26 <HAL_GPIO_Init+0x19e>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x19e>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x19e>
 8000f1e:	21c0      	movs	r1, #192	; 0xc0
 8000f20:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x260>)
 8000f22:	f7ff fc54 	bl	80007ce <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d02b      	beq.n	8000fec <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00b      	beq.n	8000fb4 <HAL_GPIO_Init+0x22c>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d007      	beq.n	8000fb4 <HAL_GPIO_Init+0x22c>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x22c>
 8000fac:	21d1      	movs	r1, #209	; 0xd1
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <HAL_GPIO_Init+0x260>)
 8000fb0:	f7ff fc0d 	bl	80007ce <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x264>
 8000fe6:	bf00      	nop
 8000fe8:	0800cc08 	.word	0x0800cc08
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	f040 80df 	bne.w	80011b8 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80b6 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b09      	cmp	r3, #9
 800100a:	f000 80b1 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 80ac 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a7 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80a2 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 809d 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b01      	cmp	r3, #1
 800103c:	f000 8098 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	2b01      	cmp	r3, #1
 8001046:	f000 8093 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b02      	cmp	r3, #2
 8001050:	f000 808e 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b02      	cmp	r3, #2
 800105a:	f000 8089 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b02      	cmp	r3, #2
 8001064:	f000 8084 	beq.w	8001170 <HAL_GPIO_Init+0x3e8>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d07f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b04      	cmp	r3, #4
 8001076:	d07b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d077      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d073      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d06f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d06b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b09      	cmp	r3, #9
 800109e:	d067      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b06      	cmp	r3, #6
 80010a6:	d063      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d05f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b07      	cmp	r3, #7
 80010b6:	d05b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b07      	cmp	r3, #7
 80010be:	d057      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b07      	cmp	r3, #7
 80010c6:	d053      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d04f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d04b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d047      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d043      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	d03f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d03b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b0a      	cmp	r3, #10
 80010fe:	d037      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b0b      	cmp	r3, #11
 8001106:	d033      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	2b0c      	cmp	r3, #12
 800110e:	d02f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	2b0c      	cmp	r3, #12
 8001116:	d02b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b0d      	cmp	r3, #13
 800111e:	d027      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d023      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b05      	cmp	r3, #5
 800112e:	d01f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d01b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2b08      	cmp	r3, #8
 800114e:	d00f      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d00b      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	2b06      	cmp	r3, #6
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	2b0e      	cmp	r3, #14
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x3e8>
 8001168:	21de      	movs	r1, #222	; 0xde
 800116a:	488a      	ldr	r0, [pc, #552]	; (8001394 <HAL_GPIO_Init+0x60c>)
 800116c:	f7ff fb2f 	bl	80007ce <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80c0 	beq.w	800137a <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_GPIO_Init+0x610>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a65      	ldr	r2, [pc, #404]	; (8001398 <HAL_GPIO_Init+0x610>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b63      	ldr	r3, [pc, #396]	; (8001398 <HAL_GPIO_Init+0x610>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a61      	ldr	r2, [pc, #388]	; (800139c <HAL_GPIO_Init+0x614>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <HAL_GPIO_Init+0x618>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d037      	beq.n	80012b2 <HAL_GPIO_Init+0x52a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a57      	ldr	r2, [pc, #348]	; (80013a4 <HAL_GPIO_Init+0x61c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d031      	beq.n	80012ae <HAL_GPIO_Init+0x526>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a56      	ldr	r2, [pc, #344]	; (80013a8 <HAL_GPIO_Init+0x620>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d02b      	beq.n	80012aa <HAL_GPIO_Init+0x522>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a55      	ldr	r2, [pc, #340]	; (80013ac <HAL_GPIO_Init+0x624>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d025      	beq.n	80012a6 <HAL_GPIO_Init+0x51e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a54      	ldr	r2, [pc, #336]	; (80013b0 <HAL_GPIO_Init+0x628>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01f      	beq.n	80012a2 <HAL_GPIO_Init+0x51a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a53      	ldr	r2, [pc, #332]	; (80013b4 <HAL_GPIO_Init+0x62c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x516>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_GPIO_Init+0x630>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x512>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_GPIO_Init+0x634>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x50e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a50      	ldr	r2, [pc, #320]	; (80013c0 <HAL_GPIO_Init+0x638>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x50a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x63c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x506>
 800128a:	2309      	movs	r3, #9
 800128c:	e012      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 800128e:	230a      	movs	r3, #10
 8001290:	e010      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 8001292:	2308      	movs	r3, #8
 8001294:	e00e      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 8001296:	2307      	movs	r3, #7
 8001298:	e00c      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 800129a:	2306      	movs	r3, #6
 800129c:	e00a      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 800129e:	2305      	movs	r3, #5
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 80012a2:	2304      	movs	r3, #4
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x52c>
 80012b2:	2300      	movs	r3, #0
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c4:	4935      	ldr	r1, [pc, #212]	; (800139c <HAL_GPIO_Init+0x614>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <HAL_GPIO_Init+0x640>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a34      	ldr	r2, [pc, #208]	; (80013c8 <HAL_GPIO_Init+0x640>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <HAL_GPIO_Init+0x640>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <HAL_GPIO_Init+0x640>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <HAL_GPIO_Init+0x640>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_GPIO_Init+0x640>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_GPIO_Init+0x640>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_GPIO_Init+0x640>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	f67f ada0 	bls.w	8000ec8 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	0800cc08 	.word	0x0800cc08
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40021400 	.word	0x40021400
 80013b8:	40021800 	.word	0x40021800
 80013bc:	40021c00 	.word	0x40021c00
 80013c0:	40022000 	.word	0x40022000
 80013c4:	40022400 	.word	0x40022400
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	b08f      	sub	sp, #60	; 0x3c
 80013d0:	af0a      	add	r7, sp, #40	; 0x28
 80013d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e11d      	b.n	800161a <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e6:	d008      	beq.n	80013fa <HAL_PCD_Init+0x2e>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a8d      	ldr	r2, [pc, #564]	; (8001624 <HAL_PCD_Init+0x258>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_PCD_Init+0x2e>
 80013f2:	2187      	movs	r1, #135	; 0x87
 80013f4:	488c      	ldr	r0, [pc, #560]	; (8001628 <HAL_PCD_Init+0x25c>)
 80013f6:	f7ff f9ea 	bl	80007ce <assert_failed>

  USBx = hpcd->Instance;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d106      	bne.n	800141a <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f006 fdfb 	bl	8008010 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f8e2 	bl	8004602 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	687e      	ldr	r6, [r7, #4]
 8001446:	466d      	mov	r5, sp
 8001448:	f106 0410 	add.w	r4, r6, #16
 800144c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001458:	e885 0003 	stmia.w	r5, {r0, r1}
 800145c:	1d33      	adds	r3, r6, #4
 800145e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001460:	6838      	ldr	r0, [r7, #0]
 8001462:	f002 ffb9 	bl	80043d8 <USB_CoreInit>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0d0      	b.n	800161a <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f8d0 	bl	8004624 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e04a      	b.n	8001520 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	333d      	adds	r3, #61	; 0x3d
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	333c      	adds	r3, #60	; 0x3c
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	b298      	uxth	r0, r3
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3344      	adds	r3, #68	; 0x44
 80014c6:	4602      	mov	r2, r0
 80014c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	3340      	adds	r3, #64	; 0x40
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3348      	adds	r3, #72	; 0x48
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	334c      	adds	r3, #76	; 0x4c
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3354      	adds	r3, #84	; 0x54
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3301      	adds	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3af      	bcc.n	800148a <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e044      	b.n	80015ba <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3b5      	bcc.n	8001530 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	687e      	ldr	r6, [r7, #4]
 80015cc:	466d      	mov	r5, sp
 80015ce:	f106 0410 	add.w	r4, r6, #16
 80015d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015de:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e2:	1d33      	adds	r3, r6, #4
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f003 f868 	bl	80046bc <USB_DevInit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00d      	b.n	800161a <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f004 f9b7 	bl	8005986 <USB_DevDisconnect>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001622:	bf00      	nop
 8001624:	40040000 	.word	0x40040000
 8001628:	0800cc44 	.word	0x0800cc44

0800162c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_PCD_Start+0x1c>
 8001644:	2302      	movs	r3, #2
 8001646:	e020      	b.n	800168a <HAL_PCD_Start+0x5e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b01      	cmp	r3, #1
 8001656:	d109      	bne.n	800166c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 ffb5 	bl	80045e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f004 f962 	bl	8005944 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001692:	b590      	push	{r4, r7, lr}
 8001694:	b08d      	sub	sp, #52	; 0x34
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fa20 	bl	8005aee <USB_GetMode>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 848a 	bne.w	8001fca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f984 	bl	80059c8 <USB_ReadInterrupts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8480 	beq.w	8001fc8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 f971 	bl	80059c8 <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d107      	bne.n	8001700 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f002 0202 	and.w	r2, r2, #2
 80016fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f004 f95f 	bl	80059c8 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b10      	cmp	r3, #16
 8001712:	d161      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0210 	bic.w	r2, r2, #16
 8001722:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f003 020f 	and.w	r2, r3, #15
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	0c5b      	lsrs	r3, r3, #17
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	2b02      	cmp	r3, #2
 800174e:	d124      	bne.n	800179a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d035      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	6a38      	ldr	r0, [r7, #32]
 8001770:	f003 ff96 	bl	80056a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001780:	441a      	add	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	6a1a      	ldr	r2, [r3, #32]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001792:	441a      	add	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	621a      	str	r2, [r3, #32]
 8001798:	e016      	b.n	80017c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	0c5b      	lsrs	r3, r3, #17
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d110      	bne.n	80017c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017ac:	2208      	movs	r2, #8
 80017ae:	4619      	mov	r1, r3
 80017b0:	6a38      	ldr	r0, [r7, #32]
 80017b2:	f003 ff75 	bl	80056a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017c2:	441a      	add	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0210 	orr.w	r2, r2, #16
 80017d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 f8f3 	bl	80059c8 <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ec:	f040 80a7 	bne.w	800193e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 f8f8 	bl	80059ee <USB_ReadDevAllOutEpInterrupt>
 80017fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001800:	e099      	b.n	8001936 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 808e 	beq.w	800192a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f004 f91c 	bl	8005a56 <USB_ReadDevOutEPInterrupt>
 800181e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4413      	add	r3, r2
 8001832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001836:	461a      	mov	r2, r3
 8001838:	2301      	movs	r3, #1
 800183a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800183c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fec2 	bl	80025c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185a:	461a      	mov	r2, r3
 800185c:	2308      	movs	r3, #8
 800185e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 ff98 	bl	8002798 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187e:	461a      	mov	r2, r3
 8001880:	2310      	movs	r3, #16
 8001882:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d030      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b80      	cmp	r3, #128	; 0x80
 8001898:	d109      	bne.n	80018ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	3304      	adds	r3, #4
 80018c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	78db      	ldrb	r3, [r3, #3]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2200      	movs	r2, #0
 80018d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f006 fc9f 	bl	800821c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ea:	461a      	mov	r2, r3
 80018ec:	2302      	movs	r3, #2
 80018ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001906:	461a      	mov	r2, r3
 8001908:	2320      	movs	r3, #32
 800190a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001922:	461a      	mov	r2, r3
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001928:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	3301      	adds	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f af62 	bne.w	8001802 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f004 f840 	bl	80059c8 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001952:	f040 80db 	bne.w	8001b0c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f861 	bl	8005a22 <USB_ReadDevAllInEpInterrupt>
 8001960:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001966:	e0cd      	b.n	8001b04 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80c2 	beq.w	8001af8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f004 f887 	bl	8005a92 <USB_ReadDevInEPInterrupt>
 8001984:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d057      	beq.n	8001a40 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	2201      	movs	r2, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69f9      	ldr	r1, [r7, #28]
 80019ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019b0:	4013      	ands	r3, r2
 80019b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c0:	461a      	mov	r2, r3
 80019c2:	2301      	movs	r3, #1
 80019c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d132      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	334c      	adds	r3, #76	; 0x4c
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4403      	add	r3, r0
 80019ee:	3348      	adds	r3, #72	; 0x48
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4419      	add	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4403      	add	r3, r0
 8001a02:	334c      	adds	r3, #76	; 0x4c
 8001a04:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d113      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x3a2>
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3354      	adds	r3, #84	; 0x54
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2101      	movs	r1, #1
 8001a30:	f004 f88e 	bl	8005b50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f006 fb69 	bl	8008112 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a56:	461a      	mov	r2, r3
 8001a58:	2308      	movs	r3, #8
 8001a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a72:	461a      	mov	r2, r3
 8001a74:	2310      	movs	r3, #16
 8001a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2340      	movs	r3, #64	; 0x40
 8001a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d023      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aa0:	6a38      	ldr	r0, [r7, #32]
 8001aa2:	f002 ff6f 	bl	8004984 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	3338      	adds	r3, #56	; 0x38
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	78db      	ldrb	r3, [r3, #3]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f006 fbb6 	bl	8008240 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fcdb 	bl	80024ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f af2e 	bne.w	8001968 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 ff59 	bl	80059c8 <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b20:	d122      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fec2 	bl	80028d4 <HAL_PCDEx_LPM_Callback>
 8001b50:	e002      	b.n	8001b58 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f006 fb54 	bl	8008200 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 ff2b 	bl	80059c8 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b7c:	d112      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f006 fb10 	bl	80081b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ba2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 ff0d 	bl	80059c8 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb8:	f040 80b7 	bne.w	8001d2a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fed4 	bl	8004984 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be0:	e046      	b.n	8001c70 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c06:	0151      	lsls	r1, r2, #5
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	440a      	add	r2, r1
 8001c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c22:	461a      	mov	r2, r3
 8001c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c3a:	0151      	lsls	r1, r2, #5
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	440a      	add	r2, r1
 8001c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5a:	0151      	lsls	r1, r2, #5
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	440a      	add	r2, r1
 8001c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d3b3      	bcc.n	8001be2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca6:	f043 030b 	orr.w	r3, r3, #11
 8001caa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cbc:	f043 030b 	orr.w	r3, r3, #11
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	e015      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cea:	f043 030b 	orr.w	r3, r3, #11
 8001cee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d14:	461a      	mov	r2, r3
 8001d16:	f003 ff1b 	bl	8005b50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fe4a 	bl	80059c8 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3e:	d124      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fee0 	bl	8005b0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fe95 	bl	8004a7e <USB_GetDevSpeed>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681c      	ldr	r4, [r3, #0]
 8001d60:	f001 fb98 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 8001d64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f002 fb94 	bl	800449c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f006 f9f4 	bl	8008162 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fe1a 	bl	80059c8 <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d10a      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f006 f9d1 	bl	8008146 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f002 0208 	and.w	r2, r2, #8
 8001db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fe05 	bl	80059c8 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc4:	2b80      	cmp	r3, #128	; 0x80
 8001dc6:	d122      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd8:	e014      	b.n	8001e04 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fb27 	bl	800244c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3301      	adds	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3e5      	bcc.n	8001dda <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fdd8 	bl	80059c8 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e22:	d13b      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e24:	2301      	movs	r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	e02b      	b.n	8001e82 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3340      	adds	r3, #64	; 0x40
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d115      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da12      	bge.n	8001e7c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	333f      	adds	r3, #63	; 0x3f
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fae8 	bl	800244c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3301      	adds	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3ce      	bcc.n	8001e2a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fd91 	bl	80059c8 <USB_ReadInterrupts>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eb0:	d155      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	e045      	b.n	8001f44 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d12e      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ee0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da2b      	bge.n	8001f3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ef2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d121      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3a:	6053      	str	r3, [r2, #4]
            break;
 8001f3c:	e007      	b.n	8001f4e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d3b4      	bcc.n	8001eb8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fd30 	bl	80059c8 <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f72:	d10a      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f006 f975 	bl	8008264 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fd1a 	bl	80059c8 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d115      	bne.n	8001fca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f006 f965 	bl	8008280 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	e000      	b.n	8001fca <HAL_PCD_IRQHandler+0x938>
      return;
 8001fc8:	bf00      	nop
    }
  }
}
 8001fca:	3734      	adds	r7, #52	; 0x34
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd90      	pop	{r4, r7, pc}

08001fd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_PCD_SetAddress+0x1a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e013      	b.n	8002012 <HAL_PCD_SetAddress+0x42>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fc78 	bl	80058f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	4608      	mov	r0, r1
 8002024:	4611      	mov	r1, r2
 8002026:	461a      	mov	r2, r3
 8002028:	4603      	mov	r3, r0
 800202a:	70fb      	strb	r3, [r7, #3]
 800202c:	460b      	mov	r3, r1
 800202e:	803b      	strh	r3, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da0f      	bge.n	8002060 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	705a      	strb	r2, [r3, #1]
 800205e:	e00f      	b.n	8002080 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800208c:	883a      	ldrh	r2, [r7, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	78ba      	ldrb	r2, [r7, #2]
 8002096:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020aa:	78bb      	ldrb	r3, [r7, #2]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d102      	bne.n	80020b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_PCD_EP_Open+0xaa>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e00e      	b.n	80020e2 <HAL_PCD_EP_Open+0xc8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 fcf8 	bl	8004ac8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80020e0:	7afb      	ldrb	r3, [r7, #11]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da0f      	bge.n	800211e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 020f 	and.w	r2, r3, #15
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	3338      	adds	r3, #56	; 0x38
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	3304      	adds	r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	705a      	strb	r2, [r3, #1]
 800211c:	e00f      	b.n	800213e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_EP_Close+0x6e>
 8002154:	2302      	movs	r3, #2
 8002156:	e00e      	b.n	8002176 <HAL_PCD_EP_Close+0x8c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fd36 	bl	8004bd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2200      	movs	r2, #0
 80021be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	f003 f815 	bl	8005220 <USB_EP0StartXfer>
 80021f6:	e008      	b.n	800220a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	6979      	ldr	r1, [r7, #20]
 8002206:	f002 fdc3 	bl	8004d90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 020f 	and.w	r2, r3, #15
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3338      	adds	r3, #56	; 0x38
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2200      	movs	r2, #0
 800227c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2201      	movs	r2, #1
 8002282:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	b2da      	uxtb	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800229e:	7afb      	ldrb	r3, [r7, #11]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6979      	ldr	r1, [r7, #20]
 80022b6:	f002 ffb3 	bl	8005220 <USB_EP0StartXfer>
 80022ba:	e008      	b.n	80022ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	6979      	ldr	r1, [r7, #20]
 80022ca:	f002 fd61 	bl	8004d90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 020f 	and.w	r2, r3, #15
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d901      	bls.n	80022f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e050      	b.n	8002398 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da0f      	bge.n	800231e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 020f 	and.w	r2, r3, #15
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	3338      	adds	r3, #56	; 0x38
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	705a      	strb	r2, [r3, #1]
 800231c:	e00d      	b.n	800233a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	b2da      	uxtb	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_PCD_EP_SetStall+0x82>
 8002356:	2302      	movs	r3, #2
 8002358:	e01e      	b.n	8002398 <HAL_PCD_EP_SetStall+0xc0>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 f9f1 	bl	8005750 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	b2d9      	uxtb	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002388:	461a      	mov	r2, r3
 800238a:	f003 fbe1 	bl	8005b50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d901      	bls.n	80023be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e042      	b.n	8002444 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da0f      	bge.n	80023e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	3338      	adds	r3, #56	; 0x38
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	705a      	strb	r2, [r3, #1]
 80023e4:	e00f      	b.n	8002406 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_PCD_EP_ClrStall+0x86>
 8002422:	2302      	movs	r3, #2
 8002424:	e00e      	b.n	8002444 <HAL_PCD_EP_ClrStall+0xa4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 f9f9 	bl	800582c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800245c:	2b00      	cmp	r3, #0
 800245e:	da0c      	bge.n	800247a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	3338      	adds	r3, #56	; 0x38
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	3304      	adds	r3, #4
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e00c      	b.n	8002494 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 f818 	bl	80054d0 <USB_EPStopXfer>
 80024a0:	4603      	mov	r3, r0
 80024a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024a4:	7afb      	ldrb	r3, [r7, #11]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b08a      	sub	sp, #40	; 0x28
 80024b2:	af02      	add	r7, sp, #8
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	3338      	adds	r3, #56	; 0x38
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d901      	bls.n	80024e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06c      	b.n	80025c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d902      	bls.n	8002502 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3303      	adds	r3, #3
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800250a:	e02b      	b.n	8002564 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	429a      	cmp	r2, r3
 8002520:	d902      	bls.n	8002528 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	3303      	adds	r3, #3
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6919      	ldr	r1, [r3, #16]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002540:	b2db      	uxtb	r3, r3
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4603      	mov	r3, r0
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f003 f86c 	bl	8005624 <USB_WritePacket>

    ep->xfer_buff  += len;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	441a      	add	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	441a      	add	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	b29b      	uxth	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	429a      	cmp	r2, r3
 8002578:	d809      	bhi.n	800258e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002582:	429a      	cmp	r2, r3
 8002584:	d203      	bcs.n	800258e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1be      	bne.n	800250c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	429a      	cmp	r2, r3
 8002598:	d811      	bhi.n	80025be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	2201      	movs	r2, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	6939      	ldr	r1, [r7, #16]
 80025b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025ba:	4013      	ands	r3, r2
 80025bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	333c      	adds	r3, #60	; 0x3c
 80025e0:	3304      	adds	r3, #4
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d17b      	bne.n	80026f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d015      	beq.n	8002634 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	4a61      	ldr	r2, [pc, #388]	; (8002790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	f240 80b9 	bls.w	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80b3 	beq.w	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262a:	461a      	mov	r2, r3
 800262c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002630:	6093      	str	r3, [r2, #8]
 8002632:	e0a7      	b.n	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264a:	461a      	mov	r2, r3
 800264c:	2320      	movs	r3, #32
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	e098      	b.n	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 8093 	bne.w	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4a4b      	ldr	r2, [pc, #300]	; (8002790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d90f      	bls.n	8002686 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002682:	6093      	str	r3, [r2, #8]
 8002684:	e07e      	b.n	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	3304      	adds	r3, #4
 800269a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	440b      	add	r3, r1
 80026a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d114      	bne.n	80026e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026d0:	461a      	mov	r2, r3
 80026d2:	2101      	movs	r1, #1
 80026d4:	f003 fa3c 	bl	8005b50 <USB_EP0_OutStart>
 80026d8:	e006      	b.n	80026e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	441a      	add	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f005 fcf4 	bl	80080dc <HAL_PCD_DataOutStageCallback>
 80026f4:	e046      	b.n	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d124      	bne.n	8002748 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	e032      	b.n	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002734:	461a      	mov	r2, r3
 8002736:	2320      	movs	r3, #32
 8002738:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f005 fccb 	bl	80080dc <HAL_PCD_DataOutStageCallback>
 8002746:	e01d      	b.n	8002784 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d114      	bne.n	8002778 <PCD_EP_OutXfrComplete_int+0x1b0>
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d108      	bne.n	8002778 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002770:	461a      	mov	r2, r3
 8002772:	2100      	movs	r1, #0
 8002774:	f003 f9ec 	bl	8005b50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f005 fcac 	bl	80080dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	4f54300a 	.word	0x4f54300a
 8002794:	4f54310a 	.word	0x4f54310a

08002798 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	333c      	adds	r3, #60	; 0x3c
 80027b0:	3304      	adds	r3, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a15      	ldr	r2, [pc, #84]	; (8002820 <PCD_EP_OutSetupPacket_int+0x88>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d90e      	bls.n	80027ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f005 fc63 	bl	80080b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <PCD_EP_OutSetupPacket_int+0x88>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d90c      	bls.n	8002814 <PCD_EP_OutSetupPacket_int+0x7c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d108      	bne.n	8002814 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800280c:	461a      	mov	r2, r3
 800280e:	2101      	movs	r1, #1
 8002810:	f003 f99e 	bl	8005b50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	4f54300a 	.word	0x4f54300a

08002824 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
 8002830:	4613      	mov	r3, r2
 8002832:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d107      	bne.n	8002852 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002842:	883b      	ldrh	r3, [r7, #0]
 8002844:	0419      	lsls	r1, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	430a      	orrs	r2, r1
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
 8002850:	e028      	b.n	80028a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4413      	add	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	e00d      	b.n	8002882 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4413      	add	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	3301      	adds	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	3b01      	subs	r3, #1
 8002888:	429a      	cmp	r2, r3
 800288a:	d3ec      	bcc.n	8002866 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800288c:	883b      	ldrh	r3, [r7, #0]
 800288e:	0418      	lsls	r0, r3, #16
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	3b01      	subs	r3, #1
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	4302      	orrs	r2, r0
 800289c:	3340      	adds	r3, #64	; 0x40
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e314      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	d903      	bls.n	800290e <HAL_RCC_OscConfig+0x22>
 8002906:	21e6      	movs	r1, #230	; 0xe6
 8002908:	4897      	ldr	r0, [pc, #604]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 800290a:	f7fd ff60 	bl	80007ce <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8088 	beq.w	8002a2c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <HAL_RCC_OscConfig+0x54>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d008      	beq.n	8002940 <HAL_RCC_OscConfig+0x54>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002936:	d003      	beq.n	8002940 <HAL_RCC_OscConfig+0x54>
 8002938:	21eb      	movs	r1, #235	; 0xeb
 800293a:	488b      	ldr	r0, [pc, #556]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 800293c:	f7fd ff47 	bl	80007ce <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002940:	4b8a      	ldr	r3, [pc, #552]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b04      	cmp	r3, #4
 800294a:	d00c      	beq.n	8002966 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294c:	4b87      	ldr	r3, [pc, #540]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002954:	2b08      	cmp	r3, #8
 8002956:	d112      	bne.n	800297e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002958:	4b84      	ldr	r3, [pc, #528]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002964:	d10b      	bne.n	800297e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002966:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d05b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x13e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d157      	bne.n	8002a2a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e2d4      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0xaa>
 8002988:	4b78      	ldr	r3, [pc, #480]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a77      	ldr	r2, [pc, #476]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e01d      	b.n	80029d2 <HAL_RCC_OscConfig+0xe6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0xce>
 80029a0:	4b72      	ldr	r3, [pc, #456]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a71      	ldr	r2, [pc, #452]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b6f      	ldr	r3, [pc, #444]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0xe6>
 80029ba:	4b6c      	ldr	r3, [pc, #432]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a68      	ldr	r2, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d013      	beq.n	8002a02 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe f893 	bl	8000b04 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e2:	f7fe f88f 	bl	8000b04 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e299      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f4:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0xf6>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe f87f 	bl	8000b04 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0a:	f7fe f87b 	bl	8000b04 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b64      	cmp	r3, #100	; 0x64
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e285      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x11e>
 8002a28:	e000      	b.n	8002a2c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d079      	beq.n	8002b2c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_OscConfig+0x166>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d004      	beq.n	8002a52 <HAL_RCC_OscConfig+0x166>
 8002a48:	f240 111d 	movw	r1, #285	; 0x11d
 8002a4c:	4846      	ldr	r0, [pc, #280]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	f7fd febe 	bl	80007ce <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b1f      	cmp	r3, #31
 8002a58:	d904      	bls.n	8002a64 <HAL_RCC_OscConfig+0x178>
 8002a5a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002a5e:	4842      	ldr	r0, [pc, #264]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a60:	f7fd feb5 	bl	80007ce <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a70:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d11c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d116      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a88:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1b4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e243      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	492f      	ldr	r1, [pc, #188]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab4:	e03a      	b.n	8002b2c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d020      	beq.n	8002b00 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <HAL_RCC_OscConfig+0x284>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f81e 	bl	8000b04 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002acc:	f7fe f81a 	bl	8000b04 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e224      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	491c      	ldr	r1, [pc, #112]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
 8002afe:	e015      	b.n	8002b2c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_RCC_OscConfig+0x284>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fd fffd 	bl	8000b04 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fd fff9 	bl	8000b04 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e203      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d045      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_OscConfig+0x266>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d004      	beq.n	8002b52 <HAL_RCC_OscConfig+0x266>
 8002b48:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002b4c:	4806      	ldr	r0, [pc, #24]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	f7fd fe3e 	bl	80007ce <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01e      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fd ffd0 	bl	8000b04 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	e010      	b.n	8002b8a <HAL_RCC_OscConfig+0x29e>
 8002b68:	0800cc7c 	.word	0x0800cc7c
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	42470000 	.word	0x42470000
 8002b74:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b78:	f7fd ffc4 	bl	8000b04 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1ce      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x28c>
 8002b96:	e015      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b98:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x41c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fd ffb1 	bl	8000b04 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fd ffad 	bl	8000b04 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1b7      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b52      	ldr	r3, [pc, #328]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80b0 	beq.w	8002d32 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x30c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x30c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d004      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x30c>
 8002bee:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002bf2:	4846      	ldr	r0, [pc, #280]	; (8002d0c <HAL_RCC_OscConfig+0x420>)
 8002bf4:	f7fd fdeb 	bl	80007ce <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10f      	bne.n	8002c24 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6413      	str	r3, [r2, #64]	; 0x40
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCC_OscConfig+0x424>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d118      	bne.n	8002c62 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_OscConfig+0x424>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_RCC_OscConfig+0x424>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3c:	f7fd ff62 	bl	8000b04 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fd ff5e 	bl	8000b04 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e168      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_RCC_OscConfig+0x424>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x38c>
 8002c6a:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	e01c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x3c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3ae>
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x3c6>
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fd ff23 	bl	8000b04 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fd ff1f 	bl	8000b04 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e127      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCC_OscConfig+0x418>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x3d6>
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fd ff0d 	bl	8000b04 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	e012      	b.n	8002d14 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fd ff09 	bl	8000b04 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d909      	bls.n	8002d14 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e111      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	42470e80 	.word	0x42470e80
 8002d0c:	0800cc7c 	.word	0x0800cc7c
 8002d10:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	4b86      	ldr	r3, [pc, #536]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e6      	bne.n	8002cee <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a81      	ldr	r2, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x468>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d008      	beq.n	8002d54 <HAL_RCC_OscConfig+0x468>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d004      	beq.n	8002d54 <HAL_RCC_OscConfig+0x468>
 8002d4a:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002d4e:	4879      	ldr	r0, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0x648>)
 8002d50:	f7fd fd3d 	bl	80007ce <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80e4 	beq.w	8002f26 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5e:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	f000 80a5 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	f040 8089 	bne.w	8002e88 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4a6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d86:	d004      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4a6>
 8002d88:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002d8c:	4869      	ldr	r0, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x648>)
 8002d8e:	f7fd fd1e 	bl	80007ce <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	2b3f      	cmp	r3, #63	; 0x3f
 8002d98:	d904      	bls.n	8002da4 <HAL_RCC_OscConfig+0x4b8>
 8002d9a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002d9e:	4865      	ldr	r0, [pc, #404]	; (8002f34 <HAL_RCC_OscConfig+0x648>)
 8002da0:	f7fd fd15 	bl	80007ce <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b31      	cmp	r3, #49	; 0x31
 8002daa:	d904      	bls.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002db4:	d904      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x4d4>
 8002db6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002dba:	485e      	ldr	r0, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x648>)
 8002dbc:	f7fd fd07 	bl	80007ce <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d010      	beq.n	8002dea <HAL_RCC_OscConfig+0x4fe>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d00c      	beq.n	8002dea <HAL_RCC_OscConfig+0x4fe>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	2b06      	cmp	r3, #6
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_OscConfig+0x4fe>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d004      	beq.n	8002dea <HAL_RCC_OscConfig+0x4fe>
 8002de0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002de4:	4853      	ldr	r0, [pc, #332]	; (8002f34 <HAL_RCC_OscConfig+0x648>)
 8002de6:	f7fd fcf2 	bl	80007ce <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d903      	bls.n	8002dfa <HAL_RCC_OscConfig+0x50e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	d904      	bls.n	8002e04 <HAL_RCC_OscConfig+0x518>
 8002dfa:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002dfe:	484d      	ldr	r0, [pc, #308]	; (8002f34 <HAL_RCC_OscConfig+0x648>)
 8002e00:	f7fd fce5 	bl	80007ce <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x64c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fd fe7b 	bl	8000b04 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fd fe77 	bl	8000b04 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e081      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	019b      	lsls	r3, r3, #6
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	4936      	ldr	r1, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_OscConfig+0x64c>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fd fe50 	bl	8000b04 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fd fe4c 	bl	8000b04 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e056      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x57c>
 8002e86:	e04e      	b.n	8002f26 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_OscConfig+0x64c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fd fe39 	bl	8000b04 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fd fe35 	bl	8000b04 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e03f      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5aa>
 8002eb4:	e037      	b.n	8002f26 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e032      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x644>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d028      	beq.n	8002f22 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d121      	bne.n	8002f22 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d11a      	bne.n	8002f22 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d111      	bne.n	8002f22 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	0800cc7c 	.word	0x0800cc7c
 8002f38:	42470060 	.word	0x42470060

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e18c      	b.n	800326a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x24>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b0f      	cmp	r3, #15
 8002f5e:	d904      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x2e>
 8002f60:	f240 215a 	movw	r1, #602	; 0x25a
 8002f64:	4887      	ldr	r0, [pc, #540]	; (8003184 <HAL_RCC_ClockConfig+0x248>)
 8002f66:	f7fd fc32 	bl	80007ce <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d031      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d02e      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d02b      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d025      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d022      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d01f      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b07      	cmp	r3, #7
 8002f98:	d01c      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d019      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b09      	cmp	r3, #9
 8002fa4:	d016      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b0a      	cmp	r3, #10
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b0b      	cmp	r3, #11
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b0d      	cmp	r3, #13
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b0e      	cmp	r3, #14
 8002fc2:	d007      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	d004      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x98>
 8002fca:	f240 215b 	movw	r1, #603	; 0x25b
 8002fce:	486d      	ldr	r0, [pc, #436]	; (8003184 <HAL_RCC_ClockConfig+0x248>)
 8002fd0:	f7fd fbfd 	bl	80007ce <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b6c      	ldr	r3, [pc, #432]	; (8003188 <HAL_RCC_ClockConfig+0x24c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d90c      	bls.n	8002ffc <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b69      	ldr	r3, [pc, #420]	; (8003188 <HAL_RCC_ClockConfig+0x24c>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b67      	ldr	r3, [pc, #412]	; (8003188 <HAL_RCC_ClockConfig+0x24c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e136      	b.n	800326a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d049      	beq.n	800309c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003014:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 800301a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800301e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800302c:	4b57      	ldr	r3, [pc, #348]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a56      	ldr	r2, [pc, #344]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 8003032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d024      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b90      	cmp	r3, #144	; 0x90
 800304e:	d01c      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2ba0      	cmp	r3, #160	; 0xa0
 8003056:	d018      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2bb0      	cmp	r3, #176	; 0xb0
 800305e:	d014      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2bc0      	cmp	r3, #192	; 0xc0
 8003066:	d010      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2bd0      	cmp	r3, #208	; 0xd0
 800306e:	d00c      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2be0      	cmp	r3, #224	; 0xe0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2bf0      	cmp	r3, #240	; 0xf0
 800307e:	d004      	beq.n	800308a <HAL_RCC_ClockConfig+0x14e>
 8003080:	f240 217e 	movw	r1, #638	; 0x27e
 8003084:	483f      	ldr	r0, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x248>)
 8003086:	f7fd fba2 	bl	80007ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308a:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	493d      	ldr	r1, [pc, #244]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d059      	beq.n	800315c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x196>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d00c      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x196>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x196>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d004      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x196>
 80030c8:	f240 2185 	movw	r1, #645	; 0x285
 80030cc:	482d      	ldr	r0, [pc, #180]	; (8003184 <HAL_RCC_ClockConfig+0x248>)
 80030ce:	f7fd fb7e 	bl	80007ce <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d119      	bne.n	800311a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0bf      	b.n	800326a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0af      	b.n	800326a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0a7      	b.n	800326a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4919      	ldr	r1, [pc, #100]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fd fcea 	bl	8000b04 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fd fce6 	bl	8000b04 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e08f      	b.n	800326a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x24c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d212      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_RCC_ClockConfig+0x24c>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_ClockConfig+0x24c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d007      	beq.n	8003190 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e072      	b.n	800326a <HAL_RCC_ClockConfig+0x32e>
 8003184:	0800cc7c 	.word	0x0800cc7c
 8003188:	40023c00 	.word	0x40023c00
 800318c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d025      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d018      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x29a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ac:	d013      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x29a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031b6:	d00e      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x29a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80031c0:	d009      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x29a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80031ca:	d004      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x29a>
 80031cc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80031d0:	4828      	ldr	r0, [pc, #160]	; (8003274 <HAL_RCC_ClockConfig+0x338>)
 80031d2:	f7fd fafc 	bl	80007ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d6:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_RCC_ClockConfig+0x33c>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4925      	ldr	r1, [pc, #148]	; (8003278 <HAL_RCC_ClockConfig+0x33c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d026      	beq.n	8003242 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d018      	beq.n	800322e <HAL_RCC_ClockConfig+0x2f2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	d013      	beq.n	800322e <HAL_RCC_ClockConfig+0x2f2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800320e:	d00e      	beq.n	800322e <HAL_RCC_ClockConfig+0x2f2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x2f2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003222:	d004      	beq.n	800322e <HAL_RCC_ClockConfig+0x2f2>
 8003224:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003228:	4812      	ldr	r0, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x338>)
 800322a:	f7fd fad0 	bl	80007ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_RCC_ClockConfig+0x33c>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	490e      	ldr	r1, [pc, #56]	; (8003278 <HAL_RCC_ClockConfig+0x33c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003242:	f000 f821 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003246:	4602      	mov	r2, r0
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_ClockConfig+0x33c>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	490a      	ldr	r1, [pc, #40]	; (800327c <HAL_RCC_ClockConfig+0x340>)
 8003254:	5ccb      	ldrb	r3, [r1, r3]
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	4a09      	ldr	r2, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x344>)
 800325c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x348>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd fb2e 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	0800cc7c 	.word	0x0800cc7c
 8003278:	40023800 	.word	0x40023800
 800327c:	0800ce48 	.word	0x0800ce48
 8003280:	20000000 	.word	0x20000000
 8003284:	20000004 	.word	0x20000004

08003288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800328c:	b094      	sub	sp, #80	; 0x50
 800328e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	647b      	str	r3, [r7, #68]	; 0x44
 8003294:	2300      	movs	r3, #0
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003298:	2300      	movs	r3, #0
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a0:	4b79      	ldr	r3, [pc, #484]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d00d      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x40>
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	f200 80e1 	bhi.w	8003474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x34>
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ba:	e0db      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_GetSysClockFreq+0x204>)
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032c0:	e0db      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c2:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_GetSysClockFreq+0x208>)
 80032c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032c6:	e0d8      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c8:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d2:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d063      	beq.n	80033a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	2200      	movs	r2, #0
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
 80032f2:	2300      	movs	r3, #0
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
 80032f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032fa:	4622      	mov	r2, r4
 80032fc:	462b      	mov	r3, r5
 80032fe:	f04f 0000 	mov.w	r0, #0
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	0159      	lsls	r1, r3, #5
 8003308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330c:	0150      	lsls	r0, r2, #5
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4621      	mov	r1, r4
 8003314:	1a51      	subs	r1, r2, r1
 8003316:	6139      	str	r1, [r7, #16]
 8003318:	4629      	mov	r1, r5
 800331a:	eb63 0301 	sbc.w	r3, r3, r1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800332c:	4659      	mov	r1, fp
 800332e:	018b      	lsls	r3, r1, #6
 8003330:	4651      	mov	r1, sl
 8003332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003336:	4651      	mov	r1, sl
 8003338:	018a      	lsls	r2, r1, #6
 800333a:	4651      	mov	r1, sl
 800333c:	ebb2 0801 	subs.w	r8, r2, r1
 8003340:	4659      	mov	r1, fp
 8003342:	eb63 0901 	sbc.w	r9, r3, r1
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800335a:	4690      	mov	r8, r2
 800335c:	4699      	mov	r9, r3
 800335e:	4623      	mov	r3, r4
 8003360:	eb18 0303 	adds.w	r3, r8, r3
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	462b      	mov	r3, r5
 8003368:	eb49 0303 	adc.w	r3, r9, r3
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800337a:	4629      	mov	r1, r5
 800337c:	024b      	lsls	r3, r1, #9
 800337e:	4621      	mov	r1, r4
 8003380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003384:	4621      	mov	r1, r4
 8003386:	024a      	lsls	r2, r1, #9
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338e:	2200      	movs	r2, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
 8003392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003398:	f7fc ff74 	bl	8000284 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a4:	e058      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	2200      	movs	r2, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	4611      	mov	r1, r2
 80033b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
 80033bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c0:	4642      	mov	r2, r8
 80033c2:	464b      	mov	r3, r9
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	0159      	lsls	r1, r3, #5
 80033ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d2:	0150      	lsls	r0, r2, #5
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4641      	mov	r1, r8
 80033da:	ebb2 0a01 	subs.w	sl, r2, r1
 80033de:	4649      	mov	r1, r9
 80033e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f8:	ebb2 040a 	subs.w	r4, r2, sl
 80033fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	00eb      	lsls	r3, r5, #3
 800340a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340e:	00e2      	lsls	r2, r4, #3
 8003410:	4614      	mov	r4, r2
 8003412:	461d      	mov	r5, r3
 8003414:	4643      	mov	r3, r8
 8003416:	18e3      	adds	r3, r4, r3
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	464b      	mov	r3, r9
 800341c:	eb45 0303 	adc.w	r3, r5, r3
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342e:	4629      	mov	r1, r5
 8003430:	028b      	lsls	r3, r1, #10
 8003432:	4621      	mov	r1, r4
 8003434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003438:	4621      	mov	r1, r4
 800343a:	028a      	lsls	r2, r1, #10
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	61fa      	str	r2, [r7, #28]
 8003448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800344c:	f7fc ff1a 	bl	8000284 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003472:	e002      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetSysClockFreq+0x204>)
 8003476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800347c:	4618      	mov	r0, r3
 800347e:	3750      	adds	r7, #80	; 0x50
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	007a1200 	.word	0x007a1200

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000000 	.word	0x20000000

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	0800ce58 	.word	0x0800ce58

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d8:	f7ff ffdc 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	0800ce58 	.word	0x0800ce58

080034fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	220f      	movs	r2, #15
 800350a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	08db      	lsrs	r3, r3, #3
 8003536:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_RCC_GetClockConfig+0x60>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40023c00 	.word	0x40023c00

08003560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0c5      	b.n	80036fe <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a64      	ldr	r2, [pc, #400]	; (8003708 <HAL_TIM_Base_Init+0x1a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d045      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d040      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a60      	ldr	r2, [pc, #384]	; (800370c <HAL_TIM_Base_Init+0x1ac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d03b      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a5e      	ldr	r2, [pc, #376]	; (8003710 <HAL_TIM_Base_Init+0x1b0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d036      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5d      	ldr	r2, [pc, #372]	; (8003714 <HAL_TIM_Base_Init+0x1b4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d031      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_TIM_Base_Init+0x1b8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02c      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5a      	ldr	r2, [pc, #360]	; (800371c <HAL_TIM_Base_Init+0x1bc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d027      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_TIM_Base_Init+0x1c0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d022      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_TIM_Base_Init+0x1c4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d01d      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a55      	ldr	r2, [pc, #340]	; (8003728 <HAL_TIM_Base_Init+0x1c8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d018      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_TIM_Base_Init+0x1cc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a52      	ldr	r2, [pc, #328]	; (8003730 <HAL_TIM_Base_Init+0x1d0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a51      	ldr	r2, [pc, #324]	; (8003734 <HAL_TIM_Base_Init+0x1d4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a4f      	ldr	r2, [pc, #316]	; (8003738 <HAL_TIM_Base_Init+0x1d8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIM_Base_Init+0xa8>
 80035fe:	f240 1113 	movw	r1, #275	; 0x113
 8003602:	484e      	ldr	r0, [pc, #312]	; (800373c <HAL_TIM_Base_Init+0x1dc>)
 8003604:	f7fd f8e3 	bl	80007ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d014      	beq.n	800363a <HAL_TIM_Base_Init+0xda>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b10      	cmp	r3, #16
 8003616:	d010      	beq.n	800363a <HAL_TIM_Base_Init+0xda>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b20      	cmp	r3, #32
 800361e:	d00c      	beq.n	800363a <HAL_TIM_Base_Init+0xda>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d008      	beq.n	800363a <HAL_TIM_Base_Init+0xda>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b60      	cmp	r3, #96	; 0x60
 800362e:	d004      	beq.n	800363a <HAL_TIM_Base_Init+0xda>
 8003630:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003634:	4841      	ldr	r0, [pc, #260]	; (800373c <HAL_TIM_Base_Init+0x1dc>)
 8003636:	f7fd f8ca 	bl	80007ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00e      	beq.n	8003660 <HAL_TIM_Base_Init+0x100>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364a:	d009      	beq.n	8003660 <HAL_TIM_Base_Init+0x100>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d004      	beq.n	8003660 <HAL_TIM_Base_Init+0x100>
 8003656:	f240 1115 	movw	r1, #277	; 0x115
 800365a:	4838      	ldr	r0, [pc, #224]	; (800373c <HAL_TIM_Base_Init+0x1dc>)
 800365c:	f7fd f8b7 	bl	80007ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_TIM_Base_Init+0x11a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d004      	beq.n	800367a <HAL_TIM_Base_Init+0x11a>
 8003670:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003674:	4831      	ldr	r0, [pc, #196]	; (800373c <HAL_TIM_Base_Init+0x1dc>)
 8003676:	f7fd f8aa 	bl	80007ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f856 	bl	8003740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fa4a 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40001000 	.word	0x40001000
 800371c:	40001400 	.word	0x40001400
 8003720:	40010400 	.word	0x40010400
 8003724:	40014000 	.word	0x40014000
 8003728:	40014400 	.word	0x40014400
 800372c:	40014800 	.word	0x40014800
 8003730:	40001800 	.word	0x40001800
 8003734:	40001c00 	.word	0x40001c00
 8003738:	40002000 	.word	0x40002000
 800373c:	0800ccb4 	.word	0x0800ccb4

08003740 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a51      	ldr	r2, [pc, #324]	; (80038a8 <HAL_TIM_Base_Start_IT+0x154>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d040      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4d      	ldr	r2, [pc, #308]	; (80038ac <HAL_TIM_Base_Start_IT+0x158>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4c      	ldr	r2, [pc, #304]	; (80038b0 <HAL_TIM_Base_Start_IT+0x15c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <HAL_TIM_Base_Start_IT+0x160>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a49      	ldr	r2, [pc, #292]	; (80038b8 <HAL_TIM_Base_Start_IT+0x164>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a47      	ldr	r2, [pc, #284]	; (80038bc <HAL_TIM_Base_Start_IT+0x168>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a46      	ldr	r2, [pc, #280]	; (80038c0 <HAL_TIM_Base_Start_IT+0x16c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a44      	ldr	r2, [pc, #272]	; (80038c4 <HAL_TIM_Base_Start_IT+0x170>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a43      	ldr	r2, [pc, #268]	; (80038c8 <HAL_TIM_Base_Start_IT+0x174>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a41      	ldr	r2, [pc, #260]	; (80038cc <HAL_TIM_Base_Start_IT+0x178>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <HAL_TIM_Base_Start_IT+0x17c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3e      	ldr	r2, [pc, #248]	; (80038d4 <HAL_TIM_Base_Start_IT+0x180>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <HAL_TIM_Base_Start_IT+0x184>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80037ec:	483b      	ldr	r0, [pc, #236]	; (80038dc <HAL_TIM_Base_Start_IT+0x188>)
 80037ee:	f7fc ffee 	bl	80007ce <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e04e      	b.n	80038a0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_TIM_Base_Start_IT+0x154>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d01d      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_TIM_Base_Start_IT+0x158>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIM_Base_Start_IT+0x15c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_TIM_Base_Start_IT+0x160>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <HAL_TIM_Base_Start_IT+0x16c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_TIM_Base_Start_IT+0x170>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <HAL_TIM_Base_Start_IT+0x17c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d111      	bne.n	800388e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b06      	cmp	r3, #6
 800387a:	d010      	beq.n	800389e <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	e007      	b.n	800389e <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40001000 	.word	0x40001000
 80038bc:	40001400 	.word	0x40001400
 80038c0:	40010400 	.word	0x40010400
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40014400 	.word	0x40014400
 80038cc:	40014800 	.word	0x40014800
 80038d0:	40001800 	.word	0x40001800
 80038d4:	40001c00 	.word	0x40001c00
 80038d8:	40002000 	.word	0x40002000
 80038dc:	0800ccb4 	.word	0x0800ccb4

080038e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b02      	cmp	r3, #2
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0202 	mvn.w	r2, #2
 800390c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8ee 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8e0 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8f1 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b04      	cmp	r3, #4
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0204 	mvn.w	r2, #4
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8c4 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8b6 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f8c7 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b08      	cmp	r3, #8
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0208 	mvn.w	r2, #8
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2204      	movs	r2, #4
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f89a 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f88c 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f89d 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0210 	mvn.w	r2, #16
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f870 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f862 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f873 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d10e      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0201 	mvn.w	r2, #1
 8003a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fc fe9e 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d107      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f902 	bl	8003c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f838 	bl	8003b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0220 	mvn.w	r2, #32
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8cc 	bl	8003c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a40      	ldr	r2, [pc, #256]	; (8003c54 <TIM_Base_SetConfig+0x114>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5e:	d00f      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3d      	ldr	r2, [pc, #244]	; (8003c58 <TIM_Base_SetConfig+0x118>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <TIM_Base_SetConfig+0x11c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3b      	ldr	r2, [pc, #236]	; (8003c60 <TIM_Base_SetConfig+0x120>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3a      	ldr	r2, [pc, #232]	; (8003c64 <TIM_Base_SetConfig+0x124>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2f      	ldr	r2, [pc, #188]	; (8003c54 <TIM_Base_SetConfig+0x114>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d027      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <TIM_Base_SetConfig+0x118>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d023      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2b      	ldr	r2, [pc, #172]	; (8003c5c <TIM_Base_SetConfig+0x11c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <TIM_Base_SetConfig+0x120>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <TIM_Base_SetConfig+0x124>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d017      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <TIM_Base_SetConfig+0x128>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <TIM_Base_SetConfig+0x130>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <TIM_Base_SetConfig+0x134>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <TIM_Base_SetConfig+0x138>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a23      	ldr	r2, [pc, #140]	; (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <TIM_Base_SetConfig+0x114>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0xf8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a0c      	ldr	r2, [pc, #48]	; (8003c64 <TIM_Base_SetConfig+0x124>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	615a      	str	r2, [r3, #20]
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40010400 	.word	0x40010400
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800
 8003c74:	40001800 	.word	0x40001800
 8003c78:	40001c00 	.word	0x40001c00
 8003c7c:	40002000 	.word	0x40002000

08003c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0be      	b.n	8003e38 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d031      	beq.n	8003d26 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a5e      	ldr	r2, [pc, #376]	; (8003e40 <HAL_UART_Init+0x198>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_UART_Init+0x4c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5c      	ldr	r2, [pc, #368]	; (8003e44 <HAL_UART_Init+0x19c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_UART_Init+0x4c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a5b      	ldr	r2, [pc, #364]	; (8003e48 <HAL_UART_Init+0x1a0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_UART_Init+0x4c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a59      	ldr	r2, [pc, #356]	; (8003e4c <HAL_UART_Init+0x1a4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_UART_Init+0x4c>
 8003cea:	f240 1173 	movw	r1, #371	; 0x173
 8003cee:	4858      	ldr	r0, [pc, #352]	; (8003e50 <HAL_UART_Init+0x1a8>)
 8003cf0:	f7fc fd6d 	bl	80007ce <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d041      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d03c      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0e:	d037      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d18:	d032      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d1a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003d1e:	484c      	ldr	r0, [pc, #304]	; (8003e50 <HAL_UART_Init+0x1a8>)
 8003d20:	f7fc fd55 	bl	80007ce <assert_failed>
 8003d24:	e02c      	b.n	8003d80 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a45      	ldr	r2, [pc, #276]	; (8003e40 <HAL_UART_Init+0x198>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d027      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a43      	ldr	r2, [pc, #268]	; (8003e44 <HAL_UART_Init+0x19c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d022      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a42      	ldr	r2, [pc, #264]	; (8003e48 <HAL_UART_Init+0x1a0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d01d      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a42      	ldr	r2, [pc, #264]	; (8003e54 <HAL_UART_Init+0x1ac>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a41      	ldr	r2, [pc, #260]	; (8003e58 <HAL_UART_Init+0x1b0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3b      	ldr	r2, [pc, #236]	; (8003e4c <HAL_UART_Init+0x1a4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3d      	ldr	r2, [pc, #244]	; (8003e5c <HAL_UART_Init+0x1b4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_UART_Init+0x1b8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_UART_Init+0xd8>
 8003d76:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003d7a:	4835      	ldr	r0, [pc, #212]	; (8003e50 <HAL_UART_Init+0x1a8>)
 8003d7c:	f7fc fd27 	bl	80007ce <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <HAL_UART_Init+0xf4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d90:	d004      	beq.n	8003d9c <HAL_UART_Init+0xf4>
 8003d92:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003d96:	482e      	ldr	r0, [pc, #184]	; (8003e50 <HAL_UART_Init+0x1a8>)
 8003d98:	f7fc fd19 	bl	80007ce <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_UART_Init+0x110>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d004      	beq.n	8003db8 <HAL_UART_Init+0x110>
 8003dae:	f240 117b 	movw	r1, #379	; 0x17b
 8003db2:	4827      	ldr	r0, [pc, #156]	; (8003e50 <HAL_UART_Init+0x1a8>)
 8003db4:	f7fc fd0b 	bl	80007ce <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fc fd31 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2224      	movs	r2, #36	; 0x24
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f83a 	bl	8003e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40011000 	.word	0x40011000
 8003e44:	40004400 	.word	0x40004400
 8003e48:	40004800 	.word	0x40004800
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	0800ccec 	.word	0x0800ccec
 8003e54:	40004c00 	.word	0x40004c00
 8003e58:	40005000 	.word	0x40005000
 8003e5c:	40007800 	.word	0x40007800
 8003e60:	40007c00 	.word	0x40007c00

08003e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b0c0      	sub	sp, #256	; 0x100
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4bcf      	ldr	r3, [pc, #828]	; (80041b4 <UART_SetConfig+0x350>)
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d904      	bls.n	8003e86 <UART_SetConfig+0x22>
 8003e7c:	f640 6161 	movw	r1, #3681	; 0xe61
 8003e80:	48cd      	ldr	r0, [pc, #820]	; (80041b8 <UART_SetConfig+0x354>)
 8003e82:	f7fc fca4 	bl	80007ce <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_SetConfig+0x42>
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	d004      	beq.n	8003ea6 <UART_SetConfig+0x42>
 8003e9c:	f640 6162 	movw	r1, #3682	; 0xe62
 8003ea0:	48c5      	ldr	r0, [pc, #788]	; (80041b8 <UART_SetConfig+0x354>)
 8003ea2:	f7fc fc94 	bl	80007ce <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <UART_SetConfig+0x6e>
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d00a      	beq.n	8003ed2 <UART_SetConfig+0x6e>
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ec6:	d004      	beq.n	8003ed2 <UART_SetConfig+0x6e>
 8003ec8:	f640 6163 	movw	r1, #3683	; 0xe63
 8003ecc:	48ba      	ldr	r0, [pc, #744]	; (80041b8 <UART_SetConfig+0x354>)
 8003ece:	f7fc fc7e 	bl	80007ce <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <UART_SetConfig+0x88>
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <UART_SetConfig+0x92>
 8003eec:	f640 6164 	movw	r1, #3684	; 0xe64
 8003ef0:	48b1      	ldr	r0, [pc, #708]	; (80041b8 <UART_SetConfig+0x354>)
 8003ef2:	f7fc fc6c 	bl	80007ce <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	68d9      	ldr	r1, [r3, #12]
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	ea40 0301 	orr.w	r3, r0, r1
 8003f12:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f42:	f021 010c 	bic.w	r1, r1, #12
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f50:	430b      	orrs	r3, r1
 8003f52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	ea40 0301 	orr.w	r3, r0, r1
 8003f70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b90      	ldr	r3, [pc, #576]	; (80041bc <UART_SetConfig+0x358>)
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d005      	beq.n	8003f8a <UART_SetConfig+0x126>
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b8e      	ldr	r3, [pc, #568]	; (80041c0 <UART_SetConfig+0x35c>)
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d104      	bne.n	8003f94 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f8a:	f7ff faa3 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8003f8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f92:	e003      	b.n	8003f9c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f94:	f7ff fa8a 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8003f98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa6:	f040 810f 	bne.w	80041c8 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fb4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fb8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fcc:	4621      	mov	r1, r4
 8003fce:	eb12 0801 	adds.w	r8, r2, r1
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	eb43 0901 	adc.w	r9, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	eb18 0303 	adds.w	r3, r8, r3
 8003ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ffa:	462b      	mov	r3, r5
 8003ffc:	eb49 0303 	adc.w	r3, r9, r3
 8004000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004010:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004014:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004018:	460b      	mov	r3, r1
 800401a:	18db      	adds	r3, r3, r3
 800401c:	653b      	str	r3, [r7, #80]	; 0x50
 800401e:	4613      	mov	r3, r2
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	657b      	str	r3, [r7, #84]	; 0x54
 8004026:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800402a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800402e:	f7fc f929 	bl	8000284 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <UART_SetConfig+0x360>)
 8004038:	fba3 2302 	umull	r2, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	011c      	lsls	r4, r3, #4
 8004040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004044:	2200      	movs	r2, #0
 8004046:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800404a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800404e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004052:	4642      	mov	r2, r8
 8004054:	464b      	mov	r3, r9
 8004056:	1891      	adds	r1, r2, r2
 8004058:	64b9      	str	r1, [r7, #72]	; 0x48
 800405a:	415b      	adcs	r3, r3
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800405e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004062:	4641      	mov	r1, r8
 8004064:	eb12 0a01 	adds.w	sl, r2, r1
 8004068:	4649      	mov	r1, r9
 800406a:	eb43 0b01 	adc.w	fp, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800407a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800407e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004082:	4692      	mov	sl, r2
 8004084:	469b      	mov	fp, r3
 8004086:	4643      	mov	r3, r8
 8004088:	eb1a 0303 	adds.w	r3, sl, r3
 800408c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004090:	464b      	mov	r3, r9
 8004092:	eb4b 0303 	adc.w	r3, fp, r3
 8004096:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040a6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040ae:	460b      	mov	r3, r1
 80040b0:	18db      	adds	r3, r3, r3
 80040b2:	643b      	str	r3, [r7, #64]	; 0x40
 80040b4:	4613      	mov	r3, r2
 80040b6:	eb42 0303 	adc.w	r3, r2, r3
 80040ba:	647b      	str	r3, [r7, #68]	; 0x44
 80040bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040c0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040c4:	f7fc f8de 	bl	8000284 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4611      	mov	r1, r2
 80040ce:	4b3d      	ldr	r3, [pc, #244]	; (80041c4 <UART_SetConfig+0x360>)
 80040d0:	fba3 2301 	umull	r2, r3, r3, r1
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	2264      	movs	r2, #100	; 0x64
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	1acb      	subs	r3, r1, r3
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040e4:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <UART_SetConfig+0x360>)
 80040e6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040f2:	441c      	add	r4, r3
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040fe:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004102:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004106:	4642      	mov	r2, r8
 8004108:	464b      	mov	r3, r9
 800410a:	1891      	adds	r1, r2, r2
 800410c:	63b9      	str	r1, [r7, #56]	; 0x38
 800410e:	415b      	adcs	r3, r3
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004112:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004116:	4641      	mov	r1, r8
 8004118:	1851      	adds	r1, r2, r1
 800411a:	6339      	str	r1, [r7, #48]	; 0x30
 800411c:	4649      	mov	r1, r9
 800411e:	414b      	adcs	r3, r1
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800412e:	4659      	mov	r1, fp
 8004130:	00cb      	lsls	r3, r1, #3
 8004132:	4651      	mov	r1, sl
 8004134:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004138:	4651      	mov	r1, sl
 800413a:	00ca      	lsls	r2, r1, #3
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	4603      	mov	r3, r0
 8004142:	4642      	mov	r2, r8
 8004144:	189b      	adds	r3, r3, r2
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800414a:	464b      	mov	r3, r9
 800414c:	460a      	mov	r2, r1
 800414e:	eb42 0303 	adc.w	r3, r2, r3
 8004152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004162:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004166:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800416a:	460b      	mov	r3, r1
 800416c:	18db      	adds	r3, r3, r3
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004170:	4613      	mov	r3, r2
 8004172:	eb42 0303 	adc.w	r3, r2, r3
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800417c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004180:	f7fc f880 	bl	8000284 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <UART_SetConfig+0x360>)
 800418a:	fba3 1302 	umull	r1, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2164      	movs	r1, #100	; 0x64
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	3332      	adds	r3, #50	; 0x32
 800419c:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <UART_SetConfig+0x360>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f003 0207 	and.w	r2, r3, #7
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4422      	add	r2, r4
 80041b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041b2:	e108      	b.n	80043c6 <UART_SetConfig+0x562>
 80041b4:	00a037a0 	.word	0x00a037a0
 80041b8:	0800ccec 	.word	0x0800ccec
 80041bc:	40011000 	.word	0x40011000
 80041c0:	40011400 	.word	0x40011400
 80041c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041da:	4642      	mov	r2, r8
 80041dc:	464b      	mov	r3, r9
 80041de:	1891      	adds	r1, r2, r2
 80041e0:	6239      	str	r1, [r7, #32]
 80041e2:	415b      	adcs	r3, r3
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
 80041e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ea:	4641      	mov	r1, r8
 80041ec:	1854      	adds	r4, r2, r1
 80041ee:	4649      	mov	r1, r9
 80041f0:	eb43 0501 	adc.w	r5, r3, r1
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	00eb      	lsls	r3, r5, #3
 80041fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004202:	00e2      	lsls	r2, r4, #3
 8004204:	4614      	mov	r4, r2
 8004206:	461d      	mov	r5, r3
 8004208:	4643      	mov	r3, r8
 800420a:	18e3      	adds	r3, r4, r3
 800420c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004210:	464b      	mov	r3, r9
 8004212:	eb45 0303 	adc.w	r3, r5, r3
 8004216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004226:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004236:	4629      	mov	r1, r5
 8004238:	008b      	lsls	r3, r1, #2
 800423a:	4621      	mov	r1, r4
 800423c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004240:	4621      	mov	r1, r4
 8004242:	008a      	lsls	r2, r1, #2
 8004244:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004248:	f7fc f81c 	bl	8000284 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <UART_SetConfig+0x570>)
 8004252:	fba3 2302 	umull	r2, r3, r3, r2
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	011c      	lsls	r4, r3, #4
 800425a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004264:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004268:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800426c:	4642      	mov	r2, r8
 800426e:	464b      	mov	r3, r9
 8004270:	1891      	adds	r1, r2, r2
 8004272:	61b9      	str	r1, [r7, #24]
 8004274:	415b      	adcs	r3, r3
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800427c:	4641      	mov	r1, r8
 800427e:	1851      	adds	r1, r2, r1
 8004280:	6139      	str	r1, [r7, #16]
 8004282:	4649      	mov	r1, r9
 8004284:	414b      	adcs	r3, r1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004294:	4659      	mov	r1, fp
 8004296:	00cb      	lsls	r3, r1, #3
 8004298:	4651      	mov	r1, sl
 800429a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429e:	4651      	mov	r1, sl
 80042a0:	00ca      	lsls	r2, r1, #3
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	4642      	mov	r2, r8
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042b0:	464b      	mov	r3, r9
 80042b2:	460a      	mov	r2, r1
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042d4:	4649      	mov	r1, r9
 80042d6:	008b      	lsls	r3, r1, #2
 80042d8:	4641      	mov	r1, r8
 80042da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042de:	4641      	mov	r1, r8
 80042e0:	008a      	lsls	r2, r1, #2
 80042e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042e6:	f7fb ffcd 	bl	8000284 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <UART_SetConfig+0x570>)
 80042f0:	fba3 1302 	umull	r1, r3, r3, r2
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	2164      	movs	r1, #100	; 0x64
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	3332      	adds	r3, #50	; 0x32
 8004302:	4a34      	ldr	r2, [pc, #208]	; (80043d4 <UART_SetConfig+0x570>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430e:	441c      	add	r4, r3
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004314:	2200      	movs	r2, #0
 8004316:	673b      	str	r3, [r7, #112]	; 0x70
 8004318:	677a      	str	r2, [r7, #116]	; 0x74
 800431a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800431e:	4642      	mov	r2, r8
 8004320:	464b      	mov	r3, r9
 8004322:	1891      	adds	r1, r2, r2
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	415b      	adcs	r3, r3
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800432e:	4641      	mov	r1, r8
 8004330:	1851      	adds	r1, r2, r1
 8004332:	6039      	str	r1, [r7, #0]
 8004334:	4649      	mov	r1, r9
 8004336:	414b      	adcs	r3, r1
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004346:	4659      	mov	r1, fp
 8004348:	00cb      	lsls	r3, r1, #3
 800434a:	4651      	mov	r1, sl
 800434c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004350:	4651      	mov	r1, sl
 8004352:	00ca      	lsls	r2, r1, #3
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	4603      	mov	r3, r0
 800435a:	4642      	mov	r2, r8
 800435c:	189b      	adds	r3, r3, r2
 800435e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004360:	464b      	mov	r3, r9
 8004362:	460a      	mov	r2, r1
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	663b      	str	r3, [r7, #96]	; 0x60
 8004374:	667a      	str	r2, [r7, #100]	; 0x64
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004382:	4649      	mov	r1, r9
 8004384:	008b      	lsls	r3, r1, #2
 8004386:	4641      	mov	r1, r8
 8004388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800438c:	4641      	mov	r1, r8
 800438e:	008a      	lsls	r2, r1, #2
 8004390:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004394:	f7fb ff76 	bl	8000284 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <UART_SetConfig+0x570>)
 800439e:	fba3 1302 	umull	r1, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2164      	movs	r1, #100	; 0x64
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	3332      	adds	r3, #50	; 0x32
 80043b0:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <UART_SetConfig+0x570>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4422      	add	r2, r4
 80043c4:	609a      	str	r2, [r3, #8]
}
 80043c6:	bf00      	nop
 80043c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043cc:	46bd      	mov	sp, r7
 80043ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d2:	bf00      	nop
 80043d4:	51eb851f 	.word	0x51eb851f

080043d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d8:	b084      	sub	sp, #16
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	f107 001c 	add.w	r0, r7, #28
 80043e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d122      	bne.n	8004436 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f001 fbee 	bl	8005c0c <USB_CoreReset>
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e01a      	b.n	800446c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f001 fbe2 	bl	8005c0c <USB_CoreReset>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800444c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
 800445e:	e005      	b.n	800446c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10b      	bne.n	800448a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f043 0206 	orr.w	r2, r3, #6
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004496:	b004      	add	sp, #16
 8004498:	4770      	bx	lr
	...

0800449c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d165      	bne.n	800457c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4a41      	ldr	r2, [pc, #260]	; (80045b8 <USB_SetTurnaroundTime+0x11c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d906      	bls.n	80044c6 <USB_SetTurnaroundTime+0x2a>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a40      	ldr	r2, [pc, #256]	; (80045bc <USB_SetTurnaroundTime+0x120>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d202      	bcs.n	80044c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044c0:	230f      	movs	r3, #15
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e062      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <USB_SetTurnaroundTime+0x120>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d306      	bcc.n	80044dc <USB_SetTurnaroundTime+0x40>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <USB_SetTurnaroundTime+0x124>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d202      	bcs.n	80044dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044d6:	230e      	movs	r3, #14
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e057      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a38      	ldr	r2, [pc, #224]	; (80045c0 <USB_SetTurnaroundTime+0x124>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d306      	bcc.n	80044f2 <USB_SetTurnaroundTime+0x56>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a37      	ldr	r2, [pc, #220]	; (80045c4 <USB_SetTurnaroundTime+0x128>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d202      	bcs.n	80044f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044ec:	230d      	movs	r3, #13
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e04c      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4a33      	ldr	r2, [pc, #204]	; (80045c4 <USB_SetTurnaroundTime+0x128>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d306      	bcc.n	8004508 <USB_SetTurnaroundTime+0x6c>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <USB_SetTurnaroundTime+0x12c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d802      	bhi.n	8004508 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004502:	230c      	movs	r3, #12
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e041      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <USB_SetTurnaroundTime+0x12c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d906      	bls.n	800451e <USB_SetTurnaroundTime+0x82>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4a2e      	ldr	r2, [pc, #184]	; (80045cc <USB_SetTurnaroundTime+0x130>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d802      	bhi.n	800451e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004518:	230b      	movs	r3, #11
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e036      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <USB_SetTurnaroundTime+0x130>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d906      	bls.n	8004534 <USB_SetTurnaroundTime+0x98>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <USB_SetTurnaroundTime+0x134>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d802      	bhi.n	8004534 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800452e:	230a      	movs	r3, #10
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e02b      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <USB_SetTurnaroundTime+0x134>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d906      	bls.n	800454a <USB_SetTurnaroundTime+0xae>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a25      	ldr	r2, [pc, #148]	; (80045d4 <USB_SetTurnaroundTime+0x138>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d202      	bcs.n	800454a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004544:	2309      	movs	r3, #9
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e020      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <USB_SetTurnaroundTime+0x138>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d306      	bcc.n	8004560 <USB_SetTurnaroundTime+0xc4>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a20      	ldr	r2, [pc, #128]	; (80045d8 <USB_SetTurnaroundTime+0x13c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d802      	bhi.n	8004560 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800455a:	2308      	movs	r3, #8
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e015      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <USB_SetTurnaroundTime+0x13c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d906      	bls.n	8004576 <USB_SetTurnaroundTime+0xda>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <USB_SetTurnaroundTime+0x140>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d202      	bcs.n	8004576 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004570:	2307      	movs	r3, #7
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e00a      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004576:	2306      	movs	r3, #6
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e007      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004582:	2309      	movs	r3, #9
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e001      	b.n	800458c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004588:	2309      	movs	r3, #9
 800458a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	029b      	lsls	r3, r3, #10
 80045a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	00d8acbf 	.word	0x00d8acbf
 80045bc:	00e4e1c0 	.word	0x00e4e1c0
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	01067380 	.word	0x01067380
 80045c8:	011a499f 	.word	0x011a499f
 80045cc:	01312cff 	.word	0x01312cff
 80045d0:	014ca43f 	.word	0x014ca43f
 80045d4:	016e3600 	.word	0x016e3600
 80045d8:	01a6ab1f 	.word	0x01a6ab1f
 80045dc:	01e84800 	.word	0x01e84800

080045e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0201 	bic.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d115      	bne.n	8004672 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004652:	2001      	movs	r0, #1
 8004654:	f7fc fa62 	bl	8000b1c <HAL_Delay>
      ms++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 fa45 	bl	8005aee <USB_GetMode>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d01e      	beq.n	80046a8 <USB_SetCurrentMode+0x84>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b31      	cmp	r3, #49	; 0x31
 800466e:	d9f0      	bls.n	8004652 <USB_SetCurrentMode+0x2e>
 8004670:	e01a      	b.n	80046a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d115      	bne.n	80046a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004684:	2001      	movs	r0, #1
 8004686:	f7fc fa49 	bl	8000b1c <HAL_Delay>
      ms++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3301      	adds	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 fa2c 	bl	8005aee <USB_GetMode>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <USB_SetCurrentMode+0x84>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b31      	cmp	r3, #49	; 0x31
 80046a0:	d9f0      	bls.n	8004684 <USB_SetCurrentMode+0x60>
 80046a2:	e001      	b.n	80046a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e005      	b.n	80046b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b32      	cmp	r3, #50	; 0x32
 80046ac:	d101      	bne.n	80046b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046bc:	b084      	sub	sp, #16
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e009      	b.n	80046f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3340      	adds	r3, #64	; 0x40
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b0e      	cmp	r3, #14
 80046f4:	d9f2      	bls.n	80046dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11c      	bne.n	8004736 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
 8004734:	e00b      	b.n	800474e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004760:	4619      	mov	r1, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004768:	461a      	mov	r2, r3
 800476a:	680b      	ldr	r3, [r1, #0]
 800476c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10c      	bne.n	800478e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800477a:	2100      	movs	r1, #0
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f965 	bl	8004a4c <USB_SetDevSpeed>
 8004782:	e008      	b.n	8004796 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004784:	2101      	movs	r1, #1
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f960 	bl	8004a4c <USB_SetDevSpeed>
 800478c:	e003      	b.n	8004796 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800478e:	2103      	movs	r1, #3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f95b 	bl	8004a4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004796:	2110      	movs	r1, #16
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8f3 	bl	8004984 <USB_FlushTxFifo>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f91f 	bl	80049ec <USB_FlushRxFifo>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047be:	461a      	mov	r2, r3
 80047c0:	2300      	movs	r3, #0
 80047c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ca:	461a      	mov	r2, r3
 80047cc:	2300      	movs	r3, #0
 80047ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	461a      	mov	r2, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	e043      	b.n	800486a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f8:	d118      	bne.n	800482c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	461a      	mov	r2, r3
 800480e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e013      	b.n	800483e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004822:	461a      	mov	r2, r3
 8004824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e008      	b.n	800483e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	461a      	mov	r2, r3
 800483a:	2300      	movs	r3, #0
 800483c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	461a      	mov	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	461a      	mov	r2, r3
 800485e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3301      	adds	r3, #1
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	429a      	cmp	r2, r3
 8004870:	d3b7      	bcc.n	80047e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e043      	b.n	8004900 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800488a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800488e:	d118      	bne.n	80048c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	461a      	mov	r2, r3
 80048a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e013      	b.n	80048d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b8:	461a      	mov	r2, r3
 80048ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	e008      	b.n	80048d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	461a      	mov	r2, r3
 80048d0:	2300      	movs	r3, #0
 80048d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	461a      	mov	r2, r3
 80048e2:	2300      	movs	r3, #0
 80048e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	461a      	mov	r2, r3
 80048f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3301      	adds	r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	429a      	cmp	r2, r3
 8004906:	d3b7      	bcc.n	8004878 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	2b00      	cmp	r3, #0
 800492e:	d105      	bne.n	800493c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f043 0210 	orr.w	r2, r3, #16
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699a      	ldr	r2, [r3, #24]
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <USB_DevInit+0x2c4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f043 0208 	orr.w	r2, r3, #8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800495a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800497c:	b004      	add	sp, #16
 800497e:	4770      	bx	lr
 8004980:	803c3800 	.word	0x803c3800

08004984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3301      	adds	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <USB_FlushTxFifo+0x64>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e01b      	b.n	80049dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	daf2      	bge.n	8004992 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	019b      	lsls	r3, r3, #6
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <USB_FlushTxFifo+0x64>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e006      	b.n	80049dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d0f0      	beq.n	80049bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	00030d40 	.word	0x00030d40

080049ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <USB_FlushRxFifo+0x5c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e018      	b.n	8004a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	daf2      	bge.n	80049f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2210      	movs	r2, #16
 8004a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <USB_FlushRxFifo+0x5c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e006      	b.n	8004a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d0f0      	beq.n	8004a1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	00030d40 	.word	0x00030d40

08004a4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b087      	sub	sp, #28
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]
 8004aa2:	e00a      	b.n	8004aba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d002      	beq.n	8004ab0 <USB_GetDevSpeed+0x32>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d102      	bne.n	8004ab6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	75fb      	strb	r3, [r7, #23]
 8004ab4:	e001      	b.n	8004aba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ab6:	230f      	movs	r3, #15
 8004ab8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d13a      	bne.n	8004b5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d155      	bne.n	8004bc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	791b      	ldrb	r3, [r3, #4]
 8004b36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	059b      	lsls	r3, r3, #22
 8004b3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b40:	4313      	orrs	r3, r2
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e036      	b.n	8004bc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11a      	bne.n	8004bc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	791b      	ldrb	r3, [r3, #4]
 8004bac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d161      	bne.n	8004cb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0a:	d11f      	bne.n	8004c4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c90:	4013      	ands	r3, r2
 8004c92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	0159      	lsls	r1, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	440b      	add	r3, r1
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4b35      	ldr	r3, [pc, #212]	; (8004d88 <USB_DeactivateEndpoint+0x1b0>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
 8004cb6:	e060      	b.n	8004d7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cce:	d11f      	bne.n	8004d10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d30:	4013      	ands	r3, r2
 8004d32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d54:	4013      	ands	r3, r2
 8004d56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	0159      	lsls	r1, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	440b      	add	r3, r1
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	4619      	mov	r1, r3
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <USB_DeactivateEndpoint+0x1b4>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	ec337800 	.word	0xec337800
 8004d8c:	eff37800 	.word	0xeff37800

08004d90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f040 815c 	bne.w	800506a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d132      	bne.n	8004e20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	0cdb      	lsrs	r3, r3, #19
 8004e1a:	04db      	lsls	r3, r3, #19
 8004e1c:	6113      	str	r3, [r2, #16]
 8004e1e:	e074      	b.n	8004f0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3a:	0cdb      	lsrs	r3, r3, #19
 8004e3c:	04db      	lsls	r3, r3, #19
 8004e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6999      	ldr	r1, [r3, #24]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	440b      	add	r3, r1
 8004e7c:	1e59      	subs	r1, r3, #1
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e88:	4b9d      	ldr	r3, [pc, #628]	; (8005100 <USB_EPStartXfer+0x370>)
 8004e8a:	400b      	ands	r3, r1
 8004e8c:	69b9      	ldr	r1, [r7, #24]
 8004e8e:	0148      	lsls	r0, r1, #5
 8004e90:	69f9      	ldr	r1, [r7, #28]
 8004e92:	4401      	add	r1, r0
 8004e94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	69b9      	ldr	r1, [r7, #24]
 8004eb4:	0148      	lsls	r0, r1, #5
 8004eb6:	69f9      	ldr	r1, [r7, #28]
 8004eb8:	4401      	add	r1, r0
 8004eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d11f      	bne.n	8004f0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ee8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d14b      	bne.n	8004fa8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	461a      	mov	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	791b      	ldrb	r3, [r3, #4]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d128      	bne.n	8004f86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d110      	bne.n	8004f66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	e00f      	b.n	8004f86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e133      	b.n	8005210 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	791b      	ldrb	r3, [r3, #4]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d015      	beq.n	8004ffc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 811b 	beq.w	8005210 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	2101      	movs	r1, #1
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	69f9      	ldr	r1, [r7, #28]
 8004ff2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	634b      	str	r3, [r1, #52]	; 0x34
 8004ffa:	e109      	b.n	8005210 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d110      	bne.n	800502e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	e00f      	b.n	800504e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6919      	ldr	r1, [r3, #16]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781a      	ldrb	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	b298      	uxth	r0, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	4603      	mov	r3, r0
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fade 	bl	8005624 <USB_WritePacket>
 8005068:	e0d2      	b.n	8005210 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005084:	0cdb      	lsrs	r3, r3, #19
 8005086:	04db      	lsls	r3, r3, #19
 8005088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d126      	bne.n	8005104 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	0148      	lsls	r0, r1, #5
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	4401      	add	r1, r0
 80050d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050d8:	4313      	orrs	r3, r2
 80050da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fa:	6113      	str	r3, [r2, #16]
 80050fc:	e03a      	b.n	8005174 <USB_EPStartXfer+0x3e4>
 80050fe:	bf00      	nop
 8005100:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4413      	add	r3, r2
 800510e:	1e5a      	subs	r2, r3, #1
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	8afa      	ldrh	r2, [r7, #22]
 8005120:	fb03 f202 	mul.w	r2, r3, r2
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	8afb      	ldrh	r3, [r7, #22]
 8005138:	04d9      	lsls	r1, r3, #19
 800513a:	4b38      	ldr	r3, [pc, #224]	; (800521c <USB_EPStartXfer+0x48c>)
 800513c:	400b      	ands	r3, r1
 800513e:	69b9      	ldr	r1, [r7, #24]
 8005140:	0148      	lsls	r0, r1, #5
 8005142:	69f9      	ldr	r1, [r7, #28]
 8005144:	4401      	add	r1, r0
 8005146:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800514a:	4313      	orrs	r3, r2
 800514c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005164:	69b9      	ldr	r1, [r7, #24]
 8005166:	0148      	lsls	r0, r1, #5
 8005168:	69f9      	ldr	r1, [r7, #28]
 800516a:	4401      	add	r1, r0
 800516c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005170:	4313      	orrs	r3, r2
 8005172:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10d      	bne.n	8005196 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6919      	ldr	r1, [r3, #16]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	460a      	mov	r2, r1
 8005194:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d128      	bne.n	80051f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d110      	bne.n	80051d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e00f      	b.n	80051f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800520e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	1ff80000 	.word	0x1ff80000

08005220 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 80ce 	bne.w	80053de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d132      	bne.n	80052b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005264:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005268:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800526c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800528c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	0cdb      	lsrs	r3, r3, #19
 80052aa:	04db      	lsls	r3, r3, #19
 80052ac:	6113      	str	r3, [r2, #16]
 80052ae:	e04e      	b.n	800534e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	0cdb      	lsrs	r3, r3, #19
 80052cc:	04db      	lsls	r3, r3, #19
 80052ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d903      	bls.n	8005308 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533e:	6939      	ldr	r1, [r7, #16]
 8005340:	0148      	lsls	r0, r1, #5
 8005342:	6979      	ldr	r1, [r7, #20]
 8005344:	4401      	add	r1, r0
 8005346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800534a:	4313      	orrs	r3, r2
 800534c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d11e      	bne.n	8005392 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	e097      	b.n	80054c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8083 	beq.w	80054c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	6979      	ldr	r1, [r7, #20]
 80053d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d8:	4313      	orrs	r3, r2
 80053da:	634b      	str	r3, [r1, #52]	; 0x34
 80053dc:	e071      	b.n	80054c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f8:	0cdb      	lsrs	r3, r3, #19
 80053fa:	04db      	lsls	r3, r3, #19
 80053fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800541c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005420:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005454:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005458:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005470:	6939      	ldr	r1, [r7, #16]
 8005472:	0148      	lsls	r0, r1, #5
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	4401      	add	r1, r0
 8005478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800547c:	4313      	orrs	r3, r2
 800547e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10d      	bne.n	80054a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6919      	ldr	r1, [r3, #16]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	460a      	mov	r2, r1
 80054a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d14a      	bne.n	8005584 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005506:	f040 8086 	bne.w	8005616 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800552c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005550:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f242 7210 	movw	r2, #10000	; 0x2710
 800555e:	4293      	cmp	r3, r2
 8005560:	d902      	bls.n	8005568 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
          break;
 8005566:	e056      	b.n	8005616 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800557c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005580:	d0e7      	beq.n	8005552 <USB_EPStopXfer+0x82>
 8005582:	e048      	b.n	8005616 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559c:	d13b      	bne.n	8005616 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	7812      	ldrb	r2, [r2, #0]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	7812      	ldrb	r2, [r2, #0]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d902      	bls.n	80055fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
          break;
 80055fa:	e00c      	b.n	8005616 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005614:	d0e7      	beq.n	80055e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
}
 8005618:	4618      	mov	r0, r3
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	; 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	460b      	mov	r3, r1
 8005634:	71fb      	strb	r3, [r7, #7]
 8005636:	4613      	mov	r3, r2
 8005638:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d123      	bne.n	8005692 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800564a:	88bb      	ldrh	r3, [r7, #4]
 800564c:	3303      	adds	r3, #3
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e018      	b.n	800568a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	031a      	lsls	r2, r3, #12
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005664:	461a      	mov	r2, r3
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3301      	adds	r3, #1
 8005676:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	3301      	adds	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3301      	adds	r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	3301      	adds	r3, #1
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3e2      	bcc.n	8005658 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3724      	adds	r7, #36	; 0x24
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b08b      	sub	sp, #44	; 0x2c
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	e014      	b.n	80056f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	3301      	adds	r3, #1
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	3301      	adds	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	3301      	adds	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	3301      	adds	r3, #1
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	3301      	adds	r3, #1
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3a      	ldr	r2, [r7, #32]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3e6      	bcc.n	80056cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056fe:	8bfb      	ldrh	r3, [r7, #30]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01e      	beq.n	8005742 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800570e:	461a      	mov	r2, r3
 8005710:	f107 0310 	add.w	r3, r7, #16
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	701a      	strb	r2, [r3, #0]
      i++;
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	3301      	adds	r3, #1
 800572e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	3301      	adds	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005736:	8bfb      	ldrh	r3, [r7, #30]
 8005738:	3b01      	subs	r3, #1
 800573a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800573c:	8bfb      	ldrh	r3, [r7, #30]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ea      	bne.n	8005718 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005744:	4618      	mov	r0, r3
 8005746:	372c      	adds	r7, #44	; 0x2c
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d12c      	bne.n	80057c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db12      	blt.n	80057a4 <USB_EPSetStall+0x54>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00f      	beq.n	80057a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e02b      	b.n	800581e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	db12      	blt.n	80057fe <USB_EPSetStall+0xae>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00f      	beq.n	80057fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800581c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d128      	bne.n	800589a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005866:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	791b      	ldrb	r3, [r3, #4]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d003      	beq.n	8005878 <USB_EPClearStall+0x4c>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	791b      	ldrb	r3, [r3, #4]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d138      	bne.n	80058ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e027      	b.n	80058ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	791b      	ldrb	r3, [r3, #4]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d003      	beq.n	80058ca <USB_EPClearStall+0x9e>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	791b      	ldrb	r3, [r3, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d10f      	bne.n	80058ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005916:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800591a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800592c:	68f9      	ldr	r1, [r7, #12]
 800592e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005932:	4313      	orrs	r3, r2
 8005934:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005972:	f023 0302 	bic.w	r3, r3, #2
 8005976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059a0:	f023 0303 	bic.w	r3, r3, #3
 80059a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4013      	ands	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059e0:	68fb      	ldr	r3, [r7, #12]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	0c1b      	lsrs	r3, r3, #16
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	b29b      	uxth	r3, r3
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a84:	68bb      	ldr	r3, [r7, #8]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b087      	sub	sp, #28
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	01db      	lsls	r3, r3, #7
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4013      	ands	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0301 	and.w	r3, r3, #1
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b28:	f023 0307 	bic.w	r3, r3, #7
 8005b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	333c      	adds	r3, #60	; 0x3c
 8005b66:	3304      	adds	r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <USB_EP0_OutStart+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d90a      	bls.n	8005b8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b84:	d101      	bne.n	8005b8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e037      	b.n	8005bfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb8:	f043 0318 	orr.w	r3, r3, #24
 8005bbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005bd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10f      	bne.n	8005bf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	4f54300a 	.word	0x4f54300a

08005c0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <USB_CoreReset+0x64>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e01b      	b.n	8005c62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	daf2      	bge.n	8005c18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f043 0201 	orr.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <USB_CoreReset+0x64>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d901      	bls.n	8005c54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e006      	b.n	8005c62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d0f0      	beq.n	8005c42 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	00030d40 	.word	0x00030d40

08005c74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c84:	f002 fc94 	bl	80085b0 <USBD_static_malloc>
 8005c88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	32b0      	adds	r2, #176	; 0xb0
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e0d4      	b.n	8005e4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ca4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005ca8:	2100      	movs	r1, #0
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f006 ff4a 	bl	800cb44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	32b0      	adds	r2, #176	; 0xb0
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	32b0      	adds	r2, #176	; 0xb0
 8005cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7c1b      	ldrb	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d138      	bne.n	8005d4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cdc:	4b5e      	ldr	r3, [pc, #376]	; (8005e58 <USBD_CDC_Init+0x1e4>)
 8005cde:	7819      	ldrb	r1, [r3, #0]
 8005ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f002 fb3f 	bl	800836a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cec:	4b5a      	ldr	r3, [pc, #360]	; (8005e58 <USBD_CDC_Init+0x1e4>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f003 020f 	and.w	r2, r3, #15
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	2201      	movs	r2, #1
 8005d04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d06:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <USBD_CDC_Init+0x1e8>)
 8005d08:	7819      	ldrb	r1, [r3, #0]
 8005d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d0e:	2202      	movs	r2, #2
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f002 fb2a 	bl	800836a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d16:	4b51      	ldr	r3, [pc, #324]	; (8005e5c <USBD_CDC_Init+0x1e8>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d2e:	2201      	movs	r2, #1
 8005d30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d32:	4b4b      	ldr	r3, [pc, #300]	; (8005e60 <USBD_CDC_Init+0x1ec>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	3326      	adds	r3, #38	; 0x26
 8005d48:	2210      	movs	r2, #16
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e035      	b.n	8005dba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d4e:	4b42      	ldr	r3, [pc, #264]	; (8005e58 <USBD_CDC_Init+0x1e4>)
 8005d50:	7819      	ldrb	r1, [r3, #0]
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	2202      	movs	r2, #2
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f002 fb07 	bl	800836a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <USBD_CDC_Init+0x1e4>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3324      	adds	r3, #36	; 0x24
 8005d72:	2201      	movs	r2, #1
 8005d74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d76:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <USBD_CDC_Init+0x1e8>)
 8005d78:	7819      	ldrb	r1, [r3, #0]
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f002 faf3 	bl	800836a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d84:	4b35      	ldr	r3, [pc, #212]	; (8005e5c <USBD_CDC_Init+0x1e8>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f003 020f 	and.w	r2, r3, #15
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005da0:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <USBD_CDC_Init+0x1ec>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3326      	adds	r3, #38	; 0x26
 8005db6:	2210      	movs	r2, #16
 8005db8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dba:	4b29      	ldr	r3, [pc, #164]	; (8005e60 <USBD_CDC_Init+0x1ec>)
 8005dbc:	7819      	ldrb	r1, [r3, #0]
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f002 fad1 	bl	800836a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005dc8:	4b25      	ldr	r3, [pc, #148]	; (8005e60 <USBD_CDC_Init+0x1ec>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3324      	adds	r3, #36	; 0x24
 8005dde:	2201      	movs	r2, #1
 8005de0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	33b0      	adds	r3, #176	; 0xb0
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e018      	b.n	8005e4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7c1b      	ldrb	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e24:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <USBD_CDC_Init+0x1e8>)
 8005e26:	7819      	ldrb	r1, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f002 fb88 	bl	8008548 <USBD_LL_PrepareReceive>
 8005e38:	e008      	b.n	8005e4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e3a:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <USBD_CDC_Init+0x1e8>)
 8005e3c:	7819      	ldrb	r1, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f002 fb7e 	bl	8008548 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000093 	.word	0x20000093
 8005e5c:	20000094 	.word	0x20000094
 8005e60:	20000095 	.word	0x20000095

08005e64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e70:	4b3a      	ldr	r3, [pc, #232]	; (8005f5c <USBD_CDC_DeInit+0xf8>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 fa9d 	bl	80083b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e7c:	4b37      	ldr	r3, [pc, #220]	; (8005f5c <USBD_CDC_DeInit+0xf8>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3324      	adds	r3, #36	; 0x24
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e96:	4b32      	ldr	r3, [pc, #200]	; (8005f60 <USBD_CDC_DeInit+0xfc>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f002 fa8a 	bl	80083b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005ea2:	4b2f      	ldr	r3, [pc, #188]	; (8005f60 <USBD_CDC_DeInit+0xfc>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005eba:	2200      	movs	r2, #0
 8005ebc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ebe:	4b29      	ldr	r3, [pc, #164]	; (8005f64 <USBD_CDC_DeInit+0x100>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f002 fa76 	bl	80083b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <USBD_CDC_DeInit+0x100>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	f003 020f 	and.w	r2, r3, #15
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	3324      	adds	r3, #36	; 0x24
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ee4:	4b1f      	ldr	r3, [pc, #124]	; (8005f64 <USBD_CDC_DeInit+0x100>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 020f 	and.w	r2, r3, #15
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3326      	adds	r3, #38	; 0x26
 8005efa:	2200      	movs	r2, #0
 8005efc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	32b0      	adds	r2, #176	; 0xb0
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01f      	beq.n	8005f50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	33b0      	adds	r3, #176	; 0xb0
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	32b0      	adds	r2, #176	; 0xb0
 8005f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f002 fb4a 	bl	80085cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	32b0      	adds	r2, #176	; 0xb0
 8005f42:	2100      	movs	r1, #0
 8005f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000093 	.word	0x20000093
 8005f60:	20000094 	.word	0x20000094
 8005f64:	20000095 	.word	0x20000095

08005f68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	32b0      	adds	r2, #176	; 0xb0
 8005f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e0bf      	b.n	8006118 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d050      	beq.n	8006046 <USBD_CDC_Setup+0xde>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	f040 80af 	bne.w	8006108 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	88db      	ldrh	r3, [r3, #6]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d03a      	beq.n	8006028 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b25b      	sxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da1b      	bge.n	8005ff4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	33b0      	adds	r3, #176	; 0xb0
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	88d2      	ldrh	r2, [r2, #6]
 8005fd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	88db      	ldrh	r3, [r3, #6]
 8005fde:	2b07      	cmp	r3, #7
 8005fe0:	bf28      	it	cs
 8005fe2:	2307      	movcs	r3, #7
 8005fe4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	89fa      	ldrh	r2, [r7, #14]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 fd89 	bl	8007b04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005ff2:	e090      	b.n	8006116 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	785a      	ldrb	r2, [r3, #1]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	88db      	ldrh	r3, [r3, #6]
 8006002:	2b3f      	cmp	r3, #63	; 0x3f
 8006004:	d803      	bhi.n	800600e <USBD_CDC_Setup+0xa6>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	88db      	ldrh	r3, [r3, #6]
 800600a:	b2da      	uxtb	r2, r3
 800600c:	e000      	b.n	8006010 <USBD_CDC_Setup+0xa8>
 800600e:	2240      	movs	r2, #64	; 0x40
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006016:	6939      	ldr	r1, [r7, #16]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800601e:	461a      	mov	r2, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fd9b 	bl	8007b5c <USBD_CtlPrepareRx>
      break;
 8006026:	e076      	b.n	8006116 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	33b0      	adds	r3, #176	; 0xb0
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	7850      	ldrb	r0, [r2, #1]
 800603e:	2200      	movs	r2, #0
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	4798      	blx	r3
      break;
 8006044:	e067      	b.n	8006116 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b0b      	cmp	r3, #11
 800604c:	d851      	bhi.n	80060f2 <USBD_CDC_Setup+0x18a>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <USBD_CDC_Setup+0xec>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	08006085 	.word	0x08006085
 8006058:	08006101 	.word	0x08006101
 800605c:	080060f3 	.word	0x080060f3
 8006060:	080060f3 	.word	0x080060f3
 8006064:	080060f3 	.word	0x080060f3
 8006068:	080060f3 	.word	0x080060f3
 800606c:	080060f3 	.word	0x080060f3
 8006070:	080060f3 	.word	0x080060f3
 8006074:	080060f3 	.word	0x080060f3
 8006078:	080060f3 	.word	0x080060f3
 800607c:	080060af 	.word	0x080060af
 8006080:	080060d9 	.word	0x080060d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b03      	cmp	r3, #3
 800608e:	d107      	bne.n	80060a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006090:	f107 030a 	add.w	r3, r7, #10
 8006094:	2202      	movs	r2, #2
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fd33 	bl	8007b04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800609e:	e032      	b.n	8006106 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fcbd 	bl	8007a22 <USBD_CtlError>
            ret = USBD_FAIL;
 80060a8:	2303      	movs	r3, #3
 80060aa:	75fb      	strb	r3, [r7, #23]
          break;
 80060ac:	e02b      	b.n	8006106 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d107      	bne.n	80060ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060ba:	f107 030d 	add.w	r3, r7, #13
 80060be:	2201      	movs	r2, #1
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fd1e 	bl	8007b04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060c8:	e01d      	b.n	8006106 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fca8 	bl	8007a22 <USBD_CtlError>
            ret = USBD_FAIL;
 80060d2:	2303      	movs	r3, #3
 80060d4:	75fb      	strb	r3, [r7, #23]
          break;
 80060d6:	e016      	b.n	8006106 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d00f      	beq.n	8006104 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fc9b 	bl	8007a22 <USBD_CtlError>
            ret = USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060f0:	e008      	b.n	8006104 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fc94 	bl	8007a22 <USBD_CtlError>
          ret = USBD_FAIL;
 80060fa:	2303      	movs	r3, #3
 80060fc:	75fb      	strb	r3, [r7, #23]
          break;
 80060fe:	e002      	b.n	8006106 <USBD_CDC_Setup+0x19e>
          break;
 8006100:	bf00      	nop
 8006102:	e008      	b.n	8006116 <USBD_CDC_Setup+0x1ae>
          break;
 8006104:	bf00      	nop
      }
      break;
 8006106:	e006      	b.n	8006116 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 fc89 	bl	8007a22 <USBD_CtlError>
      ret = USBD_FAIL;
 8006110:	2303      	movs	r3, #3
 8006112:	75fb      	strb	r3, [r7, #23]
      break;
 8006114:	bf00      	nop
  }

  return (uint8_t)ret;
 8006116:	7dfb      	ldrb	r3, [r7, #23]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006132:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	32b0      	adds	r2, #176	; 0xb0
 800613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006146:	2303      	movs	r3, #3
 8006148:	e065      	b.n	8006216 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	32b0      	adds	r2, #176	; 0xb0
 8006154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006158:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	3318      	adds	r3, #24
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d02f      	beq.n	80061d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 020f 	and.w	r2, r3, #15
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	3318      	adds	r3, #24
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	f003 010f 	and.w	r1, r3, #15
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	460b      	mov	r3, r1
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	440b      	add	r3, r1
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4403      	add	r3, r0
 800619c:	3348      	adds	r3, #72	; 0x48
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d112      	bne.n	80061d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	f003 020f 	and.w	r2, r3, #15
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	3318      	adds	r3, #24
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061c6:	78f9      	ldrb	r1, [r7, #3]
 80061c8:	2300      	movs	r3, #0
 80061ca:	2200      	movs	r2, #0
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 f99a 	bl	8008506 <USBD_LL_Transmit>
 80061d2:	e01f      	b.n	8006214 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	33b0      	adds	r3, #176	; 0xb0
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d010      	beq.n	8006214 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	33b0      	adds	r3, #176	; 0xb0
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006210:	78fa      	ldrb	r2, [r7, #3]
 8006212:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	32b0      	adds	r2, #176	; 0xb0
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	32b0      	adds	r2, #176	; 0xb0
 8006244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800624c:	2303      	movs	r3, #3
 800624e:	e01a      	b.n	8006286 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f002 f998 	bl	800858a <USBD_LL_GetRxDataSize>
 800625a:	4602      	mov	r2, r0
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	33b0      	adds	r3, #176	; 0xb0
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006280:	4611      	mov	r1, r2
 8006282:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	32b0      	adds	r2, #176	; 0xb0
 80062a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e025      	b.n	80062fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	33b0      	adds	r3, #176	; 0xb0
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01a      	beq.n	80062fa <USBD_CDC_EP0_RxReady+0x6c>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062ca:	2bff      	cmp	r3, #255	; 0xff
 80062cc:	d015      	beq.n	80062fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	33b0      	adds	r3, #176	; 0xb0
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80062e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062ee:	b292      	uxth	r2, r2
 80062f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800630c:	2182      	movs	r1, #130	; 0x82
 800630e:	4818      	ldr	r0, [pc, #96]	; (8006370 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006310:	f000 fd4f 	bl	8006db2 <USBD_GetEpDesc>
 8006314:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006316:	2101      	movs	r1, #1
 8006318:	4815      	ldr	r0, [pc, #84]	; (8006370 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800631a:	f000 fd4a 	bl	8006db2 <USBD_GetEpDesc>
 800631e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006320:	2181      	movs	r1, #129	; 0x81
 8006322:	4813      	ldr	r0, [pc, #76]	; (8006370 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006324:	f000 fd45 	bl	8006db2 <USBD_GetEpDesc>
 8006328:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2210      	movs	r2, #16
 8006334:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2200      	movs	r2, #0
 8006340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006344:	711a      	strb	r2, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d006      	beq.n	800635e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006358:	711a      	strb	r2, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2243      	movs	r2, #67	; 0x43
 8006362:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006364:	4b02      	ldr	r3, [pc, #8]	; (8006370 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000050 	.word	0x20000050

08006374 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800637c:	2182      	movs	r1, #130	; 0x82
 800637e:	4818      	ldr	r0, [pc, #96]	; (80063e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006380:	f000 fd17 	bl	8006db2 <USBD_GetEpDesc>
 8006384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006386:	2101      	movs	r1, #1
 8006388:	4815      	ldr	r0, [pc, #84]	; (80063e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800638a:	f000 fd12 	bl	8006db2 <USBD_GetEpDesc>
 800638e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006390:	2181      	movs	r1, #129	; 0x81
 8006392:	4813      	ldr	r0, [pc, #76]	; (80063e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006394:	f000 fd0d 	bl	8006db2 <USBD_GetEpDesc>
 8006398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2210      	movs	r2, #16
 80063a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2200      	movs	r2, #0
 80063b0:	711a      	strb	r2, [r3, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f042 0202 	orr.w	r2, r2, #2
 80063b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	711a      	strb	r2, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f042 0202 	orr.w	r2, r2, #2
 80063cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2243      	movs	r2, #67	; 0x43
 80063d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063d4:	4b02      	ldr	r3, [pc, #8]	; (80063e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000050 	.word	0x20000050

080063e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063ec:	2182      	movs	r1, #130	; 0x82
 80063ee:	4818      	ldr	r0, [pc, #96]	; (8006450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063f0:	f000 fcdf 	bl	8006db2 <USBD_GetEpDesc>
 80063f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063f6:	2101      	movs	r1, #1
 80063f8:	4815      	ldr	r0, [pc, #84]	; (8006450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063fa:	f000 fcda 	bl	8006db2 <USBD_GetEpDesc>
 80063fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006400:	2181      	movs	r1, #129	; 0x81
 8006402:	4813      	ldr	r0, [pc, #76]	; (8006450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006404:	f000 fcd5 	bl	8006db2 <USBD_GetEpDesc>
 8006408:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2210      	movs	r2, #16
 8006414:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2200      	movs	r2, #0
 8006420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006424:	711a      	strb	r2, [r3, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d006      	beq.n	800643e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006438:	711a      	strb	r2, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2243      	movs	r2, #67	; 0x43
 8006442:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006444:	4b02      	ldr	r3, [pc, #8]	; (8006450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000050 	.word	0x20000050

08006454 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	220a      	movs	r2, #10
 8006460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006462:	4b03      	ldr	r3, [pc, #12]	; (8006470 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	2000000c 	.word	0x2000000c

08006474 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006484:	2303      	movs	r3, #3
 8006486:	e009      	b.n	800649c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	33b0      	adds	r3, #176	; 0xb0
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	32b0      	adds	r2, #176	; 0xb0
 80064be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e008      	b.n	80064e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	32b0      	adds	r2, #176	; 0xb0
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e004      	b.n	800651a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32b0      	adds	r2, #176	; 0xb0
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	32b0      	adds	r2, #176	; 0xb0
 800654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006556:	2303      	movs	r3, #3
 8006558:	e025      	b.n	80065a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11f      	bne.n	80065a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2201      	movs	r2, #1
 8006568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <USBD_CDC_TransmitPacket+0x88>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4403      	add	r3, r0
 8006586:	3318      	adds	r3, #24
 8006588:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800658a:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <USBD_CDC_TransmitPacket+0x88>)
 800658c:	7819      	ldrb	r1, [r3, #0]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 ffb3 	bl	8008506 <USBD_LL_Transmit>

    ret = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000093 	.word	0x20000093

080065b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	32b0      	adds	r2, #176	; 0xb0
 80065c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	32b0      	adds	r2, #176	; 0xb0
 80065d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80065de:	2303      	movs	r3, #3
 80065e0:	e018      	b.n	8006614 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7c1b      	ldrb	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <USBD_CDC_ReceivePacket+0x68>)
 80065ec:	7819      	ldrb	r1, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 ffa5 	bl	8008548 <USBD_LL_PrepareReceive>
 80065fe:	e008      	b.n	8006612 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <USBD_CDC_ReceivePacket+0x68>)
 8006602:	7819      	ldrb	r1, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 ff9b 	bl	8008548 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000094 	.word	0x20000094

08006620 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006634:	2303      	movs	r3, #3
 8006636:	e01f      	b.n	8006678 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	79fa      	ldrb	r2, [r7, #7]
 800666a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 fe15 	bl	800829c <USBD_LL_Init>
 8006672:	4603      	mov	r3, r0
 8006674:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006694:	2303      	movs	r3, #3
 8006696:	e025      	b.n	80066e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	32ae      	adds	r2, #174	; 0xae
 80066aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00f      	beq.n	80066d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	32ae      	adds	r2, #174	; 0xae
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	f107 020e 	add.w	r2, r7, #14
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
 80066cc:	4602      	mov	r2, r0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fe1d 	bl	8008334 <USBD_LL_Start>
 80066fa:	4603      	mov	r3, r0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800670c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	4611      	mov	r1, r2
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	4611      	mov	r1, r2
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006778:	2303      	movs	r3, #3
 800677a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f001 f908 	bl	80079ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d01a      	beq.n	80067f8 <USBD_LL_SetupStage+0x72>
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d822      	bhi.n	800680c <USBD_LL_SetupStage+0x86>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <USBD_LL_SetupStage+0x4a>
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d00a      	beq.n	80067e4 <USBD_LL_SetupStage+0x5e>
 80067ce:	e01d      	b.n	800680c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb5f 	bl	8006e9c <USBD_StdDevReq>
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
      break;
 80067e2:	e020      	b.n	8006826 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fbc7 	bl	8006f80 <USBD_StdItfReq>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
      break;
 80067f6:	e016      	b.n	8006826 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fc29 	bl	8007058 <USBD_StdEPReq>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
      break;
 800680a:	e00c      	b.n	8006826 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006816:	b2db      	uxtb	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fdea 	bl	80083f4 <USBD_LL_StallEP>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	bf00      	nop
  }

  return ret;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	460b      	mov	r3, r1
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d16e      	bne.n	8006926 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800684e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006856:	2b03      	cmp	r3, #3
 8006858:	f040 8098 	bne.w	800698c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d913      	bls.n	8006890 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	4293      	cmp	r3, r2
 8006880:	bf28      	it	cs
 8006882:	4613      	movcs	r3, r2
 8006884:	461a      	mov	r2, r3
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f001 f984 	bl	8007b96 <USBD_CtlContinueRx>
 800688e:	e07d      	b.n	800698c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	2b02      	cmp	r3, #2
 800689c:	d014      	beq.n	80068c8 <USBD_LL_DataOutStage+0x98>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d81d      	bhi.n	80068de <USBD_LL_DataOutStage+0xae>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <USBD_LL_DataOutStage+0x7c>
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d003      	beq.n	80068b2 <USBD_LL_DataOutStage+0x82>
 80068aa:	e018      	b.n	80068de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	75bb      	strb	r3, [r7, #22]
            break;
 80068b0:	e018      	b.n	80068e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fa5e 	bl	8006d7e <USBD_CoreFindIF>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75bb      	strb	r3, [r7, #22]
            break;
 80068c6:	e00d      	b.n	80068e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fa60 	bl	8006d98 <USBD_CoreFindEP>
 80068d8:	4603      	mov	r3, r0
 80068da:	75bb      	strb	r3, [r7, #22]
            break;
 80068dc:	e002      	b.n	80068e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	75bb      	strb	r3, [r7, #22]
            break;
 80068e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80068e4:	7dbb      	ldrb	r3, [r7, #22]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d119      	bne.n	800691e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d113      	bne.n	800691e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80068f6:	7dba      	ldrb	r2, [r7, #22]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	32ae      	adds	r2, #174	; 0xae
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006906:	7dba      	ldrb	r2, [r7, #22]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800690e:	7dba      	ldrb	r2, [r7, #22]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	32ae      	adds	r2, #174	; 0xae
 8006914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f001 f94a 	bl	8007bb8 <USBD_CtlSendStatus>
 8006924:	e032      	b.n	800698c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692c:	b2db      	uxtb	r3, r3
 800692e:	4619      	mov	r1, r3
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fa31 	bl	8006d98 <USBD_CoreFindEP>
 8006936:	4603      	mov	r3, r0
 8006938:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800693a:	7dbb      	ldrb	r3, [r7, #22]
 800693c:	2bff      	cmp	r3, #255	; 0xff
 800693e:	d025      	beq.n	800698c <USBD_LL_DataOutStage+0x15c>
 8006940:	7dbb      	ldrb	r3, [r7, #22]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d122      	bne.n	800698c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b03      	cmp	r3, #3
 8006950:	d117      	bne.n	8006982 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006952:	7dba      	ldrb	r2, [r7, #22]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	32ae      	adds	r2, #174	; 0xae
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00f      	beq.n	8006982 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006962:	7dba      	ldrb	r2, [r7, #22]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800696a:	7dba      	ldrb	r2, [r7, #22]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	32ae      	adds	r2, #174	; 0xae
 8006970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	7afa      	ldrb	r2, [r7, #11]
 8006978:	4611      	mov	r1, r2
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	4798      	blx	r3
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	e000      	b.n	800698e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	460b      	mov	r3, r1
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d16f      	bne.n	8006a8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3314      	adds	r3, #20
 80069ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d15a      	bne.n	8006a70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d914      	bls.n	80069f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	461a      	mov	r2, r3
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f001 f8ac 	bl	8007b3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069e2:	2300      	movs	r3, #0
 80069e4:	2200      	movs	r2, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fdad 	bl	8008548 <USBD_LL_PrepareReceive>
 80069ee:	e03f      	b.n	8006a70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d11c      	bne.n	8006a36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d316      	bcc.n	8006a36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d20f      	bcs.n	8006a36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f001 f88d 	bl	8007b3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 fd8a 	bl	8008548 <USBD_LL_PrepareReceive>
 8006a34:	e01c      	b.n	8006a70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d10f      	bne.n	8006a62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d009      	beq.n	8006a62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a62:	2180      	movs	r1, #128	; 0x80
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f001 fcc5 	bl	80083f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f001 f8b7 	bl	8007bde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d03a      	beq.n	8006af0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fe42 	bl	8006704 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a88:	e032      	b.n	8006af0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	4619      	mov	r1, r3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f97f 	bl	8006d98 <USBD_CoreFindEP>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	2bff      	cmp	r3, #255	; 0xff
 8006aa2:	d025      	beq.n	8006af0 <USBD_LL_DataInStage+0x15a>
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d122      	bne.n	8006af0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d11c      	bne.n	8006af0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ab6:	7dfa      	ldrb	r2, [r7, #23]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	32ae      	adds	r2, #174	; 0xae
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d014      	beq.n	8006af0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ac6:	7dfa      	ldrb	r2, [r7, #23]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006ace:	7dfa      	ldrb	r2, [r7, #23]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	32ae      	adds	r2, #174	; 0xae
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	7afa      	ldrb	r2, [r7, #11]
 8006adc:	4611      	mov	r1, r2
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006ae6:	7dbb      	ldrb	r3, [r7, #22]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006aec:	7dbb      	ldrb	r3, [r7, #22]
 8006aee:	e000      	b.n	8006af2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d014      	beq.n	8006b60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6852      	ldr	r2, [r2, #4]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	4611      	mov	r1, r2
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b60:	2340      	movs	r3, #64	; 0x40
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 fbff 	bl	800836a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fbf1 	bl	800836a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2240      	movs	r2, #64	; 0x40
 8006b92:	621a      	str	r2, [r3, #32]

  return ret;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	78fa      	ldrb	r2, [r7, #3]
 8006bae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d106      	bne.n	8006c0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d110      	bne.n	8006c50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	32ae      	adds	r2, #174	; 0xae
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e01c      	b.n	8006cb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d115      	bne.n	8006cb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	32ae      	adds	r2, #174	; 0xae
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32ae      	adds	r2, #174	; 0xae
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	32ae      	adds	r2, #174	; 0xae
 8006cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e01c      	b.n	8006d1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d115      	bne.n	8006d18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	32ae      	adds	r2, #174	; 0xae
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32ae      	adds	r2, #174	; 0xae
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	4611      	mov	r1, r2
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00e      	beq.n	8006d74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6852      	ldr	r2, [r2, #4]
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	4611      	mov	r1, r2
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006d70:	2303      	movs	r3, #3
 8006d72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	460b      	mov	r3, r1
 8006d88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006da4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d920      	bls.n	8006e1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006de2:	e013      	b.n	8006e0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006de4:	f107 030a 	add.w	r3, r7, #10
 8006de8:	4619      	mov	r1, r3
 8006dea:	6978      	ldr	r0, [r7, #20]
 8006dec:	f000 f81b 	bl	8006e26 <USBD_GetNextDesc>
 8006df0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d108      	bne.n	8006e0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	789b      	ldrb	r3, [r3, #2]
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d008      	beq.n	8006e1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	885b      	ldrh	r3, [r3, #2]
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	897b      	ldrh	r3, [r7, #10]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d8e5      	bhi.n	8006de4 <USBD_GetEpDesc+0x32>
 8006e18:	e000      	b.n	8006e1c <USBD_GetEpDesc+0x6a>
          break;
 8006e1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e1c:	693b      	ldr	r3, [r7, #16]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	881a      	ldrh	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4413      	add	r3, r2
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4413      	add	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e52:	68fb      	ldr	r3, [r7, #12]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	3301      	adds	r3, #1
 8006e76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e7e:	8a3b      	ldrh	r3, [r7, #16]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	b21a      	sxth	r2, r3
 8006e84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	b21b      	sxth	r3, r3
 8006e8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d005      	beq.n	8006ec2 <USBD_StdDevReq+0x26>
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d857      	bhi.n	8006f6a <USBD_StdDevReq+0xce>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00f      	beq.n	8006ede <USBD_StdDevReq+0x42>
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d153      	bne.n	8006f6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	32ae      	adds	r2, #174	; 0xae
 8006ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	e04a      	b.n	8006f74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b09      	cmp	r3, #9
 8006ee4:	d83b      	bhi.n	8006f5e <USBD_StdDevReq+0xc2>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <USBD_StdDevReq+0x50>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f41 	.word	0x08006f41
 8006ef0:	08006f55 	.word	0x08006f55
 8006ef4:	08006f5f 	.word	0x08006f5f
 8006ef8:	08006f4b 	.word	0x08006f4b
 8006efc:	08006f5f 	.word	0x08006f5f
 8006f00:	08006f1f 	.word	0x08006f1f
 8006f04:	08006f15 	.word	0x08006f15
 8006f08:	08006f5f 	.word	0x08006f5f
 8006f0c:	08006f37 	.word	0x08006f37
 8006f10:	08006f29 	.word	0x08006f29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa3c 	bl	8007394 <USBD_GetDescriptor>
          break;
 8006f1c:	e024      	b.n	8006f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fba1 	bl	8007668 <USBD_SetAddress>
          break;
 8006f26:	e01f      	b.n	8006f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fbe0 	bl	80076f0 <USBD_SetConfig>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
          break;
 8006f34:	e018      	b.n	8006f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fc83 	bl	8007844 <USBD_GetConfig>
          break;
 8006f3e:	e013      	b.n	8006f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fcb4 	bl	80078b0 <USBD_GetStatus>
          break;
 8006f48:	e00e      	b.n	8006f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fce3 	bl	8007918 <USBD_SetFeature>
          break;
 8006f52:	e009      	b.n	8006f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fd07 	bl	800796a <USBD_ClrFeature>
          break;
 8006f5c:	e004      	b.n	8006f68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fd5e 	bl	8007a22 <USBD_CtlError>
          break;
 8006f66:	bf00      	nop
      }
      break;
 8006f68:	e004      	b.n	8006f74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fd58 	bl	8007a22 <USBD_CtlError>
      break;
 8006f72:	bf00      	nop
  }

  return ret;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop

08006f80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d005      	beq.n	8006fa6 <USBD_StdItfReq+0x26>
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d852      	bhi.n	8007044 <USBD_StdItfReq+0xc4>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <USBD_StdItfReq+0x26>
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d14e      	bne.n	8007044 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d840      	bhi.n	8007036 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	889b      	ldrh	r3, [r3, #4]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d836      	bhi.n	800702c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	889b      	ldrh	r3, [r3, #4]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fed9 	bl	8006d7e <USBD_CoreFindIF>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2bff      	cmp	r3, #255	; 0xff
 8006fd4:	d01d      	beq.n	8007012 <USBD_StdItfReq+0x92>
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d11a      	bne.n	8007012 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006fdc:	7bba      	ldrb	r2, [r7, #14]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	32ae      	adds	r2, #174	; 0xae
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00f      	beq.n	800700c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006fec:	7bba      	ldrb	r2, [r7, #14]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ff4:	7bba      	ldrb	r2, [r7, #14]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32ae      	adds	r2, #174	; 0xae
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800700a:	e004      	b.n	8007016 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800700c:	2303      	movs	r3, #3
 800700e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007010:	e001      	b.n	8007016 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007012:	2303      	movs	r3, #3
 8007014:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	88db      	ldrh	r3, [r3, #6]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d110      	bne.n	8007040 <USBD_StdItfReq+0xc0>
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10d      	bne.n	8007040 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fdc7 	bl	8007bb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800702a:	e009      	b.n	8007040 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fcf7 	bl	8007a22 <USBD_CtlError>
          break;
 8007034:	e004      	b.n	8007040 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fcf2 	bl	8007a22 <USBD_CtlError>
          break;
 800703e:	e000      	b.n	8007042 <USBD_StdItfReq+0xc2>
          break;
 8007040:	bf00      	nop
      }
      break;
 8007042:	e004      	b.n	800704e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fceb 	bl	8007a22 <USBD_CtlError>
      break;
 800704c:	bf00      	nop
  }

  return ret;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	889b      	ldrh	r3, [r3, #4]
 800706a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d007      	beq.n	8007088 <USBD_StdEPReq+0x30>
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	f200 817f 	bhi.w	800737c <USBD_StdEPReq+0x324>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d02a      	beq.n	80070d8 <USBD_StdEPReq+0x80>
 8007082:	2b20      	cmp	r3, #32
 8007084:	f040 817a 	bne.w	800737c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fe83 	bl	8006d98 <USBD_CoreFindEP>
 8007092:	4603      	mov	r3, r0
 8007094:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	2bff      	cmp	r3, #255	; 0xff
 800709a:	f000 8174 	beq.w	8007386 <USBD_StdEPReq+0x32e>
 800709e:	7b7b      	ldrb	r3, [r7, #13]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 8170 	bne.w	8007386 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070a6:	7b7a      	ldrb	r2, [r7, #13]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070ae:	7b7a      	ldrb	r2, [r7, #13]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	32ae      	adds	r2, #174	; 0xae
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8163 	beq.w	8007386 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80070c0:	7b7a      	ldrb	r2, [r7, #13]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	32ae      	adds	r2, #174	; 0xae
 80070c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070d6:	e156      	b.n	8007386 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d008      	beq.n	80070f2 <USBD_StdEPReq+0x9a>
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	f300 8145 	bgt.w	8007370 <USBD_StdEPReq+0x318>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 809b 	beq.w	8007222 <USBD_StdEPReq+0x1ca>
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d03c      	beq.n	800716a <USBD_StdEPReq+0x112>
 80070f0:	e13e      	b.n	8007370 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d002      	beq.n	8007104 <USBD_StdEPReq+0xac>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d016      	beq.n	8007130 <USBD_StdEPReq+0xd8>
 8007102:	e02c      	b.n	800715e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <USBD_StdEPReq+0xce>
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d00a      	beq.n	8007126 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f96d 	bl	80083f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 f969 	bl	80083f4 <USBD_LL_StallEP>
 8007122:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007124:	e020      	b.n	8007168 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc7a 	bl	8007a22 <USBD_CtlError>
              break;
 800712e:	e01b      	b.n	8007168 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	885b      	ldrh	r3, [r3, #2]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10e      	bne.n	8007156 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <USBD_StdEPReq+0xfe>
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d008      	beq.n	8007156 <USBD_StdEPReq+0xfe>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	88db      	ldrh	r3, [r3, #6]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f94f 	bl	80083f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fd2e 	bl	8007bb8 <USBD_CtlSendStatus>

              break;
 800715c:	e004      	b.n	8007168 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fc5e 	bl	8007a22 <USBD_CtlError>
              break;
 8007166:	bf00      	nop
          }
          break;
 8007168:	e107      	b.n	800737a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d002      	beq.n	800717c <USBD_StdEPReq+0x124>
 8007176:	2b03      	cmp	r3, #3
 8007178:	d016      	beq.n	80071a8 <USBD_StdEPReq+0x150>
 800717a:	e04b      	b.n	8007214 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00d      	beq.n	800719e <USBD_StdEPReq+0x146>
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b80      	cmp	r3, #128	; 0x80
 8007186:	d00a      	beq.n	800719e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 f931 	bl	80083f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007192:	2180      	movs	r1, #128	; 0x80
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f92d 	bl	80083f4 <USBD_LL_StallEP>
 800719a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800719c:	e040      	b.n	8007220 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fc3e 	bl	8007a22 <USBD_CtlError>
              break;
 80071a6:	e03b      	b.n	8007220 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	885b      	ldrh	r3, [r3, #2]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d136      	bne.n	800721e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 f937 	bl	8008432 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fcf7 	bl	8007bb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fde2 	bl	8006d98 <USBD_CoreFindEP>
 80071d4:	4603      	mov	r3, r0
 80071d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071d8:	7b7b      	ldrb	r3, [r7, #13]
 80071da:	2bff      	cmp	r3, #255	; 0xff
 80071dc:	d01f      	beq.n	800721e <USBD_StdEPReq+0x1c6>
 80071de:	7b7b      	ldrb	r3, [r7, #13]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11c      	bne.n	800721e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80071e4:	7b7a      	ldrb	r2, [r7, #13]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80071ec:	7b7a      	ldrb	r2, [r7, #13]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	32ae      	adds	r2, #174	; 0xae
 80071f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d010      	beq.n	800721e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071fc:	7b7a      	ldrb	r2, [r7, #13]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	32ae      	adds	r2, #174	; 0xae
 8007202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007212:	e004      	b.n	800721e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fc03 	bl	8007a22 <USBD_CtlError>
              break;
 800721c:	e000      	b.n	8007220 <USBD_StdEPReq+0x1c8>
              break;
 800721e:	bf00      	nop
          }
          break;
 8007220:	e0ab      	b.n	800737a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d002      	beq.n	8007234 <USBD_StdEPReq+0x1dc>
 800722e:	2b03      	cmp	r3, #3
 8007230:	d032      	beq.n	8007298 <USBD_StdEPReq+0x240>
 8007232:	e097      	b.n	8007364 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <USBD_StdEPReq+0x1f2>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d004      	beq.n	800724a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fbed 	bl	8007a22 <USBD_CtlError>
                break;
 8007248:	e091      	b.n	800736e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800724a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800724e:	2b00      	cmp	r3, #0
 8007250:	da0b      	bge.n	800726a <USBD_StdEPReq+0x212>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	3310      	adds	r3, #16
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4413      	add	r3, r2
 8007266:	3304      	adds	r3, #4
 8007268:	e00b      	b.n	8007282 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	4413      	add	r3, r2
 8007280:	3304      	adds	r3, #4
 8007282:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2202      	movs	r2, #2
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fc37 	bl	8007b04 <USBD_CtlSendData>
              break;
 8007296:	e06a      	b.n	800736e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	da11      	bge.n	80072c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	f003 020f 	and.w	r2, r3, #15
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	3324      	adds	r3, #36	; 0x24
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d117      	bne.n	80072ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fbb0 	bl	8007a22 <USBD_CtlError>
                  break;
 80072c2:	e054      	b.n	800736e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fb9d 	bl	8007a22 <USBD_CtlError>
                  break;
 80072e8:	e041      	b.n	800736e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da0b      	bge.n	800730a <USBD_StdEPReq+0x2b2>
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	3310      	adds	r3, #16
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	3304      	adds	r3, #4
 8007308:	e00b      	b.n	8007322 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	3304      	adds	r3, #4
 8007322:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <USBD_StdEPReq+0x2d8>
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b80      	cmp	r3, #128	; 0x80
 800732e:	d103      	bne.n	8007338 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e00e      	b.n	8007356 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007338:	7bbb      	ldrb	r3, [r7, #14]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 f897 	bl	8008470 <USBD_LL_IsStallEP>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e002      	b.n	8007356 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2202      	movs	r2, #2
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fbd1 	bl	8007b04 <USBD_CtlSendData>
              break;
 8007362:	e004      	b.n	800736e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fb5b 	bl	8007a22 <USBD_CtlError>
              break;
 800736c:	bf00      	nop
          }
          break;
 800736e:	e004      	b.n	800737a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fb55 	bl	8007a22 <USBD_CtlError>
          break;
 8007378:	bf00      	nop
      }
      break;
 800737a:	e005      	b.n	8007388 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fb4f 	bl	8007a22 <USBD_CtlError>
      break;
 8007384:	e000      	b.n	8007388 <USBD_StdEPReq+0x330>
      break;
 8007386:	bf00      	nop
  }

  return ret;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	885b      	ldrh	r3, [r3, #2]
 80073ae:	0a1b      	lsrs	r3, r3, #8
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	2b06      	cmp	r3, #6
 80073b6:	f200 8128 	bhi.w	800760a <USBD_GetDescriptor+0x276>
 80073ba:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <USBD_GetDescriptor+0x2c>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	080073dd 	.word	0x080073dd
 80073c4:	080073f5 	.word	0x080073f5
 80073c8:	08007435 	.word	0x08007435
 80073cc:	0800760b 	.word	0x0800760b
 80073d0:	0800760b 	.word	0x0800760b
 80073d4:	080075ab 	.word	0x080075ab
 80073d8:	080075d7 	.word	0x080075d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	7c12      	ldrb	r2, [r2, #16]
 80073e8:	f107 0108 	add.w	r1, r7, #8
 80073ec:	4610      	mov	r0, r2
 80073ee:	4798      	blx	r3
 80073f0:	60f8      	str	r0, [r7, #12]
      break;
 80073f2:	e112      	b.n	800761a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7c1b      	ldrb	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10d      	bne.n	8007418 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	f107 0208 	add.w	r2, r7, #8
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
 800740c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3301      	adds	r3, #1
 8007412:	2202      	movs	r2, #2
 8007414:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007416:	e100      	b.n	800761a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	f107 0208 	add.w	r2, r7, #8
 8007424:	4610      	mov	r0, r2
 8007426:	4798      	blx	r3
 8007428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	2202      	movs	r2, #2
 8007430:	701a      	strb	r2, [r3, #0]
      break;
 8007432:	e0f2      	b.n	800761a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	885b      	ldrh	r3, [r3, #2]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b05      	cmp	r3, #5
 800743c:	f200 80ac 	bhi.w	8007598 <USBD_GetDescriptor+0x204>
 8007440:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <USBD_GetDescriptor+0xb4>)
 8007442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007446:	bf00      	nop
 8007448:	08007461 	.word	0x08007461
 800744c:	08007495 	.word	0x08007495
 8007450:	080074c9 	.word	0x080074c9
 8007454:	080074fd 	.word	0x080074fd
 8007458:	08007531 	.word	0x08007531
 800745c:	08007565 	.word	0x08007565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e091      	b.n	80075a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 facb 	bl	8007a22 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e089      	b.n	80075a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e077      	b.n	80075a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fab1 	bl	8007a22 <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e06f      	b.n	80075a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	7c12      	ldrb	r2, [r2, #16]
 80074e0:	f107 0108 	add.w	r1, r7, #8
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ea:	e05d      	b.n	80075a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa97 	bl	8007a22 <USBD_CtlError>
            err++;
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	3301      	adds	r3, #1
 80074f8:	72fb      	strb	r3, [r7, #11]
          break;
 80074fa:	e055      	b.n	80075a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	7c12      	ldrb	r2, [r2, #16]
 8007514:	f107 0108 	add.w	r1, r7, #8
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800751e:	e043      	b.n	80075a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa7d 	bl	8007a22 <USBD_CtlError>
            err++;
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	3301      	adds	r3, #1
 800752c:	72fb      	strb	r3, [r7, #11]
          break;
 800752e:	e03b      	b.n	80075a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	7c12      	ldrb	r2, [r2, #16]
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007552:	e029      	b.n	80075a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa63 	bl	8007a22 <USBD_CtlError>
            err++;
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	3301      	adds	r3, #1
 8007560:	72fb      	strb	r3, [r7, #11]
          break;
 8007562:	e021      	b.n	80075a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	f107 0108 	add.w	r1, r7, #8
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
 8007584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007586:	e00f      	b.n	80075a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa49 	bl	8007a22 <USBD_CtlError>
            err++;
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	3301      	adds	r3, #1
 8007594:	72fb      	strb	r3, [r7, #11]
          break;
 8007596:	e007      	b.n	80075a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa41 	bl	8007a22 <USBD_CtlError>
          err++;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	3301      	adds	r3, #1
 80075a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075a6:	bf00      	nop
      }
      break;
 80075a8:	e037      	b.n	800761a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7c1b      	ldrb	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	f107 0208 	add.w	r2, r7, #8
 80075be:	4610      	mov	r0, r2
 80075c0:	4798      	blx	r3
 80075c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075c4:	e029      	b.n	800761a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fa2a 	bl	8007a22 <USBD_CtlError>
        err++;
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	3301      	adds	r3, #1
 80075d2:	72fb      	strb	r3, [r7, #11]
      break;
 80075d4:	e021      	b.n	800761a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7c1b      	ldrb	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10d      	bne.n	80075fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	f107 0208 	add.w	r2, r7, #8
 80075ea:	4610      	mov	r0, r2
 80075ec:	4798      	blx	r3
 80075ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	2207      	movs	r2, #7
 80075f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075f8:	e00f      	b.n	800761a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fa10 	bl	8007a22 <USBD_CtlError>
        err++;
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	3301      	adds	r3, #1
 8007606:	72fb      	strb	r3, [r7, #11]
      break;
 8007608:	e007      	b.n	800761a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa08 	bl	8007a22 <USBD_CtlError>
      err++;
 8007612:	7afb      	ldrb	r3, [r7, #11]
 8007614:	3301      	adds	r3, #1
 8007616:	72fb      	strb	r3, [r7, #11]
      break;
 8007618:	bf00      	nop
  }

  if (err != 0U)
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11e      	bne.n	800765e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	88db      	ldrh	r3, [r3, #6]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d016      	beq.n	8007656 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007628:	893b      	ldrh	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	88da      	ldrh	r2, [r3, #6]
 8007632:	893b      	ldrh	r3, [r7, #8]
 8007634:	4293      	cmp	r3, r2
 8007636:	bf28      	it	cs
 8007638:	4613      	movcs	r3, r2
 800763a:	b29b      	uxth	r3, r3
 800763c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800763e:	893b      	ldrh	r3, [r7, #8]
 8007640:	461a      	mov	r2, r3
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fa5d 	bl	8007b04 <USBD_CtlSendData>
 800764a:	e009      	b.n	8007660 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9e7 	bl	8007a22 <USBD_CtlError>
 8007654:	e004      	b.n	8007660 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 faae 	bl	8007bb8 <USBD_CtlSendStatus>
 800765c:	e000      	b.n	8007660 <USBD_GetDescriptor+0x2cc>
    return;
 800765e:	bf00      	nop
  }
}
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop

08007668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	889b      	ldrh	r3, [r3, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d131      	bne.n	80076de <USBD_SetAddress+0x76>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	88db      	ldrh	r3, [r3, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d12d      	bne.n	80076de <USBD_SetAddress+0x76>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	885b      	ldrh	r3, [r3, #2]
 8007686:	2b7f      	cmp	r3, #127	; 0x7f
 8007688:	d829      	bhi.n	80076de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	885b      	ldrh	r3, [r3, #2]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d104      	bne.n	80076ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f9bc 	bl	8007a22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076aa:	e01d      	b.n	80076e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7bfa      	ldrb	r2, [r7, #15]
 80076b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 ff05 	bl	80084c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa7a 	bl	8007bb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	e009      	b.n	80076e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076dc:	e004      	b.n	80076e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f99e 	bl	8007a22 <USBD_CtlError>
  }
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	885b      	ldrh	r3, [r3, #2]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	4b4e      	ldr	r3, [pc, #312]	; (8007840 <USBD_SetConfig+0x150>)
 8007706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007708:	4b4d      	ldr	r3, [pc, #308]	; (8007840 <USBD_SetConfig+0x150>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d905      	bls.n	800771c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f985 	bl	8007a22 <USBD_CtlError>
    return USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	e08c      	b.n	8007836 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d002      	beq.n	800772e <USBD_SetConfig+0x3e>
 8007728:	2b03      	cmp	r3, #3
 800772a:	d029      	beq.n	8007780 <USBD_SetConfig+0x90>
 800772c:	e075      	b.n	800781a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800772e:	4b44      	ldr	r3, [pc, #272]	; (8007840 <USBD_SetConfig+0x150>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d020      	beq.n	8007778 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007736:	4b42      	ldr	r3, [pc, #264]	; (8007840 <USBD_SetConfig+0x150>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007740:	4b3f      	ldr	r3, [pc, #252]	; (8007840 <USBD_SetConfig+0x150>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fe ffe7 	bl	800671a <USBD_SetClassConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d008      	beq.n	8007768 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f962 	bl	8007a22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007766:	e065      	b.n	8007834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fa25 	bl	8007bb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2203      	movs	r2, #3
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007776:	e05d      	b.n	8007834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa1d 	bl	8007bb8 <USBD_CtlSendStatus>
      break;
 800777e:	e059      	b.n	8007834 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007780:	4b2f      	ldr	r3, [pc, #188]	; (8007840 <USBD_SetConfig+0x150>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d112      	bne.n	80077ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007790:	4b2b      	ldr	r3, [pc, #172]	; (8007840 <USBD_SetConfig+0x150>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800779a:	4b29      	ldr	r3, [pc, #164]	; (8007840 <USBD_SetConfig+0x150>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe ffd6 	bl	8006752 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa06 	bl	8007bb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077ac:	e042      	b.n	8007834 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077ae:	4b24      	ldr	r3, [pc, #144]	; (8007840 <USBD_SetConfig+0x150>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d02a      	beq.n	8007812 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fe ffc4 	bl	8006752 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077ca:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <USBD_SetConfig+0x150>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077d4:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <USBD_SetConfig+0x150>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fe ff9d 	bl	800671a <USBD_SetClassConfig>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00f      	beq.n	800780a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f918 	bl	8007a22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fe ffa9 	bl	8006752 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007808:	e014      	b.n	8007834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9d4 	bl	8007bb8 <USBD_CtlSendStatus>
      break;
 8007810:	e010      	b.n	8007834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9d0 	bl	8007bb8 <USBD_CtlSendStatus>
      break;
 8007818:	e00c      	b.n	8007834 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f900 	bl	8007a22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007822:	4b07      	ldr	r3, [pc, #28]	; (8007840 <USBD_SetConfig+0x150>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fe ff92 	bl	8006752 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800782e:	2303      	movs	r3, #3
 8007830:	73fb      	strb	r3, [r7, #15]
      break;
 8007832:	bf00      	nop
  }

  return ret;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200001b0 	.word	0x200001b0

08007844 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	88db      	ldrh	r3, [r3, #6]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d004      	beq.n	8007860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f8e2 	bl	8007a22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800785e:	e023      	b.n	80078a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	dc02      	bgt.n	8007872 <USBD_GetConfig+0x2e>
 800786c:	2b00      	cmp	r3, #0
 800786e:	dc03      	bgt.n	8007878 <USBD_GetConfig+0x34>
 8007870:	e015      	b.n	800789e <USBD_GetConfig+0x5a>
 8007872:	2b03      	cmp	r3, #3
 8007874:	d00b      	beq.n	800788e <USBD_GetConfig+0x4a>
 8007876:	e012      	b.n	800789e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3308      	adds	r3, #8
 8007882:	2201      	movs	r2, #1
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f93c 	bl	8007b04 <USBD_CtlSendData>
        break;
 800788c:	e00c      	b.n	80078a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3304      	adds	r3, #4
 8007892:	2201      	movs	r2, #1
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f934 	bl	8007b04 <USBD_CtlSendData>
        break;
 800789c:	e004      	b.n	80078a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8be 	bl	8007a22 <USBD_CtlError>
        break;
 80078a6:	bf00      	nop
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d81e      	bhi.n	8007906 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	88db      	ldrh	r3, [r3, #6]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d004      	beq.n	80078da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8a5 	bl	8007a22 <USBD_CtlError>
        break;
 80078d8:	e01a      	b.n	8007910 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f043 0202 	orr.w	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	330c      	adds	r3, #12
 80078fa:	2202      	movs	r2, #2
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f900 	bl	8007b04 <USBD_CtlSendData>
      break;
 8007904:	e004      	b.n	8007910 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f88a 	bl	8007a22 <USBD_CtlError>
      break;
 800790e:	bf00      	nop
  }
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d107      	bne.n	800793a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f940 	bl	8007bb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007938:	e013      	b.n	8007962 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	885b      	ldrh	r3, [r3, #2]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d10b      	bne.n	800795a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	889b      	ldrh	r3, [r3, #4]
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	b29b      	uxth	r3, r3
 800794a:	b2da      	uxtb	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f930 	bl	8007bb8 <USBD_CtlSendStatus>
}
 8007958:	e003      	b.n	8007962 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f860 	bl	8007a22 <USBD_CtlError>
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797a:	b2db      	uxtb	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	2b02      	cmp	r3, #2
 8007980:	d80b      	bhi.n	800799a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	885b      	ldrh	r3, [r3, #2]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10c      	bne.n	80079a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f910 	bl	8007bb8 <USBD_CtlSendStatus>
      }
      break;
 8007998:	e004      	b.n	80079a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f840 	bl	8007a22 <USBD_CtlError>
      break;
 80079a2:	e000      	b.n	80079a6 <USBD_ClrFeature+0x3c>
      break;
 80079a4:	bf00      	nop
  }
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7ff fa41 	bl	8006e60 <SWAPBYTE>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3301      	adds	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f7ff fa34 	bl	8006e60 <SWAPBYTE>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3301      	adds	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff fa27 	bl	8006e60 <SWAPBYTE>
 8007a12:	4603      	mov	r3, r0
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	80da      	strh	r2, [r3, #6]
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a2c:	2180      	movs	r1, #128	; 0x80
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fce0 	bl	80083f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a34:	2100      	movs	r1, #0
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fcdc 	bl	80083f4 <USBD_LL_StallEP>
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d036      	beq.n	8007ac8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a5e:	6938      	ldr	r0, [r7, #16]
 8007a60:	f000 f836 	bl	8007ad0 <USBD_GetLen>
 8007a64:	4603      	mov	r3, r0
 8007a66:	3301      	adds	r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	4413      	add	r3, r2
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	7812      	ldrb	r2, [r2, #0]
 8007a7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	3301      	adds	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	4413      	add	r3, r2
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	3301      	adds	r3, #1
 8007a92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a94:	e013      	b.n	8007abe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	7812      	ldrb	r2, [r2, #0]
 8007aa0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
    idx++;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	3301      	adds	r3, #1
 8007abc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e7      	bne.n	8007a96 <USBD_GetString+0x52>
 8007ac6:	e000      	b.n	8007aca <USBD_GetString+0x86>
    return;
 8007ac8:	bf00      	nop
  }
}
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ae0:	e005      	b.n	8007aee <USBD_GetLen+0x1e>
  {
    len++;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f5      	bne.n	8007ae2 <USBD_GetLen+0x12>
  }

  return len;
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	2100      	movs	r1, #0
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 fceb 	bl	8008506 <USBD_LL_Transmit>

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fcda 	bl	8008506 <USBD_LL_Transmit>

  return USBD_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fcde 	bl	8008548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fccd 	bl	8008548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fc99 	bl	8008506 <USBD_LL_Transmit>

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2205      	movs	r2, #5
 8007bea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fca7 	bl	8008548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4912      	ldr	r1, [pc, #72]	; (8007c54 <MX_USB_DEVICE_Init+0x50>)
 8007c0c:	4812      	ldr	r0, [pc, #72]	; (8007c58 <MX_USB_DEVICE_Init+0x54>)
 8007c0e:	f7fe fd07 	bl	8006620 <USBD_Init>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c18:	f7f8 fdd4 	bl	80007c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c1c:	490f      	ldr	r1, [pc, #60]	; (8007c5c <MX_USB_DEVICE_Init+0x58>)
 8007c1e:	480e      	ldr	r0, [pc, #56]	; (8007c58 <MX_USB_DEVICE_Init+0x54>)
 8007c20:	f7fe fd2e 	bl	8006680 <USBD_RegisterClass>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c2a:	f7f8 fdcb 	bl	80007c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c2e:	490c      	ldr	r1, [pc, #48]	; (8007c60 <MX_USB_DEVICE_Init+0x5c>)
 8007c30:	4809      	ldr	r0, [pc, #36]	; (8007c58 <MX_USB_DEVICE_Init+0x54>)
 8007c32:	f7fe fc1f 	bl	8006474 <USBD_CDC_RegisterInterface>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c3c:	f7f8 fdc2 	bl	80007c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c40:	4805      	ldr	r0, [pc, #20]	; (8007c58 <MX_USB_DEVICE_Init+0x54>)
 8007c42:	f7fe fd53 	bl	80066ec <USBD_Start>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c4c:	f7f8 fdba 	bl	80007c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c50:	bf00      	nop
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200000ac 	.word	0x200000ac
 8007c58:	200001b4 	.word	0x200001b4
 8007c5c:	20000018 	.word	0x20000018
 8007c60:	20000098 	.word	0x20000098

08007c64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4905      	ldr	r1, [pc, #20]	; (8007c80 <CDC_Init_FS+0x1c>)
 8007c6c:	4805      	ldr	r0, [pc, #20]	; (8007c84 <CDC_Init_FS+0x20>)
 8007c6e:	f7fe fc1b 	bl	80064a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c72:	4905      	ldr	r1, [pc, #20]	; (8007c88 <CDC_Init_FS+0x24>)
 8007c74:	4803      	ldr	r0, [pc, #12]	; (8007c84 <CDC_Init_FS+0x20>)
 8007c76:	f7fe fc39 	bl	80064ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000c90 	.word	0x20000c90
 8007c84:	200001b4 	.word	0x200001b4
 8007c88:	20000490 	.word	0x20000490

08007c8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	6039      	str	r1, [r7, #0]
 8007ca6:	71fb      	strb	r3, [r7, #7]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	2b23      	cmp	r3, #35	; 0x23
 8007cb0:	d84a      	bhi.n	8007d48 <CDC_Control_FS+0xac>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <CDC_Control_FS+0x1c>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007d49 	.word	0x08007d49
 8007cbc:	08007d49 	.word	0x08007d49
 8007cc0:	08007d49 	.word	0x08007d49
 8007cc4:	08007d49 	.word	0x08007d49
 8007cc8:	08007d49 	.word	0x08007d49
 8007ccc:	08007d49 	.word	0x08007d49
 8007cd0:	08007d49 	.word	0x08007d49
 8007cd4:	08007d49 	.word	0x08007d49
 8007cd8:	08007d49 	.word	0x08007d49
 8007cdc:	08007d49 	.word	0x08007d49
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007d49 	.word	0x08007d49
 8007ce8:	08007d49 	.word	0x08007d49
 8007cec:	08007d49 	.word	0x08007d49
 8007cf0:	08007d49 	.word	0x08007d49
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007d49 	.word	0x08007d49
 8007cfc:	08007d49 	.word	0x08007d49
 8007d00:	08007d49 	.word	0x08007d49
 8007d04:	08007d49 	.word	0x08007d49
 8007d08:	08007d49 	.word	0x08007d49
 8007d0c:	08007d49 	.word	0x08007d49
 8007d10:	08007d49 	.word	0x08007d49
 8007d14:	08007d49 	.word	0x08007d49
 8007d18:	08007d49 	.word	0x08007d49
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	08007d49 	.word	0x08007d49
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d49 	.word	0x08007d49
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d49 	.word	0x08007d49
 8007d38:	08007d49 	.word	0x08007d49
 8007d3c:	08007d49 	.word	0x08007d49
 8007d40:	08007d49 	.word	0x08007d49
 8007d44:	08007d49 	.word	0x08007d49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d48:	bf00      	nop
  }

  return (USBD_OK);
 8007d4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <CDC_Receive_FS+0x24>)
 8007d66:	f7fe fbc1 	bl	80064ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d6a:	4804      	ldr	r0, [pc, #16]	; (8007d7c <CDC_Receive_FS+0x24>)
 8007d6c:	f7fe fc22 	bl	80065b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200001b4 	.word	0x200001b4

08007d80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d90:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <CDC_Transmit_FS+0x48>)
 8007d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e00b      	b.n	8007dbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007da6:	887b      	ldrh	r3, [r7, #2]
 8007da8:	461a      	mov	r2, r3
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4806      	ldr	r0, [pc, #24]	; (8007dc8 <CDC_Transmit_FS+0x48>)
 8007dae:	f7fe fb7b 	bl	80064a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007db2:	4805      	ldr	r0, [pc, #20]	; (8007dc8 <CDC_Transmit_FS+0x48>)
 8007db4:	f7fe fbb8 	bl	8006528 <USBD_CDC_TransmitPacket>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	200001b4 	.word	0x200001b4

08007dcc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2212      	movs	r2, #18
 8007e00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e02:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	200000c8 	.word	0x200000c8

08007e14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2204      	movs	r2, #4
 8007e24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e26:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	200000dc 	.word	0x200000dc

08007e38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4907      	ldr	r1, [pc, #28]	; (8007e6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007e4e:	4808      	ldr	r0, [pc, #32]	; (8007e70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e50:	f7ff fdf8 	bl	8007a44 <USBD_GetString>
 8007e54:	e004      	b.n	8007e60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4904      	ldr	r1, [pc, #16]	; (8007e6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007e5a:	4805      	ldr	r0, [pc, #20]	; (8007e70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e5c:	f7ff fdf2 	bl	8007a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20001490 	.word	0x20001490
 8007e70:	0800cd28 	.word	0x0800cd28

08007e74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6039      	str	r1, [r7, #0]
 8007e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	4904      	ldr	r1, [pc, #16]	; (8007e94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e84:	4804      	ldr	r0, [pc, #16]	; (8007e98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e86:	f7ff fddd 	bl	8007a44 <USBD_GetString>
  return USBD_StrDesc;
 8007e8a:	4b02      	ldr	r3, [pc, #8]	; (8007e94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20001490 	.word	0x20001490
 8007e98:	0800cd40 	.word	0x0800cd40

08007e9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	221a      	movs	r2, #26
 8007eac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007eae:	f000 f843 	bl	8007f38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007eb2:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200000e0 	.word	0x200000e0

08007ec0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d105      	bne.n	8007ede <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4907      	ldr	r1, [pc, #28]	; (8007ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ed6:	4808      	ldr	r0, [pc, #32]	; (8007ef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ed8:	f7ff fdb4 	bl	8007a44 <USBD_GetString>
 8007edc:	e004      	b.n	8007ee8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	4904      	ldr	r1, [pc, #16]	; (8007ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ee2:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ee4:	f7ff fdae 	bl	8007a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20001490 	.word	0x20001490
 8007ef8:	0800cd54 	.word	0x0800cd54

08007efc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	4907      	ldr	r1, [pc, #28]	; (8007f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f12:	4808      	ldr	r0, [pc, #32]	; (8007f34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f14:	f7ff fd96 	bl	8007a44 <USBD_GetString>
 8007f18:	e004      	b.n	8007f24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4904      	ldr	r1, [pc, #16]	; (8007f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f1e:	4805      	ldr	r0, [pc, #20]	; (8007f34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f20:	f7ff fd90 	bl	8007a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f24:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20001490 	.word	0x20001490
 8007f34:	0800cd60 	.word	0x0800cd60

08007f38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <Get_SerialNum+0x44>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f44:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <Get_SerialNum+0x48>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f4a:	4b0e      	ldr	r3, [pc, #56]	; (8007f84 <Get_SerialNum+0x4c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d009      	beq.n	8007f72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f5e:	2208      	movs	r2, #8
 8007f60:	4909      	ldr	r1, [pc, #36]	; (8007f88 <Get_SerialNum+0x50>)
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f814 	bl	8007f90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f68:	2204      	movs	r2, #4
 8007f6a:	4908      	ldr	r1, [pc, #32]	; (8007f8c <Get_SerialNum+0x54>)
 8007f6c:	68b8      	ldr	r0, [r7, #8]
 8007f6e:	f000 f80f 	bl	8007f90 <IntToUnicode>
  }
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	1fff7a10 	.word	0x1fff7a10
 8007f80:	1fff7a14 	.word	0x1fff7a14
 8007f84:	1fff7a18 	.word	0x1fff7a18
 8007f88:	200000e2 	.word	0x200000e2
 8007f8c:	200000f2 	.word	0x200000f2

08007f90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
 8007fa6:	e027      	b.n	8007ff8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	0f1b      	lsrs	r3, r3, #28
 8007fac:	2b09      	cmp	r3, #9
 8007fae:	d80b      	bhi.n	8007fc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	0f1b      	lsrs	r3, r3, #28
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3230      	adds	r2, #48	; 0x30
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	e00a      	b.n	8007fde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	0f1b      	lsrs	r3, r3, #28
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	440b      	add	r3, r1
 8007fd8:	3237      	adds	r2, #55	; 0x37
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	3301      	adds	r3, #1
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	75fb      	strb	r3, [r7, #23]
 8007ff8:	7dfa      	ldrb	r2, [r7, #23]
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d3d3      	bcc.n	8007fa8 <IntToUnicode+0x18>
  }
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008018:	f107 0314 	add.w	r3, r7, #20
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008030:	d13a      	bne.n	80080a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008032:	2300      	movs	r3, #0
 8008034:	613b      	str	r3, [r7, #16]
 8008036:	4b1e      	ldr	r3, [pc, #120]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6313      	str	r3, [r2, #48]	; 0x30
 8008042:	4b1b      	ldr	r3, [pc, #108]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	613b      	str	r3, [r7, #16]
 800804c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800804e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008054:	2302      	movs	r3, #2
 8008056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800805c:	2303      	movs	r3, #3
 800805e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008060:	230a      	movs	r3, #10
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008064:	f107 0314 	add.w	r3, r7, #20
 8008068:	4619      	mov	r1, r3
 800806a:	4812      	ldr	r0, [pc, #72]	; (80080b4 <HAL_PCD_MspInit+0xa4>)
 800806c:	f7f8 fe8c 	bl	8000d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008070:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 8008072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008074:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 8008076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807a:	6353      	str	r3, [r2, #52]	; 0x34
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 8008082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008084:	4a0a      	ldr	r2, [pc, #40]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 8008086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800808a:	6453      	str	r3, [r2, #68]	; 0x44
 800808c:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <HAL_PCD_MspInit+0xa0>)
 800808e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008098:	2200      	movs	r2, #0
 800809a:	2100      	movs	r1, #0
 800809c:	2043      	movs	r0, #67	; 0x43
 800809e:	f7f8 fe2f 	bl	8000d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080a2:	2043      	movs	r0, #67	; 0x43
 80080a4:	f7f8 fe58 	bl	8000d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080a8:	bf00      	nop
 80080aa:	3728      	adds	r7, #40	; 0x28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	40023800 	.word	0x40023800
 80080b4:	40020000 	.word	0x40020000

080080b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7fe fb59 	bl	8006786 <USBD_LL_SetupStage>
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	4619      	mov	r1, r3
 8008106:	f7fe fb93 	bl	8006830 <USBD_LL_DataOutStage>
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008124:	78fa      	ldrb	r2, [r7, #3]
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	334c      	adds	r3, #76	; 0x4c
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	78fb      	ldrb	r3, [r7, #3]
 8008138:	4619      	mov	r1, r3
 800813a:	f7fe fc2c 	bl	8006996 <USBD_LL_DataInStage>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe fd60 	bl	8006c1a <USBD_LL_SOF>
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800816a:	2301      	movs	r3, #1
 800816c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d102      	bne.n	800817c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
 800817a:	e008      	b.n	800818e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	2b02      	cmp	r3, #2
 8008182:	d102      	bne.n	800818a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008184:	2301      	movs	r3, #1
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e001      	b.n	800818e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800818a:	f7f8 fb1b 	bl	80007c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008194:	7bfa      	ldrb	r2, [r7, #15]
 8008196:	4611      	mov	r1, r2
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fd00 	bl	8006b9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fca8 	bl	8006afa <USBD_LL_Reset>
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fcfb 	bl	8006bbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <HAL_PCD_SuspendCallback+0x48>)
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	4a03      	ldr	r2, [pc, #12]	; (80081fc <HAL_PCD_SuspendCallback+0x48>)
 80081ee:	f043 0306 	orr.w	r3, r3, #6
 80081f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	e000ed00 	.word	0xe000ed00

08008200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fceb 	bl	8006bea <USBD_LL_Resume>
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fd43 	bl	8006cbe <USBD_LL_IsoOUTIncomplete>
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fcff 	bl	8006c5a <USBD_LL_IsoINIncomplete>
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fd55 	bl	8006d22 <USBD_LL_DevConnected>
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fd52 	bl	8006d38 <USBD_LL_DevDisconnected>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d13c      	bne.n	8008326 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082ac:	4a20      	ldr	r2, [pc, #128]	; (8008330 <USBD_LL_Init+0x94>)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <USBD_LL_Init+0x94>)
 80082b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082bc:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <USBD_LL_Init+0x94>)
 80082be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80082c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082c4:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <USBD_LL_Init+0x94>)
 80082c6:	2204      	movs	r2, #4
 80082c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082ca:	4b19      	ldr	r3, [pc, #100]	; (8008330 <USBD_LL_Init+0x94>)
 80082cc:	2202      	movs	r2, #2
 80082ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082d0:	4b17      	ldr	r3, [pc, #92]	; (8008330 <USBD_LL_Init+0x94>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082d6:	4b16      	ldr	r3, [pc, #88]	; (8008330 <USBD_LL_Init+0x94>)
 80082d8:	2202      	movs	r2, #2
 80082da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082dc:	4b14      	ldr	r3, [pc, #80]	; (8008330 <USBD_LL_Init+0x94>)
 80082de:	2200      	movs	r2, #0
 80082e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <USBD_LL_Init+0x94>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082e8:	4b11      	ldr	r3, [pc, #68]	; (8008330 <USBD_LL_Init+0x94>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <USBD_LL_Init+0x94>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082f4:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <USBD_LL_Init+0x94>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082fa:	480d      	ldr	r0, [pc, #52]	; (8008330 <USBD_LL_Init+0x94>)
 80082fc:	f7f9 f866 	bl	80013cc <HAL_PCD_Init>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008306:	f7f8 fa5d 	bl	80007c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800830a:	2180      	movs	r1, #128	; 0x80
 800830c:	4808      	ldr	r0, [pc, #32]	; (8008330 <USBD_LL_Init+0x94>)
 800830e:	f7fa fad0 	bl	80028b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008312:	2240      	movs	r2, #64	; 0x40
 8008314:	2100      	movs	r1, #0
 8008316:	4806      	ldr	r0, [pc, #24]	; (8008330 <USBD_LL_Init+0x94>)
 8008318:	f7fa fa84 	bl	8002824 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800831c:	2280      	movs	r2, #128	; 0x80
 800831e:	2101      	movs	r1, #1
 8008320:	4803      	ldr	r0, [pc, #12]	; (8008330 <USBD_LL_Init+0x94>)
 8008322:	f7fa fa7f 	bl	8002824 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20001690 	.word	0x20001690

08008334 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800834a:	4618      	mov	r0, r3
 800834c:	f7f9 f96e 	bl	800162c <HAL_PCD_Start>
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f942 	bl	80085e0 <USBD_Get_USB_Status>
 800835c:	4603      	mov	r3, r0
 800835e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008360:	7bbb      	ldrb	r3, [r7, #14]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	4608      	mov	r0, r1
 8008374:	4611      	mov	r1, r2
 8008376:	461a      	mov	r2, r3
 8008378:	4603      	mov	r3, r0
 800837a:	70fb      	strb	r3, [r7, #3]
 800837c:	460b      	mov	r3, r1
 800837e:	70bb      	strb	r3, [r7, #2]
 8008380:	4613      	mov	r3, r2
 8008382:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008392:	78bb      	ldrb	r3, [r7, #2]
 8008394:	883a      	ldrh	r2, [r7, #0]
 8008396:	78f9      	ldrb	r1, [r7, #3]
 8008398:	f7f9 fe3f 	bl	800201a <HAL_PCD_EP_Open>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f91c 	bl	80085e0 <USBD_Get_USB_Status>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7f9 fe88 	bl	80020ea <HAL_PCD_EP_Close>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f8fd 	bl	80085e0 <USBD_Get_USB_Status>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7f9 ff60 	bl	80022d8 <HAL_PCD_EP_SetStall>
 8008418:	4603      	mov	r3, r0
 800841a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f8de 	bl	80085e0 <USBD_Get_USB_Status>
 8008424:	4603      	mov	r3, r0
 8008426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008428:	7bbb      	ldrb	r3, [r7, #14]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7f9 ffa5 	bl	80023a0 <HAL_PCD_EP_ClrStall>
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f8bf 	bl	80085e0 <USBD_Get_USB_Status>
 8008462:	4603      	mov	r3, r0
 8008464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008466:	7bbb      	ldrb	r3, [r7, #14]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008482:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008488:	2b00      	cmp	r3, #0
 800848a:	da0b      	bge.n	80084a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008492:	68f9      	ldr	r1, [r7, #12]
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	333e      	adds	r3, #62	; 0x3e
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	e00b      	b.n	80084bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084a4:	78fb      	ldrb	r3, [r7, #3]
 80084a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	4613      	mov	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80084ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	4611      	mov	r1, r2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f9 fd72 	bl	8001fd0 <HAL_PCD_SetAddress>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 f874 	bl	80085e0 <USBD_Get_USB_Status>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	460b      	mov	r3, r1
 8008514:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008524:	7af9      	ldrb	r1, [r7, #11]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	f7f9 fe8b 	bl	8002244 <HAL_PCD_EP_Transmit>
 800852e:	4603      	mov	r3, r0
 8008530:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f853 	bl	80085e0 <USBD_Get_USB_Status>
 800853a:	4603      	mov	r3, r0
 800853c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800853e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	607a      	str	r2, [r7, #4]
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	460b      	mov	r3, r1
 8008556:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008566:	7af9      	ldrb	r1, [r7, #11]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	f7f9 fe07 	bl	800217e <HAL_PCD_EP_Receive>
 8008570:	4603      	mov	r3, r0
 8008572:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f832 	bl	80085e0 <USBD_Get_USB_Status>
 800857c:	4603      	mov	r3, r0
 800857e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008580:	7dbb      	ldrb	r3, [r7, #22]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800859c:	78fa      	ldrb	r2, [r7, #3]
 800859e:	4611      	mov	r1, r2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7f9 fe37 	bl	8002214 <HAL_PCD_EP_GetRxCount>
 80085a6:	4603      	mov	r3, r0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085b8:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <USBD_static_malloc+0x18>)
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20001b9c 	.word	0x20001b9c

080085cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d817      	bhi.n	8008624 <USBD_Get_USB_Status+0x44>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <USBD_Get_USB_Status+0x1c>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	08008613 	.word	0x08008613
 8008604:	08008619 	.word	0x08008619
 8008608:	0800861f 	.word	0x0800861f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
    break;
 8008610:	e00b      	b.n	800862a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	73fb      	strb	r3, [r7, #15]
    break;
 8008616:	e008      	b.n	800862a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
    break;
 800861c:	e005      	b.n	800862a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	73fb      	strb	r3, [r7, #15]
    break;
 8008622:	e002      	b.n	800862a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008624:	2303      	movs	r3, #3
 8008626:	73fb      	strb	r3, [r7, #15]
    break;
 8008628:	bf00      	nop
  }
  return usb_status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f103 0208 	add.w	r2, r3, #8
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f103 0208 	add.w	r2, r3, #8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f103 0208 	add.w	r2, r3, #8
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008692:	b480      	push	{r7}
 8008694:	b085      	sub	sp, #20
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]
}
 80086ce:	bf00      	nop
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80086da:	b480      	push	{r7}
 80086dc:	b085      	sub	sp, #20
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f0:	d103      	bne.n	80086fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	e00c      	b.n	8008714 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3308      	adds	r3, #8
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	e002      	b.n	8008708 <vListInsert+0x2e>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	429a      	cmp	r2, r3
 8008712:	d2f6      	bcs.n	8008702 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6892      	ldr	r2, [r2, #8]
 8008762:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6852      	ldr	r2, [r2, #4]
 800876c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	429a      	cmp	r2, r3
 8008776:	d103      	bne.n	8008780 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	1e5a      	subs	r2, r3, #1
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80087ca:	f002 f80d 	bl	800a7e8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087da:	fb01 f303 	mul.w	r3, r1, r3
 80087de:	441a      	add	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fa:	3b01      	subs	r3, #1
 80087fc:	68f9      	ldr	r1, [r7, #12]
 80087fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	441a      	add	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	22ff      	movs	r2, #255	; 0xff
 800880e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	22ff      	movs	r2, #255	; 0xff
 8008816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d109      	bne.n	8008834 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00f      	beq.n	8008848 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3310      	adds	r3, #16
 800882c:	4618      	mov	r0, r3
 800882e:	f001 f8eb 	bl	8009a08 <xTaskRemoveFromEventList>
 8008832:	e009      	b.n	8008848 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3310      	adds	r3, #16
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fefd 	bl	8008638 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3324      	adds	r3, #36	; 0x24
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff fef8 	bl	8008638 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008848:	f001 fffe 	bl	800a848 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800884c:	2301      	movs	r3, #1
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008856:	b580      	push	{r7, lr}
 8008858:	b08c      	sub	sp, #48	; 0x30
 800885a:	af02      	add	r7, sp, #8
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	4613      	mov	r3, r2
 8008862:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <xQueueGenericCreate+0x2a>
        __asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	61bb      	str	r3, [r7, #24]
    }
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d006      	beq.n	800889e <xQueueGenericCreate+0x48>
 8008890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	fbb2 f3f3 	udiv	r3, r2, r3
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	429a      	cmp	r2, r3
 800889c:	d101      	bne.n	80088a2 <xQueueGenericCreate+0x4c>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <xQueueGenericCreate+0x4e>
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <xQueueGenericCreate+0x68>
        __asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	617b      	str	r3, [r7, #20]
    }
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80088c4:	d90a      	bls.n	80088dc <xQueueGenericCreate+0x86>
        __asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	613b      	str	r3, [r7, #16]
    }
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	3350      	adds	r3, #80	; 0x50
 80088e0:	4618      	mov	r0, r3
 80088e2:	f002 f8ab 	bl	800aa3c <pvPortMalloc>
 80088e6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00d      	beq.n	800890a <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	3350      	adds	r3, #80	; 0x50
 80088f6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088f8:	79fa      	ldrb	r2, [r7, #7]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	4613      	mov	r3, r2
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f805 	bl	8008914 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800890a:	6a3b      	ldr	r3, [r7, #32]
    }
 800890c:	4618      	mov	r0, r3
 800890e:	3728      	adds	r7, #40	; 0x28
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d103      	bne.n	8008930 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e002      	b.n	8008936 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008942:	2101      	movs	r1, #1
 8008944:	69b8      	ldr	r0, [r7, #24]
 8008946:	f7ff ff2b 	bl	80087a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	78fa      	ldrb	r2, [r7, #3]
 800894e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	2073      	movs	r0, #115	; 0x73
 800895a:	f003 f88f 	bl	800ba7c <SEGGER_SYSVIEW_RecordU32x3>
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b090      	sub	sp, #64	; 0x40
 800896c:	af02      	add	r7, sp, #8
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008976:	2300      	movs	r3, #0
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <xQueueGenericSend+0x32>
        __asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <xQueueGenericSend+0x40>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <xQueueGenericSend+0x44>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <xQueueGenericSend+0x46>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <xQueueGenericSend+0x60>
        __asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d103      	bne.n	80089d6 <xQueueGenericSend+0x6e>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <xQueueGenericSend+0x72>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <xQueueGenericSend+0x74>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xQueueGenericSend+0x8e>
        __asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	623b      	str	r3, [r7, #32]
    }
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089f6:	f001 f9a1 	bl	8009d3c <xTaskGetSchedulerState>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <xQueueGenericSend+0x9e>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <xQueueGenericSend+0xa2>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueGenericSend+0xa4>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <xQueueGenericSend+0xbe>
        __asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	61fb      	str	r3, [r7, #28]
    }
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008a26:	f001 fedf 	bl	800a7e8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d302      	bcc.n	8008a3c <xQueueGenericSend+0xd4>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d11f      	bne.n	8008a7c <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f003 fda8 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4601      	mov	r1, r0
 8008a50:	205a      	movs	r0, #90	; 0x5a
 8008a52:	f003 f889 	bl	800bb68 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a5c:	f000 fa56 	bl	8008f0c <prvCopyDataToQueue>
 8008a60:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	3324      	adds	r3, #36	; 0x24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 ffca 	bl	8009a08 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008a74:	f001 fee8 	bl	800a848 <vPortExitCritical>
                return pdPASS;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e07d      	b.n	8008b78 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d110      	bne.n	8008aa4 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008a82:	f001 fee1 	bl	800a848 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f003 fd83 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	460b      	mov	r3, r1
 8008a98:	4601      	mov	r1, r0
 8008a9a:	205a      	movs	r0, #90	; 0x5a
 8008a9c:	f003 f864 	bl	800bb68 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e069      	b.n	8008b78 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008aaa:	f107 0314 	add.w	r3, r7, #20
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 f810 	bl	8009ad4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008ab8:	f001 fec6 	bl	800a848 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008abc:	f000 fd8c 	bl	80095d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008ac0:	f001 fe92 	bl	800a7e8 <vPortEnterCritical>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aca:	b25b      	sxtb	r3, r3
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d103      	bne.n	8008ada <xQueueGenericSend+0x172>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ae0:	b25b      	sxtb	r3, r3
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d103      	bne.n	8008af0 <xQueueGenericSend+0x188>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008af0:	f001 feaa 	bl	800a848 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008af4:	1d3a      	adds	r2, r7, #4
 8008af6:	f107 0314 	add.w	r3, r7, #20
 8008afa:	4611      	mov	r1, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 ffff 	bl	8009b00 <xTaskCheckForTimeOut>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d124      	bne.n	8008b52 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b0a:	f000 faf7 	bl	80090fc <prvIsQueueFull>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d018      	beq.n	8008b46 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	3310      	adds	r3, #16
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 ff21 	bl	8009964 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b24:	f000 fa82 	bl	800902c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008b28:	f000 fd64 	bl	80095f4 <xTaskResumeAll>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f47f af79 	bne.w	8008a26 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8008b34:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <xQueueGenericSend+0x218>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	e76f      	b.n	8008a26 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b48:	f000 fa70 	bl	800902c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008b4c:	f000 fd52 	bl	80095f4 <xTaskResumeAll>
 8008b50:	e769      	b.n	8008a26 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b54:	f000 fa6a 	bl	800902c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008b58:	f000 fd4c 	bl	80095f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f003 fd18 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4601      	mov	r1, r0
 8008b70:	205a      	movs	r0, #90	; 0x5a
 8008b72:	f002 fff9 	bl	800bb68 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008b76:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3738      	adds	r7, #56	; 0x38
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b090      	sub	sp, #64	; 0x40
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <xQueueGenericSendFromISR+0x3c>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueGenericSendFromISR+0x40>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueGenericSendFromISR+0x42>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d103      	bne.n	8008bee <xQueueGenericSendFromISR+0x6a>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <xQueueGenericSendFromISR+0x6e>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <xQueueGenericSendFromISR+0x70>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	623b      	str	r3, [r7, #32]
    }
 8008c0a:	bf00      	nop
 8008c0c:	e7fe      	b.n	8008c0c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c0e:	f001 fed5 	bl	800a9bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8008c12:	f3ef 8211 	mrs	r2, BASEPRI
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	61fa      	str	r2, [r7, #28]
 8008c28:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d302      	bcc.n	8008c40 <xQueueGenericSendFromISR+0xbc>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d148      	bne.n	8008cd2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	4618      	mov	r0, r3
 8008c54:	f003 fc9e 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008c58:	4601      	mov	r1, r0
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	2060      	movs	r0, #96	; 0x60
 8008c60:	f002 feb2 	bl	800b9c8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c6a:	f000 f94f 	bl	8008f0c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8008c6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d112      	bne.n	8008c9e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d025      	beq.n	8008ccc <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	3324      	adds	r3, #36	; 0x24
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 febf 	bl	8009a08 <xTaskRemoveFromEventList>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d01d      	beq.n	8008ccc <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01a      	beq.n	8008ccc <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	e016      	b.n	8008ccc <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8008c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ca4:	d10a      	bne.n	8008cbc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	617b      	str	r3, [r7, #20]
    }
 8008cb8:	bf00      	nop
 8008cba:	e7fe      	b.n	8008cba <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	b25a      	sxtb	r2, r3
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8008cd0:	e00b      	b.n	8008cea <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f003 fc5d 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008cda:	4601      	mov	r1, r0
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	2060      	movs	r0, #96	; 0x60
 8008ce2:	f002 fe71 	bl	800b9c8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cec:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008cf4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3740      	adds	r7, #64	; 0x40
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b08f      	sub	sp, #60	; 0x3c
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <xQueueReceive+0x30>
        __asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	623b      	str	r3, [r7, #32]
    }
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d103      	bne.n	8008d3e <xQueueReceive+0x3e>
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <xQueueReceive+0x42>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <xQueueReceive+0x44>
 8008d42:	2300      	movs	r3, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10a      	bne.n	8008d5e <xQueueReceive+0x5e>
        __asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	61fb      	str	r3, [r7, #28]
    }
 8008d5a:	bf00      	nop
 8008d5c:	e7fe      	b.n	8008d5c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d5e:	f000 ffed 	bl	8009d3c <xTaskGetSchedulerState>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <xQueueReceive+0x6e>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <xQueueReceive+0x72>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e000      	b.n	8008d74 <xQueueReceive+0x74>
 8008d72:	2300      	movs	r3, #0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <xQueueReceive+0x8e>
        __asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	61bb      	str	r3, [r7, #24]
    }
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008d8e:	f001 fd2b 	bl	800a7e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d024      	beq.n	8008de8 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d9e:	68b9      	ldr	r1, [r7, #8]
 8008da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da2:	f000 f91d 	bl	8008fe0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	4618      	mov	r0, r3
 8008daa:	f003 fbf3 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008dae:	4604      	mov	r4, r0
 8008db0:	2000      	movs	r0, #0
 8008db2:	f003 fbef 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008db6:	4602      	mov	r2, r0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2101      	movs	r1, #1
 8008dbc:	9100      	str	r1, [sp, #0]
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	205c      	movs	r0, #92	; 0x5c
 8008dc2:	f002 fed1 	bl	800bb68 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	1e5a      	subs	r2, r3, #1
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	3310      	adds	r3, #16
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fe14 	bl	8009a08 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008de0:	f001 fd32 	bl	800a848 <vPortExitCritical>
                return pdPASS;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e08a      	b.n	8008efe <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d113      	bne.n	8008e16 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008dee:	f001 fd2b 	bl	800a848 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	4618      	mov	r0, r3
 8008df6:	f003 fbcd 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f003 fbc9 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008e02:	4602      	mov	r2, r0
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2101      	movs	r1, #1
 8008e08:	9100      	str	r1, [sp, #0]
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	205c      	movs	r0, #92	; 0x5c
 8008e0e:	f002 feab 	bl	800bb68 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e073      	b.n	8008efe <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008e1c:	f107 0310 	add.w	r3, r7, #16
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fe57 	bl	8009ad4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008e26:	2301      	movs	r3, #1
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008e2a:	f001 fd0d 	bl	800a848 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008e2e:	f000 fbd3 	bl	80095d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008e32:	f001 fcd9 	bl	800a7e8 <vPortEnterCritical>
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e42:	d103      	bne.n	8008e4c <xQueueReceive+0x14c>
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e52:	b25b      	sxtb	r3, r3
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e58:	d103      	bne.n	8008e62 <xQueueReceive+0x162>
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e62:	f001 fcf1 	bl	800a848 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e66:	1d3a      	adds	r2, r7, #4
 8008e68:	f107 0310 	add.w	r3, r7, #16
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fe46 	bl	8009b00 <xTaskCheckForTimeOut>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d124      	bne.n	8008ec4 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e7c:	f000 f928 	bl	80090d0 <prvIsQueueEmpty>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d018      	beq.n	8008eb8 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	3324      	adds	r3, #36	; 0x24
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fd68 	bl	8009964 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e96:	f000 f8c9 	bl	800902c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008e9a:	f000 fbab 	bl	80095f4 <xTaskResumeAll>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f47f af74 	bne.w	8008d8e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8008ea6:	4b18      	ldr	r3, [pc, #96]	; (8008f08 <xQueueReceive+0x208>)
 8008ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	e76a      	b.n	8008d8e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eba:	f000 f8b7 	bl	800902c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008ebe:	f000 fb99 	bl	80095f4 <xTaskResumeAll>
 8008ec2:	e764      	b.n	8008d8e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec6:	f000 f8b1 	bl	800902c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008eca:	f000 fb93 	bl	80095f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed0:	f000 f8fe 	bl	80090d0 <prvIsQueueEmpty>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f43f af59 	beq.w	8008d8e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f003 fb58 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f003 fb54 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8008eec:	4602      	mov	r2, r0
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	9100      	str	r1, [sp, #0]
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	205c      	movs	r0, #92	; 0x5c
 8008ef8:	f002 fe36 	bl	800bb68 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8008efc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3734      	adds	r7, #52	; 0x34
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd90      	pop	{r4, r7, pc}
 8008f06:	bf00      	nop
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10d      	bne.n	8008f46 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d14d      	bne.n	8008fce <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 ff1e 	bl	8009d78 <xTaskPriorityDisinherit>
 8008f3c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	609a      	str	r2, [r3, #8]
 8008f44:	e043      	b.n	8008fce <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d119      	bne.n	8008f80 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6858      	ldr	r0, [r3, #4]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f54:	461a      	mov	r2, r3
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	f003 fde6 	bl	800cb28 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	441a      	add	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d32b      	bcc.n	8008fce <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	e026      	b.n	8008fce <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68d8      	ldr	r0, [r3, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	461a      	mov	r2, r3
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	f003 fdcc 	bl	800cb28 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	425b      	negs	r3, r3
 8008f9a:	441a      	add	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d207      	bcs.n	8008fbc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	441a      	add	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d105      	bne.n	8008fce <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8008fd6:	697b      	ldr	r3, [r7, #20]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d018      	beq.n	8009024 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	441a      	add	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	429a      	cmp	r2, r3
 800900a:	d303      	bcc.n	8009014 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68d9      	ldr	r1, [r3, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	461a      	mov	r2, r3
 800901e:	6838      	ldr	r0, [r7, #0]
 8009020:	f003 fd82 	bl	800cb28 <memcpy>
    }
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009034:	f001 fbd8 	bl	800a7e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800903e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009040:	e011      	b.n	8009066 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	d012      	beq.n	8009070 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3324      	adds	r3, #36	; 0x24
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fcda 	bl	8009a08 <xTaskRemoveFromEventList>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800905a:	f000 fdb7 	bl	8009bcc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	3b01      	subs	r3, #1
 8009062:	b2db      	uxtb	r3, r3
 8009064:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800906a:	2b00      	cmp	r3, #0
 800906c:	dce9      	bgt.n	8009042 <prvUnlockQueue+0x16>
 800906e:	e000      	b.n	8009072 <prvUnlockQueue+0x46>
                        break;
 8009070:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	22ff      	movs	r2, #255	; 0xff
 8009076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800907a:	f001 fbe5 	bl	800a848 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800907e:	f001 fbb3 	bl	800a7e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009088:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800908a:	e011      	b.n	80090b0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d012      	beq.n	80090ba <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3310      	adds	r3, #16
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fcb5 	bl	8009a08 <xTaskRemoveFromEventList>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80090a4:	f000 fd92 	bl	8009bcc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80090b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dce9      	bgt.n	800908c <prvUnlockQueue+0x60>
 80090b8:	e000      	b.n	80090bc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80090ba:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80090c4:	f001 fbc0 	bl	800a848 <vPortExitCritical>
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80090d8:	f001 fb86 	bl	800a7e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	e001      	b.n	80090ee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80090ee:	f001 fbab 	bl	800a848 <vPortExitCritical>

    return xReturn;
 80090f2:	68fb      	ldr	r3, [r7, #12]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009104:	f001 fb70 	bl	800a7e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009110:	429a      	cmp	r2, r3
 8009112:	d102      	bne.n	800911a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009114:	2301      	movs	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	e001      	b.n	800911e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800911e:	f001 fb93 	bl	800a848 <vPortExitCritical>

    return xReturn;
 8009122:	68fb      	ldr	r3, [r7, #12]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e01e      	b.n	800917a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800913c:	4a13      	ldr	r2, [pc, #76]	; (800918c <vQueueAddToRegistry+0x60>)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d115      	bne.n	8009174 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009148:	4910      	ldr	r1, [pc, #64]	; (800918c <vQueueAddToRegistry+0x60>)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8009152:	4a0e      	ldr	r2, [pc, #56]	; (800918c <vQueueAddToRegistry+0x60>)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	4413      	add	r3, r2
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4618      	mov	r0, r3
 8009162:	f003 fa17 	bl	800c594 <SEGGER_SYSVIEW_ShrinkId>
 8009166:	4601      	mov	r1, r0
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	2071      	movs	r0, #113	; 0x71
 800916e:	f002 fc2b 	bl	800b9c8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8009172:	e006      	b.n	8009182 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b07      	cmp	r3, #7
 800917e:	d9dd      	bls.n	800913c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20001dbc 	.word	0x20001dbc

08009190 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80091a0:	f001 fb22 	bl	800a7e8 <vPortEnterCritical>
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d103      	bne.n	80091ba <vQueueWaitForMessageRestricted+0x2a>
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c6:	d103      	bne.n	80091d0 <vQueueWaitForMessageRestricted+0x40>
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091d0:	f001 fb3a 	bl	800a848 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d106      	bne.n	80091ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	3324      	adds	r3, #36	; 0x24
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fbe1 	bl	80099ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80091ea:	6978      	ldr	r0, [r7, #20]
 80091ec:	f7ff ff1e 	bl	800902c <prvUnlockQueue>
    }
 80091f0:	bf00      	nop
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08c      	sub	sp, #48	; 0x30
 80091fc:	af04      	add	r7, sp, #16
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4618      	mov	r0, r3
 800920e:	f001 fc15 	bl	800aa3c <pvPortMalloc>
 8009212:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00e      	beq.n	8009238 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800921a:	2058      	movs	r0, #88	; 0x58
 800921c:	f001 fc0e 	bl	800aa3c <pvPortMalloc>
 8009220:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
 800922e:	e005      	b.n	800923c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009230:	6978      	ldr	r0, [r7, #20]
 8009232:	f001 fce3 	bl	800abfc <vPortFree>
 8009236:	e001      	b.n	800923c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009238:	2300      	movs	r3, #0
 800923a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d013      	beq.n	800926a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009242:	88fa      	ldrh	r2, [r7, #6]
 8009244:	2300      	movs	r3, #0
 8009246:	9303      	str	r3, [sp, #12]
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	9302      	str	r3, [sp, #8]
 800924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f80e 	bl	800927a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800925e:	69f8      	ldr	r0, [r7, #28]
 8009260:	f000 f8a2 	bl	80093a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009264:	2301      	movs	r3, #1
 8009266:	61bb      	str	r3, [r7, #24]
 8009268:	e002      	b.n	8009270 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800926a:	f04f 33ff 	mov.w	r3, #4294967295
 800926e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009270:	69bb      	ldr	r3, [r7, #24]
    }
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b088      	sub	sp, #32
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]
 8009286:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	461a      	mov	r2, r3
 8009292:	21a5      	movs	r1, #165	; 0xa5
 8009294:	f003 fc56 	bl	800cb44 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092a2:	3b01      	subs	r3, #1
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	f023 0307 	bic.w	r3, r3, #7
 80092b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	617b      	str	r3, [r7, #20]
    }
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d01f      	beq.n	8009318 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092d8:	2300      	movs	r3, #0
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	e012      	b.n	8009304 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	4413      	add	r3, r2
 80092e4:	7819      	ldrb	r1, [r3, #0]
 80092e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	3334      	adds	r3, #52	; 0x34
 80092ee:	460a      	mov	r2, r1
 80092f0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d006      	beq.n	800930c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	3301      	adds	r3, #1
 8009302:	61fb      	str	r3, [r7, #28]
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	2b09      	cmp	r3, #9
 8009308:	d9e9      	bls.n	80092de <prvInitialiseNewTask+0x64>
 800930a:	e000      	b.n	800930e <prvInitialiseNewTask+0x94>
            {
                break;
 800930c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	2200      	movs	r2, #0
 8009312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009316:	e003      	b.n	8009320 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	2b04      	cmp	r3, #4
 8009324:	d901      	bls.n	800932a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009326:	2304      	movs	r3, #4
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800932e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009334:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	2200      	movs	r2, #0
 800933a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff f999 	bl	8008678 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	3318      	adds	r3, #24
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff f994 	bl	8008678 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009354:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	f1c3 0205 	rsb	r2, r3, #5
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009364:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	3350      	adds	r3, #80	; 0x50
 800936a:	2204      	movs	r2, #4
 800936c:	2100      	movs	r1, #0
 800936e:	4618      	mov	r0, r3
 8009370:	f003 fbe8 	bl	800cb44 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	3354      	adds	r3, #84	; 0x54
 8009378:	2201      	movs	r2, #1
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f003 fbe1 	bl	800cb44 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	68f9      	ldr	r1, [r7, #12]
 8009386:	69b8      	ldr	r0, [r7, #24]
 8009388:	f001 f900 	bl	800a58c <pxPortInitialiseStack>
 800938c:	4602      	mov	r2, r0
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800939e:	bf00      	nop
 80093a0:	3720      	adds	r7, #32
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80093a8:	b5b0      	push	{r4, r5, r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80093b0:	f001 fa1a 	bl	800a7e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80093b4:	4b35      	ldr	r3, [pc, #212]	; (800948c <prvAddNewTaskToReadyList+0xe4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4a34      	ldr	r2, [pc, #208]	; (800948c <prvAddNewTaskToReadyList+0xe4>)
 80093bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80093be:	4b34      	ldr	r3, [pc, #208]	; (8009490 <prvAddNewTaskToReadyList+0xe8>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80093c6:	4a32      	ldr	r2, [pc, #200]	; (8009490 <prvAddNewTaskToReadyList+0xe8>)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093cc:	4b2f      	ldr	r3, [pc, #188]	; (800948c <prvAddNewTaskToReadyList+0xe4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d110      	bne.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80093d4:	f000 fc18 	bl	8009c08 <prvInitialiseTaskLists>
 80093d8:	e00d      	b.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80093da:	4b2e      	ldr	r3, [pc, #184]	; (8009494 <prvAddNewTaskToReadyList+0xec>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d109      	bne.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093e2:	4b2b      	ldr	r3, [pc, #172]	; (8009490 <prvAddNewTaskToReadyList+0xe8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d802      	bhi.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80093f0:	4a27      	ldr	r2, [pc, #156]	; (8009490 <prvAddNewTaskToReadyList+0xe8>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80093f6:	4b28      	ldr	r3, [pc, #160]	; (8009498 <prvAddNewTaskToReadyList+0xf0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	4a26      	ldr	r2, [pc, #152]	; (8009498 <prvAddNewTaskToReadyList+0xf0>)
 80093fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009400:	4b25      	ldr	r3, [pc, #148]	; (8009498 <prvAddNewTaskToReadyList+0xf0>)
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d016      	beq.n	800943c <prvAddNewTaskToReadyList+0x94>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4618      	mov	r0, r3
 8009412:	f002 ff99 	bl	800c348 <SEGGER_SYSVIEW_OnTaskCreate>
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	461d      	mov	r5, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461c      	mov	r4, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	1ae3      	subs	r3, r4, r3
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	462b      	mov	r3, r5
 8009438:	f003 fab8 	bl	800c9ac <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4618      	mov	r0, r3
 8009440:	f003 f806 	bl	800c450 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	2201      	movs	r2, #1
 800944a:	409a      	lsls	r2, r3
 800944c:	4b13      	ldr	r3, [pc, #76]	; (800949c <prvAddNewTaskToReadyList+0xf4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4313      	orrs	r3, r2
 8009452:	4a12      	ldr	r2, [pc, #72]	; (800949c <prvAddNewTaskToReadyList+0xf4>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4a0f      	ldr	r2, [pc, #60]	; (80094a0 <prvAddNewTaskToReadyList+0xf8>)
 8009464:	441a      	add	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3304      	adds	r3, #4
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f7ff f910 	bl	8008692 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009472:	f001 f9e9 	bl	800a848 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009476:	4b07      	ldr	r3, [pc, #28]	; (8009494 <prvAddNewTaskToReadyList+0xec>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800947e:	4b04      	ldr	r3, [pc, #16]	; (8009490 <prvAddNewTaskToReadyList+0xe8>)
 8009480:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bdb0      	pop	{r4, r5, r7, pc}
 800948a:	bf00      	nop
 800948c:	20001ed4 	.word	0x20001ed4
 8009490:	20001dfc 	.word	0x20001dfc
 8009494:	20001ee0 	.word	0x20001ee0
 8009498:	20001ef0 	.word	0x20001ef0
 800949c:	20001edc 	.word	0x20001edc
 80094a0:	20001e00 	.word	0x20001e00

080094a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d01b      	beq.n	80094ee <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80094b6:	4b15      	ldr	r3, [pc, #84]	; (800950c <vTaskDelay+0x68>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <vTaskDelay+0x30>
        __asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	60bb      	str	r3, [r7, #8]
    }
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80094d4:	f000 f880 	bl	80095d8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	2023      	movs	r0, #35	; 0x23
 80094dc:	f002 fa38 	bl	800b950 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094e0:	2100      	movs	r1, #0
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fcc8 	bl	8009e78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80094e8:	f000 f884 	bl	80095f4 <xTaskResumeAll>
 80094ec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d107      	bne.n	8009504 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80094f4:	4b06      	ldr	r3, [pc, #24]	; (8009510 <vTaskDelay+0x6c>)
 80094f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20001efc 	.word	0x20001efc
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800951a:	4b27      	ldr	r3, [pc, #156]	; (80095b8 <vTaskStartScheduler+0xa4>)
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	2300      	movs	r3, #0
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	2300      	movs	r3, #0
 8009524:	2282      	movs	r2, #130	; 0x82
 8009526:	4925      	ldr	r1, [pc, #148]	; (80095bc <vTaskStartScheduler+0xa8>)
 8009528:	4825      	ldr	r0, [pc, #148]	; (80095c0 <vTaskStartScheduler+0xac>)
 800952a:	f7ff fe65 	bl	80091f8 <xTaskCreate>
 800952e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d102      	bne.n	800953c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009536:	f000 fd17 	bl	8009f68 <xTimerCreateTimerTask>
 800953a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d124      	bne.n	800958c <vTaskStartScheduler+0x78>
        __asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	60bb      	str	r3, [r7, #8]
    }
 8009554:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009556:	4b1b      	ldr	r3, [pc, #108]	; (80095c4 <vTaskStartScheduler+0xb0>)
 8009558:	f04f 32ff 	mov.w	r2, #4294967295
 800955c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800955e:	4b1a      	ldr	r3, [pc, #104]	; (80095c8 <vTaskStartScheduler+0xb4>)
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009564:	4b19      	ldr	r3, [pc, #100]	; (80095cc <vTaskStartScheduler+0xb8>)
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800956a:	4b19      	ldr	r3, [pc, #100]	; (80095d0 <vTaskStartScheduler+0xbc>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <vTaskStartScheduler+0xa4>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	429a      	cmp	r2, r3
 8009574:	d102      	bne.n	800957c <vTaskStartScheduler+0x68>
 8009576:	f002 fecb 	bl	800c310 <SEGGER_SYSVIEW_OnIdle>
 800957a:	e004      	b.n	8009586 <vTaskStartScheduler+0x72>
 800957c:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <vTaskStartScheduler+0xbc>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	f002 ff23 	bl	800c3cc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009586:	f001 f88d 	bl	800a6a4 <xPortStartScheduler>
 800958a:	e00e      	b.n	80095aa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d10a      	bne.n	80095aa <vTaskStartScheduler+0x96>
        __asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	607b      	str	r3, [r7, #4]
    }
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80095aa:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <vTaskStartScheduler+0xc0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
}
 80095ae:	bf00      	nop
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20001ef8 	.word	0x20001ef8
 80095bc:	0800cd70 	.word	0x0800cd70
 80095c0:	08009be5 	.word	0x08009be5
 80095c4:	20001ef4 	.word	0x20001ef4
 80095c8:	20001ee0 	.word	0x20001ee0
 80095cc:	20001ed8 	.word	0x20001ed8
 80095d0:	20001dfc 	.word	0x20001dfc
 80095d4:	200000fc 	.word	0x200000fc

080095d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <vTaskSuspendAll+0x18>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3301      	adds	r3, #1
 80095e2:	4a03      	ldr	r2, [pc, #12]	; (80095f0 <vTaskSuspendAll+0x18>)
 80095e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80095e6:	bf00      	nop
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	20001efc 	.word	0x20001efc

080095f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80095fe:	2300      	movs	r3, #0
 8009600:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009602:	4b3d      	ldr	r3, [pc, #244]	; (80096f8 <xTaskResumeAll+0x104>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <xTaskResumeAll+0x2c>
        __asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	603b      	str	r3, [r7, #0]
    }
 800961c:	bf00      	nop
 800961e:	e7fe      	b.n	800961e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009620:	f001 f8e2 	bl	800a7e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009624:	4b34      	ldr	r3, [pc, #208]	; (80096f8 <xTaskResumeAll+0x104>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3b01      	subs	r3, #1
 800962a:	4a33      	ldr	r2, [pc, #204]	; (80096f8 <xTaskResumeAll+0x104>)
 800962c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800962e:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <xTaskResumeAll+0x104>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d159      	bne.n	80096ea <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009636:	4b31      	ldr	r3, [pc, #196]	; (80096fc <xTaskResumeAll+0x108>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d055      	beq.n	80096ea <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800963e:	e032      	b.n	80096a6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009640:	4b2f      	ldr	r3, [pc, #188]	; (8009700 <xTaskResumeAll+0x10c>)
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3318      	adds	r3, #24
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff f87d 	bl	800874c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3304      	adds	r3, #4
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff f878 	bl	800874c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4618      	mov	r0, r3
 8009660:	f002 fef6 	bl	800c450 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	2201      	movs	r2, #1
 800966a:	409a      	lsls	r2, r3
 800966c:	4b25      	ldr	r3, [pc, #148]	; (8009704 <xTaskResumeAll+0x110>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4313      	orrs	r3, r2
 8009672:	4a24      	ldr	r2, [pc, #144]	; (8009704 <xTaskResumeAll+0x110>)
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4a21      	ldr	r2, [pc, #132]	; (8009708 <xTaskResumeAll+0x114>)
 8009684:	441a      	add	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3304      	adds	r3, #4
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f7ff f800 	bl	8008692 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009696:	4b1d      	ldr	r3, [pc, #116]	; (800970c <xTaskResumeAll+0x118>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80096a0:	4b1b      	ldr	r3, [pc, #108]	; (8009710 <xTaskResumeAll+0x11c>)
 80096a2:	2201      	movs	r2, #1
 80096a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096a6:	4b16      	ldr	r3, [pc, #88]	; (8009700 <xTaskResumeAll+0x10c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1c8      	bne.n	8009640 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80096b4:	f000 fb26 	bl	8009d04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096b8:	4b16      	ldr	r3, [pc, #88]	; (8009714 <xTaskResumeAll+0x120>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d010      	beq.n	80096e6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80096c4:	f000 f84a 	bl	800975c <xTaskIncrementTick>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80096ce:	4b10      	ldr	r3, [pc, #64]	; (8009710 <xTaskResumeAll+0x11c>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1f1      	bne.n	80096c4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <xTaskResumeAll+0x120>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80096e6:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <xTaskResumeAll+0x11c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80096ea:	f001 f8ad 	bl	800a848 <vPortExitCritical>

    return xAlreadyYielded;
 80096ee:	687b      	ldr	r3, [r7, #4]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20001efc 	.word	0x20001efc
 80096fc:	20001ed4 	.word	0x20001ed4
 8009700:	20001e94 	.word	0x20001e94
 8009704:	20001edc 	.word	0x20001edc
 8009708:	20001e00 	.word	0x20001e00
 800970c:	20001dfc 	.word	0x20001dfc
 8009710:	20001ee8 	.word	0x20001ee8
 8009714:	20001ee4 	.word	0x20001ee4

08009718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <xTaskGetTickCount+0x1c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009724:	687b      	ldr	r3, [r7, #4]
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	20001ed8 	.word	0x20001ed8

08009738 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800973e:	f001 f93d 	bl	800a9bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009742:	2300      	movs	r3, #0
 8009744:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8009746:	4b04      	ldr	r3, [pc, #16]	; (8009758 <xTaskGetTickCountFromISR+0x20>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800974c:	683b      	ldr	r3, [r7, #0]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20001ed8 	.word	0x20001ed8

0800975c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009766:	4b41      	ldr	r3, [pc, #260]	; (800986c <xTaskIncrementTick+0x110>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d173      	bne.n	8009856 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800976e:	4b40      	ldr	r3, [pc, #256]	; (8009870 <xTaskIncrementTick+0x114>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009776:	4a3e      	ldr	r2, [pc, #248]	; (8009870 <xTaskIncrementTick+0x114>)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d120      	bne.n	80097c4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8009782:	4b3c      	ldr	r3, [pc, #240]	; (8009874 <xTaskIncrementTick+0x118>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <xTaskIncrementTick+0x46>
        __asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	603b      	str	r3, [r7, #0]
    }
 800979e:	bf00      	nop
 80097a0:	e7fe      	b.n	80097a0 <xTaskIncrementTick+0x44>
 80097a2:	4b34      	ldr	r3, [pc, #208]	; (8009874 <xTaskIncrementTick+0x118>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	4b33      	ldr	r3, [pc, #204]	; (8009878 <xTaskIncrementTick+0x11c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a31      	ldr	r2, [pc, #196]	; (8009874 <xTaskIncrementTick+0x118>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	4a31      	ldr	r2, [pc, #196]	; (8009878 <xTaskIncrementTick+0x11c>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	4b31      	ldr	r3, [pc, #196]	; (800987c <xTaskIncrementTick+0x120>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	4a2f      	ldr	r2, [pc, #188]	; (800987c <xTaskIncrementTick+0x120>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	f000 faa0 	bl	8009d04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80097c4:	4b2e      	ldr	r3, [pc, #184]	; (8009880 <xTaskIncrementTick+0x124>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d348      	bcc.n	8009860 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ce:	4b29      	ldr	r3, [pc, #164]	; (8009874 <xTaskIncrementTick+0x118>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d104      	bne.n	80097e2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d8:	4b29      	ldr	r3, [pc, #164]	; (8009880 <xTaskIncrementTick+0x124>)
 80097da:	f04f 32ff 	mov.w	r2, #4294967295
 80097de:	601a      	str	r2, [r3, #0]
                    break;
 80097e0:	e03e      	b.n	8009860 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e2:	4b24      	ldr	r3, [pc, #144]	; (8009874 <xTaskIncrementTick+0x118>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d203      	bcs.n	8009802 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80097fa:	4a21      	ldr	r2, [pc, #132]	; (8009880 <xTaskIncrementTick+0x124>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009800:	e02e      	b.n	8009860 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	3304      	adds	r3, #4
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe ffa0 	bl	800874c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	3318      	adds	r3, #24
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe ff97 	bl	800874c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	4618      	mov	r0, r3
 8009822:	f002 fe15 	bl	800c450 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	2201      	movs	r2, #1
 800982c:	409a      	lsls	r2, r3
 800982e:	4b15      	ldr	r3, [pc, #84]	; (8009884 <xTaskIncrementTick+0x128>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4313      	orrs	r3, r2
 8009834:	4a13      	ldr	r2, [pc, #76]	; (8009884 <xTaskIncrementTick+0x128>)
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4a10      	ldr	r2, [pc, #64]	; (8009888 <xTaskIncrementTick+0x12c>)
 8009846:	441a      	add	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	3304      	adds	r3, #4
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f7fe ff1f 	bl	8008692 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009854:	e7bb      	b.n	80097ce <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009856:	4b0d      	ldr	r3, [pc, #52]	; (800988c <xTaskIncrementTick+0x130>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	4a0b      	ldr	r2, [pc, #44]	; (800988c <xTaskIncrementTick+0x130>)
 800985e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8009860:	697b      	ldr	r3, [r7, #20]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20001efc 	.word	0x20001efc
 8009870:	20001ed8 	.word	0x20001ed8
 8009874:	20001e8c 	.word	0x20001e8c
 8009878:	20001e90 	.word	0x20001e90
 800987c:	20001eec 	.word	0x20001eec
 8009880:	20001ef4 	.word	0x20001ef4
 8009884:	20001edc 	.word	0x20001edc
 8009888:	20001e00 	.word	0x20001e00
 800988c:	20001ee4 	.word	0x20001ee4

08009890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009896:	4b2d      	ldr	r3, [pc, #180]	; (800994c <vTaskSwitchContext+0xbc>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800989e:	4b2c      	ldr	r3, [pc, #176]	; (8009950 <vTaskSwitchContext+0xc0>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80098a4:	e04d      	b.n	8009942 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80098a6:	4b2a      	ldr	r3, [pc, #168]	; (8009950 <vTaskSwitchContext+0xc0>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ac:	4b29      	ldr	r3, [pc, #164]	; (8009954 <vTaskSwitchContext+0xc4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	fab3 f383 	clz	r3, r3
 80098b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80098ba:	7afb      	ldrb	r3, [r7, #11]
 80098bc:	f1c3 031f 	rsb	r3, r3, #31
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	4925      	ldr	r1, [pc, #148]	; (8009958 <vTaskSwitchContext+0xc8>)
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	440b      	add	r3, r1
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <vTaskSwitchContext+0x5c>
        __asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	607b      	str	r3, [r7, #4]
    }
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <vTaskSwitchContext+0x5a>
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4a18      	ldr	r2, [pc, #96]	; (8009958 <vTaskSwitchContext+0xc8>)
 80098f8:	4413      	add	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	605a      	str	r2, [r3, #4]
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	3308      	adds	r3, #8
 800990e:	429a      	cmp	r2, r3
 8009910:	d104      	bne.n	800991c <vTaskSwitchContext+0x8c>
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	605a      	str	r2, [r3, #4]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	4a0e      	ldr	r2, [pc, #56]	; (800995c <vTaskSwitchContext+0xcc>)
 8009924:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <vTaskSwitchContext+0xcc>)
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <vTaskSwitchContext+0xd0>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d102      	bne.n	8009938 <vTaskSwitchContext+0xa8>
 8009932:	f002 fced 	bl	800c310 <SEGGER_SYSVIEW_OnIdle>
}
 8009936:	e004      	b.n	8009942 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8009938:	4b08      	ldr	r3, [pc, #32]	; (800995c <vTaskSwitchContext+0xcc>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4618      	mov	r0, r3
 800993e:	f002 fd45 	bl	800c3cc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8009942:	bf00      	nop
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20001efc 	.word	0x20001efc
 8009950:	20001ee8 	.word	0x20001ee8
 8009954:	20001edc 	.word	0x20001edc
 8009958:	20001e00 	.word	0x20001e00
 800995c:	20001dfc 	.word	0x20001dfc
 8009960:	20001ef8 	.word	0x20001ef8

08009964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	60fb      	str	r3, [r7, #12]
    }
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <vTaskPlaceOnEventList+0x44>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3318      	adds	r3, #24
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7fe fea1 	bl	80086da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009998:	2101      	movs	r1, #1
 800999a:	6838      	ldr	r0, [r7, #0]
 800999c:	f000 fa6c 	bl	8009e78 <prvAddCurrentTaskToDelayedList>
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20001dfc 	.word	0x20001dfc

080099ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	617b      	str	r3, [r7, #20]
    }
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099d4:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <vTaskPlaceOnEventListRestricted+0x58>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3318      	adds	r3, #24
 80099da:	4619      	mov	r1, r3
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7fe fe58 	bl	8008692 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80099ee:	2024      	movs	r0, #36	; 0x24
 80099f0:	f001 ff90 	bl	800b914 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099f4:	6879      	ldr	r1, [r7, #4]
 80099f6:	68b8      	ldr	r0, [r7, #8]
 80099f8:	f000 fa3e 	bl	8009e78 <prvAddCurrentTaskToDelayedList>
    }
 80099fc:	bf00      	nop
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20001dfc 	.word	0x20001dfc

08009a08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60fb      	str	r3, [r7, #12]
    }
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	3318      	adds	r3, #24
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fe87 	bl	800874c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a3e:	4b1f      	ldr	r3, [pc, #124]	; (8009abc <xTaskRemoveFromEventList+0xb4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d120      	bne.n	8009a88 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fe7e 	bl	800874c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f002 fcfc 	bl	800c450 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	409a      	lsls	r2, r3
 8009a60:	4b17      	ldr	r3, [pc, #92]	; (8009ac0 <xTaskRemoveFromEventList+0xb8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	4a16      	ldr	r2, [pc, #88]	; (8009ac0 <xTaskRemoveFromEventList+0xb8>)
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4a13      	ldr	r2, [pc, #76]	; (8009ac4 <xTaskRemoveFromEventList+0xbc>)
 8009a78:	441a      	add	r2, r3
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4610      	mov	r0, r2
 8009a82:	f7fe fe06 	bl	8008692 <vListInsertEnd>
 8009a86:	e005      	b.n	8009a94 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3318      	adds	r3, #24
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	480e      	ldr	r0, [pc, #56]	; (8009ac8 <xTaskRemoveFromEventList+0xc0>)
 8009a90:	f7fe fdff 	bl	8008692 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <xTaskRemoveFromEventList+0xc4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d905      	bls.n	8009aae <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009aa6:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <xTaskRemoveFromEventList+0xc8>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e001      	b.n	8009ab2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8009ab2:	697b      	ldr	r3, [r7, #20]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20001efc 	.word	0x20001efc
 8009ac0:	20001edc 	.word	0x20001edc
 8009ac4:	20001e00 	.word	0x20001e00
 8009ac8:	20001e94 	.word	0x20001e94
 8009acc:	20001dfc 	.word	0x20001dfc
 8009ad0:	20001ee8 	.word	0x20001ee8

08009ad4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <vTaskInternalSetTimeOutState+0x24>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <vTaskInternalSetTimeOutState+0x28>)
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	605a      	str	r2, [r3, #4]
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	20001eec 	.word	0x20001eec
 8009afc:	20001ed8 	.word	0x20001ed8

08009b00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
    }
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60fb      	str	r3, [r7, #12]
    }
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8009b42:	f000 fe51 	bl	800a7e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009b46:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <xTaskCheckForTimeOut+0xc4>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5e:	d102      	bne.n	8009b66 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	e026      	b.n	8009bb4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <xTaskCheckForTimeOut+0xc8>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d00a      	beq.n	8009b88 <xTaskCheckForTimeOut+0x88>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d305      	bcc.n	8009b88 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	e015      	b.n	8009bb4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d20b      	bcs.n	8009baa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	1ad2      	subs	r2, r2, r3
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff ff98 	bl	8009ad4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	e004      	b.n	8009bb4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009bb4:	f000 fe48 	bl	800a848 <vPortExitCritical>

    return xReturn;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20001ed8 	.word	0x20001ed8
 8009bc8:	20001eec 	.word	0x20001eec

08009bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <vTaskMissedYield+0x14>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
}
 8009bd6:	bf00      	nop
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	20001ee8 	.word	0x20001ee8

08009be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009bec:	f000 f84c 	bl	8009c88 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8009bf0:	4b04      	ldr	r3, [pc, #16]	; (8009c04 <prvIdleTask+0x20>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009c00:	e7f4      	b.n	8009bec <prvIdleTask+0x8>
 8009c02:	bf00      	nop
 8009c04:	e000ed04 	.word	0xe000ed04

08009c08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c0e:	2300      	movs	r3, #0
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	e00c      	b.n	8009c2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	4613      	mov	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4a12      	ldr	r2, [pc, #72]	; (8009c68 <prvInitialiseTaskLists+0x60>)
 8009c20:	4413      	add	r3, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fd08 	bl	8008638 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	607b      	str	r3, [r7, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d9ef      	bls.n	8009c14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009c34:	480d      	ldr	r0, [pc, #52]	; (8009c6c <prvInitialiseTaskLists+0x64>)
 8009c36:	f7fe fcff 	bl	8008638 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009c3a:	480d      	ldr	r0, [pc, #52]	; (8009c70 <prvInitialiseTaskLists+0x68>)
 8009c3c:	f7fe fcfc 	bl	8008638 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009c40:	480c      	ldr	r0, [pc, #48]	; (8009c74 <prvInitialiseTaskLists+0x6c>)
 8009c42:	f7fe fcf9 	bl	8008638 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8009c46:	480c      	ldr	r0, [pc, #48]	; (8009c78 <prvInitialiseTaskLists+0x70>)
 8009c48:	f7fe fcf6 	bl	8008638 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8009c4c:	480b      	ldr	r0, [pc, #44]	; (8009c7c <prvInitialiseTaskLists+0x74>)
 8009c4e:	f7fe fcf3 	bl	8008638 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009c52:	4b0b      	ldr	r3, [pc, #44]	; (8009c80 <prvInitialiseTaskLists+0x78>)
 8009c54:	4a05      	ldr	r2, [pc, #20]	; (8009c6c <prvInitialiseTaskLists+0x64>)
 8009c56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c58:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <prvInitialiseTaskLists+0x7c>)
 8009c5a:	4a05      	ldr	r2, [pc, #20]	; (8009c70 <prvInitialiseTaskLists+0x68>)
 8009c5c:	601a      	str	r2, [r3, #0]
}
 8009c5e:	bf00      	nop
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20001e00 	.word	0x20001e00
 8009c6c:	20001e64 	.word	0x20001e64
 8009c70:	20001e78 	.word	0x20001e78
 8009c74:	20001e94 	.word	0x20001e94
 8009c78:	20001ea8 	.word	0x20001ea8
 8009c7c:	20001ec0 	.word	0x20001ec0
 8009c80:	20001e8c 	.word	0x20001e8c
 8009c84:	20001e90 	.word	0x20001e90

08009c88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c8e:	e019      	b.n	8009cc4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8009c90:	f000 fdaa 	bl	800a7e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c94:	4b10      	ldr	r3, [pc, #64]	; (8009cd8 <prvCheckTasksWaitingTermination+0x50>)
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe fd53 	bl	800874c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	; (8009cdc <prvCheckTasksWaitingTermination+0x54>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4a0b      	ldr	r2, [pc, #44]	; (8009cdc <prvCheckTasksWaitingTermination+0x54>)
 8009cae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <prvCheckTasksWaitingTermination+0x58>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ce0 <prvCheckTasksWaitingTermination+0x58>)
 8009cb8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8009cba:	f000 fdc5 	bl	800a848 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f810 	bl	8009ce4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <prvCheckTasksWaitingTermination+0x58>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e1      	bne.n	8009c90 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8009ccc:	bf00      	nop
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20001ea8 	.word	0x20001ea8
 8009cdc:	20001ed4 	.word	0x20001ed4
 8009ce0:	20001ebc 	.word	0x20001ebc

08009ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 ff83 	bl	800abfc <vPortFree>
                vPortFree( pxTCB );
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 ff80 	bl	800abfc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <prvResetNextTaskUnblockTime+0x30>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d104      	bne.n	8009d1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <prvResetNextTaskUnblockTime+0x34>)
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009d1a:	e005      	b.n	8009d28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d1c:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <prvResetNextTaskUnblockTime+0x30>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a04      	ldr	r2, [pc, #16]	; (8009d38 <prvResetNextTaskUnblockTime+0x34>)
 8009d26:	6013      	str	r3, [r2, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20001e8c 	.word	0x20001e8c
 8009d38:	20001ef4 	.word	0x20001ef4

08009d3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <xTaskGetSchedulerState+0x34>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	607b      	str	r3, [r7, #4]
 8009d4e:	e008      	b.n	8009d62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d50:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <xTaskGetSchedulerState+0x38>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009d58:	2302      	movs	r3, #2
 8009d5a:	607b      	str	r3, [r7, #4]
 8009d5c:	e001      	b.n	8009d62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009d62:	687b      	ldr	r3, [r7, #4]
    }
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	20001ee0 	.word	0x20001ee0
 8009d74:	20001efc 	.word	0x20001efc

08009d78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d068      	beq.n	8009e60 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009d8e:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <xTaskPriorityDisinherit+0xf4>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d00a      	beq.n	8009dae <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	60fb      	str	r3, [r7, #12]
    }
 8009daa:	bf00      	nop
 8009dac:	e7fe      	b.n	8009dac <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10a      	bne.n	8009dcc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	60bb      	str	r3, [r7, #8]
    }
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd0:	1e5a      	subs	r2, r3, #1
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d03e      	beq.n	8009e60 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d13a      	bne.n	8009e60 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fcac 	bl	800874c <uxListRemove>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	2201      	movs	r2, #1
 8009e00:	fa02 f303 	lsl.w	r3, r2, r3
 8009e04:	43da      	mvns	r2, r3
 8009e06:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <xTaskPriorityDisinherit+0xf8>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	4a18      	ldr	r2, [pc, #96]	; (8009e70 <xTaskPriorityDisinherit+0xf8>)
 8009e0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4619      	mov	r1, r3
 8009e14:	204a      	movs	r0, #74	; 0x4a
 8009e16:	f001 fd9b 	bl	800b950 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	f1c3 0205 	rsb	r2, r3, #5
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	2201      	movs	r2, #1
 8009e34:	409a      	lsls	r2, r3
 8009e36:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <xTaskPriorityDisinherit+0xf8>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <xTaskPriorityDisinherit+0xf8>)
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <xTaskPriorityDisinherit+0xfc>)
 8009e4e:	441a      	add	r2, r3
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	3304      	adds	r3, #4
 8009e54:	4619      	mov	r1, r3
 8009e56:	4610      	mov	r0, r2
 8009e58:	f7fe fc1b 	bl	8008692 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009e60:	697b      	ldr	r3, [r7, #20]
    }
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20001dfc 	.word	0x20001dfc
 8009e70:	20001edc 	.word	0x20001edc
 8009e74:	20001e00 	.word	0x20001e00

08009e78 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009e82:	4b32      	ldr	r3, [pc, #200]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xd4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e88:	4b31      	ldr	r3, [pc, #196]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fc5c 	bl	800874c <uxListRemove>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e9a:	4b2d      	ldr	r3, [pc, #180]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea6:	43da      	mvns	r2, r3
 8009ea8:	4b2a      	ldr	r3, [pc, #168]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4013      	ands	r3, r2
 8009eae:	4a29      	ldr	r2, [pc, #164]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8009eb0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb8:	d110      	bne.n	8009edc <prvAddCurrentTaskToDelayedList+0x64>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00d      	beq.n	8009edc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8009ec0:	4b23      	ldr	r3, [pc, #140]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	211b      	movs	r1, #27
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f002 fb04 	bl	800c4d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ecc:	4b20      	ldr	r3, [pc, #128]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4820      	ldr	r0, [pc, #128]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xe0>)
 8009ed6:	f7fe fbdc 	bl	8008692 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009eda:	e032      	b.n	8009f42 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d20f      	bcs.n	8009f14 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8009ef4:	4b16      	ldr	r3, [pc, #88]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2104      	movs	r1, #4
 8009efa:	4618      	mov	r0, r3
 8009efc:	f002 faea 	bl	800c4d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f00:	4b16      	ldr	r3, [pc, #88]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xe4>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f7fe fbe4 	bl	80086da <vListInsert>
}
 8009f12:	e016      	b.n	8009f42 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8009f14:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2104      	movs	r1, #4
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f002 fada 	bl	800c4d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f20:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f7fe fbd4 	bl	80086da <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8009f32:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <prvAddCurrentTaskToDelayedList+0xec>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d202      	bcs.n	8009f42 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8009f3c:	4a09      	ldr	r2, [pc, #36]	; (8009f64 <prvAddCurrentTaskToDelayedList+0xec>)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6013      	str	r3, [r2, #0]
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20001ed8 	.word	0x20001ed8
 8009f50:	20001dfc 	.word	0x20001dfc
 8009f54:	20001edc 	.word	0x20001edc
 8009f58:	20001ec0 	.word	0x20001ec0
 8009f5c:	20001e90 	.word	0x20001e90
 8009f60:	20001e8c 	.word	0x20001e8c
 8009f64:	20001ef4 	.word	0x20001ef4

08009f68 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009f72:	f000 fad5 	bl	800a520 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009f76:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <xTimerCreateTimerTask+0x54>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8009f7e:	4b10      	ldr	r3, [pc, #64]	; (8009fc0 <xTimerCreateTimerTask+0x58>)
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	2302      	movs	r3, #2
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	2300      	movs	r3, #0
 8009f88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009f8c:	490d      	ldr	r1, [pc, #52]	; (8009fc4 <xTimerCreateTimerTask+0x5c>)
 8009f8e:	480e      	ldr	r0, [pc, #56]	; (8009fc8 <xTimerCreateTimerTask+0x60>)
 8009f90:	f7ff f932 	bl	80091f8 <xTaskCreate>
 8009f94:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	603b      	str	r3, [r7, #0]
    }
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8009fb2:	687b      	ldr	r3, [r7, #4]
    }
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20001f30 	.word	0x20001f30
 8009fc0:	20001f34 	.word	0x20001f34
 8009fc4:	0800cd78 	.word	0x0800cd78
 8009fc8:	0800a101 	.word	0x0800a101

08009fcc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	; 0x28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <xTimerGenericCommand+0x2e>
        __asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	623b      	str	r3, [r7, #32]
    }
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8009ffa:	4b1a      	ldr	r3, [pc, #104]	; (800a064 <xTimerGenericCommand+0x98>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d02a      	beq.n	800a058 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b05      	cmp	r3, #5
 800a012:	dc18      	bgt.n	800a046 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a014:	f7ff fe92 	bl	8009d3c <xTaskGetSchedulerState>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d109      	bne.n	800a032 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a01e:	4b11      	ldr	r3, [pc, #68]	; (800a064 <xTimerGenericCommand+0x98>)
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	f107 0114 	add.w	r1, r7, #20
 800a026:	2300      	movs	r3, #0
 800a028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02a:	f7fe fc9d 	bl	8008968 <xQueueGenericSend>
 800a02e:	6278      	str	r0, [r7, #36]	; 0x24
 800a030:	e012      	b.n	800a058 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a032:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <xTimerGenericCommand+0x98>)
 800a034:	6818      	ldr	r0, [r3, #0]
 800a036:	f107 0114 	add.w	r1, r7, #20
 800a03a:	2300      	movs	r3, #0
 800a03c:	2200      	movs	r2, #0
 800a03e:	f7fe fc93 	bl	8008968 <xQueueGenericSend>
 800a042:	6278      	str	r0, [r7, #36]	; 0x24
 800a044:	e008      	b.n	800a058 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a046:	4b07      	ldr	r3, [pc, #28]	; (800a064 <xTimerGenericCommand+0x98>)
 800a048:	6818      	ldr	r0, [r3, #0]
 800a04a:	f107 0114 	add.w	r1, r7, #20
 800a04e:	2300      	movs	r3, #0
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	f7fe fd97 	bl	8008b84 <xQueueGenericSendFromISR>
 800a056:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800a05a:	4618      	mov	r0, r3
 800a05c:	3728      	adds	r7, #40	; 0x28
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20001f30 	.word	0x20001f30

0800a068 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a072:	4b22      	ldr	r3, [pc, #136]	; (800a0fc <prvProcessExpiredTimer+0x94>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	3304      	adds	r3, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fb63 	bl	800874c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d022      	beq.n	800a0da <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	699a      	ldr	r2, [r3, #24]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	18d1      	adds	r1, r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	6978      	ldr	r0, [r7, #20]
 800a0a2:	f000 f8d1 	bl	800a248 <prvInsertTimerInActiveList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d01f      	beq.n	800a0ec <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	6978      	ldr	r0, [r7, #20]
 800a0b8:	f7ff ff88 	bl	8009fcc <xTimerGenericCommand>
 800a0bc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d113      	bne.n	800a0ec <prvProcessExpiredTimer+0x84>
        __asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	60fb      	str	r3, [r7, #12]
    }
 800a0d6:	bf00      	nop
 800a0d8:	e7fe      	b.n	800a0d8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0e0:	f023 0301 	bic.w	r3, r3, #1
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	6978      	ldr	r0, [r7, #20]
 800a0f2:	4798      	blx	r3
    }
 800a0f4:	bf00      	nop
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20001f28 	.word	0x20001f28

0800a100 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a108:	f107 0308 	add.w	r3, r7, #8
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f857 	bl	800a1c0 <prvGetNextExpireTime>
 800a112:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4619      	mov	r1, r3
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 f803 	bl	800a124 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a11e:	f000 f8d5 	bl	800a2cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a122:	e7f1      	b.n	800a108 <prvTimerTask+0x8>

0800a124 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a12e:	f7ff fa53 	bl	80095d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a132:	f107 0308 	add.w	r3, r7, #8
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f866 	bl	800a208 <prvSampleTimeNow>
 800a13c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d130      	bne.n	800a1a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <prvProcessTimerOrBlockTask+0x3c>
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d806      	bhi.n	800a160 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a152:	f7ff fa4f 	bl	80095f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a156:	68f9      	ldr	r1, [r7, #12]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff ff85 	bl	800a068 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a15e:	e024      	b.n	800a1aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <prvProcessTimerOrBlockTask+0x90>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <prvProcessTimerOrBlockTask+0x50>
 800a170:	2301      	movs	r3, #1
 800a172:	e000      	b.n	800a176 <prvProcessTimerOrBlockTask+0x52>
 800a174:	2300      	movs	r3, #0
 800a176:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a178:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <prvProcessTimerOrBlockTask+0x94>)
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	4619      	mov	r1, r3
 800a186:	f7ff f803 	bl	8009190 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a18a:	f7ff fa33 	bl	80095f4 <xTaskResumeAll>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a194:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <prvProcessTimerOrBlockTask+0x98>)
 800a196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	f3bf 8f6f 	isb	sy
    }
 800a1a4:	e001      	b.n	800a1aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a1a6:	f7ff fa25 	bl	80095f4 <xTaskResumeAll>
    }
 800a1aa:	bf00      	nop
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20001f2c 	.word	0x20001f2c
 800a1b8:	20001f30 	.word	0x20001f30
 800a1bc:	e000ed04 	.word	0xe000ed04

0800a1c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1c8:	4b0e      	ldr	r3, [pc, #56]	; (800a204 <prvGetNextExpireTime+0x44>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <prvGetNextExpireTime+0x16>
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	e000      	b.n	800a1d8 <prvGetNextExpireTime+0x18>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d105      	bne.n	800a1f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1e4:	4b07      	ldr	r3, [pc, #28]	; (800a204 <prvGetNextExpireTime+0x44>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e001      	b.n	800a1f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
    }
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	20001f28 	.word	0x20001f28

0800a208 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a210:	f7ff fa82 	bl	8009718 <xTaskGetTickCount>
 800a214:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a216:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <prvSampleTimeNow+0x3c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d205      	bcs.n	800a22c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a220:	f000 f91a 	bl	800a458 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	e002      	b.n	800a232 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a232:	4a04      	ldr	r2, [pc, #16]	; (800a244 <prvSampleTimeNow+0x3c>)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a238:	68fb      	ldr	r3, [r7, #12]
    }
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20001f38 	.word	0x20001f38

0800a248 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a256:	2300      	movs	r3, #0
 800a258:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d812      	bhi.n	800a294 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	1ad2      	subs	r2, r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d302      	bcc.n	800a282 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a27c:	2301      	movs	r3, #1
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	e01b      	b.n	800a2ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a282:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <prvInsertTimerInActiveList+0x7c>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3304      	adds	r3, #4
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f7fe fa24 	bl	80086da <vListInsert>
 800a292:	e012      	b.n	800a2ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d206      	bcs.n	800a2aa <prvInsertTimerInActiveList+0x62>
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d302      	bcc.n	800a2aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e007      	b.n	800a2ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2aa:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <prvInsertTimerInActiveList+0x80>)
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	f7fe fa10 	bl	80086da <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a2ba:	697b      	ldr	r3, [r7, #20]
    }
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20001f2c 	.word	0x20001f2c
 800a2c8:	20001f28 	.word	0x20001f28

0800a2cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08c      	sub	sp, #48	; 0x30
 800a2d0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2d2:	e0ae      	b.n	800a432 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f2c0 80aa 	blt.w	800a430 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe fa2d 	bl	800874c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2f2:	1d3b      	adds	r3, r7, #4
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff ff87 	bl	800a208 <prvSampleTimeNow>
 800a2fa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b09      	cmp	r3, #9
 800a300:	f200 8097 	bhi.w	800a432 <prvProcessReceivedCommands+0x166>
 800a304:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <prvProcessReceivedCommands+0x40>)
 800a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30a:	bf00      	nop
 800a30c:	0800a335 	.word	0x0800a335
 800a310:	0800a335 	.word	0x0800a335
 800a314:	0800a335 	.word	0x0800a335
 800a318:	0800a3a9 	.word	0x0800a3a9
 800a31c:	0800a3bd 	.word	0x0800a3bd
 800a320:	0800a407 	.word	0x0800a407
 800a324:	0800a335 	.word	0x0800a335
 800a328:	0800a335 	.word	0x0800a335
 800a32c:	0800a3a9 	.word	0x0800a3a9
 800a330:	0800a3bd 	.word	0x0800a3bd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a33a:	f043 0301 	orr.w	r3, r3, #1
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	18d1      	adds	r1, r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a3a      	ldr	r2, [r7, #32]
 800a352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a354:	f7ff ff78 	bl	800a248 <prvInsertTimerInActiveList>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d069      	beq.n	800a432 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a364:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a36c:	f003 0304 	and.w	r3, r3, #4
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05e      	beq.n	800a432 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	441a      	add	r2, r3
 800a37c:	2300      	movs	r3, #0
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	2300      	movs	r3, #0
 800a382:	2100      	movs	r1, #0
 800a384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a386:	f7ff fe21 	bl	8009fcc <xTimerGenericCommand>
 800a38a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d14f      	bne.n	800a432 <prvProcessReceivedCommands+0x166>
        __asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	61bb      	str	r3, [r7, #24]
    }
 800a3a4:	bf00      	nop
 800a3a6:	e7fe      	b.n	800a3a6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ae:	f023 0301 	bic.w	r3, r3, #1
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800a3ba:	e03a      	b.n	800a432 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3c2:	f043 0301 	orr.w	r3, r3, #1
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	617b      	str	r3, [r7, #20]
    }
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	18d1      	adds	r1, r2, r3
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	6a3a      	ldr	r2, [r7, #32]
 800a3fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a400:	f7ff ff22 	bl	800a248 <prvInsertTimerInActiveList>
                        break;
 800a404:	e015      	b.n	800a432 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a40c:	f003 0302 	and.w	r3, r3, #2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d103      	bne.n	800a41c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800a414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a416:	f000 fbf1 	bl	800abfc <vPortFree>
 800a41a:	e00a      	b.n	800a432 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a422:	f023 0301 	bic.w	r3, r3, #1
 800a426:	b2da      	uxtb	r2, r3
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a42e:	e000      	b.n	800a432 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800a430:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a432:	4b08      	ldr	r3, [pc, #32]	; (800a454 <prvProcessReceivedCommands+0x188>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f107 0108 	add.w	r1, r7, #8
 800a43a:	2200      	movs	r2, #0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe fc5f 	bl	8008d00 <xQueueReceive>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	f47f af45 	bne.w	800a2d4 <prvProcessReceivedCommands+0x8>
        }
    }
 800a44a:	bf00      	nop
 800a44c:	bf00      	nop
 800a44e:	3728      	adds	r7, #40	; 0x28
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20001f30 	.word	0x20001f30

0800a458 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a45e:	e048      	b.n	800a4f2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a460:	4b2d      	ldr	r3, [pc, #180]	; (800a518 <prvSwitchTimerLists+0xc0>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a46a:	4b2b      	ldr	r3, [pc, #172]	; (800a518 <prvSwitchTimerLists+0xc0>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3304      	adds	r3, #4
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fe f967 	bl	800874c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	d02e      	beq.n	800a4f2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	4413      	add	r3, r2
 800a49c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d90e      	bls.n	800a4c4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4b2:	4b19      	ldr	r3, [pc, #100]	; (800a518 <prvSwitchTimerLists+0xc0>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f7fe f90c 	bl	80086da <vListInsert>
 800a4c2:	e016      	b.n	800a4f2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff fd7c 	bl	8009fcc <xTimerGenericCommand>
 800a4d4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	603b      	str	r3, [r7, #0]
    }
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4f2:	4b09      	ldr	r3, [pc, #36]	; (800a518 <prvSwitchTimerLists+0xc0>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1b1      	bne.n	800a460 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <prvSwitchTimerLists+0xc0>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800a502:	4b06      	ldr	r3, [pc, #24]	; (800a51c <prvSwitchTimerLists+0xc4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a04      	ldr	r2, [pc, #16]	; (800a518 <prvSwitchTimerLists+0xc0>)
 800a508:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a50a:	4a04      	ldr	r2, [pc, #16]	; (800a51c <prvSwitchTimerLists+0xc4>)
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	6013      	str	r3, [r2, #0]
    }
 800a510:	bf00      	nop
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20001f28 	.word	0x20001f28
 800a51c:	20001f2c 	.word	0x20001f2c

0800a520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a520:	b580      	push	{r7, lr}
 800a522:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a524:	f000 f960 	bl	800a7e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a528:	4b12      	ldr	r3, [pc, #72]	; (800a574 <prvCheckForValidListAndQueue+0x54>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d11d      	bne.n	800a56c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a530:	4811      	ldr	r0, [pc, #68]	; (800a578 <prvCheckForValidListAndQueue+0x58>)
 800a532:	f7fe f881 	bl	8008638 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a536:	4811      	ldr	r0, [pc, #68]	; (800a57c <prvCheckForValidListAndQueue+0x5c>)
 800a538:	f7fe f87e 	bl	8008638 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a53c:	4b10      	ldr	r3, [pc, #64]	; (800a580 <prvCheckForValidListAndQueue+0x60>)
 800a53e:	4a0e      	ldr	r2, [pc, #56]	; (800a578 <prvCheckForValidListAndQueue+0x58>)
 800a540:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a542:	4b10      	ldr	r3, [pc, #64]	; (800a584 <prvCheckForValidListAndQueue+0x64>)
 800a544:	4a0d      	ldr	r2, [pc, #52]	; (800a57c <prvCheckForValidListAndQueue+0x5c>)
 800a546:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a548:	2200      	movs	r2, #0
 800a54a:	210c      	movs	r1, #12
 800a54c:	200a      	movs	r0, #10
 800a54e:	f7fe f982 	bl	8008856 <xQueueGenericCreate>
 800a552:	4603      	mov	r3, r0
 800a554:	4a07      	ldr	r2, [pc, #28]	; (800a574 <prvCheckForValidListAndQueue+0x54>)
 800a556:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800a558:	4b06      	ldr	r3, [pc, #24]	; (800a574 <prvCheckForValidListAndQueue+0x54>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d005      	beq.n	800a56c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a560:	4b04      	ldr	r3, [pc, #16]	; (800a574 <prvCheckForValidListAndQueue+0x54>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4908      	ldr	r1, [pc, #32]	; (800a588 <prvCheckForValidListAndQueue+0x68>)
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fde0 	bl	800912c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a56c:	f000 f96c 	bl	800a848 <vPortExitCritical>
    }
 800a570:	bf00      	nop
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20001f30 	.word	0x20001f30
 800a578:	20001f00 	.word	0x20001f00
 800a57c:	20001f14 	.word	0x20001f14
 800a580:	20001f28 	.word	0x20001f28
 800a584:	20001f2c 	.word	0x20001f2c
 800a588:	0800cd80 	.word	0x0800cd80

0800a58c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3b04      	subs	r3, #4
 800a59c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3b04      	subs	r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f023 0201 	bic.w	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3b04      	subs	r3, #4
 800a5ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a5bc:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <pxPortInitialiseStack+0x64>)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3b14      	subs	r3, #20
 800a5c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f06f 0202 	mvn.w	r2, #2
 800a5da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3b20      	subs	r3, #32
 800a5e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	0800a5f5 	.word	0x0800a5f5

0800a5f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a5fe:	4b12      	ldr	r3, [pc, #72]	; (800a648 <prvTaskExitError+0x54>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	d00a      	beq.n	800a61e <prvTaskExitError+0x2a>
        __asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	60fb      	str	r3, [r7, #12]
    }
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <prvTaskExitError+0x28>
        __asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	60bb      	str	r3, [r7, #8]
    }
 800a630:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a632:	bf00      	nop
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0fc      	beq.n	800a634 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a63a:	bf00      	nop
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	20000100 	.word	0x20000100
 800a64c:	00000000 	.word	0x00000000

0800a650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <pxCurrentTCBConst2>)
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	6808      	ldr	r0, [r1, #0]
 800a656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65a:	f380 8809 	msr	PSP, r0
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8811 	msr	BASEPRI, r0
 800a66a:	4770      	bx	lr
 800a66c:	f3af 8000 	nop.w

0800a670 <pxCurrentTCBConst2>:
 800a670:	20001dfc 	.word	0x20001dfc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop

0800a678 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a678:	4808      	ldr	r0, [pc, #32]	; (800a69c <prvPortStartFirstTask+0x24>)
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	6800      	ldr	r0, [r0, #0]
 800a67e:	f380 8808 	msr	MSP, r0
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8814 	msr	CONTROL, r0
 800a68a:	b662      	cpsie	i
 800a68c:	b661      	cpsie	f
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	df00      	svc	0
 800a698:	bf00      	nop
 800a69a:	0000      	.short	0x0000
 800a69c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop

0800a6a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6aa:	4b46      	ldr	r3, [pc, #280]	; (800a7c4 <xPortStartScheduler+0x120>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a46      	ldr	r2, [pc, #280]	; (800a7c8 <xPortStartScheduler+0x124>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d10a      	bne.n	800a6ca <xPortStartScheduler+0x26>
        __asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	613b      	str	r3, [r7, #16]
    }
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6ca:	4b3e      	ldr	r3, [pc, #248]	; (800a7c4 <xPortStartScheduler+0x120>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a3f      	ldr	r2, [pc, #252]	; (800a7cc <xPortStartScheduler+0x128>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d10a      	bne.n	800a6ea <xPortStartScheduler+0x46>
        __asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	60fb      	str	r3, [r7, #12]
    }
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6ea:	4b39      	ldr	r3, [pc, #228]	; (800a7d0 <xPortStartScheduler+0x12c>)
 800a6ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	22ff      	movs	r2, #255	; 0xff
 800a6fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	4b31      	ldr	r3, [pc, #196]	; (800a7d4 <xPortStartScheduler+0x130>)
 800a710:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a712:	4b31      	ldr	r3, [pc, #196]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a714:	2207      	movs	r2, #7
 800a716:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a718:	e009      	b.n	800a72e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800a71a:	4b2f      	ldr	r3, [pc, #188]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3b01      	subs	r3, #1
 800a720:	4a2d      	ldr	r2, [pc, #180]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a722:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a736:	2b80      	cmp	r3, #128	; 0x80
 800a738:	d0ef      	beq.n	800a71a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a73a:	4b27      	ldr	r3, [pc, #156]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f1c3 0307 	rsb	r3, r3, #7
 800a742:	2b04      	cmp	r3, #4
 800a744:	d00a      	beq.n	800a75c <xPortStartScheduler+0xb8>
        __asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	60bb      	str	r3, [r7, #8]
    }
 800a758:	bf00      	nop
 800a75a:	e7fe      	b.n	800a75a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a75c:	4b1e      	ldr	r3, [pc, #120]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	4a1d      	ldr	r2, [pc, #116]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a764:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a766:	4b1c      	ldr	r3, [pc, #112]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a76e:	4a1a      	ldr	r2, [pc, #104]	; (800a7d8 <xPortStartScheduler+0x134>)
 800a770:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	b2da      	uxtb	r2, r3
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a77a:	4b18      	ldr	r3, [pc, #96]	; (800a7dc <xPortStartScheduler+0x138>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a17      	ldr	r2, [pc, #92]	; (800a7dc <xPortStartScheduler+0x138>)
 800a780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a784:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a786:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <xPortStartScheduler+0x138>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a14      	ldr	r2, [pc, #80]	; (800a7dc <xPortStartScheduler+0x138>)
 800a78c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a790:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a792:	f000 f8e3 	bl	800a95c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a796:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <xPortStartScheduler+0x13c>)
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800a79c:	f000 f902 	bl	800a9a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7a0:	4b10      	ldr	r3, [pc, #64]	; (800a7e4 <xPortStartScheduler+0x140>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a0f      	ldr	r2, [pc, #60]	; (800a7e4 <xPortStartScheduler+0x140>)
 800a7a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a7ac:	f7ff ff64 	bl	800a678 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a7b0:	f7ff f86e 	bl	8009890 <vTaskSwitchContext>
    prvTaskExitError();
 800a7b4:	f7ff ff1e 	bl	800a5f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	e000ed00 	.word	0xe000ed00
 800a7c8:	410fc271 	.word	0x410fc271
 800a7cc:	410fc270 	.word	0x410fc270
 800a7d0:	e000e400 	.word	0xe000e400
 800a7d4:	20001f3c 	.word	0x20001f3c
 800a7d8:	20001f40 	.word	0x20001f40
 800a7dc:	e000ed20 	.word	0xe000ed20
 800a7e0:	20000100 	.word	0x20000100
 800a7e4:	e000ef34 	.word	0xe000ef34

0800a7e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
        __asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	607b      	str	r3, [r7, #4]
    }
 800a800:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a802:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <vPortEnterCritical+0x58>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3301      	adds	r3, #1
 800a808:	4a0d      	ldr	r2, [pc, #52]	; (800a840 <vPortEnterCritical+0x58>)
 800a80a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a80c:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <vPortEnterCritical+0x58>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d10f      	bne.n	800a834 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a814:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <vPortEnterCritical+0x5c>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <vPortEnterCritical+0x4c>
        __asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	603b      	str	r3, [r7, #0]
    }
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <vPortEnterCritical+0x4a>
    }
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20000100 	.word	0x20000100
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a84e:	4b12      	ldr	r3, [pc, #72]	; (800a898 <vPortExitCritical+0x50>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <vPortExitCritical+0x24>
        __asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	607b      	str	r3, [r7, #4]
    }
 800a868:	bf00      	nop
 800a86a:	e7fe      	b.n	800a86a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a86c:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <vPortExitCritical+0x50>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3b01      	subs	r3, #1
 800a872:	4a09      	ldr	r2, [pc, #36]	; (800a898 <vPortExitCritical+0x50>)
 800a874:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a876:	4b08      	ldr	r3, [pc, #32]	; (800a898 <vPortExitCritical+0x50>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d105      	bne.n	800a88a <vPortExitCritical+0x42>
 800a87e:	2300      	movs	r3, #0
 800a880:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	f383 8811 	msr	BASEPRI, r3
    }
 800a888:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	20000100 	.word	0x20000100
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b15      	ldr	r3, [pc, #84]	; (800a900 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f01e 0f10 	tst.w	lr, #16
 800a8b0:	bf08      	it	eq
 800a8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8c4:	f380 8811 	msr	BASEPRI, r0
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f7fe ffde 	bl	8009890 <vTaskSwitchContext>
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f380 8811 	msr	BASEPRI, r0
 800a8dc:	bc09      	pop	{r0, r3}
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	6808      	ldr	r0, [r1, #0]
 800a8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	f01e 0f10 	tst.w	lr, #16
 800a8ea:	bf08      	it	eq
 800a8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8f0:	f380 8809 	msr	PSP, r0
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w

0800a900 <pxCurrentTCBConst>:
 800a900:	20001dfc 	.word	0x20001dfc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
        __asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
    }
 800a920:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800a922:	f001 fc7b 	bl	800c21c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a926:	f7fe ff19 	bl	800975c <xTaskIncrementTick>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d006      	beq.n	800a93e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800a930:	f001 fcd2 	bl	800c2d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a934:	4b08      	ldr	r3, [pc, #32]	; (800a958 <SysTick_Handler+0x50>)
 800a936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	e001      	b.n	800a942 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800a93e:	f001 fcaf 	bl	800c2a0 <SEGGER_SYSVIEW_RecordExitISR>
 800a942:	2300      	movs	r3, #0
 800a944:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f383 8811 	msr	BASEPRI, r3
    }
 800a94c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a960:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <vPortSetupTimerInterrupt+0x34>)
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a966:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <vPortSetupTimerInterrupt+0x38>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <vPortSetupTimerInterrupt+0x3c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <vPortSetupTimerInterrupt+0x40>)
 800a972:	fba2 2303 	umull	r2, r3, r2, r3
 800a976:	099b      	lsrs	r3, r3, #6
 800a978:	4a09      	ldr	r2, [pc, #36]	; (800a9a0 <vPortSetupTimerInterrupt+0x44>)
 800a97a:	3b01      	subs	r3, #1
 800a97c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a97e:	4b04      	ldr	r3, [pc, #16]	; (800a990 <vPortSetupTimerInterrupt+0x34>)
 800a980:	2207      	movs	r2, #7
 800a982:	601a      	str	r2, [r3, #0]
}
 800a984:	bf00      	nop
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	e000e010 	.word	0xe000e010
 800a994:	e000e018 	.word	0xe000e018
 800a998:	20000000 	.word	0x20000000
 800a99c:	10624dd3 	.word	0x10624dd3
 800a9a0:	e000e014 	.word	0xe000e014

0800a9a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800a9a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9b4 <vPortEnableVFP+0x10>
 800a9a8:	6801      	ldr	r1, [r0, #0]
 800a9aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9ae:	6001      	str	r1, [r0, #0]
 800a9b0:	4770      	bx	lr
 800a9b2:	0000      	.short	0x0000
 800a9b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop

0800a9bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800a9c2:	f3ef 8305 	mrs	r3, IPSR
 800a9c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b0f      	cmp	r3, #15
 800a9cc:	d914      	bls.n	800a9f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ce:	4a17      	ldr	r2, [pc, #92]	; (800aa2c <vPortValidateInterruptPriority+0x70>)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <vPortValidateInterruptPriority+0x74>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	7afa      	ldrb	r2, [r7, #11]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d20a      	bcs.n	800a9f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	607b      	str	r3, [r7, #4]
    }
 800a9f4:	bf00      	nop
 800a9f6:	e7fe      	b.n	800a9f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9f8:	4b0e      	ldr	r3, [pc, #56]	; (800aa34 <vPortValidateInterruptPriority+0x78>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa00:	4b0d      	ldr	r3, [pc, #52]	; (800aa38 <vPortValidateInterruptPriority+0x7c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d90a      	bls.n	800aa1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	603b      	str	r3, [r7, #0]
    }
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <vPortValidateInterruptPriority+0x60>
    }
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	e000e3f0 	.word	0xe000e3f0
 800aa30:	20001f3c 	.word	0x20001f3c
 800aa34:	e000ed0c 	.word	0xe000ed0c
 800aa38:	20001f40 	.word	0x20001f40

0800aa3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08a      	sub	sp, #40	; 0x28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800aa48:	f7fe fdc6 	bl	80095d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800aa4c:	4b65      	ldr	r3, [pc, #404]	; (800abe4 <pvPortMalloc+0x1a8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800aa54:	f000 f934 	bl	800acc0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa58:	4b63      	ldr	r3, [pc, #396]	; (800abe8 <pvPortMalloc+0x1ac>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4013      	ands	r3, r2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f040 80a7 	bne.w	800abb4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d02d      	beq.n	800aac8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800aa6c:	2208      	movs	r2, #8
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d227      	bcs.n	800aac8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800aa78:	2208      	movs	r2, #8
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f003 0307 	and.w	r3, r3, #7
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d021      	beq.n	800aace <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f023 0307 	bic.w	r3, r3, #7
 800aa90:	3308      	adds	r3, #8
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d214      	bcs.n	800aac2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f023 0307 	bic.w	r3, r3, #7
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f003 0307 	and.w	r3, r3, #7
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d010      	beq.n	800aace <pvPortMalloc+0x92>
        __asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	617b      	str	r3, [r7, #20]
    }
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aac6:	e002      	b.n	800aace <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	607b      	str	r3, [r7, #4]
 800aacc:	e000      	b.n	800aad0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aace:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d06e      	beq.n	800abb4 <pvPortMalloc+0x178>
 800aad6:	4b45      	ldr	r3, [pc, #276]	; (800abec <pvPortMalloc+0x1b0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d869      	bhi.n	800abb4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800aae0:	4b43      	ldr	r3, [pc, #268]	; (800abf0 <pvPortMalloc+0x1b4>)
 800aae2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800aae4:	4b42      	ldr	r3, [pc, #264]	; (800abf0 <pvPortMalloc+0x1b4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaea:	e004      	b.n	800aaf6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d903      	bls.n	800ab08 <pvPortMalloc+0xcc>
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1f1      	bne.n	800aaec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ab08:	4b36      	ldr	r3, [pc, #216]	; (800abe4 <pvPortMalloc+0x1a8>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d050      	beq.n	800abb4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2208      	movs	r2, #8
 800ab18:	4413      	add	r3, r2
 800ab1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	1ad2      	subs	r2, r2, r3
 800ab2c:	2308      	movs	r3, #8
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d91f      	bls.n	800ab74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4413      	add	r3, r2
 800ab3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	f003 0307 	and.w	r3, r3, #7
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <pvPortMalloc+0x120>
        __asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	613b      	str	r3, [r7, #16]
    }
 800ab58:	bf00      	nop
 800ab5a:	e7fe      	b.n	800ab5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	1ad2      	subs	r2, r2, r3
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab6e:	69b8      	ldr	r0, [r7, #24]
 800ab70:	f000 f908 	bl	800ad84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab74:	4b1d      	ldr	r3, [pc, #116]	; (800abec <pvPortMalloc+0x1b0>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	4a1b      	ldr	r2, [pc, #108]	; (800abec <pvPortMalloc+0x1b0>)
 800ab80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab82:	4b1a      	ldr	r3, [pc, #104]	; (800abec <pvPortMalloc+0x1b0>)
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	4b1b      	ldr	r3, [pc, #108]	; (800abf4 <pvPortMalloc+0x1b8>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d203      	bcs.n	800ab96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab8e:	4b17      	ldr	r3, [pc, #92]	; (800abec <pvPortMalloc+0x1b0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a18      	ldr	r2, [pc, #96]	; (800abf4 <pvPortMalloc+0x1b8>)
 800ab94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	4b13      	ldr	r3, [pc, #76]	; (800abe8 <pvPortMalloc+0x1ac>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	2200      	movs	r2, #0
 800aba8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800abaa:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <pvPortMalloc+0x1bc>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3301      	adds	r3, #1
 800abb0:	4a11      	ldr	r2, [pc, #68]	; (800abf8 <pvPortMalloc+0x1bc>)
 800abb2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800abb4:	f7fe fd1e 	bl	80095f4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	f003 0307 	and.w	r3, r3, #7
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <pvPortMalloc+0x19c>
        __asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	60fb      	str	r3, [r7, #12]
    }
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <pvPortMalloc+0x19a>
    return pvReturn;
 800abd8:	69fb      	ldr	r3, [r7, #28]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3728      	adds	r7, #40	; 0x28
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20014b4c 	.word	0x20014b4c
 800abe8:	20014b60 	.word	0x20014b60
 800abec:	20014b50 	.word	0x20014b50
 800abf0:	20014b44 	.word	0x20014b44
 800abf4:	20014b54 	.word	0x20014b54
 800abf8:	20014b58 	.word	0x20014b58

0800abfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d04d      	beq.n	800acaa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ac0e:	2308      	movs	r3, #8
 800ac10:	425b      	negs	r3, r3
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	4413      	add	r3, r2
 800ac16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	685a      	ldr	r2, [r3, #4]
 800ac20:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <vPortFree+0xb8>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4013      	ands	r3, r2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <vPortFree+0x44>
        __asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	60fb      	str	r3, [r7, #12]
    }
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00a      	beq.n	800ac5e <vPortFree+0x62>
        __asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	60bb      	str	r3, [r7, #8]
    }
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	4b14      	ldr	r3, [pc, #80]	; (800acb4 <vPortFree+0xb8>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4013      	ands	r3, r2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01e      	beq.n	800acaa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d11a      	bne.n	800acaa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <vPortFree+0xb8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	43db      	mvns	r3, r3
 800ac7e:	401a      	ands	r2, r3
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800ac84:	f7fe fca8 	bl	80095d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	4b0a      	ldr	r3, [pc, #40]	; (800acb8 <vPortFree+0xbc>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4413      	add	r3, r2
 800ac92:	4a09      	ldr	r2, [pc, #36]	; (800acb8 <vPortFree+0xbc>)
 800ac94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac96:	6938      	ldr	r0, [r7, #16]
 800ac98:	f000 f874 	bl	800ad84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ac9c:	4b07      	ldr	r3, [pc, #28]	; (800acbc <vPortFree+0xc0>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3301      	adds	r3, #1
 800aca2:	4a06      	ldr	r2, [pc, #24]	; (800acbc <vPortFree+0xc0>)
 800aca4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800aca6:	f7fe fca5 	bl	80095f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800acaa:	bf00      	nop
 800acac:	3718      	adds	r7, #24
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	20014b60 	.word	0x20014b60
 800acb8:	20014b50 	.word	0x20014b50
 800acbc:	20014b5c 	.word	0x20014b5c

0800acc0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acc6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800acca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800accc:	4b27      	ldr	r3, [pc, #156]	; (800ad6c <prvHeapInit+0xac>)
 800acce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00c      	beq.n	800acf4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3307      	adds	r3, #7
 800acde:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0307 	bic.w	r3, r3, #7
 800ace6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	4a1f      	ldr	r2, [pc, #124]	; (800ad6c <prvHeapInit+0xac>)
 800acf0:	4413      	add	r3, r2
 800acf2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acf8:	4a1d      	ldr	r2, [pc, #116]	; (800ad70 <prvHeapInit+0xb0>)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800acfe:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <prvHeapInit+0xb0>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	4413      	add	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ad0c:	2208      	movs	r2, #8
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0307 	bic.w	r3, r3, #7
 800ad1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4a15      	ldr	r2, [pc, #84]	; (800ad74 <prvHeapInit+0xb4>)
 800ad20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ad22:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <prvHeapInit+0xb4>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2200      	movs	r2, #0
 800ad28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ad2a:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <prvHeapInit+0xb4>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	1ad2      	subs	r2, r2, r3
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad40:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <prvHeapInit+0xb4>)
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	4a0a      	ldr	r2, [pc, #40]	; (800ad78 <prvHeapInit+0xb8>)
 800ad4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4a09      	ldr	r2, [pc, #36]	; (800ad7c <prvHeapInit+0xbc>)
 800ad56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad58:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <prvHeapInit+0xc0>)
 800ad5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad5e:	601a      	str	r2, [r3, #0]
}
 800ad60:	bf00      	nop
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	20001f44 	.word	0x20001f44
 800ad70:	20014b44 	.word	0x20014b44
 800ad74:	20014b4c 	.word	0x20014b4c
 800ad78:	20014b54 	.word	0x20014b54
 800ad7c:	20014b50 	.word	0x20014b50
 800ad80:	20014b60 	.word	0x20014b60

0800ad84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad8c:	4b28      	ldr	r3, [pc, #160]	; (800ae30 <prvInsertBlockIntoFreeList+0xac>)
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	e002      	b.n	800ad98 <prvInsertBlockIntoFreeList+0x14>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d8f7      	bhi.n	800ad92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	4413      	add	r3, r2
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d108      	bne.n	800adc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	441a      	add	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	441a      	add	r2, r3
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	429a      	cmp	r2, r3
 800add8:	d118      	bne.n	800ae0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <prvInsertBlockIntoFreeList+0xb0>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d00d      	beq.n	800ae02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	441a      	add	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e008      	b.n	800ae14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae02:	4b0c      	ldr	r3, [pc, #48]	; (800ae34 <prvInsertBlockIntoFreeList+0xb0>)
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	e003      	b.n	800ae14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d002      	beq.n	800ae22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ae22:	bf00      	nop
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	20014b44 	.word	0x20014b44
 800ae34:	20014b4c 	.word	0x20014b4c

0800ae38 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800ae3e:	4b26      	ldr	r3, [pc, #152]	; (800aed8 <_DoInit+0xa0>)
 800ae40:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800ae42:	22a8      	movs	r2, #168	; 0xa8
 800ae44:	2100      	movs	r1, #0
 800ae46:	6838      	ldr	r0, [r7, #0]
 800ae48:	f001 fe7c 	bl	800cb44 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2203      	movs	r2, #3
 800ae50:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2203      	movs	r2, #3
 800ae56:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	4a20      	ldr	r2, [pc, #128]	; (800aedc <_DoInit+0xa4>)
 800ae5c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	4a1f      	ldr	r2, [pc, #124]	; (800aee0 <_DoInit+0xa8>)
 800ae62:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae6a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2200      	movs	r2, #0
 800ae76:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	4a16      	ldr	r2, [pc, #88]	; (800aedc <_DoInit+0xa4>)
 800ae82:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	4a17      	ldr	r2, [pc, #92]	; (800aee4 <_DoInit+0xac>)
 800ae88:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2210      	movs	r2, #16
 800ae8e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2200      	movs	r2, #0
 800ae94:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800aea2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	e00c      	b.n	800aec6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f1c3 030f 	rsb	r3, r3, #15
 800aeb2:	4a0d      	ldr	r2, [pc, #52]	; (800aee8 <_DoInit+0xb0>)
 800aeb4:	5cd1      	ldrb	r1, [r2, r3]
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4413      	add	r3, r2
 800aebc:	460a      	mov	r2, r1
 800aebe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3301      	adds	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b0f      	cmp	r3, #15
 800aeca:	d9ef      	bls.n	800aeac <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800aecc:	f3bf 8f5f 	dmb	sy
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20014b64 	.word	0x20014b64
 800aedc:	0800cd88 	.word	0x0800cd88
 800aee0:	20014c0c 	.word	0x20014c0c
 800aee4:	2001500c 	.word	0x2001500c
 800aee8:	0800ce60 	.word	0x0800ce60

0800aeec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08c      	sub	sp, #48	; 0x30
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800aef8:	4b3e      	ldr	r3, [pc, #248]	; (800aff4 <SEGGER_RTT_ReadNoLock+0x108>)
 800aefa:	623b      	str	r3, [r7, #32]
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <SEGGER_RTT_ReadNoLock+0x1e>
 800af06:	f7ff ff97 	bl	800ae38 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4613      	mov	r3, r2
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	4413      	add	r3, r2
 800af12:	00db      	lsls	r3, r3, #3
 800af14:	3360      	adds	r3, #96	; 0x60
 800af16:	4a37      	ldr	r2, [pc, #220]	; (800aff4 <SEGGER_RTT_ReadNoLock+0x108>)
 800af18:	4413      	add	r3, r2
 800af1a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800af2c:	2300      	movs	r3, #0
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800af30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	429a      	cmp	r2, r3
 800af36:	d92b      	bls.n	800af90 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4293      	cmp	r3, r2
 800af48:	bf28      	it	cs
 800af4a:	4613      	movcs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af54:	4413      	add	r3, r2
 800af56:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	6939      	ldr	r1, [r7, #16]
 800af5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af5e:	f001 fde3 	bl	800cb28 <memcpy>
    NumBytesRead += NumBytesRem;
 800af62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	4413      	add	r3, r2
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800af6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	4413      	add	r3, r2
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800af7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	4413      	add	r3, r2
 800af80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af88:	429a      	cmp	r2, r3
 800af8a:	d101      	bne.n	800af90 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800af8c:	2300      	movs	r3, #0
 800af8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	bf28      	it	cs
 800afa0:	4613      	movcs	r3, r2
 800afa2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d019      	beq.n	800afde <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	685a      	ldr	r2, [r3, #4]
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	4413      	add	r3, r2
 800afb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	6939      	ldr	r1, [r7, #16]
 800afb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afba:	f001 fdb5 	bl	800cb28 <memcpy>
    NumBytesRead += NumBytesRem;
 800afbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	4413      	add	r3, r2
 800afc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800afc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	4413      	add	r3, r2
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800afd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	4413      	add	r3, r2
 800afdc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800afde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afe8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800afea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800afec:	4618      	mov	r0, r3
 800afee:	3730      	adds	r7, #48	; 0x30
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20014b64 	.word	0x20014b64

0800aff8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b006:	4b3d      	ldr	r3, [pc, #244]	; (800b0fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b008:	61bb      	str	r3, [r7, #24]
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <SEGGER_RTT_AllocUpBuffer+0x20>
 800b014:	f7ff ff10 	bl	800ae38 <_DoInit>
  SEGGER_RTT_LOCK();
 800b018:	f3ef 8311 	mrs	r3, BASEPRI
 800b01c:	f04f 0120 	mov.w	r1, #32
 800b020:	f381 8811 	msr	BASEPRI, r1
 800b024:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b026:	4b35      	ldr	r3, [pc, #212]	; (800b0fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b028:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800b02e:	6939      	ldr	r1, [r7, #16]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	4613      	mov	r3, r2
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	4413      	add	r3, r2
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	440b      	add	r3, r1
 800b03e:	3304      	adds	r3, #4
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d008      	beq.n	800b058 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	3301      	adds	r3, #1
 800b04a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	69fa      	ldr	r2, [r7, #28]
 800b052:	429a      	cmp	r2, r3
 800b054:	dbeb      	blt.n	800b02e <SEGGER_RTT_AllocUpBuffer+0x36>
 800b056:	e000      	b.n	800b05a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800b058:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	429a      	cmp	r2, r3
 800b062:	da3f      	bge.n	800b0e4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800b064:	6939      	ldr	r1, [r7, #16]
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	4613      	mov	r3, r2
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	4413      	add	r3, r2
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	440b      	add	r3, r1
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b078:	6939      	ldr	r1, [r7, #16]
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	4613      	mov	r3, r2
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	4413      	add	r3, r2
 800b084:	00db      	lsls	r3, r3, #3
 800b086:	440b      	add	r3, r1
 800b088:	3304      	adds	r3, #4
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b08e:	6939      	ldr	r1, [r7, #16]
 800b090:	69fa      	ldr	r2, [r7, #28]
 800b092:	4613      	mov	r3, r2
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	4413      	add	r3, r2
 800b098:	00db      	lsls	r3, r3, #3
 800b09a:	440b      	add	r3, r1
 800b09c:	3320      	adds	r3, #32
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800b0a2:	6939      	ldr	r1, [r7, #16]
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	4413      	add	r3, r2
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3328      	adds	r3, #40	; 0x28
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800b0b6:	6939      	ldr	r1, [r7, #16]
 800b0b8:	69fa      	ldr	r2, [r7, #28]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	4413      	add	r3, r2
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	440b      	add	r3, r1
 800b0c4:	3324      	adds	r3, #36	; 0x24
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800b0ca:	6939      	ldr	r1, [r7, #16]
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	4413      	add	r3, r2
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	440b      	add	r3, r1
 800b0d8:	332c      	adds	r3, #44	; 0x2c
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b0de:	f3bf 8f5f 	dmb	sy
 800b0e2:	e002      	b.n	800b0ea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800b0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20014b64 	.word	0x20014b64

0800b100 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b100:	b580      	push	{r7, lr}
 800b102:	b08a      	sub	sp, #40	; 0x28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800b10e:	4b21      	ldr	r3, [pc, #132]	; (800b194 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b110:	623b      	str	r3, [r7, #32]
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800b11c:	f7ff fe8c 	bl	800ae38 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b120:	4b1c      	ldr	r3, [pc, #112]	; (800b194 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b122:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b02      	cmp	r3, #2
 800b128:	d82c      	bhi.n	800b184 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800b12a:	f3ef 8311 	mrs	r3, BASEPRI
 800b12e:	f04f 0120 	mov.w	r1, #32
 800b132:	f381 8811 	msr	BASEPRI, r1
 800b136:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4613      	mov	r3, r2
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	4413      	add	r3, r2
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	3360      	adds	r3, #96	; 0x60
 800b144:	69fa      	ldr	r2, [r7, #28]
 800b146:	4413      	add	r3, r2
 800b148:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00e      	beq.n	800b16e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2200      	movs	r2, #0
 800b166:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	2200      	movs	r2, #0
 800b16c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b172:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b174:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b17e:	2300      	movs	r3, #0
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
 800b182:	e002      	b.n	800b18a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3728      	adds	r7, #40	; 0x28
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	20014b64 	.word	0x20014b64

0800b198 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00f      	beq.n	800b1ce <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800b1ae:	e002      	b.n	800b1b6 <_EncodeStr+0x1e>
      Len++;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1f6      	bne.n	800b1b0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d901      	bls.n	800b1ce <_EncodeStr+0x36>
      Len = Limit;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2bfe      	cmp	r3, #254	; 0xfe
 800b1d2:	d806      	bhi.n	800b1e2 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	60fa      	str	r2, [r7, #12]
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
 800b1e0:	e011      	b.n	800b206 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	1c5a      	adds	r2, r3, #1
 800b1e6:	60fa      	str	r2, [r7, #12]
 800b1e8:	22ff      	movs	r2, #255	; 0xff
 800b1ea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	60fa      	str	r2, [r7, #12]
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	b2d2      	uxtb	r2, r2
 800b1f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	0a19      	lsrs	r1, r3, #8
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	60fa      	str	r2, [r7, #12]
 800b202:	b2ca      	uxtb	r2, r1
 800b204:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b20a:	e00a      	b.n	800b222 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	1c53      	adds	r3, r2, #1
 800b210:	60bb      	str	r3, [r7, #8]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	1c59      	adds	r1, r3, #1
 800b216:	60f9      	str	r1, [r7, #12]
 800b218:	7812      	ldrb	r2, [r2, #0]
 800b21a:	701a      	strb	r2, [r3, #0]
    n++;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	3301      	adds	r3, #1
 800b220:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	429a      	cmp	r2, r3
 800b228:	d3f0      	bcc.n	800b20c <_EncodeStr+0x74>
  }
  return pPayload;
 800b22a:	68fb      	ldr	r3, [r7, #12]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	371c      	adds	r7, #28
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3307      	adds	r3, #7
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b256:	4b35      	ldr	r3, [pc, #212]	; (800b32c <_HandleIncomingPacket+0xdc>)
 800b258:	7e1b      	ldrb	r3, [r3, #24]
 800b25a:	4618      	mov	r0, r3
 800b25c:	1cfb      	adds	r3, r7, #3
 800b25e:	2201      	movs	r2, #1
 800b260:	4619      	mov	r1, r3
 800b262:	f7ff fe43 	bl	800aeec <SEGGER_RTT_ReadNoLock>
 800b266:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d052      	beq.n	800b314 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800b26e:	78fb      	ldrb	r3, [r7, #3]
 800b270:	2b80      	cmp	r3, #128	; 0x80
 800b272:	d031      	beq.n	800b2d8 <_HandleIncomingPacket+0x88>
 800b274:	2b80      	cmp	r3, #128	; 0x80
 800b276:	dc40      	bgt.n	800b2fa <_HandleIncomingPacket+0xaa>
 800b278:	2b07      	cmp	r3, #7
 800b27a:	dc15      	bgt.n	800b2a8 <_HandleIncomingPacket+0x58>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dd3c      	ble.n	800b2fa <_HandleIncomingPacket+0xaa>
 800b280:	3b01      	subs	r3, #1
 800b282:	2b06      	cmp	r3, #6
 800b284:	d839      	bhi.n	800b2fa <_HandleIncomingPacket+0xaa>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <_HandleIncomingPacket+0x3c>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2af 	.word	0x0800b2af
 800b290:	0800b2b5 	.word	0x0800b2b5
 800b294:	0800b2bb 	.word	0x0800b2bb
 800b298:	0800b2c1 	.word	0x0800b2c1
 800b29c:	0800b2c7 	.word	0x0800b2c7
 800b2a0:	0800b2cd 	.word	0x0800b2cd
 800b2a4:	0800b2d3 	.word	0x0800b2d3
 800b2a8:	2b7f      	cmp	r3, #127	; 0x7f
 800b2aa:	d035      	beq.n	800b318 <_HandleIncomingPacket+0xc8>
 800b2ac:	e025      	b.n	800b2fa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b2ae:	f000 fced 	bl	800bc8c <SEGGER_SYSVIEW_Start>
      break;
 800b2b2:	e036      	b.n	800b322 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b2b4:	f000 fda4 	bl	800be00 <SEGGER_SYSVIEW_Stop>
      break;
 800b2b8:	e033      	b.n	800b322 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b2ba:	f000 ff7d 	bl	800c1b8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b2be:	e030      	b.n	800b322 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b2c0:	f000 ff42 	bl	800c148 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b2c4:	e02d      	b.n	800b322 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b2c6:	f000 fdc1 	bl	800be4c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b2ca:	e02a      	b.n	800b322 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b2cc:	f001 fa10 	bl	800c6f0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b2d0:	e027      	b.n	800b322 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b2d2:	f001 f9ef 	bl	800c6b4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b2d6:	e024      	b.n	800b322 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b2d8:	4b14      	ldr	r3, [pc, #80]	; (800b32c <_HandleIncomingPacket+0xdc>)
 800b2da:	7e1b      	ldrb	r3, [r3, #24]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	1cfb      	adds	r3, r7, #3
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	f7ff fe02 	bl	800aeec <SEGGER_RTT_ReadNoLock>
 800b2e8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d015      	beq.n	800b31c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f001 f95e 	bl	800c5b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b2f8:	e010      	b.n	800b31c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	b25b      	sxtb	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	da0e      	bge.n	800b320 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b302:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <_HandleIncomingPacket+0xdc>)
 800b304:	7e1b      	ldrb	r3, [r3, #24]
 800b306:	4618      	mov	r0, r3
 800b308:	1cfb      	adds	r3, r7, #3
 800b30a:	2201      	movs	r2, #1
 800b30c:	4619      	mov	r1, r3
 800b30e:	f7ff fded 	bl	800aeec <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b312:	e005      	b.n	800b320 <_HandleIncomingPacket+0xd0>
    }
  }
 800b314:	bf00      	nop
 800b316:	e004      	b.n	800b322 <_HandleIncomingPacket+0xd2>
      break;
 800b318:	bf00      	nop
 800b31a:	e002      	b.n	800b322 <_HandleIncomingPacket+0xd2>
      break;
 800b31c:	bf00      	nop
 800b31e:	e000      	b.n	800b322 <_HandleIncomingPacket+0xd2>
      break;
 800b320:	bf00      	nop
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20016024 	.word	0x20016024

0800b330 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b08c      	sub	sp, #48	; 0x30
 800b334:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b336:	2301      	movs	r3, #1
 800b338:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b33a:	1d3b      	adds	r3, r7, #4
 800b33c:	3301      	adds	r3, #1
 800b33e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b344:	4b31      	ldr	r3, [pc, #196]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	62bb      	str	r3, [r7, #40]	; 0x28
 800b34a:	e00b      	b.n	800b364 <_TrySendOverflowPacket+0x34>
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	1c59      	adds	r1, r3, #1
 800b354:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b35a:	b2d2      	uxtb	r2, r2
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	09db      	lsrs	r3, r3, #7
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	2b7f      	cmp	r3, #127	; 0x7f
 800b368:	d8f0      	bhi.n	800b34c <_TrySendOverflowPacket+0x1c>
 800b36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b37a:	4b25      	ldr	r3, [pc, #148]	; (800b410 <_TrySendOverflowPacket+0xe0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b380:	4b22      	ldr	r3, [pc, #136]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	623b      	str	r3, [r7, #32]
 800b392:	e00b      	b.n	800b3ac <_TrySendOverflowPacket+0x7c>
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	b2da      	uxtb	r2, r3
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	1c59      	adds	r1, r3, #1
 800b39c:	6279      	str	r1, [r7, #36]	; 0x24
 800b39e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	09db      	lsrs	r3, r3, #7
 800b3aa:	623b      	str	r3, [r7, #32]
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	2b7f      	cmp	r3, #127	; 0x7f
 800b3b0:	d8f0      	bhi.n	800b394 <_TrySendOverflowPacket+0x64>
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	627a      	str	r2, [r7, #36]	; 0x24
 800b3b8:	6a3a      	ldr	r2, [r7, #32]
 800b3ba:	b2d2      	uxtb	r2, r2
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b3c4:	785b      	ldrb	r3, [r3, #1]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	1d3b      	adds	r3, r7, #4
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	1d3b      	adds	r3, r7, #4
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	f7f4 ff0c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d009      	beq.n	800b3f6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800b3e8:	4b08      	ldr	r3, [pc, #32]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	4b06      	ldr	r3, [pc, #24]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b3f2:	701a      	strb	r2, [r3, #0]
 800b3f4:	e004      	b.n	800b400 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800b3f6:	4b05      	ldr	r3, [pc, #20]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	4a03      	ldr	r2, [pc, #12]	; (800b40c <_TrySendOverflowPacket+0xdc>)
 800b3fe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800b400:	693b      	ldr	r3, [r7, #16]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3730      	adds	r7, #48	; 0x30
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20016024 	.word	0x20016024
 800b410:	e0001004 	.word	0xe0001004

0800b414 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800b414:	b580      	push	{r7, lr}
 800b416:	b08a      	sub	sp, #40	; 0x28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b420:	4b98      	ldr	r3, [pc, #608]	; (800b684 <_SendPacket+0x270>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d010      	beq.n	800b44a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b428:	4b96      	ldr	r3, [pc, #600]	; (800b684 <_SendPacket+0x270>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 812d 	beq.w	800b68c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b432:	4b94      	ldr	r3, [pc, #592]	; (800b684 <_SendPacket+0x270>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2b02      	cmp	r3, #2
 800b438:	d109      	bne.n	800b44e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b43a:	f7ff ff79 	bl	800b330 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b43e:	4b91      	ldr	r3, [pc, #580]	; (800b684 <_SendPacket+0x270>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b01      	cmp	r3, #1
 800b444:	f040 8124 	bne.w	800b690 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800b448:	e001      	b.n	800b44e <_SendPacket+0x3a>
    goto Send;
 800b44a:	bf00      	nop
 800b44c:	e000      	b.n	800b450 <_SendPacket+0x3c>
Send:
 800b44e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b1f      	cmp	r3, #31
 800b454:	d809      	bhi.n	800b46a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b456:	4b8b      	ldr	r3, [pc, #556]	; (800b684 <_SendPacket+0x270>)
 800b458:	69da      	ldr	r2, [r3, #28]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	fa22 f303 	lsr.w	r3, r2, r3
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	f040 8115 	bne.w	800b694 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b17      	cmp	r3, #23
 800b46e:	d807      	bhi.n	800b480 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	3b01      	subs	r3, #1
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	e0c4      	b.n	800b60a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	2b7f      	cmp	r3, #127	; 0x7f
 800b48c:	d912      	bls.n	800b4b4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	09da      	lsrs	r2, r3, #7
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3b01      	subs	r3, #1
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	b2d2      	uxtb	r2, r2
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	3a01      	subs	r2, #1
 800b4a6:	60fa      	str	r2, [r7, #12]
 800b4a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	e006      	b.n	800b4c2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	60fb      	str	r3, [r7, #12]
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b7e      	cmp	r3, #126	; 0x7e
 800b4c6:	d807      	bhi.n	800b4d8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	60fb      	str	r3, [r7, #12]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	e098      	b.n	800b60a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4de:	d212      	bcs.n	800b506 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	09da      	lsrs	r2, r3, #7
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	60fb      	str	r3, [r7, #12]
 800b4ea:	b2d2      	uxtb	r2, r2
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	3a01      	subs	r2, #1
 800b4f8:	60fa      	str	r2, [r7, #12]
 800b4fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	701a      	strb	r2, [r3, #0]
 800b504:	e081      	b.n	800b60a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b50c:	d21d      	bcs.n	800b54a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	0b9a      	lsrs	r2, r3, #14
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3b01      	subs	r3, #1
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	09db      	lsrs	r3, r3, #7
 800b522:	b2db      	uxtb	r3, r3
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	3a01      	subs	r2, #1
 800b528:	60fa      	str	r2, [r7, #12]
 800b52a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	b2db      	uxtb	r3, r3
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	3a01      	subs	r2, #1
 800b53c:	60fa      	str	r2, [r7, #12]
 800b53e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b542:	b2da      	uxtb	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	701a      	strb	r2, [r3, #0]
 800b548:	e05f      	b.n	800b60a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b550:	d228      	bcs.n	800b5a4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	0d5a      	lsrs	r2, r3, #21
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3b01      	subs	r3, #1
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	b2d2      	uxtb	r2, r2
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	0b9b      	lsrs	r3, r3, #14
 800b566:	b2db      	uxtb	r3, r3
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	3a01      	subs	r2, #1
 800b56c:	60fa      	str	r2, [r7, #12]
 800b56e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b572:	b2da      	uxtb	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	09db      	lsrs	r3, r3, #7
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	3a01      	subs	r2, #1
 800b582:	60fa      	str	r2, [r7, #12]
 800b584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	b2db      	uxtb	r3, r3
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	3a01      	subs	r2, #1
 800b596:	60fa      	str	r2, [r7, #12]
 800b598:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	e032      	b.n	800b60a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	0f1a      	lsrs	r2, r3, #28
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	0d5b      	lsrs	r3, r3, #21
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	3a01      	subs	r2, #1
 800b5be:	60fa      	str	r2, [r7, #12]
 800b5c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	0b9b      	lsrs	r3, r3, #14
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	60fa      	str	r2, [r7, #12]
 800b5d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	09db      	lsrs	r3, r3, #7
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	3a01      	subs	r2, #1
 800b5ea:	60fa      	str	r2, [r7, #12]
 800b5ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	3a01      	subs	r2, #1
 800b5fe:	60fa      	str	r2, [r7, #12]
 800b600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b604:	b2da      	uxtb	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b60a:	4b1f      	ldr	r3, [pc, #124]	; (800b688 <_SendPacket+0x274>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b610:	4b1c      	ldr	r3, [pc, #112]	; (800b684 <_SendPacket+0x270>)
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	69ba      	ldr	r2, [r7, #24]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	623b      	str	r3, [r7, #32]
 800b622:	e00b      	b.n	800b63c <_SendPacket+0x228>
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	b2da      	uxtb	r2, r3
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	1c59      	adds	r1, r3, #1
 800b62c:	6279      	str	r1, [r7, #36]	; 0x24
 800b62e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b632:	b2d2      	uxtb	r2, r2
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	09db      	lsrs	r3, r3, #7
 800b63a:	623b      	str	r3, [r7, #32]
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	2b7f      	cmp	r3, #127	; 0x7f
 800b640:	d8f0      	bhi.n	800b624 <_SendPacket+0x210>
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	627a      	str	r2, [r7, #36]	; 0x24
 800b648:	6a3a      	ldr	r2, [r7, #32]
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800b652:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <_SendPacket+0x270>)
 800b654:	785b      	ldrb	r3, [r3, #1]
 800b656:	4618      	mov	r0, r3
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	461a      	mov	r2, r3
 800b660:	68f9      	ldr	r1, [r7, #12]
 800b662:	f7f4 fdc5 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b666:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b66e:	4a05      	ldr	r2, [pc, #20]	; (800b684 <_SendPacket+0x270>)
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	60d3      	str	r3, [r2, #12]
 800b674:	e00f      	b.n	800b696 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b676:	4b03      	ldr	r3, [pc, #12]	; (800b684 <_SendPacket+0x270>)
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	3301      	adds	r3, #1
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	4b01      	ldr	r3, [pc, #4]	; (800b684 <_SendPacket+0x270>)
 800b680:	701a      	strb	r2, [r3, #0]
 800b682:	e008      	b.n	800b696 <_SendPacket+0x282>
 800b684:	20016024 	.word	0x20016024
 800b688:	e0001004 	.word	0xe0001004
    goto SendDone;
 800b68c:	bf00      	nop
 800b68e:	e002      	b.n	800b696 <_SendPacket+0x282>
      goto SendDone;
 800b690:	bf00      	nop
 800b692:	e000      	b.n	800b696 <_SendPacket+0x282>
      goto SendDone;
 800b694:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b696:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <_SendPacket+0x2d4>)
 800b698:	7e1b      	ldrb	r3, [r3, #24]
 800b69a:	4619      	mov	r1, r3
 800b69c:	4a13      	ldr	r2, [pc, #76]	; (800b6ec <_SendPacket+0x2d8>)
 800b69e:	460b      	mov	r3, r1
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	440b      	add	r3, r1
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	4413      	add	r3, r2
 800b6a8:	336c      	adds	r3, #108	; 0x6c
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <_SendPacket+0x2d4>)
 800b6ae:	7e1b      	ldrb	r3, [r3, #24]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	490e      	ldr	r1, [pc, #56]	; (800b6ec <_SendPacket+0x2d8>)
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	4403      	add	r3, r0
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	440b      	add	r3, r1
 800b6be:	3370      	adds	r3, #112	; 0x70
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d00b      	beq.n	800b6de <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b6c6:	4b08      	ldr	r3, [pc, #32]	; (800b6e8 <_SendPacket+0x2d4>)
 800b6c8:	789b      	ldrb	r3, [r3, #2]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d107      	bne.n	800b6de <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <_SendPacket+0x2d4>)
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b6d4:	f7ff fdbc 	bl	800b250 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b6d8:	4b03      	ldr	r3, [pc, #12]	; (800b6e8 <_SendPacket+0x2d4>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b6de:	bf00      	nop
 800b6e0:	3728      	adds	r7, #40	; 0x28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20016024 	.word	0x20016024
 800b6ec:	20014b64 	.word	0x20014b64

0800b6f0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b0a2      	sub	sp, #136	; 0x88
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800b706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800b712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b716:	2b00      	cmp	r3, #0
 800b718:	d01d      	beq.n	800b756 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800b71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b71e:	2b25      	cmp	r3, #37	; 0x25
 800b720:	d1f1      	bne.n	800b706 <_VPrintHost+0x16>
      c = *p;
 800b722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	1d19      	adds	r1, r3, #4
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6011      	str	r1, [r2, #0]
 800b734:	6819      	ldr	r1, [r3, #0]
 800b736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b73a:	1c5a      	adds	r2, r3, #1
 800b73c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b740:	460a      	mov	r2, r1
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	3388      	adds	r3, #136	; 0x88
 800b746:	443b      	add	r3, r7
 800b748:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800b74c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b750:	2b10      	cmp	r3, #16
 800b752:	d002      	beq.n	800b75a <_VPrintHost+0x6a>
    c = *p++;
 800b754:	e7d7      	b.n	800b706 <_VPrintHost+0x16>
      break;
 800b756:	bf00      	nop
 800b758:	e000      	b.n	800b75c <_VPrintHost+0x6c>
        break;
 800b75a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800b75c:	f3ef 8311 	mrs	r3, BASEPRI
 800b760:	f04f 0120 	mov.w	r1, #32
 800b764:	f381 8811 	msr	BASEPRI, r1
 800b768:	65bb      	str	r3, [r7, #88]	; 0x58
 800b76a:	483f      	ldr	r0, [pc, #252]	; (800b868 <_VPrintHost+0x178>)
 800b76c:	f7ff fd64 	bl	800b238 <_PreparePacket>
 800b770:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b772:	2280      	movs	r2, #128	; 0x80
 800b774:	68f9      	ldr	r1, [r7, #12]
 800b776:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b778:	f7ff fd0e 	bl	800b198 <_EncodeStr>
 800b77c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800b77e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b780:	677b      	str	r3, [r7, #116]	; 0x74
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	673b      	str	r3, [r7, #112]	; 0x70
 800b786:	e00b      	b.n	800b7a0 <_VPrintHost+0xb0>
 800b788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b78e:	1c59      	adds	r1, r3, #1
 800b790:	6779      	str	r1, [r7, #116]	; 0x74
 800b792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b79c:	09db      	lsrs	r3, r3, #7
 800b79e:	673b      	str	r3, [r7, #112]	; 0x70
 800b7a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7a2:	2b7f      	cmp	r3, #127	; 0x7f
 800b7a4:	d8f0      	bhi.n	800b788 <_VPrintHost+0x98>
 800b7a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	677a      	str	r2, [r7, #116]	; 0x74
 800b7ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	701a      	strb	r2, [r3, #0]
 800b7b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7b4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800b7b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b7be:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7c0:	e00b      	b.n	800b7da <_VPrintHost+0xea>
 800b7c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c8:	1c59      	adds	r1, r3, #1
 800b7ca:	66f9      	str	r1, [r7, #108]	; 0x6c
 800b7cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7d6:	09db      	lsrs	r3, r3, #7
 800b7d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7dc:	2b7f      	cmp	r3, #127	; 0x7f
 800b7de:	d8f0      	bhi.n	800b7c2 <_VPrintHost+0xd2>
 800b7e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	701a      	strb	r2, [r3, #0]
 800b7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ee:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800b7f0:	f107 0314 	add.w	r3, r7, #20
 800b7f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800b7f8:	e022      	b.n	800b840 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800b7fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b7fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	663b      	str	r3, [r7, #96]	; 0x60
 800b806:	e00b      	b.n	800b820 <_VPrintHost+0x130>
 800b808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b80e:	1c59      	adds	r1, r3, #1
 800b810:	6679      	str	r1, [r7, #100]	; 0x64
 800b812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b816:	b2d2      	uxtb	r2, r2
 800b818:	701a      	strb	r2, [r3, #0]
 800b81a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b81c:	09db      	lsrs	r3, r3, #7
 800b81e:	663b      	str	r3, [r7, #96]	; 0x60
 800b820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b822:	2b7f      	cmp	r3, #127	; 0x7f
 800b824:	d8f0      	bhi.n	800b808 <_VPrintHost+0x118>
 800b826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b828:	1c5a      	adds	r2, r3, #1
 800b82a:	667a      	str	r2, [r7, #100]	; 0x64
 800b82c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b82e:	b2d2      	uxtb	r2, r2
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b834:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800b836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b83a:	3304      	adds	r3, #4
 800b83c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800b840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b844:	1e5a      	subs	r2, r3, #1
 800b846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1d5      	bne.n	800b7fa <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b84e:	221a      	movs	r2, #26
 800b850:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b852:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b854:	f7ff fdde 	bl	800b414 <_SendPacket>
    RECORD_END();
 800b858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b85a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3788      	adds	r7, #136	; 0x88
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20016054 	.word	0x20016054

0800b86c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af02      	add	r7, sp, #8
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b87a:	2300      	movs	r3, #0
 800b87c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b880:	4917      	ldr	r1, [pc, #92]	; (800b8e0 <SEGGER_SYSVIEW_Init+0x74>)
 800b882:	4818      	ldr	r0, [pc, #96]	; (800b8e4 <SEGGER_SYSVIEW_Init+0x78>)
 800b884:	f7ff fbb8 	bl	800aff8 <SEGGER_RTT_AllocUpBuffer>
 800b888:	4603      	mov	r3, r0
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b88e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800b890:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b892:	785a      	ldrb	r2, [r3, #1]
 800b894:	4b14      	ldr	r3, [pc, #80]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b896:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b898:	4b13      	ldr	r3, [pc, #76]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b89a:	7e1b      	ldrb	r3, [r3, #24]
 800b89c:	4618      	mov	r0, r3
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	2308      	movs	r3, #8
 800b8a4:	4a11      	ldr	r2, [pc, #68]	; (800b8ec <SEGGER_SYSVIEW_Init+0x80>)
 800b8a6:	490f      	ldr	r1, [pc, #60]	; (800b8e4 <SEGGER_SYSVIEW_Init+0x78>)
 800b8a8:	f7ff fc2a 	bl	800b100 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b8ac:	4b0e      	ldr	r3, [pc, #56]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b8b2:	4b0f      	ldr	r3, [pc, #60]	; (800b8f0 <SEGGER_SYSVIEW_Init+0x84>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a0c      	ldr	r2, [pc, #48]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b8b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b8ba:	4a0b      	ldr	r2, [pc, #44]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b8c0:	4a09      	ldr	r2, [pc, #36]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b8c6:	4a08      	ldr	r2, [pc, #32]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b8cc:	4a06      	ldr	r2, [pc, #24]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b8d8:	bf00      	nop
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	2001501c 	.word	0x2001501c
 800b8e4:	0800cd94 	.word	0x0800cd94
 800b8e8:	20016024 	.word	0x20016024
 800b8ec:	2001601c 	.word	0x2001601c
 800b8f0:	e0001004 	.word	0xe0001004

0800b8f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800b8fc:	4a04      	ldr	r2, [pc, #16]	; (800b910 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6113      	str	r3, [r2, #16]
}
 800b902:	bf00      	nop
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	20016024 	.word	0x20016024

0800b914 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b91c:	f3ef 8311 	mrs	r3, BASEPRI
 800b920:	f04f 0120 	mov.w	r1, #32
 800b924:	f381 8811 	msr	BASEPRI, r1
 800b928:	60fb      	str	r3, [r7, #12]
 800b92a:	4808      	ldr	r0, [pc, #32]	; (800b94c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b92c:	f7ff fc84 	bl	800b238 <_PreparePacket>
 800b930:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	68b8      	ldr	r0, [r7, #8]
 800b938:	f7ff fd6c 	bl	800b414 <_SendPacket>
  RECORD_END();
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f383 8811 	msr	BASEPRI, r3
}
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20016054 	.word	0x20016054

0800b950 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b950:	b580      	push	{r7, lr}
 800b952:	b088      	sub	sp, #32
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b95a:	f3ef 8311 	mrs	r3, BASEPRI
 800b95e:	f04f 0120 	mov.w	r1, #32
 800b962:	f381 8811 	msr	BASEPRI, r1
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	4816      	ldr	r0, [pc, #88]	; (800b9c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b96a:	f7ff fc65 	bl	800b238 <_PreparePacket>
 800b96e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	61fb      	str	r3, [r7, #28]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	61bb      	str	r3, [r7, #24]
 800b97c:	e00b      	b.n	800b996 <SEGGER_SYSVIEW_RecordU32+0x46>
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	b2da      	uxtb	r2, r3
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	1c59      	adds	r1, r3, #1
 800b986:	61f9      	str	r1, [r7, #28]
 800b988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b98c:	b2d2      	uxtb	r2, r2
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	09db      	lsrs	r3, r3, #7
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	2b7f      	cmp	r3, #127	; 0x7f
 800b99a:	d8f0      	bhi.n	800b97e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	61fa      	str	r2, [r7, #28]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	b2d2      	uxtb	r2, r2
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	68f9      	ldr	r1, [r7, #12]
 800b9b0:	6938      	ldr	r0, [r7, #16]
 800b9b2:	f7ff fd2f 	bl	800b414 <_SendPacket>
  RECORD_END();
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f383 8811 	msr	BASEPRI, r3
}
 800b9bc:	bf00      	nop
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20016054 	.word	0x20016054

0800b9c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08c      	sub	sp, #48	; 0x30
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b9d4:	f3ef 8311 	mrs	r3, BASEPRI
 800b9d8:	f04f 0120 	mov.w	r1, #32
 800b9dc:	f381 8811 	msr	BASEPRI, r1
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	4825      	ldr	r0, [pc, #148]	; (800ba78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b9e4:	f7ff fc28 	bl	800b238 <_PreparePacket>
 800b9e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9f6:	e00b      	b.n	800ba10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	1c59      	adds	r1, r3, #1
 800ba00:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ba02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba06:	b2d2      	uxtb	r2, r2
 800ba08:	701a      	strb	r2, [r3, #0]
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	09db      	lsrs	r3, r3, #7
 800ba0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	2b7f      	cmp	r3, #127	; 0x7f
 800ba14:	d8f0      	bhi.n	800b9f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800ba16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba1e:	b2d2      	uxtb	r2, r2
 800ba20:	701a      	strb	r2, [r3, #0]
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	627b      	str	r3, [r7, #36]	; 0x24
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	623b      	str	r3, [r7, #32]
 800ba2e:	e00b      	b.n	800ba48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800ba30:	6a3b      	ldr	r3, [r7, #32]
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	1c59      	adds	r1, r3, #1
 800ba38:	6279      	str	r1, [r7, #36]	; 0x24
 800ba3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	09db      	lsrs	r3, r3, #7
 800ba46:	623b      	str	r3, [r7, #32]
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba4c:	d8f0      	bhi.n	800ba30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	627a      	str	r2, [r7, #36]	; 0x24
 800ba54:	6a3a      	ldr	r2, [r7, #32]
 800ba56:	b2d2      	uxtb	r2, r2
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	6979      	ldr	r1, [r7, #20]
 800ba62:	69b8      	ldr	r0, [r7, #24]
 800ba64:	f7ff fcd6 	bl	800b414 <_SendPacket>
  RECORD_END();
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	f383 8811 	msr	BASEPRI, r3
}
 800ba6e:	bf00      	nop
 800ba70:	3730      	adds	r7, #48	; 0x30
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20016054 	.word	0x20016054

0800ba7c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08e      	sub	sp, #56	; 0x38
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
 800ba88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800ba8a:	f3ef 8311 	mrs	r3, BASEPRI
 800ba8e:	f04f 0120 	mov.w	r1, #32
 800ba92:	f381 8811 	msr	BASEPRI, r1
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	4832      	ldr	r0, [pc, #200]	; (800bb64 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800ba9a:	f7ff fbcd 	bl	800b238 <_PreparePacket>
 800ba9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	637b      	str	r3, [r7, #52]	; 0x34
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	633b      	str	r3, [r7, #48]	; 0x30
 800baac:	e00b      	b.n	800bac6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab4:	1c59      	adds	r1, r3, #1
 800bab6:	6379      	str	r1, [r7, #52]	; 0x34
 800bab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	09db      	lsrs	r3, r3, #7
 800bac4:	633b      	str	r3, [r7, #48]	; 0x30
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	2b7f      	cmp	r3, #127	; 0x7f
 800baca:	d8f0      	bhi.n	800baae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800bacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	637a      	str	r2, [r7, #52]	; 0x34
 800bad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	701a      	strb	r2, [r3, #0]
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bae4:	e00b      	b.n	800bafe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	1c59      	adds	r1, r3, #1
 800baee:	62f9      	str	r1, [r7, #44]	; 0x2c
 800baf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800baf4:	b2d2      	uxtb	r2, r2
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	09db      	lsrs	r3, r3, #7
 800bafc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	2b7f      	cmp	r3, #127	; 0x7f
 800bb02:	d8f0      	bhi.n	800bae6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb0c:	b2d2      	uxtb	r2, r2
 800bb0e:	701a      	strb	r2, [r3, #0]
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	627b      	str	r3, [r7, #36]	; 0x24
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	623b      	str	r3, [r7, #32]
 800bb1c:	e00b      	b.n	800bb36 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	1c59      	adds	r1, r3, #1
 800bb26:	6279      	str	r1, [r7, #36]	; 0x24
 800bb28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb2c:	b2d2      	uxtb	r2, r2
 800bb2e:	701a      	strb	r2, [r3, #0]
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	09db      	lsrs	r3, r3, #7
 800bb34:	623b      	str	r3, [r7, #32]
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	2b7f      	cmp	r3, #127	; 0x7f
 800bb3a:	d8f0      	bhi.n	800bb1e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	627a      	str	r2, [r7, #36]	; 0x24
 800bb42:	6a3a      	ldr	r2, [r7, #32]
 800bb44:	b2d2      	uxtb	r2, r2
 800bb46:	701a      	strb	r2, [r3, #0]
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	6979      	ldr	r1, [r7, #20]
 800bb50:	69b8      	ldr	r0, [r7, #24]
 800bb52:	f7ff fc5f 	bl	800b414 <_SendPacket>
  RECORD_END();
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	f383 8811 	msr	BASEPRI, r3
}
 800bb5c:	bf00      	nop
 800bb5e:	3738      	adds	r7, #56	; 0x38
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	20016054 	.word	0x20016054

0800bb68 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b090      	sub	sp, #64	; 0x40
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bb76:	f3ef 8311 	mrs	r3, BASEPRI
 800bb7a:	f04f 0120 	mov.w	r1, #32
 800bb7e:	f381 8811 	msr	BASEPRI, r1
 800bb82:	61fb      	str	r3, [r7, #28]
 800bb84:	4840      	ldr	r0, [pc, #256]	; (800bc88 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800bb86:	f7ff fb57 	bl	800b238 <_PreparePacket>
 800bb8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb98:	e00b      	b.n	800bbb2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba0:	1c59      	adds	r1, r3, #1
 800bba2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bba8:	b2d2      	uxtb	r2, r2
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	09db      	lsrs	r3, r3, #7
 800bbb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	2b7f      	cmp	r3, #127	; 0x7f
 800bbb6:	d8f0      	bhi.n	800bb9a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800bbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bbbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	701a      	strb	r2, [r3, #0]
 800bbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	637b      	str	r3, [r7, #52]	; 0x34
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	633b      	str	r3, [r7, #48]	; 0x30
 800bbd0:	e00b      	b.n	800bbea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd8:	1c59      	adds	r1, r3, #1
 800bbda:	6379      	str	r1, [r7, #52]	; 0x34
 800bbdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbe0:	b2d2      	uxtb	r2, r2
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	09db      	lsrs	r3, r3, #7
 800bbe8:	633b      	str	r3, [r7, #48]	; 0x30
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	2b7f      	cmp	r3, #127	; 0x7f
 800bbee:	d8f0      	bhi.n	800bbd2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	637a      	str	r2, [r7, #52]	; 0x34
 800bbf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbf8:	b2d2      	uxtb	r2, r2
 800bbfa:	701a      	strb	r2, [r3, #0]
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc08:	e00b      	b.n	800bc22 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800bc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	1c59      	adds	r1, r3, #1
 800bc12:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bc14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc18:	b2d2      	uxtb	r2, r2
 800bc1a:	701a      	strb	r2, [r3, #0]
 800bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1e:	09db      	lsrs	r3, r3, #7
 800bc20:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	2b7f      	cmp	r3, #127	; 0x7f
 800bc26:	d8f0      	bhi.n	800bc0a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc30:	b2d2      	uxtb	r2, r2
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc3e:	623b      	str	r3, [r7, #32]
 800bc40:	e00b      	b.n	800bc5a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	1c59      	adds	r1, r3, #1
 800bc4a:	6279      	str	r1, [r7, #36]	; 0x24
 800bc4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc50:	b2d2      	uxtb	r2, r2
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	09db      	lsrs	r3, r3, #7
 800bc58:	623b      	str	r3, [r7, #32]
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	2b7f      	cmp	r3, #127	; 0x7f
 800bc5e:	d8f0      	bhi.n	800bc42 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	1c5a      	adds	r2, r3, #1
 800bc64:	627a      	str	r2, [r7, #36]	; 0x24
 800bc66:	6a3a      	ldr	r2, [r7, #32]
 800bc68:	b2d2      	uxtb	r2, r2
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	6979      	ldr	r1, [r7, #20]
 800bc74:	69b8      	ldr	r0, [r7, #24]
 800bc76:	f7ff fbcd 	bl	800b414 <_SendPacket>
  RECORD_END();
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	f383 8811 	msr	BASEPRI, r3
}
 800bc80:	bf00      	nop
 800bc82:	3740      	adds	r7, #64	; 0x40
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	20016054 	.word	0x20016054

0800bc8c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08c      	sub	sp, #48	; 0x30
 800bc90:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800bc92:	4b58      	ldr	r3, [pc, #352]	; (800bdf4 <SEGGER_SYSVIEW_Start+0x168>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800bc98:	f3ef 8311 	mrs	r3, BASEPRI
 800bc9c:	f04f 0120 	mov.w	r1, #32
 800bca0:	f381 8811 	msr	BASEPRI, r1
 800bca4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800bca6:	4b53      	ldr	r3, [pc, #332]	; (800bdf4 <SEGGER_SYSVIEW_Start+0x168>)
 800bca8:	785b      	ldrb	r3, [r3, #1]
 800bcaa:	220a      	movs	r2, #10
 800bcac:	4952      	ldr	r1, [pc, #328]	; (800bdf8 <SEGGER_SYSVIEW_Start+0x16c>)
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7f4 fa9e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800bcba:	200a      	movs	r0, #10
 800bcbc:	f7ff fe2a 	bl	800b914 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bcc0:	f3ef 8311 	mrs	r3, BASEPRI
 800bcc4:	f04f 0120 	mov.w	r1, #32
 800bcc8:	f381 8811 	msr	BASEPRI, r1
 800bccc:	60bb      	str	r3, [r7, #8]
 800bcce:	484b      	ldr	r0, [pc, #300]	; (800bdfc <SEGGER_SYSVIEW_Start+0x170>)
 800bcd0:	f7ff fab2 	bl	800b238 <_PreparePacket>
 800bcd4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcde:	4b45      	ldr	r3, [pc, #276]	; (800bdf4 <SEGGER_SYSVIEW_Start+0x168>)
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bce4:	e00b      	b.n	800bcfe <SEGGER_SYSVIEW_Start+0x72>
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	1c59      	adds	r1, r3, #1
 800bcee:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bcf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bcf4:	b2d2      	uxtb	r2, r2
 800bcf6:	701a      	strb	r2, [r3, #0]
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	09db      	lsrs	r3, r3, #7
 800bcfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	2b7f      	cmp	r3, #127	; 0x7f
 800bd02:	d8f0      	bhi.n	800bce6 <SEGGER_SYSVIEW_Start+0x5a>
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd0c:	b2d2      	uxtb	r2, r2
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	627b      	str	r3, [r7, #36]	; 0x24
 800bd18:	4b36      	ldr	r3, [pc, #216]	; (800bdf4 <SEGGER_SYSVIEW_Start+0x168>)
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	623b      	str	r3, [r7, #32]
 800bd1e:	e00b      	b.n	800bd38 <SEGGER_SYSVIEW_Start+0xac>
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	1c59      	adds	r1, r3, #1
 800bd28:	6279      	str	r1, [r7, #36]	; 0x24
 800bd2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd2e:	b2d2      	uxtb	r2, r2
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	09db      	lsrs	r3, r3, #7
 800bd36:	623b      	str	r3, [r7, #32]
 800bd38:	6a3b      	ldr	r3, [r7, #32]
 800bd3a:	2b7f      	cmp	r3, #127	; 0x7f
 800bd3c:	d8f0      	bhi.n	800bd20 <SEGGER_SYSVIEW_Start+0x94>
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	627a      	str	r2, [r7, #36]	; 0x24
 800bd44:	6a3a      	ldr	r2, [r7, #32]
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	61fb      	str	r3, [r7, #28]
 800bd52:	4b28      	ldr	r3, [pc, #160]	; (800bdf4 <SEGGER_SYSVIEW_Start+0x168>)
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	61bb      	str	r3, [r7, #24]
 800bd58:	e00b      	b.n	800bd72 <SEGGER_SYSVIEW_Start+0xe6>
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	1c59      	adds	r1, r3, #1
 800bd62:	61f9      	str	r1, [r7, #28]
 800bd64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	09db      	lsrs	r3, r3, #7
 800bd70:	61bb      	str	r3, [r7, #24]
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	2b7f      	cmp	r3, #127	; 0x7f
 800bd76:	d8f0      	bhi.n	800bd5a <SEGGER_SYSVIEW_Start+0xce>
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	61fa      	str	r2, [r7, #28]
 800bd7e:	69ba      	ldr	r2, [r7, #24]
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	613b      	str	r3, [r7, #16]
 800bd90:	e00b      	b.n	800bdaa <SEGGER_SYSVIEW_Start+0x11e>
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	1c59      	adds	r1, r3, #1
 800bd9a:	6179      	str	r1, [r7, #20]
 800bd9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bda0:	b2d2      	uxtb	r2, r2
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	09db      	lsrs	r3, r3, #7
 800bda8:	613b      	str	r3, [r7, #16]
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2b7f      	cmp	r3, #127	; 0x7f
 800bdae:	d8f0      	bhi.n	800bd92 <SEGGER_SYSVIEW_Start+0x106>
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	617a      	str	r2, [r7, #20]
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	b2d2      	uxtb	r2, r2
 800bdba:	701a      	strb	r2, [r3, #0]
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800bdc0:	2218      	movs	r2, #24
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fb25 	bl	800b414 <_SendPacket>
      RECORD_END();
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800bdd0:	4b08      	ldr	r3, [pc, #32]	; (800bdf4 <SEGGER_SYSVIEW_Start+0x168>)
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800bdd8:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <SEGGER_SYSVIEW_Start+0x168>)
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800bdde:	f000 f9eb 	bl	800c1b8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800bde2:	f000 f9b1 	bl	800c148 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800bde6:	f000 fc83 	bl	800c6f0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800bdea:	bf00      	nop
 800bdec:	3730      	adds	r7, #48	; 0x30
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20016024 	.word	0x20016024
 800bdf8:	0800ce74 	.word	0x0800ce74
 800bdfc:	20016054 	.word	0x20016054

0800be00 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800be06:	f3ef 8311 	mrs	r3, BASEPRI
 800be0a:	f04f 0120 	mov.w	r1, #32
 800be0e:	f381 8811 	msr	BASEPRI, r1
 800be12:	607b      	str	r3, [r7, #4]
 800be14:	480b      	ldr	r0, [pc, #44]	; (800be44 <SEGGER_SYSVIEW_Stop+0x44>)
 800be16:	f7ff fa0f 	bl	800b238 <_PreparePacket>
 800be1a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800be1c:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <SEGGER_SYSVIEW_Stop+0x48>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d007      	beq.n	800be34 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800be24:	220b      	movs	r2, #11
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6838      	ldr	r0, [r7, #0]
 800be2a:	f7ff faf3 	bl	800b414 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800be2e:	4b06      	ldr	r3, [pc, #24]	; (800be48 <SEGGER_SYSVIEW_Stop+0x48>)
 800be30:	2200      	movs	r2, #0
 800be32:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f383 8811 	msr	BASEPRI, r3
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20016054 	.word	0x20016054
 800be48:	20016024 	.word	0x20016024

0800be4c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08c      	sub	sp, #48	; 0x30
 800be50:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800be52:	f3ef 8311 	mrs	r3, BASEPRI
 800be56:	f04f 0120 	mov.w	r1, #32
 800be5a:	f381 8811 	msr	BASEPRI, r1
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	4845      	ldr	r0, [pc, #276]	; (800bf78 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800be62:	f7ff f9e9 	bl	800b238 <_PreparePacket>
 800be66:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be70:	4b42      	ldr	r3, [pc, #264]	; (800bf7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	62bb      	str	r3, [r7, #40]	; 0x28
 800be76:	e00b      	b.n	800be90 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7e:	1c59      	adds	r1, r3, #1
 800be80:	62f9      	str	r1, [r7, #44]	; 0x2c
 800be82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be86:	b2d2      	uxtb	r2, r2
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	09db      	lsrs	r3, r3, #7
 800be8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	2b7f      	cmp	r3, #127	; 0x7f
 800be94:	d8f0      	bhi.n	800be78 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be9e:	b2d2      	uxtb	r2, r2
 800bea0:	701a      	strb	r2, [r3, #0]
 800bea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
 800beaa:	4b34      	ldr	r3, [pc, #208]	; (800bf7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	623b      	str	r3, [r7, #32]
 800beb0:	e00b      	b.n	800beca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb8:	1c59      	adds	r1, r3, #1
 800beba:	6279      	str	r1, [r7, #36]	; 0x24
 800bebc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	09db      	lsrs	r3, r3, #7
 800bec8:	623b      	str	r3, [r7, #32]
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	2b7f      	cmp	r3, #127	; 0x7f
 800bece:	d8f0      	bhi.n	800beb2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	627a      	str	r2, [r7, #36]	; 0x24
 800bed6:	6a3a      	ldr	r2, [r7, #32]
 800bed8:	b2d2      	uxtb	r2, r2
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	61fb      	str	r3, [r7, #28]
 800bee4:	4b25      	ldr	r3, [pc, #148]	; (800bf7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	61bb      	str	r3, [r7, #24]
 800beea:	e00b      	b.n	800bf04 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	1c59      	adds	r1, r3, #1
 800bef4:	61f9      	str	r1, [r7, #28]
 800bef6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	701a      	strb	r2, [r3, #0]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	09db      	lsrs	r3, r3, #7
 800bf02:	61bb      	str	r3, [r7, #24]
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	2b7f      	cmp	r3, #127	; 0x7f
 800bf08:	d8f0      	bhi.n	800beec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	61fa      	str	r2, [r7, #28]
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	b2d2      	uxtb	r2, r2
 800bf14:	701a      	strb	r2, [r3, #0]
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	617b      	str	r3, [r7, #20]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	613b      	str	r3, [r7, #16]
 800bf22:	e00b      	b.n	800bf3c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	b2da      	uxtb	r2, r3
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	1c59      	adds	r1, r3, #1
 800bf2c:	6179      	str	r1, [r7, #20]
 800bf2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf32:	b2d2      	uxtb	r2, r2
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	09db      	lsrs	r3, r3, #7
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf40:	d8f0      	bhi.n	800bf24 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	617a      	str	r2, [r7, #20]
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	b2d2      	uxtb	r2, r2
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800bf52:	2218      	movs	r2, #24
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	68b8      	ldr	r0, [r7, #8]
 800bf58:	f7ff fa5c 	bl	800b414 <_SendPacket>
  RECORD_END();
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800bf62:	4b06      	ldr	r3, [pc, #24]	; (800bf7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800bf6a:	4b04      	ldr	r3, [pc, #16]	; (800bf7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	4798      	blx	r3
  }
}
 800bf70:	bf00      	nop
 800bf72:	3730      	adds	r7, #48	; 0x30
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20016054 	.word	0x20016054
 800bf7c:	20016024 	.word	0x20016024

0800bf80 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b092      	sub	sp, #72	; 0x48
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800bf88:	f3ef 8311 	mrs	r3, BASEPRI
 800bf8c:	f04f 0120 	mov.w	r1, #32
 800bf90:	f381 8811 	msr	BASEPRI, r1
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	486a      	ldr	r0, [pc, #424]	; (800c140 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800bf98:	f7ff f94e 	bl	800b238 <_PreparePacket>
 800bf9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	647b      	str	r3, [r7, #68]	; 0x44
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	4b66      	ldr	r3, [pc, #408]	; (800c144 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	643b      	str	r3, [r7, #64]	; 0x40
 800bfb2:	e00b      	b.n	800bfcc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800bfb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfba:	1c59      	adds	r1, r3, #1
 800bfbc:	6479      	str	r1, [r7, #68]	; 0x44
 800bfbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	701a      	strb	r2, [r3, #0]
 800bfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc8:	09db      	lsrs	r3, r3, #7
 800bfca:	643b      	str	r3, [r7, #64]	; 0x40
 800bfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfce:	2b7f      	cmp	r3, #127	; 0x7f
 800bfd0:	d8f0      	bhi.n	800bfb4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800bfd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	647a      	str	r2, [r7, #68]	; 0x44
 800bfd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfe0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfec:	e00b      	b.n	800c006 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800bfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff4:	1c59      	adds	r1, r3, #1
 800bff6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bffc:	b2d2      	uxtb	r2, r2
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	09db      	lsrs	r3, r3, #7
 800c004:	63bb      	str	r3, [r7, #56]	; 0x38
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	2b7f      	cmp	r3, #127	; 0x7f
 800c00a:	d8f0      	bhi.n	800bfee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	701a      	strb	r2, [r3, #0]
 800c018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2220      	movs	r2, #32
 800c022:	4619      	mov	r1, r3
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7ff f8b7 	bl	800b198 <_EncodeStr>
 800c02a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c02c:	2209      	movs	r2, #9
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	6938      	ldr	r0, [r7, #16]
 800c032:	f7ff f9ef 	bl	800b414 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	637b      	str	r3, [r7, #52]	; 0x34
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	4b40      	ldr	r3, [pc, #256]	; (800c144 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	633b      	str	r3, [r7, #48]	; 0x30
 800c04a:	e00b      	b.n	800c064 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c052:	1c59      	adds	r1, r3, #1
 800c054:	6379      	str	r1, [r7, #52]	; 0x34
 800c056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c05a:	b2d2      	uxtb	r2, r2
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	09db      	lsrs	r3, r3, #7
 800c062:	633b      	str	r3, [r7, #48]	; 0x30
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	2b7f      	cmp	r3, #127	; 0x7f
 800c068:	d8f0      	bhi.n	800c04c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06c:	1c5a      	adds	r2, r3, #1
 800c06e:	637a      	str	r2, [r7, #52]	; 0x34
 800c070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c072:	b2d2      	uxtb	r2, r2
 800c074:	701a      	strb	r2, [r3, #0]
 800c076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c078:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	62bb      	str	r3, [r7, #40]	; 0x28
 800c084:	e00b      	b.n	800c09e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	1c59      	adds	r1, r3, #1
 800c08e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c094:	b2d2      	uxtb	r2, r2
 800c096:	701a      	strb	r2, [r3, #0]
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	09db      	lsrs	r3, r3, #7
 800c09c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a0:	2b7f      	cmp	r3, #127	; 0x7f
 800c0a2:	d8f0      	bhi.n	800c086 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ac:	b2d2      	uxtb	r2, r2
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	623b      	str	r3, [r7, #32]
 800c0be:	e00b      	b.n	800c0d8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	1c59      	adds	r1, r3, #1
 800c0c8:	6279      	str	r1, [r7, #36]	; 0x24
 800c0ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0ce:	b2d2      	uxtb	r2, r2
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	09db      	lsrs	r3, r3, #7
 800c0d6:	623b      	str	r3, [r7, #32]
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	2b7f      	cmp	r3, #127	; 0x7f
 800c0dc:	d8f0      	bhi.n	800c0c0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	627a      	str	r2, [r7, #36]	; 0x24
 800c0e4:	6a3a      	ldr	r2, [r7, #32]
 800c0e6:	b2d2      	uxtb	r2, r2
 800c0e8:	701a      	strb	r2, [r3, #0]
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	61fb      	str	r3, [r7, #28]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	61bb      	str	r3, [r7, #24]
 800c0f6:	e00b      	b.n	800c110 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	1c59      	adds	r1, r3, #1
 800c100:	61f9      	str	r1, [r7, #28]
 800c102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c106:	b2d2      	uxtb	r2, r2
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	09db      	lsrs	r3, r3, #7
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	2b7f      	cmp	r3, #127	; 0x7f
 800c114:	d8f0      	bhi.n	800c0f8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	61fa      	str	r2, [r7, #28]
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	b2d2      	uxtb	r2, r2
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c126:	2215      	movs	r2, #21
 800c128:	68f9      	ldr	r1, [r7, #12]
 800c12a:	6938      	ldr	r0, [r7, #16]
 800c12c:	f7ff f972 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	f383 8811 	msr	BASEPRI, r3
}
 800c136:	bf00      	nop
 800c138:	3748      	adds	r7, #72	; 0x48
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	20016054 	.word	0x20016054
 800c144:	20016024 	.word	0x20016024

0800c148 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c14c:	4b07      	ldr	r3, [pc, #28]	; (800c16c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c14e:	6a1b      	ldr	r3, [r3, #32]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d008      	beq.n	800c166 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c154:	4b05      	ldr	r3, [pc, #20]	; (800c16c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c156:	6a1b      	ldr	r3, [r3, #32]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c15e:	4b03      	ldr	r3, [pc, #12]	; (800c16c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c160:	6a1b      	ldr	r3, [r3, #32]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4798      	blx	r3
  }
}
 800c166:	bf00      	nop
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20016024 	.word	0x20016024

0800c170 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c178:	f3ef 8311 	mrs	r3, BASEPRI
 800c17c:	f04f 0120 	mov.w	r1, #32
 800c180:	f381 8811 	msr	BASEPRI, r1
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	480b      	ldr	r0, [pc, #44]	; (800c1b4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c188:	f7ff f856 	bl	800b238 <_PreparePacket>
 800c18c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c18e:	2280      	movs	r2, #128	; 0x80
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	6938      	ldr	r0, [r7, #16]
 800c194:	f7ff f800 	bl	800b198 <_EncodeStr>
 800c198:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c19a:	220e      	movs	r2, #14
 800c19c:	68f9      	ldr	r1, [r7, #12]
 800c19e:	6938      	ldr	r0, [r7, #16]
 800c1a0:	f7ff f938 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	f383 8811 	msr	BASEPRI, r3
}
 800c1aa:	bf00      	nop
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20016054 	.word	0x20016054

0800c1b8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c1be:	4b15      	ldr	r3, [pc, #84]	; (800c214 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d01a      	beq.n	800c1fc <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c1c6:	4b13      	ldr	r3, [pc, #76]	; (800c214 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d015      	beq.n	800c1fc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c1d0:	4b10      	ldr	r3, [pc, #64]	; (800c214 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c1d2:	6a1b      	ldr	r3, [r3, #32]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4798      	blx	r3
 800c1d8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c1dc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c1de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1e2:	f04f 0200 	mov.w	r2, #0
 800c1e6:	f04f 0300 	mov.w	r3, #0
 800c1ea:	000a      	movs	r2, r1
 800c1ec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	200d      	movs	r0, #13
 800c1f6:	f7ff fbe7 	bl	800b9c8 <SEGGER_SYSVIEW_RecordU32x2>
 800c1fa:	e006      	b.n	800c20a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c1fc:	4b06      	ldr	r3, [pc, #24]	; (800c218 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4619      	mov	r1, r3
 800c202:	200c      	movs	r0, #12
 800c204:	f7ff fba4 	bl	800b950 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd90      	pop	{r4, r7, pc}
 800c212:	bf00      	nop
 800c214:	20016024 	.word	0x20016024
 800c218:	e0001004 	.word	0xe0001004

0800c21c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c222:	f3ef 8311 	mrs	r3, BASEPRI
 800c226:	f04f 0120 	mov.w	r1, #32
 800c22a:	f381 8811 	msr	BASEPRI, r1
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	4819      	ldr	r0, [pc, #100]	; (800c298 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c232:	f7ff f801 	bl	800b238 <_PreparePacket>
 800c236:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c23c:	4b17      	ldr	r3, [pc, #92]	; (800c29c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c244:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	617b      	str	r3, [r7, #20]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	613b      	str	r3, [r7, #16]
 800c24e:	e00b      	b.n	800c268 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	b2da      	uxtb	r2, r3
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	1c59      	adds	r1, r3, #1
 800c258:	6179      	str	r1, [r7, #20]
 800c25a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c25e:	b2d2      	uxtb	r2, r2
 800c260:	701a      	strb	r2, [r3, #0]
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	09db      	lsrs	r3, r3, #7
 800c266:	613b      	str	r3, [r7, #16]
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2b7f      	cmp	r3, #127	; 0x7f
 800c26c:	d8f0      	bhi.n	800c250 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	617a      	str	r2, [r7, #20]
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	701a      	strb	r2, [r3, #0]
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c27e:	2202      	movs	r2, #2
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	68b8      	ldr	r0, [r7, #8]
 800c284:	f7ff f8c6 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f383 8811 	msr	BASEPRI, r3
}
 800c28e:	bf00      	nop
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20016054 	.word	0x20016054
 800c29c:	e000ed04 	.word	0xe000ed04

0800c2a0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c2a6:	f3ef 8311 	mrs	r3, BASEPRI
 800c2aa:	f04f 0120 	mov.w	r1, #32
 800c2ae:	f381 8811 	msr	BASEPRI, r1
 800c2b2:	607b      	str	r3, [r7, #4]
 800c2b4:	4807      	ldr	r0, [pc, #28]	; (800c2d4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c2b6:	f7fe ffbf 	bl	800b238 <_PreparePacket>
 800c2ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c2bc:	2203      	movs	r2, #3
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6838      	ldr	r0, [r7, #0]
 800c2c2:	f7ff f8a7 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f383 8811 	msr	BASEPRI, r3
}
 800c2cc:	bf00      	nop
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20016054 	.word	0x20016054

0800c2d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c2de:	f3ef 8311 	mrs	r3, BASEPRI
 800c2e2:	f04f 0120 	mov.w	r1, #32
 800c2e6:	f381 8811 	msr	BASEPRI, r1
 800c2ea:	607b      	str	r3, [r7, #4]
 800c2ec:	4807      	ldr	r0, [pc, #28]	; (800c30c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c2ee:	f7fe ffa3 	bl	800b238 <_PreparePacket>
 800c2f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c2f4:	2212      	movs	r2, #18
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6838      	ldr	r0, [r7, #0]
 800c2fa:	f7ff f88b 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f383 8811 	msr	BASEPRI, r3
}
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20016054 	.word	0x20016054

0800c310 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c316:	f3ef 8311 	mrs	r3, BASEPRI
 800c31a:	f04f 0120 	mov.w	r1, #32
 800c31e:	f381 8811 	msr	BASEPRI, r1
 800c322:	607b      	str	r3, [r7, #4]
 800c324:	4807      	ldr	r0, [pc, #28]	; (800c344 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c326:	f7fe ff87 	bl	800b238 <_PreparePacket>
 800c32a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c32c:	2211      	movs	r2, #17
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6838      	ldr	r0, [r7, #0]
 800c332:	f7ff f86f 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f383 8811 	msr	BASEPRI, r3
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20016054 	.word	0x20016054

0800c348 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c350:	f3ef 8311 	mrs	r3, BASEPRI
 800c354:	f04f 0120 	mov.w	r1, #32
 800c358:	f381 8811 	msr	BASEPRI, r1
 800c35c:	617b      	str	r3, [r7, #20]
 800c35e:	4819      	ldr	r0, [pc, #100]	; (800c3c4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c360:	f7fe ff6a 	bl	800b238 <_PreparePacket>
 800c364:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c36a:	4b17      	ldr	r3, [pc, #92]	; (800c3c8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	61fb      	str	r3, [r7, #28]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	61bb      	str	r3, [r7, #24]
 800c37c:	e00b      	b.n	800c396 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	b2da      	uxtb	r2, r3
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	1c59      	adds	r1, r3, #1
 800c386:	61f9      	str	r1, [r7, #28]
 800c388:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c38c:	b2d2      	uxtb	r2, r2
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	09db      	lsrs	r3, r3, #7
 800c394:	61bb      	str	r3, [r7, #24]
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	2b7f      	cmp	r3, #127	; 0x7f
 800c39a:	d8f0      	bhi.n	800c37e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	61fa      	str	r2, [r7, #28]
 800c3a2:	69ba      	ldr	r2, [r7, #24]
 800c3a4:	b2d2      	uxtb	r2, r2
 800c3a6:	701a      	strb	r2, [r3, #0]
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c3ac:	2208      	movs	r2, #8
 800c3ae:	68f9      	ldr	r1, [r7, #12]
 800c3b0:	6938      	ldr	r0, [r7, #16]
 800c3b2:	f7ff f82f 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f383 8811 	msr	BASEPRI, r3
}
 800c3bc:	bf00      	nop
 800c3be:	3720      	adds	r7, #32
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20016054 	.word	0x20016054
 800c3c8:	20016024 	.word	0x20016024

0800c3cc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c3d4:	f3ef 8311 	mrs	r3, BASEPRI
 800c3d8:	f04f 0120 	mov.w	r1, #32
 800c3dc:	f381 8811 	msr	BASEPRI, r1
 800c3e0:	617b      	str	r3, [r7, #20]
 800c3e2:	4819      	ldr	r0, [pc, #100]	; (800c448 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c3e4:	f7fe ff28 	bl	800b238 <_PreparePacket>
 800c3e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c3ee:	4b17      	ldr	r3, [pc, #92]	; (800c44c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	61fb      	str	r3, [r7, #28]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	61bb      	str	r3, [r7, #24]
 800c400:	e00b      	b.n	800c41a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	b2da      	uxtb	r2, r3
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	1c59      	adds	r1, r3, #1
 800c40a:	61f9      	str	r1, [r7, #28]
 800c40c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	701a      	strb	r2, [r3, #0]
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	09db      	lsrs	r3, r3, #7
 800c418:	61bb      	str	r3, [r7, #24]
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b7f      	cmp	r3, #127	; 0x7f
 800c41e:	d8f0      	bhi.n	800c402 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	61fa      	str	r2, [r7, #28]
 800c426:	69ba      	ldr	r2, [r7, #24]
 800c428:	b2d2      	uxtb	r2, r2
 800c42a:	701a      	strb	r2, [r3, #0]
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c430:	2204      	movs	r2, #4
 800c432:	68f9      	ldr	r1, [r7, #12]
 800c434:	6938      	ldr	r0, [r7, #16]
 800c436:	f7fe ffed 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f383 8811 	msr	BASEPRI, r3
}
 800c440:	bf00      	nop
 800c442:	3720      	adds	r7, #32
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20016054 	.word	0x20016054
 800c44c:	20016024 	.word	0x20016024

0800c450 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c450:	b580      	push	{r7, lr}
 800c452:	b088      	sub	sp, #32
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c458:	f3ef 8311 	mrs	r3, BASEPRI
 800c45c:	f04f 0120 	mov.w	r1, #32
 800c460:	f381 8811 	msr	BASEPRI, r1
 800c464:	617b      	str	r3, [r7, #20]
 800c466:	4819      	ldr	r0, [pc, #100]	; (800c4cc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c468:	f7fe fee6 	bl	800b238 <_PreparePacket>
 800c46c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c472:	4b17      	ldr	r3, [pc, #92]	; (800c4d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	61fb      	str	r3, [r7, #28]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	61bb      	str	r3, [r7, #24]
 800c484:	e00b      	b.n	800c49e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	1c59      	adds	r1, r3, #1
 800c48e:	61f9      	str	r1, [r7, #28]
 800c490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	701a      	strb	r2, [r3, #0]
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	09db      	lsrs	r3, r3, #7
 800c49c:	61bb      	str	r3, [r7, #24]
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	2b7f      	cmp	r3, #127	; 0x7f
 800c4a2:	d8f0      	bhi.n	800c486 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	61fa      	str	r2, [r7, #28]
 800c4aa:	69ba      	ldr	r2, [r7, #24]
 800c4ac:	b2d2      	uxtb	r2, r2
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c4b4:	2206      	movs	r2, #6
 800c4b6:	68f9      	ldr	r1, [r7, #12]
 800c4b8:	6938      	ldr	r0, [r7, #16]
 800c4ba:	f7fe ffab 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f383 8811 	msr	BASEPRI, r3
}
 800c4c4:	bf00      	nop
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	20016054 	.word	0x20016054
 800c4d0:	20016024 	.word	0x20016024

0800c4d4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08a      	sub	sp, #40	; 0x28
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c4de:	f3ef 8311 	mrs	r3, BASEPRI
 800c4e2:	f04f 0120 	mov.w	r1, #32
 800c4e6:	f381 8811 	msr	BASEPRI, r1
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	4827      	ldr	r0, [pc, #156]	; (800c58c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800c4ee:	f7fe fea3 	bl	800b238 <_PreparePacket>
 800c4f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c4f8:	4b25      	ldr	r3, [pc, #148]	; (800c590 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	627b      	str	r3, [r7, #36]	; 0x24
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	623b      	str	r3, [r7, #32]
 800c50a:	e00b      	b.n	800c524 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	1c59      	adds	r1, r3, #1
 800c514:	6279      	str	r1, [r7, #36]	; 0x24
 800c516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	09db      	lsrs	r3, r3, #7
 800c522:	623b      	str	r3, [r7, #32]
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	2b7f      	cmp	r3, #127	; 0x7f
 800c528:	d8f0      	bhi.n	800c50c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	1c5a      	adds	r2, r3, #1
 800c52e:	627a      	str	r2, [r7, #36]	; 0x24
 800c530:	6a3a      	ldr	r2, [r7, #32]
 800c532:	b2d2      	uxtb	r2, r2
 800c534:	701a      	strb	r2, [r3, #0]
 800c536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c538:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	61fb      	str	r3, [r7, #28]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	61bb      	str	r3, [r7, #24]
 800c542:	e00b      	b.n	800c55c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	b2da      	uxtb	r2, r3
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	1c59      	adds	r1, r3, #1
 800c54c:	61f9      	str	r1, [r7, #28]
 800c54e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c552:	b2d2      	uxtb	r2, r2
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	09db      	lsrs	r3, r3, #7
 800c55a:	61bb      	str	r3, [r7, #24]
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	2b7f      	cmp	r3, #127	; 0x7f
 800c560:	d8f0      	bhi.n	800c544 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	1c5a      	adds	r2, r3, #1
 800c566:	61fa      	str	r2, [r7, #28]
 800c568:	69ba      	ldr	r2, [r7, #24]
 800c56a:	b2d2      	uxtb	r2, r2
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800c572:	2207      	movs	r2, #7
 800c574:	68f9      	ldr	r1, [r7, #12]
 800c576:	6938      	ldr	r0, [r7, #16]
 800c578:	f7fe ff4c 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	f383 8811 	msr	BASEPRI, r3
}
 800c582:	bf00      	nop
 800c584:	3728      	adds	r7, #40	; 0x28
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20016054 	.word	0x20016054
 800c590:	20016024 	.word	0x20016024

0800c594 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c59c:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	1ad3      	subs	r3, r2, r3
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	20016024 	.word	0x20016024

0800c5b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08c      	sub	sp, #48	; 0x30
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c5be:	4b3b      	ldr	r3, [pc, #236]	; (800c6ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d06d      	beq.n	800c6a2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c5c6:	4b39      	ldr	r3, [pc, #228]	; (800c6ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5d0:	e008      	b.n	800c5e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d007      	beq.n	800c5ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5e4:	79fb      	ldrb	r3, [r7, #7]
 800c5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d3f2      	bcc.n	800c5d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800c5ec:	e000      	b.n	800c5f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c5ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d055      	beq.n	800c6a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c5f6:	f3ef 8311 	mrs	r3, BASEPRI
 800c5fa:	f04f 0120 	mov.w	r1, #32
 800c5fe:	f381 8811 	msr	BASEPRI, r1
 800c602:	617b      	str	r3, [r7, #20]
 800c604:	482a      	ldr	r0, [pc, #168]	; (800c6b0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c606:	f7fe fe17 	bl	800b238 <_PreparePacket>
 800c60a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	627b      	str	r3, [r7, #36]	; 0x24
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	623b      	str	r3, [r7, #32]
 800c618:	e00b      	b.n	800c632 <SEGGER_SYSVIEW_SendModule+0x7e>
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	1c59      	adds	r1, r3, #1
 800c622:	6279      	str	r1, [r7, #36]	; 0x24
 800c624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c628:	b2d2      	uxtb	r2, r2
 800c62a:	701a      	strb	r2, [r3, #0]
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	09db      	lsrs	r3, r3, #7
 800c630:	623b      	str	r3, [r7, #32]
 800c632:	6a3b      	ldr	r3, [r7, #32]
 800c634:	2b7f      	cmp	r3, #127	; 0x7f
 800c636:	d8f0      	bhi.n	800c61a <SEGGER_SYSVIEW_SendModule+0x66>
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	627a      	str	r2, [r7, #36]	; 0x24
 800c63e:	6a3a      	ldr	r2, [r7, #32]
 800c640:	b2d2      	uxtb	r2, r2
 800c642:	701a      	strb	r2, [r3, #0]
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	61fb      	str	r3, [r7, #28]
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	61bb      	str	r3, [r7, #24]
 800c652:	e00b      	b.n	800c66c <SEGGER_SYSVIEW_SendModule+0xb8>
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	b2da      	uxtb	r2, r3
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	61f9      	str	r1, [r7, #28]
 800c65e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c662:	b2d2      	uxtb	r2, r2
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	09db      	lsrs	r3, r3, #7
 800c66a:	61bb      	str	r3, [r7, #24]
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	2b7f      	cmp	r3, #127	; 0x7f
 800c670:	d8f0      	bhi.n	800c654 <SEGGER_SYSVIEW_SendModule+0xa0>
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	61fa      	str	r2, [r7, #28]
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	b2d2      	uxtb	r2, r2
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2280      	movs	r2, #128	; 0x80
 800c688:	4619      	mov	r1, r3
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7fe fd84 	bl	800b198 <_EncodeStr>
 800c690:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c692:	2216      	movs	r2, #22
 800c694:	68f9      	ldr	r1, [r7, #12]
 800c696:	6938      	ldr	r0, [r7, #16]
 800c698:	f7fe febc 	bl	800b414 <_SendPacket>
      RECORD_END();
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800c6a2:	bf00      	nop
 800c6a4:	3730      	adds	r7, #48	; 0x30
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	2001604c 	.word	0x2001604c
 800c6b0:	20016054 	.word	0x20016054

0800c6b4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c6ba:	4b0c      	ldr	r3, [pc, #48]	; (800c6ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00f      	beq.n	800c6e2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c6c2:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1f2      	bne.n	800c6c8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	2001604c 	.word	0x2001604c

0800c6f0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c6f6:	f3ef 8311 	mrs	r3, BASEPRI
 800c6fa:	f04f 0120 	mov.w	r1, #32
 800c6fe:	f381 8811 	msr	BASEPRI, r1
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	4817      	ldr	r0, [pc, #92]	; (800c764 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c706:	f7fe fd97 	bl	800b238 <_PreparePacket>
 800c70a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	4b14      	ldr	r3, [pc, #80]	; (800c768 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	613b      	str	r3, [r7, #16]
 800c71a:	e00b      	b.n	800c734 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	1c59      	adds	r1, r3, #1
 800c724:	6179      	str	r1, [r7, #20]
 800c726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	701a      	strb	r2, [r3, #0]
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	09db      	lsrs	r3, r3, #7
 800c732:	613b      	str	r3, [r7, #16]
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b7f      	cmp	r3, #127	; 0x7f
 800c738:	d8f0      	bhi.n	800c71c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	1c5a      	adds	r2, r3, #1
 800c73e:	617a      	str	r2, [r7, #20]
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	b2d2      	uxtb	r2, r2
 800c744:	701a      	strb	r2, [r3, #0]
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c74a:	221b      	movs	r2, #27
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	68b8      	ldr	r0, [r7, #8]
 800c750:	f7fe fe60 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f383 8811 	msr	BASEPRI, r3
}
 800c75a:	bf00      	nop
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20016054 	.word	0x20016054
 800c768:	20016050 	.word	0x20016050

0800c76c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800c76c:	b40f      	push	{r0, r1, r2, r3}
 800c76e:	b580      	push	{r7, lr}
 800c770:	b082      	sub	sp, #8
 800c772:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800c774:	f107 0314 	add.w	r3, r7, #20
 800c778:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800c77a:	1d3b      	adds	r3, r7, #4
 800c77c:	461a      	mov	r2, r3
 800c77e:	2100      	movs	r1, #0
 800c780:	6938      	ldr	r0, [r7, #16]
 800c782:	f7fe ffb5 	bl	800b6f0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c790:	b004      	add	sp, #16
 800c792:	4770      	bx	lr

0800c794 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c794:	b580      	push	{r7, lr}
 800c796:	b08a      	sub	sp, #40	; 0x28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c79c:	f3ef 8311 	mrs	r3, BASEPRI
 800c7a0:	f04f 0120 	mov.w	r1, #32
 800c7a4:	f381 8811 	msr	BASEPRI, r1
 800c7a8:	617b      	str	r3, [r7, #20]
 800c7aa:	4827      	ldr	r0, [pc, #156]	; (800c848 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c7ac:	f7fe fd44 	bl	800b238 <_PreparePacket>
 800c7b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c7b2:	2280      	movs	r2, #128	; 0x80
 800c7b4:	6879      	ldr	r1, [r7, #4]
 800c7b6:	6938      	ldr	r0, [r7, #16]
 800c7b8:	f7fe fcee 	bl	800b198 <_EncodeStr>
 800c7bc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	623b      	str	r3, [r7, #32]
 800c7c6:	e00b      	b.n	800c7e0 <SEGGER_SYSVIEW_Warn+0x4c>
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	1c59      	adds	r1, r3, #1
 800c7d0:	6279      	str	r1, [r7, #36]	; 0x24
 800c7d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7d6:	b2d2      	uxtb	r2, r2
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	09db      	lsrs	r3, r3, #7
 800c7de:	623b      	str	r3, [r7, #32]
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c7e4:	d8f0      	bhi.n	800c7c8 <SEGGER_SYSVIEW_Warn+0x34>
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e8:	1c5a      	adds	r2, r3, #1
 800c7ea:	627a      	str	r2, [r7, #36]	; 0x24
 800c7ec:	6a3a      	ldr	r2, [r7, #32]
 800c7ee:	b2d2      	uxtb	r2, r2
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	61bb      	str	r3, [r7, #24]
 800c7fe:	e00b      	b.n	800c818 <SEGGER_SYSVIEW_Warn+0x84>
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	b2da      	uxtb	r2, r3
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	1c59      	adds	r1, r3, #1
 800c808:	61f9      	str	r1, [r7, #28]
 800c80a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c80e:	b2d2      	uxtb	r2, r2
 800c810:	701a      	strb	r2, [r3, #0]
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	09db      	lsrs	r3, r3, #7
 800c816:	61bb      	str	r3, [r7, #24]
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	2b7f      	cmp	r3, #127	; 0x7f
 800c81c:	d8f0      	bhi.n	800c800 <SEGGER_SYSVIEW_Warn+0x6c>
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	1c5a      	adds	r2, r3, #1
 800c822:	61fa      	str	r2, [r7, #28]
 800c824:	69ba      	ldr	r2, [r7, #24]
 800c826:	b2d2      	uxtb	r2, r2
 800c828:	701a      	strb	r2, [r3, #0]
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c82e:	221a      	movs	r2, #26
 800c830:	68f9      	ldr	r1, [r7, #12]
 800c832:	6938      	ldr	r0, [r7, #16]
 800c834:	f7fe fdee 	bl	800b414 <_SendPacket>
  RECORD_END();
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f383 8811 	msr	BASEPRI, r3
}
 800c83e:	bf00      	nop
 800c840:	3728      	adds	r7, #40	; 0x28
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20016054 	.word	0x20016054

0800c84c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c850:	4803      	ldr	r0, [pc, #12]	; (800c860 <_cbSendSystemDesc+0x14>)
 800c852:	f7ff fc8d 	bl	800c170 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800c856:	4803      	ldr	r0, [pc, #12]	; (800c864 <_cbSendSystemDesc+0x18>)
 800c858:	f7ff fc8a 	bl	800c170 <SEGGER_SYSVIEW_SendSysDesc>
}
 800c85c:	bf00      	nop
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	0800cd9c 	.word	0x0800cd9c
 800c864:	0800cde0 	.word	0x0800cde0

0800c868 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800c868:	b580      	push	{r7, lr}
 800c86a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800c86c:	4b06      	ldr	r3, [pc, #24]	; (800c888 <SEGGER_SYSVIEW_Conf+0x20>)
 800c86e:	6818      	ldr	r0, [r3, #0]
 800c870:	4b05      	ldr	r3, [pc, #20]	; (800c888 <SEGGER_SYSVIEW_Conf+0x20>)
 800c872:	6819      	ldr	r1, [r3, #0]
 800c874:	4b05      	ldr	r3, [pc, #20]	; (800c88c <SEGGER_SYSVIEW_Conf+0x24>)
 800c876:	4a06      	ldr	r2, [pc, #24]	; (800c890 <SEGGER_SYSVIEW_Conf+0x28>)
 800c878:	f7fe fff8 	bl	800b86c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c87c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c880:	f7ff f838 	bl	800b8f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800c884:	bf00      	nop
 800c886:	bd80      	pop	{r7, pc}
 800c888:	20000000 	.word	0x20000000
 800c88c:	0800c84d 	.word	0x0800c84d
 800c890:	0800ce80 	.word	0x0800ce80

0800c894 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c896:	b085      	sub	sp, #20
 800c898:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c89a:	2300      	movs	r3, #0
 800c89c:	607b      	str	r3, [r7, #4]
 800c89e:	e033      	b.n	800c908 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c8a0:	491e      	ldr	r1, [pc, #120]	; (800c91c <_cbSendTaskList+0x88>)
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	491a      	ldr	r1, [pc, #104]	; (800c91c <_cbSendTaskList+0x88>)
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	440b      	add	r3, r1
 800c8be:	3304      	adds	r3, #4
 800c8c0:	6819      	ldr	r1, [r3, #0]
 800c8c2:	4c16      	ldr	r4, [pc, #88]	; (800c91c <_cbSendTaskList+0x88>)
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4423      	add	r3, r4
 800c8d0:	3308      	adds	r3, #8
 800c8d2:	681c      	ldr	r4, [r3, #0]
 800c8d4:	4d11      	ldr	r5, [pc, #68]	; (800c91c <_cbSendTaskList+0x88>)
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	442b      	add	r3, r5
 800c8e2:	330c      	adds	r3, #12
 800c8e4:	681d      	ldr	r5, [r3, #0]
 800c8e6:	4e0d      	ldr	r6, [pc, #52]	; (800c91c <_cbSendTaskList+0x88>)
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	4433      	add	r3, r6
 800c8f4:	3310      	adds	r3, #16
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	462b      	mov	r3, r5
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	f000 f8bd 	bl	800ca7c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3301      	adds	r3, #1
 800c906:	607b      	str	r3, [r7, #4]
 800c908:	4b05      	ldr	r3, [pc, #20]	; (800c920 <_cbSendTaskList+0x8c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d3c6      	bcc.n	800c8a0 <_cbSendTaskList+0xc>
  }
}
 800c912:	bf00      	nop
 800c914:	bf00      	nop
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c91c:	20016138 	.word	0x20016138
 800c920:	200161d8 	.word	0x200161d8

0800c924 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c92c:	f7fc ff04 	bl	8009738 <xTaskGetTickCountFromISR>
 800c930:	4603      	mov	r3, r0
 800c932:	2200      	movs	r2, #0
 800c934:	469a      	mov	sl, r3
 800c936:	4693      	mov	fp, r2
 800c938:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c93c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	f04f 0a00 	mov.w	sl, #0
 800c948:	f04f 0b00 	mov.w	fp, #0
 800c94c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c950:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c954:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c958:	4652      	mov	r2, sl
 800c95a:	465b      	mov	r3, fp
 800c95c:	1a14      	subs	r4, r2, r0
 800c95e:	eb63 0501 	sbc.w	r5, r3, r1
 800c962:	f04f 0200 	mov.w	r2, #0
 800c966:	f04f 0300 	mov.w	r3, #0
 800c96a:	00ab      	lsls	r3, r5, #2
 800c96c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c970:	00a2      	lsls	r2, r4, #2
 800c972:	4614      	mov	r4, r2
 800c974:	461d      	mov	r5, r3
 800c976:	eb14 0800 	adds.w	r8, r4, r0
 800c97a:	eb45 0901 	adc.w	r9, r5, r1
 800c97e:	f04f 0200 	mov.w	r2, #0
 800c982:	f04f 0300 	mov.w	r3, #0
 800c986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c98a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c98e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c992:	4690      	mov	r8, r2
 800c994:	4699      	mov	r9, r3
 800c996:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800c99a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c99e:	4610      	mov	r0, r2
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c9ac <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af02      	add	r7, sp, #8
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
 800c9b8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c9ba:	2205      	movs	r2, #5
 800c9bc:	492b      	ldr	r1, [pc, #172]	; (800ca6c <SYSVIEW_AddTask+0xc0>)
 800c9be:	68b8      	ldr	r0, [r7, #8]
 800c9c0:	f000 f8a2 	bl	800cb08 <memcmp>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d04b      	beq.n	800ca62 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c9ca:	4b29      	ldr	r3, [pc, #164]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b07      	cmp	r3, #7
 800c9d0:	d903      	bls.n	800c9da <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c9d2:	4828      	ldr	r0, [pc, #160]	; (800ca74 <SYSVIEW_AddTask+0xc8>)
 800c9d4:	f7ff fede 	bl	800c794 <SEGGER_SYSVIEW_Warn>
    return;
 800c9d8:	e044      	b.n	800ca64 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c9da:	4b25      	ldr	r3, [pc, #148]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	4926      	ldr	r1, [pc, #152]	; (800ca78 <SYSVIEW_AddTask+0xcc>)
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	440b      	add	r3, r1
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c9ee:	4b20      	ldr	r3, [pc, #128]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	4921      	ldr	r1, [pc, #132]	; (800ca78 <SYSVIEW_AddTask+0xcc>)
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	440b      	add	r3, r1
 800c9fe:	3304      	adds	r3, #4
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800ca04:	4b1a      	ldr	r3, [pc, #104]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	491b      	ldr	r1, [pc, #108]	; (800ca78 <SYSVIEW_AddTask+0xcc>)
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	440b      	add	r3, r1
 800ca14:	3308      	adds	r3, #8
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800ca1a:	4b15      	ldr	r3, [pc, #84]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	4916      	ldr	r1, [pc, #88]	; (800ca78 <SYSVIEW_AddTask+0xcc>)
 800ca20:	4613      	mov	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	4413      	add	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	440b      	add	r3, r1
 800ca2a:	330c      	adds	r3, #12
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800ca30:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	4910      	ldr	r1, [pc, #64]	; (800ca78 <SYSVIEW_AddTask+0xcc>)
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	440b      	add	r3, r1
 800ca40:	3310      	adds	r3, #16
 800ca42:	69ba      	ldr	r2, [r7, #24]
 800ca44:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800ca46:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	4a08      	ldr	r2, [pc, #32]	; (800ca70 <SYSVIEW_AddTask+0xc4>)
 800ca4e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	68b9      	ldr	r1, [r7, #8]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 f80e 	bl	800ca7c <SYSVIEW_SendTaskInfo>
 800ca60:	e000      	b.n	800ca64 <SYSVIEW_AddTask+0xb8>
    return;
 800ca62:	bf00      	nop

}
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0800cdf0 	.word	0x0800cdf0
 800ca70:	200161d8 	.word	0x200161d8
 800ca74:	0800cdf8 	.word	0x0800cdf8
 800ca78:	20016138 	.word	0x20016138

0800ca7c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08a      	sub	sp, #40	; 0x28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800ca8a:	f107 0314 	add.w	r3, r7, #20
 800ca8e:	2214      	movs	r2, #20
 800ca90:	2100      	movs	r1, #0
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 f856 	bl	800cb44 <memset>
  TaskInfo.TaskID     = TaskID;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800caac:	f107 0314 	add.w	r3, r7, #20
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7ff fa65 	bl	800bf80 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800cab6:	bf00      	nop
 800cab8:	3728      	adds	r7, #40	; 0x28
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
	...

0800cac0 <__libc_init_array>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	4d0d      	ldr	r5, [pc, #52]	; (800caf8 <__libc_init_array+0x38>)
 800cac4:	4c0d      	ldr	r4, [pc, #52]	; (800cafc <__libc_init_array+0x3c>)
 800cac6:	1b64      	subs	r4, r4, r5
 800cac8:	10a4      	asrs	r4, r4, #2
 800caca:	2600      	movs	r6, #0
 800cacc:	42a6      	cmp	r6, r4
 800cace:	d109      	bne.n	800cae4 <__libc_init_array+0x24>
 800cad0:	4d0b      	ldr	r5, [pc, #44]	; (800cb00 <__libc_init_array+0x40>)
 800cad2:	4c0c      	ldr	r4, [pc, #48]	; (800cb04 <__libc_init_array+0x44>)
 800cad4:	f000 f83e 	bl	800cb54 <_init>
 800cad8:	1b64      	subs	r4, r4, r5
 800cada:	10a4      	asrs	r4, r4, #2
 800cadc:	2600      	movs	r6, #0
 800cade:	42a6      	cmp	r6, r4
 800cae0:	d105      	bne.n	800caee <__libc_init_array+0x2e>
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cae8:	4798      	blx	r3
 800caea:	3601      	adds	r6, #1
 800caec:	e7ee      	b.n	800cacc <__libc_init_array+0xc>
 800caee:	f855 3b04 	ldr.w	r3, [r5], #4
 800caf2:	4798      	blx	r3
 800caf4:	3601      	adds	r6, #1
 800caf6:	e7f2      	b.n	800cade <__libc_init_array+0x1e>
 800caf8:	0800ce90 	.word	0x0800ce90
 800cafc:	0800ce90 	.word	0x0800ce90
 800cb00:	0800ce90 	.word	0x0800ce90
 800cb04:	0800ce94 	.word	0x0800ce94

0800cb08 <memcmp>:
 800cb08:	b510      	push	{r4, lr}
 800cb0a:	3901      	subs	r1, #1
 800cb0c:	4402      	add	r2, r0
 800cb0e:	4290      	cmp	r0, r2
 800cb10:	d101      	bne.n	800cb16 <memcmp+0xe>
 800cb12:	2000      	movs	r0, #0
 800cb14:	e005      	b.n	800cb22 <memcmp+0x1a>
 800cb16:	7803      	ldrb	r3, [r0, #0]
 800cb18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cb1c:	42a3      	cmp	r3, r4
 800cb1e:	d001      	beq.n	800cb24 <memcmp+0x1c>
 800cb20:	1b18      	subs	r0, r3, r4
 800cb22:	bd10      	pop	{r4, pc}
 800cb24:	3001      	adds	r0, #1
 800cb26:	e7f2      	b.n	800cb0e <memcmp+0x6>

0800cb28 <memcpy>:
 800cb28:	440a      	add	r2, r1
 800cb2a:	4291      	cmp	r1, r2
 800cb2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb30:	d100      	bne.n	800cb34 <memcpy+0xc>
 800cb32:	4770      	bx	lr
 800cb34:	b510      	push	{r4, lr}
 800cb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb3e:	4291      	cmp	r1, r2
 800cb40:	d1f9      	bne.n	800cb36 <memcpy+0xe>
 800cb42:	bd10      	pop	{r4, pc}

0800cb44 <memset>:
 800cb44:	4402      	add	r2, r0
 800cb46:	4603      	mov	r3, r0
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d100      	bne.n	800cb4e <memset+0xa>
 800cb4c:	4770      	bx	lr
 800cb4e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb52:	e7f9      	b.n	800cb48 <memset+0x4>

0800cb54 <_init>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr

0800cb60 <_fini>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	bf00      	nop
 800cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb66:	bc08      	pop	{r3}
 800cb68:	469e      	mov	lr, r3
 800cb6a:	4770      	bx	lr
