
pushBttonTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000757c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d8  080078d8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e0  080078e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080078e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014498  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145ac  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da4  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00037398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  00038688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002572d  00000000  00000000  00039800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014648  00000000  00000000  0005ef2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6298  00000000  00000000  00073575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015980d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f40  00000000  00000000  00159860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007714 	.word	0x08007714

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08007714 	.word	0x08007714

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e34 	.word	0x20012e34

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
  * @brief  The application entry point.
  * @retval int
  *
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fd01 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f873 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8dd 	bl	8000754 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <main+0xc8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <main+0xc8>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005a6:	f006 fe83 	bl	80072b0 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(ledGreenHandler,"Led_Green_Task", 200, NULL, 2, &led_Green_handle);
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <main+0xcc>)
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	22c8      	movs	r2, #200	; 0xc8
 80005b6:	4928      	ldr	r1, [pc, #160]	; (8000658 <main+0xd0>)
 80005b8:	4828      	ldr	r0, [pc, #160]	; (800065c <main+0xd4>)
 80005ba:	f002 fd79 	bl	80030b0 <xTaskCreate>
 80005be:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d00a      	beq.n	80005dc <main+0x54>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ca:	f383 8811 	msr	BASEPRI, r3
 80005ce:	f3bf 8f6f 	isb	sy
 80005d2:	f3bf 8f4f 	dsb	sy
 80005d6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d8:	bf00      	nop
 80005da:	e7fe      	b.n	80005da <main+0x52>


  next_task_handle = led_Green_handle;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <main+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <main+0xd8>)
 80005e2:	6013      	str	r3, [r2, #0]



  status = xTaskCreate(ledRedHandler, "Led_Red_Task", 200, NULL, 1, &led_Red_Handle);
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0xdc>)
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	22c8      	movs	r2, #200	; 0xc8
 80005f0:	491d      	ldr	r1, [pc, #116]	; (8000668 <main+0xe0>)
 80005f2:	481e      	ldr	r0, [pc, #120]	; (800066c <main+0xe4>)
 80005f4:	f002 fd5c 	bl	80030b0 <xTaskCreate>
 80005f8:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d00a      	beq.n	8000616 <main+0x8e>
        __asm volatile
 8000600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000604:	f383 8811 	msr	BASEPRI, r3
 8000608:	f3bf 8f6f 	isb	sy
 800060c:	f3bf 8f4f 	dsb	sy
 8000610:	607b      	str	r3, [r7, #4]
    }
 8000612:	bf00      	nop
 8000614:	e7fe      	b.n	8000614 <main+0x8c>



  status = xTaskCreate(button_handler,"Button_Task", 200, NULL, 3, &button_Handle);
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <main+0xe8>)
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2303      	movs	r3, #3
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	22c8      	movs	r2, #200	; 0xc8
 8000622:	4914      	ldr	r1, [pc, #80]	; (8000674 <main+0xec>)
 8000624:	4814      	ldr	r0, [pc, #80]	; (8000678 <main+0xf0>)
 8000626:	f002 fd43 	bl	80030b0 <xTaskCreate>
 800062a:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d00a      	beq.n	8000648 <main+0xc0>
        __asm volatile
 8000632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000636:	f383 8811 	msr	BASEPRI, r3
 800063a:	f3bf 8f6f 	isb	sy
 800063e:	f3bf 8f4f 	dsb	sy
 8000642:	603b      	str	r3, [r7, #0]
    }
 8000644:	bf00      	nop
 8000646:	e7fe      	b.n	8000646 <main+0xbe>


  vTaskStartScheduler();
 8000648:	f002 ff78 	bl	800353c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0xc4>
 800064e:	bf00      	nop
 8000650:	e0001000 	.word	0xe0001000
 8000654:	20000030 	.word	0x20000030
 8000658:	0800772c 	.word	0x0800772c
 800065c:	08000c2d 	.word	0x08000c2d
 8000660:	2000003c 	.word	0x2000003c
 8000664:	20000034 	.word	0x20000034
 8000668:	0800773c 	.word	0x0800773c
 800066c:	08000c9d 	.word	0x08000c9d
 8000670:	20000038 	.word	0x20000038
 8000674:	0800774c 	.word	0x0800774c
 8000678:	08000d15 	.word	0x08000d15

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f007 f83a 	bl	8007704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a28      	ldr	r2, [pc, #160]	; (800074c <SystemClock_Config+0xd0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd4>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 ff61 	bl	80015cc <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 fb3a 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000720:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f9c2 	bl	8001abc <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073e:	f000 fb23 	bl	8000d88 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
 800076e:	4bb2      	ldr	r3, [pc, #712]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4ab1      	ldr	r2, [pc, #708]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4baf      	ldr	r3, [pc, #700]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	623b      	str	r3, [r7, #32]
 8000784:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	4bab      	ldr	r3, [pc, #684]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4aaa      	ldr	r2, [pc, #680]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4ba8      	ldr	r3, [pc, #672]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4ba4      	ldr	r3, [pc, #656]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aa3      	ldr	r2, [pc, #652]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4ba1      	ldr	r3, [pc, #644]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b9d      	ldr	r3, [pc, #628]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a9c      	ldr	r2, [pc, #624]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b9a      	ldr	r3, [pc, #616]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b96      	ldr	r3, [pc, #600]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a95      	ldr	r2, [pc, #596]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b93      	ldr	r3, [pc, #588]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b8f      	ldr	r3, [pc, #572]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a8e      	ldr	r2, [pc, #568]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b8c      	ldr	r3, [pc, #560]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b88      	ldr	r3, [pc, #544]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a87      	ldr	r2, [pc, #540]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b85      	ldr	r3, [pc, #532]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b81      	ldr	r3, [pc, #516]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a80      	ldr	r2, [pc, #512]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b7e      	ldr	r3, [pc, #504]	; (8000a38 <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2116      	movs	r1, #22
 800084e:	487b      	ldr	r0, [pc, #492]	; (8000a3c <MX_GPIO_Init+0x2e8>)
 8000850:	f000 fe88 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	4879      	ldr	r0, [pc, #484]	; (8000a40 <MX_GPIO_Init+0x2ec>)
 800085a:	f000 fe83 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000864:	4877      	ldr	r0, [pc, #476]	; (8000a44 <MX_GPIO_Init+0x2f0>)
 8000866:	f000 fe7d 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000870:	4875      	ldr	r0, [pc, #468]	; (8000a48 <MX_GPIO_Init+0x2f4>)
 8000872:	f000 fe77 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000876:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000888:	230c      	movs	r3, #12
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	486e      	ldr	r0, [pc, #440]	; (8000a4c <MX_GPIO_Init+0x2f8>)
 8000894:	f000 fca2 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000898:	f44f 7360 	mov.w	r3, #896	; 0x380
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80008aa:	2305      	movs	r3, #5
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4865      	ldr	r0, [pc, #404]	; (8000a4c <MX_GPIO_Init+0x2f8>)
 80008b6:	f000 fc91 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008cc:	230e      	movs	r3, #14
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	485d      	ldr	r0, [pc, #372]	; (8000a4c <MX_GPIO_Init+0x2f8>)
 80008d8:	f000 fc80 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008dc:	2301      	movs	r3, #1
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ec:	230c      	movs	r3, #12
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4851      	ldr	r0, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x2e8>)
 80008f8:	f000 fc70 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008fc:	2316      	movs	r3, #22
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	484a      	ldr	r0, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x2e8>)
 8000914:	f000 fc62 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000918:	f248 0307 	movw	r3, #32775	; 0x8007
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4844      	ldr	r0, [pc, #272]	; (8000a40 <MX_GPIO_Init+0x2ec>)
 8000930:	f000 fc54 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000934:	f641 0358 	movw	r3, #6232	; 0x1858
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000946:	230e      	movs	r3, #14
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	483b      	ldr	r0, [pc, #236]	; (8000a40 <MX_GPIO_Init+0x2ec>)
 8000952:	f000 fc43 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4834      	ldr	r0, [pc, #208]	; (8000a40 <MX_GPIO_Init+0x2ec>)
 800096e:	f000 fc35 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000972:	2320      	movs	r3, #32
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000976:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	482d      	ldr	r0, [pc, #180]	; (8000a3c <MX_GPIO_Init+0x2e8>)
 8000988:	f000 fc28 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800098c:	2303      	movs	r3, #3
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800099c:	2309      	movs	r3, #9
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	482a      	ldr	r0, [pc, #168]	; (8000a50 <MX_GPIO_Init+0x2fc>)
 80009a8:	f000 fc18 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ac:	2304      	movs	r3, #4
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4824      	ldr	r0, [pc, #144]	; (8000a50 <MX_GPIO_Init+0x2fc>)
 80009c0:	f000 fc0c 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d6:	230c      	movs	r3, #12
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	4819      	ldr	r0, [pc, #100]	; (8000a48 <MX_GPIO_Init+0x2f4>)
 80009e2:	f000 fbfb 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009e6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f8:	230c      	movs	r3, #12
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <MX_GPIO_Init+0x300>)
 8000a04:	f000 fbea 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a08:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a1a:	230e      	movs	r3, #14
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <MX_GPIO_Init+0x2fc>)
 8000a26:	f000 fbd9 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a2a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a34:	e010      	b.n	8000a58 <MX_GPIO_Init+0x304>
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40021800 	.word	0x40021800
 8000a4c:	40021400 	.word	0x40021400
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a60:	230c      	movs	r3, #12
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	486b      	ldr	r0, [pc, #428]	; (8000c18 <MX_GPIO_Init+0x4c4>)
 8000a6c:	f000 fbb6 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4864      	ldr	r0, [pc, #400]	; (8000c18 <MX_GPIO_Init+0x4c4>)
 8000a86:	f000 fba9 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a8a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	485d      	ldr	r0, [pc, #372]	; (8000c1c <MX_GPIO_Init+0x4c8>)
 8000aa8:	f000 fb98 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4856      	ldr	r0, [pc, #344]	; (8000c1c <MX_GPIO_Init+0x4c8>)
 8000ac2:	f000 fb8b 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ac6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	484f      	ldr	r0, [pc, #316]	; (8000c1c <MX_GPIO_Init+0x4c8>)
 8000ae0:	f000 fb7c 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ae4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af6:	230e      	movs	r3, #14
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4847      	ldr	r0, [pc, #284]	; (8000c20 <MX_GPIO_Init+0x4cc>)
 8000b02:	f000 fb6b 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b06:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b18:	230e      	movs	r3, #14
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4840      	ldr	r0, [pc, #256]	; (8000c24 <MX_GPIO_Init+0x4d0>)
 8000b24:	f000 fb5a 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	4837      	ldr	r0, [pc, #220]	; (8000c24 <MX_GPIO_Init+0x4d0>)
 8000b46:	f000 fb49 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b50:	2312      	movs	r3, #18
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	4830      	ldr	r0, [pc, #192]	; (8000c28 <MX_GPIO_Init+0x4d4>)
 8000b68:	f000 fb38 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4827      	ldr	r0, [pc, #156]	; (8000c28 <MX_GPIO_Init+0x4d4>)
 8000b8a:	f000 fb27 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b8e:	2348      	movs	r3, #72	; 0x48
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b9e:	230e      	movs	r3, #14
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481c      	ldr	r0, [pc, #112]	; (8000c1c <MX_GPIO_Init+0x4c8>)
 8000baa:	f000 fb17 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bc0:	2309      	movs	r3, #9
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4815      	ldr	r0, [pc, #84]	; (8000c20 <MX_GPIO_Init+0x4cc>)
 8000bcc:	f000 fb06 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bd0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_GPIO_Init+0x4cc>)
 8000bea:	f000 faf7 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bee:	2360      	movs	r3, #96	; 0x60
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <MX_GPIO_Init+0x4c4>)
 8000c0a:	f000 fae7 	bl	80011dc <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3738      	adds	r7, #56	; 0x38
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40021800 	.word	0x40021800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020000 	.word	0x40020000

08000c2c <ledGreenHandler>:

/* USER CODE BEGIN 4 */


static void ledGreenHandler(void* parameters){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]

	while(1)
		{


		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000c34:	4814      	ldr	r0, [pc, #80]	; (8000c88 <ledGreenHandler+0x5c>)
 8000c36:	f006 fabd 	bl	80071b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledGreen);
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <ledGreenHandler+0x60>)
 8000c40:	f000 fca9 	bl	8001596 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000c44:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2000      	movs	r0, #0
 8000c52:	f003 f95b 	bl	8003f0c <xTaskGenericNotifyWait>
 8000c56:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d1ea      	bne.n	8000c34 <ledGreenHandler+0x8>
		{
			vTaskSuspendAll();
 8000c5e:	f002 fccf 	bl	8003600 <vTaskSuspendAll>
			next_task_handle = led_Red_Handle;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <ledGreenHandler+0x64>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <ledGreenHandler+0x68>)
 8000c68:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000c6a:	f002 fcd7 	bl	800361c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOG, ledGreen,GPIO_PIN_SET); // TURN ON THE LED BEFORE DELETING
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <ledGreenHandler+0x60>)
 8000c76:	f000 fc75 	bl	8001564 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete GREEN LED task");
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <ledGreenHandler+0x6c>)
 8000c7c:	f006 fa9a 	bl	80071b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL); // WE USE NULL SINCE THE TASK IS DELETING ITSELF
 8000c80:	2000      	movs	r0, #0
 8000c82:	f002 fb79 	bl	8003378 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000c86:	e7d5      	b.n	8000c34 <ledGreenHandler+0x8>
 8000c88:	08007758 	.word	0x08007758
 8000c8c:	40021800 	.word	0x40021800
 8000c90:	20000034 	.word	0x20000034
 8000c94:	2000003c 	.word	0x2000003c
 8000c98:	08007770 	.word	0x08007770

08000c9c <ledRedHandler>:

}



static void ledRedHandler(void* parameters){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1)
		{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000ca4:	4816      	ldr	r0, [pc, #88]	; (8000d00 <ledRedHandler+0x64>)
 8000ca6:	f006 fa85 	bl	80071b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledRed);
 8000caa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cae:	4815      	ldr	r0, [pc, #84]	; (8000d04 <ledRedHandler+0x68>)
 8000cb0:	f000 fc71 	bl	8001596 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f003 f923 	bl	8003f0c <xTaskGenericNotifyWait>
 8000cc6:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d1ea      	bne.n	8000ca4 <ledRedHandler+0x8>
		{
			vTaskSuspendAll();
 8000cce:	f002 fc97 	bl	8003600 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <ledRedHandler+0x6c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000cd8:	f002 fca0 	bl	800361c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOG, ledRed,GPIO_PIN_SET); // TURN ON THE LED BEFORE DELETING
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <ledRedHandler+0x68>)
 8000ce4:	f000 fc3e 	bl	8001564 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete RED LED task");
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <ledRedHandler+0x70>)
 8000cea:	f006 fa63 	bl	80071b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(button_Handle);
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <ledRedHandler+0x74>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fb40 	bl	8003378 <vTaskDelete>
			vTaskDelete(NULL); // WE USE NULL SINCE THE TASK IS DELETING ITSELF
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f002 fb3d 	bl	8003378 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000cfe:	e7d1      	b.n	8000ca4 <ledRedHandler+0x8>
 8000d00:	08007788 	.word	0x08007788
 8000d04:	40021800 	.word	0x40021800
 8000d08:	2000003c 	.word	0x2000003c
 8000d0c:	0800779c 	.word	0x0800779c
 8000d10:	20000038 	.word	0x20000038

08000d14 <button_handler>:




static void button_handler(void* parameters)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000d24:	2101      	movs	r1, #1
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <button_handler+0x48>)
 8000d28:	f000 fc04 	bl	8001534 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73bb      	strb	r3, [r7, #14]

		if(btn_read == pdTRUE)
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10b      	bne.n	8000d4e <button_handler+0x3a>
		{
			if(! prev_read)
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d108      	bne.n	8000d4e <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <button_handler+0x4c>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f003 f967 	bl	800401c <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000d52:	200a      	movs	r0, #10
 8000d54:	f002 fbba 	bl	80034cc <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000d58:	e7e4      	b.n	8000d24 <button_handler+0x10>
 8000d5a:	bf00      	nop
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	2000003c 	.word	0x2000003c

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 f92f 	bl	8000fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
    vInitPrioGroupValue();
 8000dd2:	f003 fed1 	bl	8004b78 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e10:	f107 0210 	add.w	r2, r7, #16
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 f85a 	bl	8001ed4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e2a:	f001 f83f 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8000e2e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e30:	e004      	b.n	8000e3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e32:	f001 f83b 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3e:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3b01      	subs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_InitTick+0xf0>)
 8000e4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e70:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e72:	f001 f861 	bl	8001f38 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d11b      	bne.n	8000ebc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e86:	f001 f8b1 	bl	8001fec <HAL_TIM_Base_Start_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f000 f991 	bl	80011c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d808      	bhi.n	8000eb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2036      	movs	r0, #54	; 0x36
 8000eaa:	f000 f96d 	bl	8001188 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_InitTick+0xf4>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e002      	b.n	8000ebc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3738      	adds	r7, #56	; 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	431bde83 	.word	0x431bde83
 8000ed0:	20000040 	.word	0x20000040
 8000ed4:	40001000 	.word	0x40001000
 8000ed8:	20000004 	.word	0x20000004

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM6_DAC_IRQHandler+0x10>)
 8000f0e:	f001 f8dd 	bl	80020cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000040 	.word	0x20000040

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f006 fb87 	bl	8007680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fb09 	bl	8000588 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f84:	080078e8 	.word	0x080078e8
  ldr r2, =_sbss
 8000f88:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f8c:	200144ac 	.word	0x200144ac

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f8d8 	bl	8001172 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f7ff ff0e 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fee4 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000088 	.word	0x20000088

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000088 	.word	0x20000088

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4c 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119a:	f7ff ff61 	bl	8001060 <__NVIC_GetPriorityGrouping>
 800119e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff ffb1 	bl	800110c <NVIC_EncodePriority>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff80 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff54 	bl	800107c <__NVIC_EnableIRQ>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e177      	b.n	80014e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8166 	bne.w	80014e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	2b02      	cmp	r3, #2
 800122c:	d130      	bne.n	8001290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80c0 	beq.w	80014e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b66      	ldr	r3, [pc, #408]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_GPIO_Init+0x324>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a61      	ldr	r2, [pc, #388]	; (8001504 <HAL_GPIO_Init+0x328>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_GPIO_Init+0x32c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d037      	beq.n	800141a <HAL_GPIO_Init+0x23e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_GPIO_Init+0x330>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d031      	beq.n	8001416 <HAL_GPIO_Init+0x23a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a56      	ldr	r2, [pc, #344]	; (8001510 <HAL_GPIO_Init+0x334>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x236>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x338>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x232>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_GPIO_Init+0x33c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x22e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a53      	ldr	r2, [pc, #332]	; (800151c <HAL_GPIO_Init+0x340>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x22a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_GPIO_Init+0x344>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x226>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a51      	ldr	r2, [pc, #324]	; (8001524 <HAL_GPIO_Init+0x348>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x222>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a50      	ldr	r2, [pc, #320]	; (8001528 <HAL_GPIO_Init+0x34c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x21e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <HAL_GPIO_Init+0x350>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013f2:	2309      	movs	r3, #9
 80013f4:	e012      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013f6:	230a      	movs	r3, #10
 80013f8:	e010      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013fa:	2308      	movs	r3, #8
 80013fc:	e00e      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013fe:	2307      	movs	r3, #7
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001402:	2306      	movs	r3, #6
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x240>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x240>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x240>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x328>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <HAL_GPIO_Init+0x354>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_GPIO_Init+0x354>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_GPIO_Init+0x354>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_GPIO_Init+0x354>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_GPIO_Init+0x354>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b2:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x354>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_GPIO_Init+0x354>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_GPIO_Init+0x354>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae84 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40021400 	.word	0x40021400
 8001520:	40021800 	.word	0x40021800
 8001524:	40021c00 	.word	0x40021c00
 8001528:	40022000 	.word	0x40022000
 800152c:	40022400 	.word	0x40022400
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a8:	887a      	ldrh	r2, [r7, #2]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	041a      	lsls	r2, r3, #16
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	400b      	ands	r3, r1
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e267      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d075      	beq.n	80016d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ea:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d00c      	beq.n	8001610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4b85      	ldr	r3, [pc, #532]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d112      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800160e:	d10b      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	4b7e      	ldr	r3, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d05b      	beq.n	80016d4 <HAL_RCC_OscConfig+0x108>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d157      	bne.n	80016d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e242      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x74>
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a75      	ldr	r2, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x98>
 800164a:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6f      	ldr	r2, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6d      	ldr	r3, [pc, #436]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6c      	ldr	r2, [pc, #432]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001664:	4b69      	ldr	r3, [pc, #420]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a68      	ldr	r2, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a65      	ldr	r2, [pc, #404]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fcbc 	bl	8001000 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fcb8 	bl	8001000 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e207      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b5b      	ldr	r3, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xc0>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fca8 	bl	8001000 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fca4 	bl	8001000 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1f3      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0xe8>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1c7      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_OscConfig+0x244>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fc5d 	bl	8001000 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fc59 	bl	8001000 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1a8      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4925      	ldr	r1, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x244>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fc3c 	bl	8001000 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fc38 	bl	8001000 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e187      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d036      	beq.n	8001824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d016      	beq.n	80017ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_RCC_OscConfig+0x248>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc1c 	bl	8001000 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc18 	bl	8001000 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e167      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x200>
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_OscConfig+0x248>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fc05 	bl	8001000 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e00e      	b.n	8001818 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff fc01 	bl	8001000 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d907      	bls.n	8001818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e150      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	42470000 	.word	0x42470000
 8001814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ea      	bne.n	80017fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8097 	beq.w	8001960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a7c      	ldr	r2, [pc, #496]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b77      	ldr	r3, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b74      	ldr	r3, [pc, #464]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a73      	ldr	r2, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff fbc1 	bl	8001000 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff fbbd 	bl	8001000 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e10c      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2ea>
 80018a8:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a63      	ldr	r2, [pc, #396]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x324>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x30c>
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a5e      	ldr	r2, [pc, #376]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a5b      	ldr	r2, [pc, #364]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x324>
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	4a57      	ldr	r2, [pc, #348]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6713      	str	r3, [r2, #112]	; 0x70
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d015      	beq.n	8001924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fb82 	bl	8001000 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fb7e 	bl	8001000 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0cb      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0ee      	beq.n	8001900 <HAL_RCC_OscConfig+0x334>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fb6c 	bl	8001000 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fb68 	bl	8001000 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0b5      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ee      	bne.n	800192c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a1 	beq.w	8001aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d05c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d141      	bne.n	8001a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_RCC_OscConfig+0x478>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb3c 	bl	8001000 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fb38 	bl	8001000 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e087      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	491b      	ldr	r1, [pc, #108]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x478>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fb11 	bl	8001000 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fb0d 	bl	8001000 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e05c      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x416>
 8001a00:	e054      	b.n	8001aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_RCC_OscConfig+0x478>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fafa 	bl	8001000 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff faf6 	bl	8001000 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e045      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x444>
 8001a2e:	e03d      	b.n	8001aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e038      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000
 8001a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x4ec>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d028      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d121      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d11a      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d111      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0cc      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d90c      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d044      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d119      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e067      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4934      	ldr	r1, [pc, #208]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff fa28 	bl	8001000 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff fa24 	bl	8001000 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e04f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d20c      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f821 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490a      	ldr	r1, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f8be 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08007888 	.word	0x08007888
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c8c:	b094      	sub	sp, #80	; 0x50
 8001c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
 8001c94:	2300      	movs	r3, #0
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c98:	2300      	movs	r3, #0
 8001c9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca0:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d00d      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	f200 80e1 	bhi.w	8001e74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x34>
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cba:	e0db      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cc0:	e0db      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc6:	e0d8      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cde:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	099b      	lsrs	r3, r3, #6
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ce8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0159      	lsls	r1, r3, #5
 8001d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0c:	0150      	lsls	r0, r2, #5
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4621      	mov	r1, r4
 8001d14:	1a51      	subs	r1, r2, r1
 8001d16:	6139      	str	r1, [r7, #16]
 8001d18:	4629      	mov	r1, r5
 8001d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d2c:	4659      	mov	r1, fp
 8001d2e:	018b      	lsls	r3, r1, #6
 8001d30:	4651      	mov	r1, sl
 8001d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d36:	4651      	mov	r1, sl
 8001d38:	018a      	lsls	r2, r1, #6
 8001d3a:	4651      	mov	r1, sl
 8001d3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d40:	4659      	mov	r1, fp
 8001d42:	eb63 0901 	sbc.w	r9, r3, r1
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	eb18 0303 	adds.w	r3, r8, r3
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	462b      	mov	r3, r5
 8001d68:	eb49 0303 	adc.w	r3, r9, r3
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	024b      	lsls	r3, r1, #9
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d84:	4621      	mov	r1, r4
 8001d86:	024a      	lsls	r2, r1, #9
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8e:	2200      	movs	r2, #0
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d98:	f7fe fa74 	bl	8000284 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001da4:	e058      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	2200      	movs	r2, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	4611      	mov	r1, r2
 8001db2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	0159      	lsls	r1, r3, #5
 8001dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd2:	0150      	lsls	r0, r2, #5
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4641      	mov	r1, r8
 8001dda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001df0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001df4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dfc:	eb63 050b 	sbc.w	r5, r3, fp
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	00eb      	lsls	r3, r5, #3
 8001e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0e:	00e2      	lsls	r2, r4, #3
 8001e10:	4614      	mov	r4, r2
 8001e12:	461d      	mov	r5, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	18e3      	adds	r3, r4, r3
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	eb45 0303 	adc.w	r3, r5, r3
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	028b      	lsls	r3, r1, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e38:	4621      	mov	r1, r4
 8001e3a:	028a      	lsls	r2, r1, #10
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e42:	2200      	movs	r2, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	61fa      	str	r2, [r7, #28]
 8001e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e4c:	f7fe fa1a 	bl	8000284 <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4613      	mov	r3, r2
 8001e56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e72:	e002      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3750      	adds	r7, #80	; 0x50
 8001e80:	46bd      	mov	sp, r7
 8001e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a9b      	lsrs	r3, r3, #10
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4903      	ldr	r1, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	08007898 	.word	0x08007898

08001ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_RCC_GetClockConfig+0x60>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e041      	b.n	8001fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f839 	bl	8001fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 f9d8 	bl	800232c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e04e      	b.n	80020a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d022      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x80>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202e:	d01d      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x80>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d018      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x80>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x80>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_TIM_Base_Start_IT+0xd0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00e      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x80>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d009      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x80>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x80>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d111      	bne.n	8002090 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b06      	cmp	r3, #6
 800207c:	d010      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208e:	e007      	b.n	80020a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40010400 	.word	0x40010400
 80020c4:	40014000 	.word	0x40014000
 80020c8:	40001800 	.word	0x40001800

080020cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d122      	bne.n	8002128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d11b      	bne.n	8002128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0202 	mvn.w	r2, #2
 80020f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8ee 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8e0 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8f1 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b04      	cmp	r3, #4
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0204 	mvn.w	r2, #4
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8c4 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8b6 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8c7 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b08      	cmp	r3, #8
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b08      	cmp	r3, #8
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0208 	mvn.w	r2, #8
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2204      	movs	r2, #4
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f89a 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f88c 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f89d 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0210 	mvn.w	r2, #16
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2208      	movs	r2, #8
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f870 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f862 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f873 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0201 	mvn.w	r2, #1
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fd8a 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d10e      	bne.n	800227c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d107      	bne.n	800227c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f902 	bl	8002480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f838 	bl	8002318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0220 	mvn.w	r2, #32
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8cc 	bl	800246c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d00f      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3d      	ldr	r2, [pc, #244]	; (8002444 <TIM_Base_SetConfig+0x118>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00b      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3c      	ldr	r2, [pc, #240]	; (8002448 <TIM_Base_SetConfig+0x11c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d007      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3b      	ldr	r2, [pc, #236]	; (800244c <TIM_Base_SetConfig+0x120>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d003      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <TIM_Base_SetConfig+0x124>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d108      	bne.n	800237e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238c:	d027      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <TIM_Base_SetConfig+0x118>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d023      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <TIM_Base_SetConfig+0x11c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2a      	ldr	r2, [pc, #168]	; (800244c <TIM_Base_SetConfig+0x120>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01b      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <TIM_Base_SetConfig+0x124>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d017      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <TIM_Base_SetConfig+0x128>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <TIM_Base_SetConfig+0x12c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00f      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a26      	ldr	r2, [pc, #152]	; (800245c <TIM_Base_SetConfig+0x130>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00b      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a25      	ldr	r2, [pc, #148]	; (8002460 <TIM_Base_SetConfig+0x134>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a24      	ldr	r2, [pc, #144]	; (8002464 <TIM_Base_SetConfig+0x138>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a23      	ldr	r2, [pc, #140]	; (8002468 <TIM_Base_SetConfig+0x13c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d108      	bne.n	80023f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0xf8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <TIM_Base_SetConfig+0x124>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	615a      	str	r2, [r3, #20]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40010000 	.word	0x40010000
 8002444:	40000400 	.word	0x40000400
 8002448:	40000800 	.word	0x40000800
 800244c:	40000c00 	.word	0x40000c00
 8002450:	40010400 	.word	0x40010400
 8002454:	40014000 	.word	0x40014000
 8002458:	40014400 	.word	0x40014400
 800245c:	40014800 	.word	0x40014800
 8002460:	40001800 	.word	0x40001800
 8002464:	40001c00 	.word	0x40001c00
 8002468:	40002000 	.word	0x40002000

0800246c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f103 0208 	add.w	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f103 0208 	add.w	r2, r3, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0208 	add.w	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d103      	bne.n	8002556 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e00c      	b.n	8002570 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3308      	adds	r3, #8
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e002      	b.n	8002564 <vListInsert+0x2e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d2f6      	bcs.n	800255e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6892      	ldr	r2, [r2, #8]
 80025be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6852      	ldr	r2, [r2, #4]
 80025c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d103      	bne.n	80025dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <xQueueGenericReset+0x2a>
        __asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	60bb      	str	r3, [r7, #8]
    }
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002626:	f002 fb25 	bl	8004c74 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	441a      	add	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	3b01      	subs	r3, #1
 8002658:	68f9      	ldr	r1, [r7, #12]
 800265a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	441a      	add	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	22ff      	movs	r2, #255	; 0xff
 8002672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d114      	bne.n	80026a6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01a      	beq.n	80026ba <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3310      	adds	r3, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fa01 	bl	8003a90 <xTaskRemoveFromEventList>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <xQueueGenericReset+0xcc>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	e009      	b.n	80026ba <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3310      	adds	r3, #16
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fef2 	bl	8002494 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff feed 	bl	8002494 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80026ba:	f002 fb0b 	bl	8004cd4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61bb      	str	r3, [r7, #24]
    }
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d006      	beq.n	8002714 <xQueueGenericCreate+0x48>
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d101      	bne.n	8002718 <xQueueGenericCreate+0x4c>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <xQueueGenericCreate+0x4e>
 8002718:	2300      	movs	r3, #0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <xQueueGenericCreate+0x68>
        __asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	617b      	str	r3, [r7, #20]
    }
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800273a:	d90a      	bls.n	8002752 <xQueueGenericCreate+0x86>
        __asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	613b      	str	r3, [r7, #16]
    }
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3350      	adds	r3, #80	; 0x50
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fbb8 	bl	8004ecc <pvPortMalloc>
 800275c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3350      	adds	r3, #80	; 0x50
 800276c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f805 	bl	800278a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002780:	6a3b      	ldr	r3, [r7, #32]
    }
 8002782:	4618      	mov	r0, r3
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e002      	b.n	80027ac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027b8:	2101      	movs	r1, #1
 80027ba:	69b8      	ldr	r0, [r7, #24]
 80027bc:	f7ff ff1e 	bl	80025fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	2073      	movs	r0, #115	; 0x73
 80027d0:	f003 fe78 	bl	80064c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b090      	sub	sp, #64	; 0x40
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericSend+0x32>
        __asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <xQueueGenericSend+0x40>
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <xQueueGenericSend+0x44>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <xQueueGenericSend+0x46>
 8002820:	2300      	movs	r3, #0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <xQueueGenericSend+0x60>
        __asm volatile
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002838:	bf00      	nop
 800283a:	e7fe      	b.n	800283a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d103      	bne.n	800284a <xQueueGenericSend+0x6e>
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <xQueueGenericSend+0x72>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <xQueueGenericSend+0x74>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xQueueGenericSend+0x8e>
        __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	623b      	str	r3, [r7, #32]
    }
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800286a:	f001 fab1 	bl	8003dd0 <xTaskGetSchedulerState>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <xQueueGenericSend+0x9e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <xQueueGenericSend+0xa2>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <xQueueGenericSend+0xa4>
 800287e:	2300      	movs	r3, #0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xQueueGenericSend+0xbe>
        __asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	61fb      	str	r3, [r7, #28]
    }
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800289a:	f002 f9eb 	bl	8004c74 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <xQueueGenericSend+0xd4>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d136      	bne.n	800291e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fb92 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	460b      	mov	r3, r1
 80028c2:	4601      	mov	r1, r0
 80028c4:	205a      	movs	r0, #90	; 0x5a
 80028c6:	f003 fe73 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d0:	f000 fa78 	bl	8002dc4 <prvCopyDataToQueue>
 80028d4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	3324      	adds	r3, #36	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 f8d4 	bl	8003a90 <xTaskRemoveFromEventList>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d013      	beq.n	8002916 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028ee:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <xQueueGenericSend+0x248>)
 80028f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	e00a      	b.n	8002916 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <xQueueGenericSend+0x248>)
 8002908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002916:	f002 f9dd 	bl	8004cd4 <vPortExitCritical>
                return pdPASS;
 800291a:	2301      	movs	r3, #1
 800291c:	e07d      	b.n	8002a1a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d110      	bne.n	8002946 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002924:	f002 f9d6 	bl	8004cd4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fb56 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	460b      	mov	r3, r1
 800293a:	4601      	mov	r1, r0
 800293c:	205a      	movs	r0, #90	; 0x5a
 800293e:	f003 fe37 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002942:	2300      	movs	r3, #0
 8002944:	e069      	b.n	8002a1a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4618      	mov	r0, r3
 8002952:	f001 f903 	bl	8003b5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002956:	2301      	movs	r3, #1
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800295a:	f002 f9bb 	bl	8004cd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800295e:	f000 fe4f 	bl	8003600 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002962:	f002 f987 	bl	8004c74 <vPortEnterCritical>
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <xQueueGenericSend+0x1a0>
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002982:	b25b      	sxtb	r3, r3
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d103      	bne.n	8002992 <xQueueGenericSend+0x1b6>
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002992:	f002 f99f 	bl	8004cd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002996:	1d3a      	adds	r2, r7, #4
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 f8f2 	bl	8003b88 <xTaskCheckForTimeOut>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d124      	bne.n	80029f4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ac:	f000 fb02 	bl	8002fb4 <prvIsQueueFull>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d018      	beq.n	80029e8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	3310      	adds	r3, #16
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 f814 	bl	80039ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80029c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029c6:	f000 fa8d 	bl	8002ee4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80029ca:	f000 fe27 	bl	800361c <xTaskResumeAll>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f47f af62 	bne.w	800289a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <xQueueGenericSend+0x248>)
 80029d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	e758      	b.n	800289a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ea:	f000 fa7b 	bl	8002ee4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029ee:	f000 fe15 	bl	800361c <xTaskResumeAll>
 80029f2:	e752      	b.n	800289a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029f6:	f000 fa75 	bl	8002ee4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029fa:	f000 fe0f 	bl	800361c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 faeb 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4601      	mov	r1, r0
 8002a12:	205a      	movs	r0, #90	; 0x5a
 8002a14:	f003 fdcc 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002a18:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3738      	adds	r7, #56	; 0x38
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b090      	sub	sp, #64	; 0x40
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <xQueueGenericSendFromISR+0x3c>
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <xQueueGenericSendFromISR+0x40>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <xQueueGenericSendFromISR+0x42>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a80:	bf00      	nop
 8002a82:	e7fe      	b.n	8002a82 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d103      	bne.n	8002a92 <xQueueGenericSendFromISR+0x6a>
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <xQueueGenericSendFromISR+0x6e>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <xQueueGenericSendFromISR+0x70>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	623b      	str	r3, [r7, #32]
    }
 8002aae:	bf00      	nop
 8002ab0:	e7fe      	b.n	8002ab0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ab2:	f002 f9cb 	bl	8004e4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	61fa      	str	r2, [r7, #28]
 8002acc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002ace:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d302      	bcc.n	8002ae4 <xQueueGenericSendFromISR+0xbc>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d148      	bne.n	8002b76 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 fa70 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002afc:	4601      	mov	r1, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	461a      	mov	r2, r3
 8002b02:	2060      	movs	r0, #96	; 0x60
 8002b04:	f003 fc84 	bl	8006410 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b0e:	f000 f959 	bl	8002dc4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002b12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d112      	bne.n	8002b42 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d025      	beq.n	8002b70 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	3324      	adds	r3, #36	; 0x24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 ffb1 	bl	8003a90 <xTaskRemoveFromEventList>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01d      	beq.n	8002b70 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01a      	beq.n	8002b70 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e016      	b.n	8002b70 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b46:	2b7f      	cmp	r3, #127	; 0x7f
 8002b48:	d10a      	bne.n	8002b60 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	617b      	str	r3, [r7, #20]
    }
 8002b5c:	bf00      	nop
 8002b5e:	e7fe      	b.n	8002b5e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b64:	3301      	adds	r3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	b25a      	sxtb	r2, r3
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b70:	2301      	movs	r3, #1
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b74:	e00b      	b.n	8002b8e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fa2f 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	461a      	mov	r2, r3
 8002b84:	2060      	movs	r0, #96	; 0x60
 8002b86:	f003 fc43 	bl	8006410 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b98:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3740      	adds	r7, #64	; 0x40
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b08f      	sub	sp, #60	; 0x3c
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10a      	bne.n	8002bd4 <xQueueReceive+0x30>
        __asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	623b      	str	r3, [r7, #32]
    }
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <xQueueReceive+0x3e>
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <xQueueReceive+0x42>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueReceive+0x44>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <xQueueReceive+0x5e>
        __asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c02:	f001 f8e5 	bl	8003dd0 <xTaskGetSchedulerState>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <xQueueReceive+0x6e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <xQueueReceive+0x72>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <xQueueReceive+0x74>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <xQueueReceive+0x8e>
        __asm volatile
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	61bb      	str	r3, [r7, #24]
    }
 8002c2e:	bf00      	nop
 8002c30:	e7fe      	b.n	8002c30 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c32:	f002 f81f 	bl	8004c74 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02f      	beq.n	8002ca2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c46:	f000 f927 	bl	8002e98 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 f9c5 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002c52:	4604      	mov	r4, r0
 8002c54:	2000      	movs	r0, #0
 8002c56:	f004 f9c1 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	9100      	str	r1, [sp, #0]
 8002c62:	4621      	mov	r1, r4
 8002c64:	205c      	movs	r0, #92	; 0x5c
 8002c66:	f003 fca3 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1e5a      	subs	r2, r3, #1
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00f      	beq.n	8002c9a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	3310      	adds	r3, #16
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 ff06 	bl	8003a90 <xTaskRemoveFromEventList>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <xQueueReceive+0x21c>)
 8002c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c9a:	f002 f81b 	bl	8004cd4 <vPortExitCritical>
                return pdPASS;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e08a      	b.n	8002db8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ca8:	f002 f814 	bl	8004cd4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 f994 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f004 f990 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	9100      	str	r1, [sp, #0]
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	205c      	movs	r0, #92	; 0x5c
 8002cc8:	f003 fc72 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e073      	b.n	8002db8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 ff3e 	bl	8003b5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ce4:	f001 fff6 	bl	8004cd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ce8:	f000 fc8a 	bl	8003600 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cec:	f001 ffc2 	bl	8004c74 <vPortEnterCritical>
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d103      	bne.n	8002d06 <xQueueReceive+0x162>
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d103      	bne.n	8002d1c <xQueueReceive+0x178>
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d1c:	f001 ffda 	bl	8004cd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d20:	1d3a      	adds	r2, r7, #4
 8002d22:	f107 0310 	add.w	r3, r7, #16
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 ff2d 	bl	8003b88 <xTaskCheckForTimeOut>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d124      	bne.n	8002d7e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d36:	f000 f927 	bl	8002f88 <prvIsQueueEmpty>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d018      	beq.n	8002d72 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	3324      	adds	r3, #36	; 0x24
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fe4f 	bl	80039ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d50:	f000 f8c8 	bl	8002ee4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d54:	f000 fc62 	bl	800361c <xTaskResumeAll>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f47f af69 	bne.w	8002c32 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <xQueueReceive+0x21c>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	e75f      	b.n	8002c32 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d74:	f000 f8b6 	bl	8002ee4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d78:	f000 fc50 	bl	800361c <xTaskResumeAll>
 8002d7c:	e759      	b.n	8002c32 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d80:	f000 f8b0 	bl	8002ee4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d84:	f000 fc4a 	bl	800361c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8a:	f000 f8fd 	bl	8002f88 <prvIsQueueEmpty>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f43f af4e 	beq.w	8002c32 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 f91f 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002d9e:	4604      	mov	r4, r0
 8002da0:	2000      	movs	r0, #0
 8002da2:	f004 f91b 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2101      	movs	r1, #1
 8002dac:	9100      	str	r1, [sp, #0]
 8002dae:	4621      	mov	r1, r4
 8002db0:	205c      	movs	r0, #92	; 0x5c
 8002db2:	f003 fbfd 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002db6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3734      	adds	r7, #52	; 0x34
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d14d      	bne.n	8002e86 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f80c 	bl	8003e0c <xTaskPriorityDisinherit>
 8002df4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	e043      	b.n	8002e86 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d119      	bne.n	8002e38 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6858      	ldr	r0, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	f004 fc6a 	bl	80076e8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d32b      	bcc.n	8002e86 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	e026      	b.n	8002e86 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68d8      	ldr	r0, [r3, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	461a      	mov	r2, r3
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	f004 fc50 	bl	80076e8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	425b      	negs	r3, r3
 8002e52:	441a      	add	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d207      	bcs.n	8002e74 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	425b      	negs	r3, r3
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d105      	bne.n	8002e86 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e8e:	697b      	ldr	r3, [r7, #20]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d018      	beq.n	8002edc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d303      	bcc.n	8002ecc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68d9      	ldr	r1, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f004 fc06 	bl	80076e8 <memcpy>
    }
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002eec:	f001 fec2 	bl	8004c74 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ef8:	e011      	b.n	8002f1e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d012      	beq.n	8002f28 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3324      	adds	r3, #36	; 0x24
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fdc2 	bl	8003a90 <xTaskRemoveFromEventList>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002f12:	f000 fe9f 	bl	8003c54 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	dce9      	bgt.n	8002efa <prvUnlockQueue+0x16>
 8002f26:	e000      	b.n	8002f2a <prvUnlockQueue+0x46>
                        break;
 8002f28:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	22ff      	movs	r2, #255	; 0xff
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002f32:	f001 fecf 	bl	8004cd4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f36:	f001 fe9d 	bl	8004c74 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f40:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f42:	e011      	b.n	8002f68 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3310      	adds	r3, #16
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fd9d 	bl	8003a90 <xTaskRemoveFromEventList>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f5c:	f000 fe7a 	bl	8003c54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f60:	7bbb      	ldrb	r3, [r7, #14]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	dce9      	bgt.n	8002f44 <prvUnlockQueue+0x60>
 8002f70:	e000      	b.n	8002f74 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f72:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	22ff      	movs	r2, #255	; 0xff
 8002f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f7c:	f001 feaa 	bl	8004cd4 <vPortExitCritical>
}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f90:	f001 fe70 	bl	8004c74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e001      	b.n	8002fa6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fa6:	f001 fe95 	bl	8004cd4 <vPortExitCritical>

    return xReturn;
 8002faa:	68fb      	ldr	r3, [r7, #12]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fbc:	f001 fe5a 	bl	8004c74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d102      	bne.n	8002fd2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e001      	b.n	8002fd6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fd6:	f001 fe7d 	bl	8004cd4 <vPortExitCritical>

    return xReturn;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e01e      	b.n	8003032 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ff4:	4a13      	ldr	r2, [pc, #76]	; (8003044 <vQueueAddToRegistry+0x60>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003000:	4910      	ldr	r1, [pc, #64]	; (8003044 <vQueueAddToRegistry+0x60>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800300a:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <vQueueAddToRegistry+0x60>)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f003 ffdf 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 800301e:	4601      	mov	r1, r0
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	2071      	movs	r0, #113	; 0x71
 8003026:	f003 f9f3 	bl	8006410 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800302a:	e006      	b.n	800303a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b07      	cmp	r3, #7
 8003036:	d9dd      	bls.n	8002ff4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	2000008c 	.word	0x2000008c

08003048 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003058:	f001 fe0c 	bl	8004c74 <vPortEnterCritical>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003062:	b25b      	sxtb	r3, r3
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d103      	bne.n	8003072 <vQueueWaitForMessageRestricted+0x2a>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003078:	b25b      	sxtb	r3, r3
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d103      	bne.n	8003088 <vQueueWaitForMessageRestricted+0x40>
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003088:	f001 fe24 	bl	8004cd4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fcc9 	bl	8003a34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff1e 	bl	8002ee4 <prvUnlockQueue>
    }
 80030a8:	bf00      	nop
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 ff01 	bl	8004ecc <pvPortMalloc>
 80030ca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030d2:	2058      	movs	r0, #88	; 0x58
 80030d4:	f001 fefa 	bl	8004ecc <pvPortMalloc>
 80030d8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
 80030e6:	e005      	b.n	80030f4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030e8:	6978      	ldr	r0, [r7, #20]
 80030ea:	f001 ffcf 	bl	800508c <vPortFree>
 80030ee:	e001      	b.n	80030f4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d013      	beq.n	8003122 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	2300      	movs	r3, #0
 80030fe:	9303      	str	r3, [sp, #12]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	9302      	str	r3, [sp, #8]
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f80e 	bl	8003132 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003116:	69f8      	ldr	r0, [r7, #28]
 8003118:	f000 f8a2 	bl	8003260 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800311c:	2301      	movs	r3, #1
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e002      	b.n	8003128 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003128:	69bb      	ldr	r3, [r7, #24]
    }
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	461a      	mov	r2, r3
 800314a:	21a5      	movs	r1, #165	; 0xa5
 800314c:	f004 fada 	bl	8007704 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800315a:	3b01      	subs	r3, #1
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f023 0307 	bic.w	r3, r3, #7
 8003168:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	617b      	str	r3, [r7, #20]
    }
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01f      	beq.n	80031d0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	e012      	b.n	80031bc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	7819      	ldrb	r1, [r3, #0]
 800319e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	3334      	adds	r3, #52	; 0x34
 80031a6:	460a      	mov	r2, r1
 80031a8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b09      	cmp	r3, #9
 80031c0:	d9e9      	bls.n	8003196 <prvInitialiseNewTask+0x64>
 80031c2:	e000      	b.n	80031c6 <prvInitialiseNewTask+0x94>
            {
                break;
 80031c4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031ce:	e003      	b.n	80031d8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d901      	bls.n	80031e2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031de:	2304      	movs	r3, #4
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ec:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	2200      	movs	r2, #0
 80031f2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	3304      	adds	r3, #4
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f96b 	bl	80024d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	3318      	adds	r3, #24
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f966 	bl	80024d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	f1c3 0205 	rsb	r2, r3, #5
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	3350      	adds	r3, #80	; 0x50
 8003222:	2204      	movs	r2, #4
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fa6c 	bl	8007704 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	3354      	adds	r3, #84	; 0x54
 8003230:	2201      	movs	r2, #1
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fa65 	bl	8007704 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	69b8      	ldr	r0, [r7, #24]
 8003240:	f001 fb68 	bl	8004914 <pxPortInitialiseStack>
 8003244:	4602      	mov	r2, r0
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003254:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003256:	bf00      	nop
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003268:	f001 fd04 	bl	8004c74 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800326c:	4b3b      	ldr	r3, [pc, #236]	; (800335c <prvAddNewTaskToReadyList+0xfc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	4a3a      	ldr	r2, [pc, #232]	; (800335c <prvAddNewTaskToReadyList+0xfc>)
 8003274:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003276:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <prvAddNewTaskToReadyList+0x100>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800327e:	4a38      	ldr	r2, [pc, #224]	; (8003360 <prvAddNewTaskToReadyList+0x100>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003284:	4b35      	ldr	r3, [pc, #212]	; (800335c <prvAddNewTaskToReadyList+0xfc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d110      	bne.n	80032ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800328c:	f000 fd06 	bl	8003c9c <prvInitialiseTaskLists>
 8003290:	e00d      	b.n	80032ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <prvAddNewTaskToReadyList+0x104>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <prvAddNewTaskToReadyList+0x100>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d802      	bhi.n	80032ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032a8:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <prvAddNewTaskToReadyList+0x100>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <prvAddNewTaskToReadyList+0x108>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3301      	adds	r3, #1
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <prvAddNewTaskToReadyList+0x108>)
 80032b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <prvAddNewTaskToReadyList+0x108>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <prvAddNewTaskToReadyList+0x94>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fd61 	bl	8006d90 <SEGGER_SYSVIEW_OnTaskCreate>
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	461d      	mov	r5, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461c      	mov	r4, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	1ae3      	subs	r3, r4, r3
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	462b      	mov	r3, r5
 80032f0:	f004 f880 	bl	80073f4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fdce 	bl	8006e98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2201      	movs	r2, #1
 8003302:	409a      	lsls	r2, r3
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <prvAddNewTaskToReadyList+0x10c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4313      	orrs	r3, r2
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <prvAddNewTaskToReadyList+0x10c>)
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4a15      	ldr	r2, [pc, #84]	; (8003370 <prvAddNewTaskToReadyList+0x110>)
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7ff f8e2 	bl	80024ee <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800332a:	f001 fcd3 	bl	8004cd4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <prvAddNewTaskToReadyList+0x104>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00e      	beq.n	8003354 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <prvAddNewTaskToReadyList+0x100>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	429a      	cmp	r2, r3
 8003342:	d207      	bcs.n	8003354 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <prvAddNewTaskToReadyList+0x114>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bdb0      	pop	{r4, r5, r7, pc}
 800335c:	200001a4 	.word	0x200001a4
 8003360:	200000cc 	.word	0x200000cc
 8003364:	200001b0 	.word	0x200001b0
 8003368:	200001c0 	.word	0x200001c0
 800336c:	200001ac 	.word	0x200001ac
 8003370:	200000d0 	.word	0x200000d0
 8003374:	e000ed04 	.word	0xe000ed04

08003378 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003380:	f001 fc78 	bl	8004c74 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <vTaskDelete+0x18>
 800338a:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <vTaskDelete+0x12c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e000      	b.n	8003392 <vTaskDelete+0x1a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3304      	adds	r3, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f905 	bl	80025a8 <uxListRemove>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d115      	bne.n	80033d0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	493f      	ldr	r1, [pc, #252]	; (80034a8 <vTaskDelete+0x130>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <vTaskDelete+0x58>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	2201      	movs	r2, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43da      	mvns	r2, r3
 80033c6:	4b39      	ldr	r3, [pc, #228]	; (80034ac <vTaskDelete+0x134>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4013      	ands	r3, r2
 80033cc:	4a37      	ldr	r2, [pc, #220]	; (80034ac <vTaskDelete+0x134>)
 80033ce:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3318      	adds	r3, #24
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff f8e3 	bl	80025a8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80033e2:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <vTaskDelete+0x138>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <vTaskDelete+0x138>)
 80033ea:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <vTaskDelete+0x12c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d118      	bne.n	8003428 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	482d      	ldr	r0, [pc, #180]	; (80034b4 <vTaskDelete+0x13c>)
 80033fe:	f7ff f876 	bl	80024ee <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003402:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <vTaskDelete+0x140>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <vTaskDelete+0x140>)
 800340a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f003 fde4 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8003414:	4603      	mov	r3, r0
 8003416:	4619      	mov	r1, r3
 8003418:	2022      	movs	r0, #34	; 0x22
 800341a:	f002 ffbd 	bl	8006398 <SEGGER_SYSVIEW_RecordU32>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f004 f84f 	bl	80074c4 <SYSVIEW_DeleteTask>
 8003426:	e016      	b.n	8003456 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <vTaskDelete+0x144>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3b01      	subs	r3, #1
 800342e:	4a23      	ldr	r2, [pc, #140]	; (80034bc <vTaskDelete+0x144>)
 8003430:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fdd1 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 800343a:	4603      	mov	r3, r0
 800343c:	4619      	mov	r1, r3
 800343e:	2022      	movs	r0, #34	; 0x22
 8003440:	f002 ffaa 	bl	8006398 <SEGGER_SYSVIEW_RecordU32>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4618      	mov	r0, r3
 8003448:	f004 f83c 	bl	80074c4 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fc93 	bl	8003d78 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003452:	f000 fca1 	bl	8003d98 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003456:	f001 fc3d 	bl	8004cd4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800345a:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <vTaskDelete+0x148>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01b      	beq.n	800349a <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <vTaskDelete+0x12c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	429a      	cmp	r2, r3
 800346a:	d116      	bne.n	800349a <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <vTaskDelete+0x14c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <vTaskDelete+0x112>
        __asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	60bb      	str	r3, [r7, #8]
    }
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <vTaskDelete+0x150>)
 800348c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200000cc 	.word	0x200000cc
 80034a8:	200000d0 	.word	0x200000d0
 80034ac:	200001ac 	.word	0x200001ac
 80034b0:	200001c0 	.word	0x200001c0
 80034b4:	20000178 	.word	0x20000178
 80034b8:	2000018c 	.word	0x2000018c
 80034bc:	200001a4 	.word	0x200001a4
 80034c0:	200001b0 	.word	0x200001b0
 80034c4:	200001cc 	.word	0x200001cc
 80034c8:	e000ed04 	.word	0xe000ed04

080034cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01b      	beq.n	8003516 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <vTaskDelay+0x68>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <vTaskDelay+0x30>
        __asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	60bb      	str	r3, [r7, #8]
    }
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80034fc:	f000 f880 	bl	8003600 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	2023      	movs	r0, #35	; 0x23
 8003504:	f002 ff48 	bl	8006398 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fe78 	bl	8004200 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003510:	f000 f884 	bl	800361c <xTaskResumeAll>
 8003514:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <vTaskDelay+0x6c>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200001cc 	.word	0x200001cc
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003542:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <vTaskStartScheduler+0xa4>)
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	2282      	movs	r2, #130	; 0x82
 800354e:	4925      	ldr	r1, [pc, #148]	; (80035e4 <vTaskStartScheduler+0xa8>)
 8003550:	4825      	ldr	r0, [pc, #148]	; (80035e8 <vTaskStartScheduler+0xac>)
 8003552:	f7ff fdad 	bl	80030b0 <xTaskCreate>
 8003556:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800355e:	f000 fec7 	bl	80042f0 <xTimerCreateTimerTask>
 8003562:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d124      	bne.n	80035b4 <vTaskStartScheduler+0x78>
        __asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60bb      	str	r3, [r7, #8]
    }
 800357c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <vTaskStartScheduler+0xb0>)
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <vTaskStartScheduler+0xb4>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <vTaskStartScheduler+0xb8>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <vTaskStartScheduler+0xbc>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <vTaskStartScheduler+0xa4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d102      	bne.n	80035a4 <vTaskStartScheduler+0x68>
 800359e:	f003 fbdb 	bl	8006d58 <SEGGER_SYSVIEW_OnIdle>
 80035a2:	e004      	b.n	80035ae <vTaskStartScheduler+0x72>
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <vTaskStartScheduler+0xbc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 fc33 	bl	8006e14 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80035ae:	f001 fa41 	bl	8004a34 <xPortStartScheduler>
 80035b2:	e00e      	b.n	80035d2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d10a      	bne.n	80035d2 <vTaskStartScheduler+0x96>
        __asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	607b      	str	r3, [r7, #4]
    }
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <vTaskStartScheduler+0xc0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200001c8 	.word	0x200001c8
 80035e4:	080077b0 	.word	0x080077b0
 80035e8:	08003c6d 	.word	0x08003c6d
 80035ec:	200001c4 	.word	0x200001c4
 80035f0:	200001b0 	.word	0x200001b0
 80035f4:	200001a8 	.word	0x200001a8
 80035f8:	200000cc 	.word	0x200000cc
 80035fc:	2000000c 	.word	0x2000000c

08003600 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <vTaskSuspendAll+0x18>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	4a03      	ldr	r2, [pc, #12]	; (8003618 <vTaskSuspendAll+0x18>)
 800360c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	200001cc 	.word	0x200001cc

0800361c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800362a:	4b43      	ldr	r3, [pc, #268]	; (8003738 <xTaskResumeAll+0x11c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <xTaskResumeAll+0x2c>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	603b      	str	r3, [r7, #0]
    }
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003648:	f001 fb14 	bl	8004c74 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800364c:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <xTaskResumeAll+0x11c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3b01      	subs	r3, #1
 8003652:	4a39      	ldr	r2, [pc, #228]	; (8003738 <xTaskResumeAll+0x11c>)
 8003654:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003656:	4b38      	ldr	r3, [pc, #224]	; (8003738 <xTaskResumeAll+0x11c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d165      	bne.n	800372a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <xTaskResumeAll+0x120>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d061      	beq.n	800372a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003666:	e032      	b.n	80036ce <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <xTaskResumeAll+0x124>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3318      	adds	r3, #24
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe ff97 	bl	80025a8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe ff92 	bl	80025a8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4618      	mov	r0, r3
 8003688:	f003 fc06 	bl	8006e98 <SEGGER_SYSVIEW_OnTaskStartReady>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2201      	movs	r2, #1
 8003692:	409a      	lsls	r2, r3
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <xTaskResumeAll+0x128>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <xTaskResumeAll+0x128>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <xTaskResumeAll+0x12c>)
 80036ac:	441a      	add	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fe ff1a 	bl	80024ee <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	4b23      	ldr	r3, [pc, #140]	; (800374c <xTaskResumeAll+0x130>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <xTaskResumeAll+0x134>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <xTaskResumeAll+0x124>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1c8      	bne.n	8003668 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80036dc:	f000 fb5c 	bl	8003d98 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <xTaskResumeAll+0x138>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80036ec:	f000 f858 	bl	80037a0 <xTaskIncrementTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <xTaskResumeAll+0x134>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f1      	bne.n	80036ec <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <xTaskResumeAll+0x138>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <xTaskResumeAll+0x134>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <xTaskResumeAll+0x13c>)
 800371c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800372a:	f001 fad3 	bl	8004cd4 <vPortExitCritical>

    return xAlreadyYielded;
 800372e:	68bb      	ldr	r3, [r7, #8]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200001cc 	.word	0x200001cc
 800373c:	200001a4 	.word	0x200001a4
 8003740:	20000164 	.word	0x20000164
 8003744:	200001ac 	.word	0x200001ac
 8003748:	200000d0 	.word	0x200000d0
 800374c:	200000cc 	.word	0x200000cc
 8003750:	200001b8 	.word	0x200001b8
 8003754:	200001b4 	.word	0x200001b4
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <xTaskGetTickCount+0x1c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003768:	687b      	ldr	r3, [r7, #4]
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200001a8 	.word	0x200001a8

0800377c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003782:	f001 fb63 	bl	8004e4c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <xTaskGetTickCountFromISR+0x20>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003790:	683b      	ldr	r3, [r7, #0]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200001a8 	.word	0x200001a8

080037a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037aa:	4b50      	ldr	r3, [pc, #320]	; (80038ec <xTaskIncrementTick+0x14c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8092 	bne.w	80038d8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037b4:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <xTaskIncrementTick+0x150>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80037bc:	4a4c      	ldr	r2, [pc, #304]	; (80038f0 <xTaskIncrementTick+0x150>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d120      	bne.n	800380a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80037c8:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <xTaskIncrementTick+0x154>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <xTaskIncrementTick+0x48>
        __asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	603b      	str	r3, [r7, #0]
    }
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xTaskIncrementTick+0x46>
 80037e8:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <xTaskIncrementTick+0x154>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <xTaskIncrementTick+0x158>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <xTaskIncrementTick+0x154>)
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <xTaskIncrementTick+0x158>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <xTaskIncrementTick+0x15c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <xTaskIncrementTick+0x15c>)
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	f000 fac7 	bl	8003d98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <xTaskIncrementTick+0x160>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d34c      	bcc.n	80038ae <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003814:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <xTaskIncrementTick+0x154>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <xTaskIncrementTick+0x160>)
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	601a      	str	r2, [r3, #0]
                    break;
 8003826:	e042      	b.n	80038ae <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <xTaskIncrementTick+0x154>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d203      	bcs.n	8003848 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003840:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <xTaskIncrementTick+0x160>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003846:	e032      	b.n	80038ae <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	3304      	adds	r3, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe feab 	bl	80025a8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3318      	adds	r3, #24
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fea2 	bl	80025a8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f003 fb16 	bl	8006e98 <SEGGER_SYSVIEW_OnTaskStartReady>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	2201      	movs	r2, #1
 8003872:	409a      	lsls	r2, r3
 8003874:	4b23      	ldr	r3, [pc, #140]	; (8003904 <xTaskIncrementTick+0x164>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	4a22      	ldr	r2, [pc, #136]	; (8003904 <xTaskIncrementTick+0x164>)
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <xTaskIncrementTick+0x168>)
 800388c:	441a      	add	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3304      	adds	r3, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7fe fe2a 	bl	80024ee <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xTaskIncrementTick+0x16c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d3b5      	bcc.n	8003814 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ac:	e7b2      	b.n	8003814 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <xTaskIncrementTick+0x16c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4914      	ldr	r1, [pc, #80]	; (8003908 <xTaskIncrementTick+0x168>)
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d901      	bls.n	80038ca <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTaskIncrementTick+0x170>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80038d2:	2301      	movs	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e004      	b.n	80038e2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <xTaskIncrementTick+0x174>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <xTaskIncrementTick+0x174>)
 80038e0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80038e2:	697b      	ldr	r3, [r7, #20]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200001cc 	.word	0x200001cc
 80038f0:	200001a8 	.word	0x200001a8
 80038f4:	2000015c 	.word	0x2000015c
 80038f8:	20000160 	.word	0x20000160
 80038fc:	200001bc 	.word	0x200001bc
 8003900:	200001c4 	.word	0x200001c4
 8003904:	200001ac 	.word	0x200001ac
 8003908:	200000d0 	.word	0x200000d0
 800390c:	200000cc 	.word	0x200000cc
 8003910:	200001b8 	.word	0x200001b8
 8003914:	200001b4 	.word	0x200001b4

08003918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800391e:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <vTaskSwitchContext+0xbc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <vTaskSwitchContext+0xc0>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800392c:	e04d      	b.n	80039ca <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800392e:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <vTaskSwitchContext+0xc0>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <vTaskSwitchContext+0xc4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	f1c3 031f 	rsb	r3, r3, #31
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4925      	ldr	r1, [pc, #148]	; (80039e0 <vTaskSwitchContext+0xc8>)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vTaskSwitchContext+0x5c>
        __asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
    }
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskSwitchContext+0x5a>
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <vTaskSwitchContext+0xc8>)
 8003980:	4413      	add	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3308      	adds	r3, #8
 8003996:	429a      	cmp	r2, r3
 8003998:	d104      	bne.n	80039a4 <vTaskSwitchContext+0x8c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <vTaskSwitchContext+0xcc>)
 80039ac:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <vTaskSwitchContext+0xcc>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <vTaskSwitchContext+0xd0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d102      	bne.n	80039c0 <vTaskSwitchContext+0xa8>
 80039ba:	f003 f9cd 	bl	8006d58 <SEGGER_SYSVIEW_OnIdle>
}
 80039be:	e004      	b.n	80039ca <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <vTaskSwitchContext+0xcc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f003 fa25 	bl	8006e14 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200001cc 	.word	0x200001cc
 80039d8:	200001b8 	.word	0x200001b8
 80039dc:	200001ac 	.word	0x200001ac
 80039e0:	200000d0 	.word	0x200000d0
 80039e4:	200000cc 	.word	0x200000cc
 80039e8:	200001c8 	.word	0x200001c8

080039ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	60fb      	str	r3, [r7, #12]
    }
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <vTaskPlaceOnEventList+0x44>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3318      	adds	r3, #24
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fd8b 	bl	8002536 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a20:	2101      	movs	r1, #1
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	f000 fbec 	bl	8004200 <prvAddCurrentTaskToDelayedList>
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200000cc 	.word	0x200000cc

08003a34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	617b      	str	r3, [r7, #20]
    }
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <vTaskPlaceOnEventListRestricted+0x58>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3318      	adds	r3, #24
 8003a62:	4619      	mov	r1, r3
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7fe fd42 	bl	80024ee <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003a76:	2024      	movs	r0, #36	; 0x24
 8003a78:	f002 fc70 	bl	800635c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f000 fbbe 	bl	8004200 <prvAddCurrentTaskToDelayedList>
    }
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200000cc 	.word	0x200000cc

08003a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	60fb      	str	r3, [r7, #12]
    }
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3318      	adds	r3, #24
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fd71 	bl	80025a8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <xTaskRemoveFromEventList+0xb4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d120      	bne.n	8003b10 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fd68 	bl	80025a8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 f9dc 	bl	8006e98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <xTaskRemoveFromEventList+0xb8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <xTaskRemoveFromEventList+0xb8>)
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <xTaskRemoveFromEventList+0xbc>)
 8003b00:	441a      	add	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f7fe fcf0 	bl	80024ee <vListInsertEnd>
 8003b0e:	e005      	b.n	8003b1c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3318      	adds	r3, #24
 8003b14:	4619      	mov	r1, r3
 8003b16:	480e      	ldr	r0, [pc, #56]	; (8003b50 <xTaskRemoveFromEventList+0xc0>)
 8003b18:	f7fe fce9 	bl	80024ee <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <xTaskRemoveFromEventList+0xc4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d905      	bls.n	8003b36 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <xTaskRemoveFromEventList+0xc8>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e001      	b.n	8003b3a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003b3a:	697b      	ldr	r3, [r7, #20]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200001cc 	.word	0x200001cc
 8003b48:	200001ac 	.word	0x200001ac
 8003b4c:	200000d0 	.word	0x200000d0
 8003b50:	20000164 	.word	0x20000164
 8003b54:	200000cc 	.word	0x200000cc
 8003b58:	200001b8 	.word	0x200001b8

08003b5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <vTaskInternalSetTimeOutState+0x24>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <vTaskInternalSetTimeOutState+0x28>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	605a      	str	r2, [r3, #4]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	200001bc 	.word	0x200001bc
 8003b84:	200001a8 	.word	0x200001a8

08003b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
    }
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	60fb      	str	r3, [r7, #12]
    }
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003bca:	f001 f853 	bl	8004c74 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003bce:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <xTaskCheckForTimeOut+0xc4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d102      	bne.n	8003bee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e026      	b.n	8003c3c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <xTaskCheckForTimeOut+0xc8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d00a      	beq.n	8003c10 <xTaskCheckForTimeOut+0x88>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d305      	bcc.n	8003c10 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003c04:	2301      	movs	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e015      	b.n	8003c3c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d20b      	bcs.n	8003c32 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff98 	bl	8003b5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e004      	b.n	8003c3c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003c3c:	f001 f84a 	bl	8004cd4 <vPortExitCritical>

    return xReturn;
 8003c40:	69fb      	ldr	r3, [r7, #28]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200001a8 	.word	0x200001a8
 8003c50:	200001bc 	.word	0x200001bc

08003c54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <vTaskMissedYield+0x14>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	200001b8 	.word	0x200001b8

08003c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c74:	f000 f852 	bl	8003d1c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <prvIdleTask+0x28>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d9f9      	bls.n	8003c74 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <prvIdleTask+0x2c>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c90:	e7f0      	b.n	8003c74 <prvIdleTask+0x8>
 8003c92:	bf00      	nop
 8003c94:	200000d0 	.word	0x200000d0
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	e00c      	b.n	8003cc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <prvInitialiseTaskLists+0x60>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fbec 	bl	8002494 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d9ef      	bls.n	8003ca8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003cc8:	480d      	ldr	r0, [pc, #52]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cca:	f7fe fbe3 	bl	8002494 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003cce:	480d      	ldr	r0, [pc, #52]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cd0:	f7fe fbe0 	bl	8002494 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003cd4:	480c      	ldr	r0, [pc, #48]	; (8003d08 <prvInitialiseTaskLists+0x6c>)
 8003cd6:	f7fe fbdd 	bl	8002494 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003cda:	480c      	ldr	r0, [pc, #48]	; (8003d0c <prvInitialiseTaskLists+0x70>)
 8003cdc:	f7fe fbda 	bl	8002494 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <prvInitialiseTaskLists+0x74>)
 8003ce2:	f7fe fbd7 	bl	8002494 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <prvInitialiseTaskLists+0x78>)
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvInitialiseTaskLists+0x7c>)
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200000d0 	.word	0x200000d0
 8003d00:	20000134 	.word	0x20000134
 8003d04:	20000148 	.word	0x20000148
 8003d08:	20000164 	.word	0x20000164
 8003d0c:	20000178 	.word	0x20000178
 8003d10:	20000190 	.word	0x20000190
 8003d14:	2000015c 	.word	0x2000015c
 8003d18:	20000160 	.word	0x20000160

08003d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d22:	e019      	b.n	8003d58 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003d24:	f000 ffa6 	bl	8004c74 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <prvCheckTasksWaitingTermination+0x50>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fc37 	bl	80025a8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d42:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d4c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003d4e:	f000 ffc1 	bl	8004cd4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f810 	bl	8003d78 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e1      	bne.n	8003d24 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000178 	.word	0x20000178
 8003d70:	200001a4 	.word	0x200001a4
 8003d74:	2000018c 	.word	0x2000018c

08003d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 f981 	bl	800508c <vPortFree>
                vPortFree( pxTCB );
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f97e 	bl	800508c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <prvResetNextTaskUnblockTime+0x30>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <prvResetNextTaskUnblockTime+0x34>)
 8003da8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003dae:	e005      	b.n	8003dbc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <prvResetNextTaskUnblockTime+0x30>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <prvResetNextTaskUnblockTime+0x34>)
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2000015c 	.word	0x2000015c
 8003dcc:	200001c4 	.word	0x200001c4

08003dd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <xTaskGetSchedulerState+0x34>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003dde:	2301      	movs	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	e008      	b.n	8003df6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <xTaskGetSchedulerState+0x38>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003dec:	2302      	movs	r3, #2
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e001      	b.n	8003df6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003df6:	687b      	ldr	r3, [r7, #4]
    }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	200001b0 	.word	0x200001b0
 8003e08:	200001cc 	.word	0x200001cc

08003e0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d068      	beq.n	8003ef4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <xTaskPriorityDisinherit+0xf4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d00a      	beq.n	8003e42 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	60fb      	str	r3, [r7, #12]
    }
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60bb      	str	r3, [r7, #8]
    }
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d03e      	beq.n	8003ef4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d13a      	bne.n	8003ef4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fb90 	bl	80025a8 <uxListRemove>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	2201      	movs	r2, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003ea2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	204a      	movs	r0, #74	; 0x4a
 8003eaa:	f002 fa75 	bl	8006398 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f1c3 0205 	rsb	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <xTaskPriorityDisinherit+0xfc>)
 8003ee2:	441a      	add	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f7fe faff 	bl	80024ee <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ef4:	697b      	ldr	r3, [r7, #20]
    }
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200000cc 	.word	0x200000cc
 8003f04:	200001ac 	.word	0x200001ac
 8003f08:	200000d0 	.word	0x200000d0

08003f0c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
    }
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003f36:	f000 fe9d 	bl	8004c74 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003f3a:	4b36      	ldr	r3, [pc, #216]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	3354      	adds	r3, #84	; 0x54
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d022      	beq.n	8003f92 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003f4c:	4b31      	ldr	r3, [pc, #196]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	3214      	adds	r2, #20
 8003f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	43d2      	mvns	r2, r2
 8003f5c:	4011      	ands	r1, r2
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	3214      	adds	r2, #20
 8003f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3354      	adds	r3, #84	; 0x54
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	6a38      	ldr	r0, [r7, #32]
 8003f7e:	f000 f93f 	bl	8004200 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003f82:	4b25      	ldr	r3, [pc, #148]	; (8004018 <xTaskGenericNotifyWait+0x10c>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f92:	f000 fe9f 	bl	8004cd4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003f96:	f000 fe6d 	bl	8004c74 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	2040      	movs	r0, #64	; 0x40
 8003fa8:	f002 fb02 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	3214      	adds	r2, #20
 8003fba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	3354      	adds	r3, #84	; 0x54
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d002      	beq.n	8003fda <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e00e      	b.n	8003ff8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	3214      	adds	r2, #20
 8003fe2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	43d2      	mvns	r2, r2
 8003fea:	4011      	ands	r1, r2
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	3214      	adds	r2, #20
 8003ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	3354      	adds	r3, #84	; 0x54
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004006:	f000 fe65 	bl	8004cd4 <vPortExitCritical>

        return xReturn;
 800400a:	697b      	ldr	r3, [r7, #20]
    }
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200000cc 	.word	0x200000cc
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800401c:	b580      	push	{r7, lr}
 800401e:	b08e      	sub	sp, #56	; 0x38
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800402a:	2301      	movs	r3, #1
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <xTaskGenericNotify+0x2e>
        __asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	623b      	str	r3, [r7, #32]
    }
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xTaskGenericNotify+0x4a>
        __asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	61fb      	str	r3, [r7, #28]
    }
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800406a:	f000 fe03 	bl	8004c74 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	3214      	adds	r2, #20
 800407a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4413      	add	r3, r2
 8004088:	3354      	adds	r3, #84	; 0x54
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4413      	add	r3, r2
 8004096:	3354      	adds	r3, #84	; 0x54
 8004098:	2202      	movs	r2, #2
 800409a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d83b      	bhi.n	800411a <xTaskGenericNotify+0xfe>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <xTaskGenericNotify+0x8c>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	08004139 	.word	0x08004139
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040f1 	.word	0x080040f1
 80040b8:	080040ff 	.word	0x080040ff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	3214      	adds	r2, #20
 80040c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	3214      	adds	r2, #20
 80040d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040d6:	e032      	b.n	800413e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	3214      	adds	r2, #20
 80040de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e2:	1c59      	adds	r1, r3, #1
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	3214      	adds	r2, #20
 80040ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040ee:	e026      	b.n	800413e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	3214      	adds	r2, #20
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040fc:	e01f      	b.n	800413e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80040fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004102:	2b02      	cmp	r3, #2
 8004104:	d006      	beq.n	8004114 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	3214      	adds	r2, #20
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004112:	e014      	b.n	800413e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004114:	2300      	movs	r3, #0
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004118:	e011      	b.n	800413e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <xTaskGenericNotify+0x1d0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <xTaskGenericNotify+0x120>
        __asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	61bb      	str	r3, [r7, #24]
    }
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <xTaskGenericNotify+0x11a>
                    break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <xTaskGenericNotify+0x122>

                    break;
 800413c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	4618      	mov	r0, r3
 8004142:	f002 ff4b 	bl	8006fdc <SEGGER_SYSVIEW_ShrinkId>
 8004146:	4601      	mov	r1, r0
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	203e      	movs	r0, #62	; 0x3e
 8004154:	f002 fa2c 	bl	80065b0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800415c:	2b01      	cmp	r3, #1
 800415e:	d13d      	bne.n	80041dc <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fa1f 	bl	80025a8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	4618      	mov	r0, r3
 800416e:	f002 fe93 	bl	8006e98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <xTaskGenericNotify+0x1d4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <xTaskGenericNotify+0x1d4>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <xTaskGenericNotify+0x1d8>)
 8004192:	441a      	add	r2, r3
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f7fe f9a7 	bl	80024ee <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <xTaskGenericNotify+0x1a2>
        __asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	617b      	str	r3, [r7, #20]
    }
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <xTaskGenericNotify+0x1dc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d907      	bls.n	80041dc <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <xTaskGenericNotify+0x1e0>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041dc:	f000 fd7a 	bl	8004cd4 <vPortExitCritical>

        return xReturn;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80041e2:	4618      	mov	r0, r3
 80041e4:	3730      	adds	r7, #48	; 0x30
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200001a8 	.word	0x200001a8
 80041f0:	200001ac 	.word	0x200001ac
 80041f4:	200000d0 	.word	0x200000d0
 80041f8:	200000cc 	.word	0x200000cc
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800420a:	4b32      	ldr	r3, [pc, #200]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3304      	adds	r3, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe f9c6 	bl	80025a8 <uxListRemove>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004222:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2201      	movs	r2, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4013      	ands	r3, r2
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8004238:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d110      	bne.n	8004264 <prvAddCurrentTaskToDelayedList+0x64>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004248:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	211b      	movs	r1, #27
 800424e:	4618      	mov	r0, r3
 8004250:	f002 fe64 	bl	8006f1c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	4619      	mov	r1, r3
 800425c:	4820      	ldr	r0, [pc, #128]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800425e:	f7fe f946 	bl	80024ee <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004262:	e032      	b.n	80042ca <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	429a      	cmp	r2, r3
 800427a:	d20f      	bcs.n	800429c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800427c:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2104      	movs	r1, #4
 8004282:	4618      	mov	r0, r3
 8004284:	f002 fe4a 	bl	8006f1c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3304      	adds	r3, #4
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f7fe f94e 	bl	8002536 <vListInsert>
}
 800429a:	e016      	b.n	80042ca <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2104      	movs	r1, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f002 fe3a 	bl	8006f1c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fe f93e 	bl	8002536 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <prvAddCurrentTaskToDelayedList+0xec>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d202      	bcs.n	80042ca <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <prvAddCurrentTaskToDelayedList+0xec>)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6013      	str	r3, [r2, #0]
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	200001a8 	.word	0x200001a8
 80042d8:	200000cc 	.word	0x200000cc
 80042dc:	200001ac 	.word	0x200001ac
 80042e0:	20000190 	.word	0x20000190
 80042e4:	20000160 	.word	0x20000160
 80042e8:	2000015c 	.word	0x2000015c
 80042ec:	200001c4 	.word	0x200001c4

080042f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80042fa:	f000 fad5 	bl	80048a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <xTimerCreateTimerTask+0x54>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <xTimerCreateTimerTask+0x58>)
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	2302      	movs	r3, #2
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004314:	490d      	ldr	r1, [pc, #52]	; (800434c <xTimerCreateTimerTask+0x5c>)
 8004316:	480e      	ldr	r0, [pc, #56]	; (8004350 <xTimerCreateTimerTask+0x60>)
 8004318:	f7fe feca 	bl	80030b0 <xTaskCreate>
 800431c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	603b      	str	r3, [r7, #0]
    }
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800433a:	687b      	ldr	r3, [r7, #4]
    }
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000200 	.word	0x20000200
 8004348:	20000204 	.word	0x20000204
 800434c:	080077b8 	.word	0x080077b8
 8004350:	08004489 	.word	0x08004489

08004354 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xTimerGenericCommand+0x2e>
        __asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	623b      	str	r3, [r7, #32]
    }
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004382:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <xTimerGenericCommand+0x98>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d02a      	beq.n	80043e0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b05      	cmp	r3, #5
 800439a:	dc18      	bgt.n	80043ce <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800439c:	f7ff fd18 	bl	8003dd0 <xTaskGetSchedulerState>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d109      	bne.n	80043ba <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <xTimerGenericCommand+0x98>)
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	f107 0114 	add.w	r1, r7, #20
 80043ae:	2300      	movs	r3, #0
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	f7fe fa13 	bl	80027dc <xQueueGenericSend>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24
 80043b8:	e012      	b.n	80043e0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <xTimerGenericCommand+0x98>)
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	f107 0114 	add.w	r1, r7, #20
 80043c2:	2300      	movs	r3, #0
 80043c4:	2200      	movs	r2, #0
 80043c6:	f7fe fa09 	bl	80027dc <xQueueGenericSend>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24
 80043cc:	e008      	b.n	80043e0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <xTimerGenericCommand+0x98>)
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f107 0114 	add.w	r1, r7, #20
 80043d6:	2300      	movs	r3, #0
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	f7fe fb25 	bl	8002a28 <xQueueGenericSendFromISR>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	; 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000200 	.word	0x20000200

080043f0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fa:	4b22      	ldr	r3, [pc, #136]	; (8004484 <prvProcessExpiredTimer+0x94>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe f8cd 	bl	80025a8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d022      	beq.n	8004462 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	18d1      	adds	r1, r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	6978      	ldr	r0, [r7, #20]
 800442a:	f000 f8d1 	bl	80045d0 <prvInsertTimerInActiveList>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01f      	beq.n	8004474 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	2100      	movs	r1, #0
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f7ff ff88 	bl	8004354 <xTimerGenericCommand>
 8004444:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	60fb      	str	r3, [r7, #12]
    }
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	b2da      	uxtb	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	4798      	blx	r3
    }
 800447c:	bf00      	nop
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	200001f8 	.word	0x200001f8

08004488 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f857 	bl	8004548 <prvGetNextExpireTime>
 800449a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f803 	bl	80044ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80044a6:	f000 f8d5 	bl	8004654 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044aa:	e7f1      	b.n	8004490 <prvTimerTask+0x8>

080044ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044b6:	f7ff f8a3 	bl	8003600 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f866 	bl	8004590 <prvSampleTimeNow>
 80044c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d130      	bne.n	800452e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <prvProcessTimerOrBlockTask+0x3c>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d806      	bhi.n	80044e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80044da:	f7ff f89f 	bl	800361c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff85 	bl	80043f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80044e6:	e024      	b.n	8004532 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <prvProcessTimerOrBlockTask+0x90>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <prvProcessTimerOrBlockTask+0x50>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <prvProcessTimerOrBlockTask+0x52>
 80044fc:	2300      	movs	r3, #0
 80044fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <prvProcessTimerOrBlockTask+0x94>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	f7fe fd9b 	bl	8003048 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004512:	f7ff f883 	bl	800361c <xTaskResumeAll>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <prvProcessTimerOrBlockTask+0x98>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
    }
 800452c:	e001      	b.n	8004532 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800452e:	f7ff f875 	bl	800361c <xTaskResumeAll>
    }
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200001fc 	.word	0x200001fc
 8004540:	20000200 	.word	0x20000200
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <prvGetNextExpireTime+0x44>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <prvGetNextExpireTime+0x16>
 800455a:	2201      	movs	r2, #1
 800455c:	e000      	b.n	8004560 <prvGetNextExpireTime+0x18>
 800455e:	2200      	movs	r2, #0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <prvGetNextExpireTime+0x44>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e001      	b.n	800457c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800457c:	68fb      	ldr	r3, [r7, #12]
    }
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	200001f8 	.word	0x200001f8

08004590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004598:	f7ff f8e0 	bl	800375c <xTaskGetTickCount>
 800459c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <prvSampleTimeNow+0x3c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d205      	bcs.n	80045b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80045a8:	f000 f91a 	bl	80047e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e002      	b.n	80045ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045ba:	4a04      	ldr	r2, [pc, #16]	; (80045cc <prvSampleTimeNow+0x3c>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045c0:	68fb      	ldr	r3, [r7, #12]
    }
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000208 	.word	0x20000208

080045d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d812      	bhi.n	800461c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e01b      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <prvInsertTimerInActiveList+0x7c>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fd ff8e 	bl	8002536 <vListInsert>
 800461a:	e012      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d206      	bcs.n	8004632 <prvInsertTimerInActiveList+0x62>
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e007      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <prvInsertTimerInActiveList+0x80>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fd ff7a 	bl	8002536 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004642:	697b      	ldr	r3, [r7, #20]
    }
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200001fc 	.word	0x200001fc
 8004650:	200001f8 	.word	0x200001f8

08004654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800465a:	e0ae      	b.n	80047ba <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f2c0 80aa 	blt.w	80047b8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fd ff97 	bl	80025a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff87 	bl	8004590 <prvSampleTimeNow>
 8004682:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b09      	cmp	r3, #9
 8004688:	f200 8097 	bhi.w	80047ba <prvProcessReceivedCommands+0x166>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <prvProcessReceivedCommands+0x40>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046bd 	.word	0x080046bd
 80046a0:	08004731 	.word	0x08004731
 80046a4:	08004745 	.word	0x08004745
 80046a8:	0800478f 	.word	0x0800478f
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046bd 	.word	0x080046bd
 80046b4:	08004731 	.word	0x08004731
 80046b8:	08004745 	.word	0x08004745
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	18d1      	adds	r1, r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046dc:	f7ff ff78 	bl	80045d0 <prvInsertTimerInActiveList>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d069      	beq.n	80047ba <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ec:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d05e      	beq.n	80047ba <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	441a      	add	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	2100      	movs	r1, #0
 800470c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470e:	f7ff fe21 	bl	8004354 <xTimerGenericCommand>
 8004712:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d14f      	bne.n	80047ba <prvProcessReceivedCommands+0x166>
        __asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	61bb      	str	r3, [r7, #24]
    }
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004742:	e03a      	b.n	80047ba <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	617b      	str	r3, [r7, #20]
    }
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	18d1      	adds	r1, r2, r3
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004788:	f7ff ff22 	bl	80045d0 <prvInsertTimerInActiveList>
                        break;
 800478c:	e015      	b.n	80047ba <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800479c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800479e:	f000 fc75 	bl	800508c <vPortFree>
 80047a2:	e00a      	b.n	80047ba <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80047b6:	e000      	b.n	80047ba <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80047b8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <prvProcessReceivedCommands+0x188>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f107 0108 	add.w	r1, r7, #8
 80047c2:	2200      	movs	r2, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe f9ed 	bl	8002ba4 <xQueueReceive>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f af45 	bne.w	800465c <prvProcessReceivedCommands+0x8>
        }
    }
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000200 	.word	0x20000200

080047e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047e6:	e048      	b.n	800487a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f2:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3304      	adds	r3, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f7fd fed1 	bl	80025a8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02e      	beq.n	800487a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90e      	bls.n	800484c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fd fe76 	bl	8002536 <vListInsert>
 800484a:	e016      	b.n	800487a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	2100      	movs	r1, #0
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fd7c 	bl	8004354 <xTimerGenericCommand>
 800485c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	603b      	str	r3, [r7, #0]
    }
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1b1      	bne.n	80047e8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <prvSwitchTimerLists+0xc4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 8004890:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <prvSwitchTimerLists+0xc4>)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6013      	str	r3, [r2, #0]
    }
 8004898:	bf00      	nop
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	200001f8 	.word	0x200001f8
 80048a4:	200001fc 	.word	0x200001fc

080048a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80048ac:	f000 f9e2 	bl	8004c74 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d11d      	bne.n	80048f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048b8:	4811      	ldr	r0, [pc, #68]	; (8004900 <prvCheckForValidListAndQueue+0x58>)
 80048ba:	f7fd fdeb 	bl	8002494 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048be:	4811      	ldr	r0, [pc, #68]	; (8004904 <prvCheckForValidListAndQueue+0x5c>)
 80048c0:	f7fd fde8 	bl	8002494 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80048c4:	4b10      	ldr	r3, [pc, #64]	; (8004908 <prvCheckForValidListAndQueue+0x60>)
 80048c6:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <prvCheckForValidListAndQueue+0x58>)
 80048c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <prvCheckForValidListAndQueue+0x64>)
 80048cc:	4a0d      	ldr	r2, [pc, #52]	; (8004904 <prvCheckForValidListAndQueue+0x5c>)
 80048ce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80048d0:	2200      	movs	r2, #0
 80048d2:	210c      	movs	r1, #12
 80048d4:	200a      	movs	r0, #10
 80048d6:	f7fd fef9 	bl	80026cc <xQueueGenericCreate>
 80048da:	4603      	mov	r3, r0
 80048dc:	4a07      	ldr	r2, [pc, #28]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048de:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4908      	ldr	r1, [pc, #32]	; (8004910 <prvCheckForValidListAndQueue+0x68>)
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fb78 	bl	8002fe4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80048f4:	f000 f9ee 	bl	8004cd4 <vPortExitCritical>
    }
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000200 	.word	0x20000200
 8004900:	200001d0 	.word	0x200001d0
 8004904:	200001e4 	.word	0x200001e4
 8004908:	200001f8 	.word	0x200001f8
 800490c:	200001fc 	.word	0x200001fc
 8004910:	080077c0 	.word	0x080077c0

08004914 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b04      	subs	r3, #4
 8004924:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800492c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b04      	subs	r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3b04      	subs	r3, #4
 8004942:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004944:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <pxPortInitialiseStack+0x64>)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3b14      	subs	r3, #20
 800494e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b04      	subs	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f06f 0202 	mvn.w	r2, #2
 8004962:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3b20      	subs	r3, #32
 8004968:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	0800497d 	.word	0x0800497d

0800497c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <prvTaskExitError+0x54>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d00a      	beq.n	80049a6 <prvTaskExitError+0x2a>
        __asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
    }
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <prvTaskExitError+0x28>
        __asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
    }
 80049b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049ba:	bf00      	nop
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0fc      	beq.n	80049bc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000010 	.word	0x20000010
	...

080049e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <pxCurrentTCBConst2>)
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	6808      	ldr	r0, [r1, #0]
 80049e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ea:	f380 8809 	msr	PSP, r0
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8811 	msr	BASEPRI, r0
 80049fa:	4770      	bx	lr
 80049fc:	f3af 8000 	nop.w

08004a00 <pxCurrentTCBConst2>:
 8004a00:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop

08004a08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004a08:	4808      	ldr	r0, [pc, #32]	; (8004a2c <prvPortStartFirstTask+0x24>)
 8004a0a:	6800      	ldr	r0, [r0, #0]
 8004a0c:	6800      	ldr	r0, [r0, #0]
 8004a0e:	f380 8808 	msr	MSP, r0
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8814 	msr	CONTROL, r0
 8004a1a:	b662      	cpsie	i
 8004a1c:	b661      	cpsie	f
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	df00      	svc	0
 8004a28:	bf00      	nop
 8004a2a:	0000      	.short	0x0000
 8004a2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop

08004a34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a3a:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <xPortStartScheduler+0x120>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <xPortStartScheduler+0x124>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10a      	bne.n	8004a5a <xPortStartScheduler+0x26>
        __asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	613b      	str	r3, [r7, #16]
    }
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <xPortStartScheduler+0x120>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <xPortStartScheduler+0x128>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10a      	bne.n	8004a7a <xPortStartScheduler+0x46>
        __asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60fb      	str	r3, [r7, #12]
    }
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <xPortStartScheduler+0x12c>)
 8004a7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	22ff      	movs	r2, #255	; 0xff
 8004a8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <xPortStartScheduler+0x130>)
 8004aa0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004aa2:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <xPortStartScheduler+0x134>)
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aa8:	e009      	b.n	8004abe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <xPortStartScheduler+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	; (8004b68 <xPortStartScheduler+0x134>)
 8004ab2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d0ef      	beq.n	8004aaa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aca:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <xPortStartScheduler+0x134>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1c3 0307 	rsb	r3, r3, #7
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d00a      	beq.n	8004aec <xPortStartScheduler+0xb8>
        __asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60bb      	str	r3, [r7, #8]
    }
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <xPortStartScheduler+0x134>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <xPortStartScheduler+0x134>)
 8004af4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <xPortStartScheduler+0x134>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <xPortStartScheduler+0x134>)
 8004b00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b22:	f000 f963 	bl	8004dec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b26:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <xPortStartScheduler+0x13c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b2c:	f000 f982 	bl	8004e34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <xPortStartScheduler+0x140>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0f      	ldr	r2, [pc, #60]	; (8004b74 <xPortStartScheduler+0x140>)
 8004b36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b3c:	f7ff ff64 	bl	8004a08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b40:	f7fe feea 	bl	8003918 <vTaskSwitchContext>
    prvTaskExitError();
 8004b44:	f7ff ff1a 	bl	800497c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	e000ed00 	.word	0xe000ed00
 8004b58:	410fc271 	.word	0x410fc271
 8004b5c:	410fc270 	.word	0x410fc270
 8004b60:	e000e400 	.word	0xe000e400
 8004b64:	2000020c 	.word	0x2000020c
 8004b68:	20000210 	.word	0x20000210
 8004b6c:	e000ed20 	.word	0xe000ed20
 8004b70:	20000010 	.word	0x20000010
 8004b74:	e000ef34 	.word	0xe000ef34

08004b78 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b7e:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <vInitPrioGroupValue+0xe4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a37      	ldr	r2, [pc, #220]	; (8004c60 <vInitPrioGroupValue+0xe8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10a      	bne.n	8004b9e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	613b      	str	r3, [r7, #16]
    }
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b9e:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <vInitPrioGroupValue+0xe4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <vInitPrioGroupValue+0xec>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d10a      	bne.n	8004bbe <vInitPrioGroupValue+0x46>
        __asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
    }
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bbe:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <vInitPrioGroupValue+0xf0>)
 8004bc0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <vInitPrioGroupValue+0xf4>)
 8004be4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004be8:	2207      	movs	r2, #7
 8004bea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bec:	e009      	b.n	8004c02 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004bee:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004bf6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d0ef      	beq.n	8004bee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c0e:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1c3 0307 	rsb	r3, r3, #7
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d00a      	beq.n	8004c30 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60bb      	str	r3, [r7, #8]
    }
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c30:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004c38:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c42:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <vInitPrioGroupValue+0xf8>)
 8004c44:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	e000ed00 	.word	0xe000ed00
 8004c60:	410fc271 	.word	0x410fc271
 8004c64:	410fc270 	.word	0x410fc270
 8004c68:	e000e400 	.word	0xe000e400
 8004c6c:	2000020c 	.word	0x2000020c
 8004c70:	20000210 	.word	0x20000210

08004c74 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
        __asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	607b      	str	r3, [r7, #4]
    }
 8004c8c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <vPortEnterCritical+0x58>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <vPortEnterCritical+0x58>)
 8004c96:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <vPortEnterCritical+0x58>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10f      	bne.n	8004cc0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <vPortEnterCritical+0x5c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <vPortEnterCritical+0x4c>
        __asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	603b      	str	r3, [r7, #0]
    }
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <vPortEnterCritical+0x4a>
    }
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000010 	.word	0x20000010
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <vPortExitCritical+0x50>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <vPortExitCritical+0x24>
        __asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	607b      	str	r3, [r7, #4]
    }
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <vPortExitCritical+0x50>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <vPortExitCritical+0x50>)
 8004d00:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <vPortExitCritical+0x50>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d105      	bne.n	8004d16 <vPortExitCritical+0x42>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f383 8811 	msr	BASEPRI, r3
    }
 8004d14:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000010 	.word	0x20000010
	...

08004d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d30:	f3ef 8009 	mrs	r0, PSP
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <pxCurrentTCBConst>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	f01e 0f10 	tst.w	lr, #16
 8004d40:	bf08      	it	eq
 8004d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	6010      	str	r0, [r2, #0]
 8004d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d54:	f380 8811 	msr	BASEPRI, r0
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f7fe fdda 	bl	8003918 <vTaskSwitchContext>
 8004d64:	f04f 0000 	mov.w	r0, #0
 8004d68:	f380 8811 	msr	BASEPRI, r0
 8004d6c:	bc09      	pop	{r0, r3}
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	6808      	ldr	r0, [r1, #0]
 8004d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d76:	f01e 0f10 	tst.w	lr, #16
 8004d7a:	bf08      	it	eq
 8004d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d80:	f380 8809 	msr	PSP, r0
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst>:
 8004d90:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
    }
 8004db0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004db2:	f001 ff57 	bl	8006c64 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004db6:	f7fe fcf3 	bl	80037a0 <xTaskIncrementTick>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d006      	beq.n	8004dce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004dc0:	f001 ffae 	bl	8006d20 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dc4:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <SysTick_Handler+0x50>)
 8004dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e001      	b.n	8004dd2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004dce:	f001 ff8b 	bl	8006ce8 <SEGGER_SYSVIEW_RecordExitISR>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	f383 8811 	msr	BASEPRI, r3
    }
 8004ddc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <vPortSetupTimerInterrupt+0x34>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <vPortSetupTimerInterrupt+0x38>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <vPortSetupTimerInterrupt+0x3c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <vPortSetupTimerInterrupt+0x40>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <vPortSetupTimerInterrupt+0x44>)
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <vPortSetupTimerInterrupt+0x34>)
 8004e10:	2207      	movs	r2, #7
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000e010 	.word	0xe000e010
 8004e24:	e000e018 	.word	0xe000e018
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	10624dd3 	.word	0x10624dd3
 8004e30:	e000e014 	.word	0xe000e014

08004e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e44 <vPortEnableVFP+0x10>
 8004e38:	6801      	ldr	r1, [r0, #0]
 8004e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e3e:	6001      	str	r1, [r0, #0]
 8004e40:	4770      	bx	lr
 8004e42:	0000      	.short	0x0000
 8004e44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop

08004e4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004e52:	f3ef 8305 	mrs	r3, IPSR
 8004e56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d914      	bls.n	8004e88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <vPortValidateInterruptPriority+0x70>)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <vPortValidateInterruptPriority+0x74>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	7afa      	ldrb	r2, [r7, #11]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d20a      	bcs.n	8004e88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	607b      	str	r3, [r7, #4]
    }
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e88:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <vPortValidateInterruptPriority+0x78>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e90:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <vPortValidateInterruptPriority+0x7c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d90a      	bls.n	8004eae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	603b      	str	r3, [r7, #0]
    }
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <vPortValidateInterruptPriority+0x60>
    }
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	e000e3f0 	.word	0xe000e3f0
 8004ec0:	2000020c 	.word	0x2000020c
 8004ec4:	e000ed0c 	.word	0xe000ed0c
 8004ec8:	20000210 	.word	0x20000210

08004ecc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ed8:	f7fe fb92 	bl	8003600 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004edc:	4b65      	ldr	r3, [pc, #404]	; (8005074 <pvPortMalloc+0x1a8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ee4:	f000 f934 	bl	8005150 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ee8:	4b63      	ldr	r3, [pc, #396]	; (8005078 <pvPortMalloc+0x1ac>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 80a7 	bne.w	8005044 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02d      	beq.n	8004f58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004efc:	2208      	movs	r2, #8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d227      	bcs.n	8004f58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004f08:	2208      	movs	r2, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d021      	beq.n	8004f5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f023 0307 	bic.w	r3, r3, #7
 8004f20:	3308      	adds	r3, #8
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d214      	bcs.n	8004f52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	3308      	adds	r3, #8
 8004f30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <pvPortMalloc+0x92>
        __asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	617b      	str	r3, [r7, #20]
    }
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f56:	e002      	b.n	8004f5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	e000      	b.n	8004f60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d06e      	beq.n	8005044 <pvPortMalloc+0x178>
 8004f66:	4b45      	ldr	r3, [pc, #276]	; (800507c <pvPortMalloc+0x1b0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d869      	bhi.n	8005044 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f70:	4b43      	ldr	r3, [pc, #268]	; (8005080 <pvPortMalloc+0x1b4>)
 8004f72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f74:	4b42      	ldr	r3, [pc, #264]	; (8005080 <pvPortMalloc+0x1b4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f7a:	e004      	b.n	8004f86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d903      	bls.n	8004f98 <pvPortMalloc+0xcc>
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f1      	bne.n	8004f7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f98:	4b36      	ldr	r3, [pc, #216]	; (8005074 <pvPortMalloc+0x1a8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d050      	beq.n	8005044 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	4413      	add	r3, r2
 8004faa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d91f      	bls.n	8005004 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <pvPortMalloc+0x120>
        __asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	613b      	str	r3, [r7, #16]
    }
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ffe:	69b8      	ldr	r0, [r7, #24]
 8005000:	f000 f908 	bl	8005214 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <pvPortMalloc+0x1b0>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	4a1b      	ldr	r2, [pc, #108]	; (800507c <pvPortMalloc+0x1b0>)
 8005010:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <pvPortMalloc+0x1b0>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <pvPortMalloc+0x1b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d203      	bcs.n	8005026 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800501e:	4b17      	ldr	r3, [pc, #92]	; (800507c <pvPortMalloc+0x1b0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <pvPortMalloc+0x1b8>)
 8005024:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	4b13      	ldr	r3, [pc, #76]	; (8005078 <pvPortMalloc+0x1ac>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	431a      	orrs	r2, r3
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <pvPortMalloc+0x1bc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	4a11      	ldr	r2, [pc, #68]	; (8005088 <pvPortMalloc+0x1bc>)
 8005042:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005044:	f7fe faea 	bl	800361c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <pvPortMalloc+0x19c>
        __asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60fb      	str	r3, [r7, #12]
    }
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <pvPortMalloc+0x19a>
    return pvReturn;
 8005068:	69fb      	ldr	r3, [r7, #28]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3728      	adds	r7, #40	; 0x28
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20012e1c 	.word	0x20012e1c
 8005078:	20012e30 	.word	0x20012e30
 800507c:	20012e20 	.word	0x20012e20
 8005080:	20012e14 	.word	0x20012e14
 8005084:	20012e24 	.word	0x20012e24
 8005088:	20012e28 	.word	0x20012e28

0800508c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04d      	beq.n	800513a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800509e:	2308      	movs	r3, #8
 80050a0:	425b      	negs	r3, r3
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4413      	add	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b24      	ldr	r3, [pc, #144]	; (8005144 <vPortFree+0xb8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <vPortFree+0x44>
        __asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60fb      	str	r3, [r7, #12]
    }
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <vPortFree+0x62>
        __asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60bb      	str	r3, [r7, #8]
    }
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <vPortFree+0xb8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01e      	beq.n	800513a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11a      	bne.n	800513a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <vPortFree+0xb8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	43db      	mvns	r3, r3
 800510e:	401a      	ands	r2, r3
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005114:	f7fe fa74 	bl	8003600 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <vPortFree+0xbc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4413      	add	r3, r2
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <vPortFree+0xbc>)
 8005124:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005126:	6938      	ldr	r0, [r7, #16]
 8005128:	f000 f874 	bl	8005214 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <vPortFree+0xc0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a06      	ldr	r2, [pc, #24]	; (800514c <vPortFree+0xc0>)
 8005134:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005136:	f7fe fa71 	bl	800361c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800513a:	bf00      	nop
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20012e30 	.word	0x20012e30
 8005148:	20012e20 	.word	0x20012e20
 800514c:	20012e2c 	.word	0x20012e2c

08005150 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005156:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800515a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800515c:	4b27      	ldr	r3, [pc, #156]	; (80051fc <prvHeapInit+0xac>)
 800515e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3307      	adds	r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0307 	bic.w	r3, r3, #7
 8005176:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	4a1f      	ldr	r2, [pc, #124]	; (80051fc <prvHeapInit+0xac>)
 8005180:	4413      	add	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005188:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <prvHeapInit+0xb0>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800518e:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <prvHeapInit+0xb0>)
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800519c:	2208      	movs	r2, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0307 	bic.w	r3, r3, #7
 80051aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <prvHeapInit+0xb4>)
 80051b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <prvHeapInit+0xb4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <prvHeapInit+0xb4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <prvHeapInit+0xb4>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <prvHeapInit+0xb8>)
 80051de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a09      	ldr	r2, [pc, #36]	; (800520c <prvHeapInit+0xbc>)
 80051e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <prvHeapInit+0xc0>)
 80051ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000214 	.word	0x20000214
 8005200:	20012e14 	.word	0x20012e14
 8005204:	20012e1c 	.word	0x20012e1c
 8005208:	20012e24 	.word	0x20012e24
 800520c:	20012e20 	.word	0x20012e20
 8005210:	20012e30 	.word	0x20012e30

08005214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <prvInsertBlockIntoFreeList+0xac>)
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e002      	b.n	8005228 <prvInsertBlockIntoFreeList+0x14>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d8f7      	bhi.n	8005222 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d108      	bne.n	8005256 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d118      	bne.n	800529c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d00d      	beq.n	8005292 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e008      	b.n	80052a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e003      	b.n	80052a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d002      	beq.n	80052b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20012e14 	.word	0x20012e14
 80052c4:	20012e1c 	.word	0x20012e1c

080052c8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <_DoInit+0xa0>)
 80052d0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80052d2:	22a8      	movs	r2, #168	; 0xa8
 80052d4:	2100      	movs	r1, #0
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f002 fa14 	bl	8007704 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2203      	movs	r2, #3
 80052e0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2203      	movs	r2, #3
 80052e6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4a20      	ldr	r2, [pc, #128]	; (800536c <_DoInit+0xa4>)
 80052ec:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <_DoInit+0xa8>)
 80052f2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052fa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2200      	movs	r2, #0
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	; (800536c <_DoInit+0xa4>)
 8005312:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4a17      	ldr	r2, [pc, #92]	; (8005374 <_DoInit+0xac>)
 8005318:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2200      	movs	r2, #0
 800532a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005332:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005336:	2300      	movs	r3, #0
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	e00c      	b.n	8005356 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f1c3 030f 	rsb	r3, r3, #15
 8005342:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <_DoInit+0xb0>)
 8005344:	5cd1      	ldrb	r1, [r2, r3]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4413      	add	r3, r2
 800534c:	460a      	mov	r2, r1
 800534e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3301      	adds	r3, #1
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d9ef      	bls.n	800533c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800535c:	f3bf 8f5f 	dmb	sy
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20012e34 	.word	0x20012e34
 800536c:	080077c8 	.word	0x080077c8
 8005370:	20012edc 	.word	0x20012edc
 8005374:	200132dc 	.word	0x200132dc
 8005378:	080078a0 	.word	0x080078a0

0800537c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005388:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <SEGGER_RTT_ReadNoLock+0x108>)
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <SEGGER_RTT_ReadNoLock+0x1e>
 8005396:	f7ff ff97 	bl	80052c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	3360      	adds	r3, #96	; 0x60
 80053a6:	4a37      	ldr	r2, [pc, #220]	; (8005484 <SEGGER_RTT_ReadNoLock+0x108>)
 80053a8:	4413      	add	r3, r2
 80053aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d92b      	bls.n	8005420 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bf28      	it	cs
 80053da:	4613      	movcs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	4413      	add	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	6939      	ldr	r1, [r7, #16]
 80053ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ee:	f002 f97b 	bl	80076e8 <memcpy>
    NumBytesRead += NumBytesRem;
 80053f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800540a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005418:	429a      	cmp	r2, r3
 800541a:	d101      	bne.n	8005420 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800541c:	2300      	movs	r3, #0
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4293      	cmp	r3, r2
 800542e:	bf28      	it	cs
 8005430:	4613      	movcs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d019      	beq.n	800546e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	4413      	add	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	6939      	ldr	r1, [r7, #16]
 8005448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800544a:	f002 f94d 	bl	80076e8 <memcpy>
    NumBytesRead += NumBytesRem;
 800544e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4413      	add	r3, r2
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4413      	add	r3, r2
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005478:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800547c:	4618      	mov	r0, r3
 800547e:	3730      	adds	r7, #48	; 0x30
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20012e34 	.word	0x20012e34

08005488 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005496:	4b3d      	ldr	r3, [pc, #244]	; (800558c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80054a4:	f7ff ff10 	bl	80052c8 <_DoInit>
  SEGGER_RTT_LOCK();
 80054a8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ac:	f04f 0120 	mov.w	r1, #32
 80054b0:	f381 8811 	msr	BASEPRI, r1
 80054b4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054b6:	4b35      	ldr	r3, [pc, #212]	; (800558c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80054b8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80054be:	6939      	ldr	r1, [r7, #16]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	440b      	add	r3, r1
 80054ce:	3304      	adds	r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	dbeb      	blt.n	80054be <SEGGER_RTT_AllocUpBuffer+0x36>
 80054e6:	e000      	b.n	80054ea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80054e8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	da3f      	bge.n	8005574 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	440b      	add	r3, r1
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005508:	6939      	ldr	r1, [r7, #16]
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	4613      	mov	r3, r2
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4413      	add	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	440b      	add	r3, r1
 8005518:	3304      	adds	r3, #4
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800551e:	6939      	ldr	r1, [r7, #16]
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	440b      	add	r3, r1
 800552c:	3320      	adds	r3, #32
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	440b      	add	r3, r1
 8005540:	3328      	adds	r3, #40	; 0x28
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005546:	6939      	ldr	r1, [r7, #16]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	440b      	add	r3, r1
 8005554:	3324      	adds	r3, #36	; 0x24
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	440b      	add	r3, r1
 8005568:	332c      	adds	r3, #44	; 0x2c
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800556e:	f3bf 8f5f 	dmb	sy
 8005572:	e002      	b.n	800557a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005580:	69fb      	ldr	r3, [r7, #28]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20012e34 	.word	0x20012e34

08005590 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800559e:	4b21      	ldr	r3, [pc, #132]	; (8005624 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80055a0:	623b      	str	r3, [r7, #32]
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80055ac:	f7ff fe8c 	bl	80052c8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055b0:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80055b2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d82c      	bhi.n	8005614 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80055ba:	f3ef 8311 	mrs	r3, BASEPRI
 80055be:	f04f 0120 	mov.w	r1, #32
 80055c2:	f381 8811 	msr	BASEPRI, r1
 80055c6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	3360      	adds	r3, #96	; 0x60
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00e      	beq.n	80055fe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2200      	movs	r2, #0
 80055fc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005602:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005604:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e002      	b.n	800561a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005614:	f04f 33ff 	mov.w	r3, #4294967295
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800561c:	4618      	mov	r0, r3
 800561e:	3728      	adds	r7, #40	; 0x28
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20012e34 	.word	0x20012e34

08005628 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00f      	beq.n	800565e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800563e:	e002      	b.n	8005646 <_EncodeStr+0x1e>
      Len++;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3301      	adds	r3, #1
 8005644:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f6      	bne.n	8005640 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d901      	bls.n	800565e <_EncodeStr+0x36>
      Len = Limit;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2bfe      	cmp	r3, #254	; 0xfe
 8005662:	d806      	bhi.n	8005672 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	60fa      	str	r2, [r7, #12]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e011      	b.n	8005696 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	60fa      	str	r2, [r7, #12]
 8005678:	22ff      	movs	r2, #255	; 0xff
 800567a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	60fa      	str	r2, [r7, #12]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	0a19      	lsrs	r1, r3, #8
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	60fa      	str	r2, [r7, #12]
 8005692:	b2ca      	uxtb	r2, r1
 8005694:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800569a:	e00a      	b.n	80056b2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	1c53      	adds	r3, r2, #1
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1c59      	adds	r1, r3, #1
 80056a6:	60f9      	str	r1, [r7, #12]
 80056a8:	7812      	ldrb	r2, [r2, #0]
 80056aa:	701a      	strb	r2, [r3, #0]
    n++;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d3f0      	bcc.n	800569c <_EncodeStr+0x74>
  }
  return pPayload;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3307      	adds	r3, #7
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056e6:	4b35      	ldr	r3, [pc, #212]	; (80057bc <_HandleIncomingPacket+0xdc>)
 80056e8:	7e1b      	ldrb	r3, [r3, #24]
 80056ea:	4618      	mov	r0, r3
 80056ec:	1cfb      	adds	r3, r7, #3
 80056ee:	2201      	movs	r2, #1
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7ff fe43 	bl	800537c <SEGGER_RTT_ReadNoLock>
 80056f6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d052      	beq.n	80057a4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d031      	beq.n	8005768 <_HandleIncomingPacket+0x88>
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	dc40      	bgt.n	800578a <_HandleIncomingPacket+0xaa>
 8005708:	2b07      	cmp	r3, #7
 800570a:	dc15      	bgt.n	8005738 <_HandleIncomingPacket+0x58>
 800570c:	2b00      	cmp	r3, #0
 800570e:	dd3c      	ble.n	800578a <_HandleIncomingPacket+0xaa>
 8005710:	3b01      	subs	r3, #1
 8005712:	2b06      	cmp	r3, #6
 8005714:	d839      	bhi.n	800578a <_HandleIncomingPacket+0xaa>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <_HandleIncomingPacket+0x3c>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	0800573f 	.word	0x0800573f
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574b 	.word	0x0800574b
 8005728:	08005751 	.word	0x08005751
 800572c:	08005757 	.word	0x08005757
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005763 	.word	0x08005763
 8005738:	2b7f      	cmp	r3, #127	; 0x7f
 800573a:	d035      	beq.n	80057a8 <_HandleIncomingPacket+0xc8>
 800573c:	e025      	b.n	800578a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800573e:	f000 ffc9 	bl	80066d4 <SEGGER_SYSVIEW_Start>
      break;
 8005742:	e036      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005744:	f001 f880 	bl	8006848 <SEGGER_SYSVIEW_Stop>
      break;
 8005748:	e033      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800574a:	f001 fa59 	bl	8006c00 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800574e:	e030      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005750:	f001 fa1e 	bl	8006b90 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005754:	e02d      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005756:	f001 f89d 	bl	8006894 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800575a:	e02a      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800575c:	f001 fcec 	bl	8007138 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005760:	e027      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005762:	f001 fccb 	bl	80070fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005766:	e024      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <_HandleIncomingPacket+0xdc>)
 800576a:	7e1b      	ldrb	r3, [r3, #24]
 800576c:	4618      	mov	r0, r3
 800576e:	1cfb      	adds	r3, r7, #3
 8005770:	2201      	movs	r2, #1
 8005772:	4619      	mov	r1, r3
 8005774:	f7ff fe02 	bl	800537c <SEGGER_RTT_ReadNoLock>
 8005778:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d015      	beq.n	80057ac <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	4618      	mov	r0, r3
 8005784:	f001 fc3a 	bl	8006ffc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005788:	e010      	b.n	80057ac <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	b25b      	sxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	da0e      	bge.n	80057b0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <_HandleIncomingPacket+0xdc>)
 8005794:	7e1b      	ldrb	r3, [r3, #24]
 8005796:	4618      	mov	r0, r3
 8005798:	1cfb      	adds	r3, r7, #3
 800579a:	2201      	movs	r2, #1
 800579c:	4619      	mov	r1, r3
 800579e:	f7ff fded 	bl	800537c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80057a2:	e005      	b.n	80057b0 <_HandleIncomingPacket+0xd0>
    }
  }
 80057a4:	bf00      	nop
 80057a6:	e004      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
      break;
 80057a8:	bf00      	nop
 80057aa:	e002      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
      break;
 80057ac:	bf00      	nop
 80057ae:	e000      	b.n	80057b2 <_HandleIncomingPacket+0xd2>
      break;
 80057b0:	bf00      	nop
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200142f4 	.word	0x200142f4

080057c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08c      	sub	sp, #48	; 0x30
 80057c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80057c6:	2301      	movs	r3, #1
 80057c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	3301      	adds	r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d4:	4b31      	ldr	r3, [pc, #196]	; (800589c <_TrySendOverflowPacket+0xdc>)
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057da:	e00b      	b.n	80057f4 <_TrySendOverflowPacket+0x34>
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	09db      	lsrs	r3, r3, #7
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	2b7f      	cmp	r3, #127	; 0x7f
 80057f8:	d8f0      	bhi.n	80057dc <_TrySendOverflowPacket+0x1c>
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800580a:	4b25      	ldr	r3, [pc, #148]	; (80058a0 <_TrySendOverflowPacket+0xe0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005810:	4b22      	ldr	r3, [pc, #136]	; (800589c <_TrySendOverflowPacket+0xdc>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	e00b      	b.n	800583c <_TrySendOverflowPacket+0x7c>
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	6279      	str	r1, [r7, #36]	; 0x24
 800582e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	09db      	lsrs	r3, r3, #7
 800583a:	623b      	str	r3, [r7, #32]
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2b7f      	cmp	r3, #127	; 0x7f
 8005840:	d8f0      	bhi.n	8005824 <_TrySendOverflowPacket+0x64>
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	627a      	str	r2, [r7, #36]	; 0x24
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005852:	4b12      	ldr	r3, [pc, #72]	; (800589c <_TrySendOverflowPacket+0xdc>)
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	4618      	mov	r0, r3
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	461a      	mov	r2, r3
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	4619      	mov	r1, r3
 8005864:	f7fa fcc4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005868:	4603      	mov	r3, r0
 800586a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <_TrySendOverflowPacket+0xdc>)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005878:	4b08      	ldr	r3, [pc, #32]	; (800589c <_TrySendOverflowPacket+0xdc>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	b2da      	uxtb	r2, r3
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <_TrySendOverflowPacket+0xdc>)
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e004      	b.n	8005890 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <_TrySendOverflowPacket+0xdc>)
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	3301      	adds	r3, #1
 800588c:	4a03      	ldr	r2, [pc, #12]	; (800589c <_TrySendOverflowPacket+0xdc>)
 800588e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005890:	693b      	ldr	r3, [r7, #16]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200142f4 	.word	0x200142f4
 80058a0:	e0001004 	.word	0xe0001004

080058a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80058b0:	4b98      	ldr	r3, [pc, #608]	; (8005b14 <_SendPacket+0x270>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d010      	beq.n	80058da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80058b8:	4b96      	ldr	r3, [pc, #600]	; (8005b14 <_SendPacket+0x270>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 812d 	beq.w	8005b1c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80058c2:	4b94      	ldr	r3, [pc, #592]	; (8005b14 <_SendPacket+0x270>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d109      	bne.n	80058de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80058ca:	f7ff ff79 	bl	80057c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80058ce:	4b91      	ldr	r3, [pc, #580]	; (8005b14 <_SendPacket+0x270>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	f040 8124 	bne.w	8005b20 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80058d8:	e001      	b.n	80058de <_SendPacket+0x3a>
    goto Send;
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <_SendPacket+0x3c>
Send:
 80058de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b1f      	cmp	r3, #31
 80058e4:	d809      	bhi.n	80058fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80058e6:	4b8b      	ldr	r3, [pc, #556]	; (8005b14 <_SendPacket+0x270>)
 80058e8:	69da      	ldr	r2, [r3, #28]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f040 8115 	bne.w	8005b24 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b17      	cmp	r3, #23
 80058fe:	d807      	bhi.n	8005910 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b01      	subs	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e0c4      	b.n	8005a9a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b7f      	cmp	r3, #127	; 0x7f
 800591c:	d912      	bls.n	8005944 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	09da      	lsrs	r2, r3, #7
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3b01      	subs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	3a01      	subs	r2, #1
 8005936:	60fa      	str	r2, [r7, #12]
 8005938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800593c:	b2da      	uxtb	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	e006      	b.n	8005952 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3b01      	subs	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b7e      	cmp	r3, #126	; 0x7e
 8005956:	d807      	bhi.n	8005968 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3b01      	subs	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e098      	b.n	8005a9a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800596e:	d212      	bcs.n	8005996 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	09da      	lsrs	r2, r3, #7
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3b01      	subs	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	3a01      	subs	r2, #1
 8005988:	60fa      	str	r2, [r7, #12]
 800598a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800598e:	b2da      	uxtb	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e081      	b.n	8005a9a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800599c:	d21d      	bcs.n	80059da <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0b9a      	lsrs	r2, r3, #14
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	09db      	lsrs	r3, r3, #7
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	3a01      	subs	r2, #1
 80059b8:	60fa      	str	r2, [r7, #12]
 80059ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	3a01      	subs	r2, #1
 80059cc:	60fa      	str	r2, [r7, #12]
 80059ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e05f      	b.n	8005a9a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059e0:	d228      	bcs.n	8005a34 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	0d5a      	lsrs	r2, r3, #21
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	0b9b      	lsrs	r3, r3, #14
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	3a01      	subs	r2, #1
 80059fc:	60fa      	str	r2, [r7, #12]
 80059fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	09db      	lsrs	r3, r3, #7
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	3a01      	subs	r2, #1
 8005a12:	60fa      	str	r2, [r7, #12]
 8005a14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	3a01      	subs	r2, #1
 8005a26:	60fa      	str	r2, [r7, #12]
 8005a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e032      	b.n	8005a9a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	0f1a      	lsrs	r2, r3, #28
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	0d5b      	lsrs	r3, r3, #21
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	3a01      	subs	r2, #1
 8005a4e:	60fa      	str	r2, [r7, #12]
 8005a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	0b9b      	lsrs	r3, r3, #14
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	3a01      	subs	r2, #1
 8005a64:	60fa      	str	r2, [r7, #12]
 8005a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	09db      	lsrs	r3, r3, #7
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	3a01      	subs	r2, #1
 8005a7a:	60fa      	str	r2, [r7, #12]
 8005a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	60fa      	str	r2, [r7, #12]
 8005a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <_SendPacket+0x274>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <_SendPacket+0x270>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	e00b      	b.n	8005acc <_SendPacket+0x228>
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	1c59      	adds	r1, r3, #1
 8005abc:	6279      	str	r1, [r7, #36]	; 0x24
 8005abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	09db      	lsrs	r3, r3, #7
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad0:	d8f0      	bhi.n	8005ab4 <_SendPacket+0x210>
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <_SendPacket+0x270>)
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	f7fa fb7d 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005af6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005afe:	4a05      	ldr	r2, [pc, #20]	; (8005b14 <_SendPacket+0x270>)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	60d3      	str	r3, [r2, #12]
 8005b04:	e00f      	b.n	8005b26 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b06:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <_SendPacket+0x270>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	4b01      	ldr	r3, [pc, #4]	; (8005b14 <_SendPacket+0x270>)
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	e008      	b.n	8005b26 <_SendPacket+0x282>
 8005b14:	200142f4 	.word	0x200142f4
 8005b18:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005b1c:	bf00      	nop
 8005b1e:	e002      	b.n	8005b26 <_SendPacket+0x282>
      goto SendDone;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <_SendPacket+0x282>
      goto SendDone;
 8005b24:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <_SendPacket+0x2d4>)
 8005b28:	7e1b      	ldrb	r3, [r3, #24]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <_SendPacket+0x2d8>)
 8005b2e:	460b      	mov	r3, r1
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	440b      	add	r3, r1
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	336c      	adds	r3, #108	; 0x6c
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <_SendPacket+0x2d4>)
 8005b3e:	7e1b      	ldrb	r3, [r3, #24]
 8005b40:	4618      	mov	r0, r3
 8005b42:	490e      	ldr	r1, [pc, #56]	; (8005b7c <_SendPacket+0x2d8>)
 8005b44:	4603      	mov	r3, r0
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4403      	add	r3, r0
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	440b      	add	r3, r1
 8005b4e:	3370      	adds	r3, #112	; 0x70
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d00b      	beq.n	8005b6e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <_SendPacket+0x2d4>)
 8005b58:	789b      	ldrb	r3, [r3, #2]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <_SendPacket+0x2d4>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b64:	f7ff fdbc 	bl	80056e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <_SendPacket+0x2d4>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b6e:	bf00      	nop
 8005b70:	3728      	adds	r7, #40	; 0x28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	200142f4 	.word	0x200142f4
 8005b7c:	20012e34 	.word	0x20012e34

08005b80 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3301      	adds	r3, #1
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d80a      	bhi.n	8005bb0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	1c59      	adds	r1, r3, #1
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6051      	str	r1, [r2, #4]
 8005ba4:	78fa      	ldrb	r2, [r7, #3]
 8005ba6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d15a      	bne.n	8005c6e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	623b      	str	r3, [r7, #32]
 8005bd8:	e00b      	b.n	8005bf2 <_StoreChar+0x72>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	6279      	str	r1, [r7, #36]	; 0x24
 8005be4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	09db      	lsrs	r3, r3, #7
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf6:	d8f0      	bhi.n	8005bda <_StoreChar+0x5a>
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bfe:	6a3a      	ldr	r2, [r7, #32]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e00b      	b.n	8005c2a <_StoreChar+0xaa>
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	61f9      	str	r1, [r7, #28]
 8005c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	09db      	lsrs	r3, r3, #7
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c2e:	d8f0      	bhi.n	8005c12 <_StoreChar+0x92>
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	61fa      	str	r2, [r7, #28]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	221a      	movs	r2, #26
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fe2b 	bl	80058a4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fd38 	bl	80056c8 <_PreparePacket>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	611a      	str	r2, [r3, #16]
  }
}
 8005c6e:	bf00      	nop
 8005c70:	3728      	adds	r7, #40	; 0x28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c92:	e007      	b.n	8005ca4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	623b      	str	r3, [r7, #32]
    Width++;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005ca4:	6a3a      	ldr	r2, [r7, #32]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d2f3      	bcs.n	8005c94 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d901      	bls.n	8005cb8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11f      	bne.n	8005d02 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01c      	beq.n	8005d02 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <_PrintUnsigned+0x66>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <_PrintUnsigned+0x66>
        c = '0';
 8005cd8:	2330      	movs	r3, #48	; 0x30
 8005cda:	76fb      	strb	r3, [r7, #27]
 8005cdc:	e001      	b.n	8005ce2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005cde:	2320      	movs	r3, #32
 8005ce0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ce2:	e007      	b.n	8005cf4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005cea:	7efb      	ldrb	r3, [r7, #27]
 8005cec:	4619      	mov	r1, r3
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff46 	bl	8005b80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <_PrintUnsigned+0x8a>
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d3f0      	bcc.n	8005ce4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d903      	bls.n	8005d10 <_PrintUnsigned+0x98>
      NumDigits--;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	e009      	b.n	8005d24 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d200      	bcs.n	8005d24 <_PrintUnsigned+0xac>
        break;
 8005d22:	e005      	b.n	8005d30 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	fb02 f303 	mul.w	r3, r2, r3
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d2e:	e7e8      	b.n	8005d02 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <_PrintUnsigned+0x128>)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7ff ff14 	bl	8005b80 <_StoreChar>
    Digit /= Base;
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e3      	bne.n	8005d30 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d011      	beq.n	8005d96 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00e      	beq.n	8005d96 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d78:	e006      	b.n	8005d88 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005d80:	2120      	movs	r1, #32
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff fefc 	bl	8005b80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <_PrintUnsigned+0x11e>
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d3f1      	bcc.n	8005d7a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005d96:	bf00      	nop
 8005d98:	3728      	adds	r7, #40	; 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	080078c0 	.word	0x080078c0

08005da4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bfb8      	it	lt
 8005db8:	425b      	neglt	r3, r3
 8005dba:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005dc0:	e007      	b.n	8005dd2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005dca:	613b      	str	r3, [r7, #16]
    Width++;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	daf3      	bge.n	8005dc2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d901      	bls.n	8005de6 <_PrintInt+0x42>
    Width = NumDigits;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <_PrintInt+0x5e>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	db04      	blt.n	8005dfc <_PrintInt+0x58>
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <_PrintInt+0x5e>
    FieldWidth--;
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <_PrintInt+0x6e>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <_PrintInt+0x9c>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d111      	bne.n	8005e40 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e22:	e006      	b.n	8005e32 <_PrintInt+0x8e>
        FieldWidth--;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005e2a:	2120      	movs	r1, #32
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff fea7 	bl	8005b80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <_PrintInt+0x9c>
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3f1      	bcc.n	8005e24 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	da07      	bge.n	8005e56 <_PrintInt+0xb2>
    v = -v;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	425b      	negs	r3, r3
 8005e4a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005e4c:	212d      	movs	r1, #45	; 0x2d
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff fe96 	bl	8005b80 <_StoreChar>
 8005e54:	e008      	b.n	8005e68 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005e60:	212b      	movs	r1, #43	; 0x2b
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff fe8c 	bl	8005b80 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d019      	beq.n	8005ea6 <_PrintInt+0x102>
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d114      	bne.n	8005ea6 <_PrintInt+0x102>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d111      	bne.n	8005ea6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00e      	beq.n	8005ea6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e88:	e006      	b.n	8005e98 <_PrintInt+0xf4>
        FieldWidth--;
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005e90:	2130      	movs	r1, #48	; 0x30
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fe74 	bl	8005b80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <_PrintInt+0x102>
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d3f1      	bcc.n	8005e8a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff fedf 	bl	8005c78 <_PrintUnsigned>
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b098      	sub	sp, #96	; 0x60
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed4:	f04f 0120 	mov.w	r1, #32
 8005ed8:	f381 8811 	msr	BASEPRI, r1
 8005edc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ede:	48b7      	ldr	r0, [pc, #732]	; (80061bc <_VPrintTarget+0x2f8>)
 8005ee0:	f7ff fbf2 	bl	80056c8 <_PreparePacket>
 8005ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ee6:	4bb5      	ldr	r3, [pc, #724]	; (80061bc <_VPrintTarget+0x2f8>)
 8005ee8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005eea:	2300      	movs	r3, #0
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005f0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8183 	beq.w	800621a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f18:	2b25      	cmp	r3, #37	; 0x25
 8005f1a:	f040 8170 	bne.w	80061fe <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f32:	3b23      	subs	r3, #35	; 0x23
 8005f34:	2b0d      	cmp	r3, #13
 8005f36:	d83f      	bhi.n	8005fb8 <_VPrintTarget+0xf4>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <_VPrintTarget+0x7c>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005fb9 	.word	0x08005fb9
 8005f48:	08005fb9 	.word	0x08005fb9
 8005f4c:	08005fb9 	.word	0x08005fb9
 8005f50:	08005fb9 	.word	0x08005fb9
 8005f54:	08005fb9 	.word	0x08005fb9
 8005f58:	08005fb9 	.word	0x08005fb9
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	08005f79 	.word	0x08005f79
 8005f6c:	08005fb9 	.word	0x08005fb9
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005f89 	.word	0x08005f89
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e01a      	b.n	8005fbe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	f043 0302 	orr.w	r3, r3, #2
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e012      	b.n	8005fbe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9a:	f043 0304 	orr.w	r3, r3, #4
 8005f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e00a      	b.n	8005fbe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005faa:	f043 0308 	orr.w	r3, r3, #8
 8005fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e002      	b.n	8005fbe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	653b      	str	r3, [r7, #80]	; 0x50
 8005fbc:	bf00      	nop
        }
      } while (v);
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1b0      	bne.n	8005f26 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fd4:	2b2f      	cmp	r3, #47	; 0x2f
 8005fd6:	d912      	bls.n	8005ffe <_VPrintTarget+0x13a>
 8005fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fdc:	2b39      	cmp	r3, #57	; 0x39
 8005fde:	d80e      	bhi.n	8005ffe <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3b30      	subs	r3, #48	; 0x30
 8005ffa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005ffc:	e7e4      	b.n	8005fc8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005ffe:	2300      	movs	r3, #0
 8006000:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800600a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800600e:	2b2e      	cmp	r3, #46	; 0x2e
 8006010:	d11d      	bne.n	800604e <_VPrintTarget+0x18a>
        sFormat++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006024:	2b2f      	cmp	r3, #47	; 0x2f
 8006026:	d912      	bls.n	800604e <_VPrintTarget+0x18a>
 8006028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800602c:	2b39      	cmp	r3, #57	; 0x39
 800602e:	d80e      	bhi.n	800604e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	461a      	mov	r2, r3
 8006042:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006046:	4413      	add	r3, r2
 8006048:	3b30      	subs	r3, #48	; 0x30
 800604a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800604c:	e7e4      	b.n	8006018 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800605a:	2b6c      	cmp	r3, #108	; 0x6c
 800605c:	d003      	beq.n	8006066 <_VPrintTarget+0x1a2>
 800605e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006062:	2b68      	cmp	r3, #104	; 0x68
 8006064:	d107      	bne.n	8006076 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006074:	e7ef      	b.n	8006056 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800607a:	2b25      	cmp	r3, #37	; 0x25
 800607c:	f000 80b3 	beq.w	80061e6 <_VPrintTarget+0x322>
 8006080:	2b25      	cmp	r3, #37	; 0x25
 8006082:	f2c0 80b7 	blt.w	80061f4 <_VPrintTarget+0x330>
 8006086:	2b78      	cmp	r3, #120	; 0x78
 8006088:	f300 80b4 	bgt.w	80061f4 <_VPrintTarget+0x330>
 800608c:	2b58      	cmp	r3, #88	; 0x58
 800608e:	f2c0 80b1 	blt.w	80061f4 <_VPrintTarget+0x330>
 8006092:	3b58      	subs	r3, #88	; 0x58
 8006094:	2b20      	cmp	r3, #32
 8006096:	f200 80ad 	bhi.w	80061f4 <_VPrintTarget+0x330>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <_VPrintTarget+0x1dc>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	08006197 	.word	0x08006197
 80060a4:	080061f5 	.word	0x080061f5
 80060a8:	080061f5 	.word	0x080061f5
 80060ac:	080061f5 	.word	0x080061f5
 80060b0:	080061f5 	.word	0x080061f5
 80060b4:	080061f5 	.word	0x080061f5
 80060b8:	080061f5 	.word	0x080061f5
 80060bc:	080061f5 	.word	0x080061f5
 80060c0:	080061f5 	.word	0x080061f5
 80060c4:	080061f5 	.word	0x080061f5
 80060c8:	080061f5 	.word	0x080061f5
 80060cc:	08006125 	.word	0x08006125
 80060d0:	0800614b 	.word	0x0800614b
 80060d4:	080061f5 	.word	0x080061f5
 80060d8:	080061f5 	.word	0x080061f5
 80060dc:	080061f5 	.word	0x080061f5
 80060e0:	080061f5 	.word	0x080061f5
 80060e4:	080061f5 	.word	0x080061f5
 80060e8:	080061f5 	.word	0x080061f5
 80060ec:	080061f5 	.word	0x080061f5
 80060f0:	080061f5 	.word	0x080061f5
 80060f4:	080061f5 	.word	0x080061f5
 80060f8:	080061f5 	.word	0x080061f5
 80060fc:	080061f5 	.word	0x080061f5
 8006100:	080061c1 	.word	0x080061c1
 8006104:	080061f5 	.word	0x080061f5
 8006108:	080061f5 	.word	0x080061f5
 800610c:	080061f5 	.word	0x080061f5
 8006110:	080061f5 	.word	0x080061f5
 8006114:	08006171 	.word	0x08006171
 8006118:	080061f5 	.word	0x080061f5
 800611c:	080061f5 	.word	0x080061f5
 8006120:	08006197 	.word	0x08006197
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	1d19      	adds	r1, r3, #4
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006138:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800613c:	f107 0314 	add.w	r3, r7, #20
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fd1c 	bl	8005b80 <_StoreChar>
        break;
 8006148:	e055      	b.n	80061f6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1d19      	adds	r1, r3, #4
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6011      	str	r1, [r2, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006158:	f107 0014 	add.w	r0, r7, #20
 800615c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006166:	220a      	movs	r2, #10
 8006168:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800616a:	f7ff fe1b 	bl	8005da4 <_PrintInt>
        break;
 800616e:	e042      	b.n	80061f6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	1d19      	adds	r1, r3, #4
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6011      	str	r1, [r2, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800617e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006180:	f107 0014 	add.w	r0, r7, #20
 8006184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618e:	220a      	movs	r2, #10
 8006190:	f7ff fd72 	bl	8005c78 <_PrintUnsigned>
        break;
 8006194:	e02f      	b.n	80061f6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1d19      	adds	r1, r3, #4
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6011      	str	r1, [r2, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80061a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061a6:	f107 0014 	add.w	r0, r7, #20
 80061aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	2210      	movs	r2, #16
 80061b6:	f7ff fd5f 	bl	8005c78 <_PrintUnsigned>
        break;
 80061ba:	e01c      	b.n	80061f6 <_VPrintTarget+0x332>
 80061bc:	20014324 	.word	0x20014324
      case 'p':
        v = va_arg(*pParamList, int);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	1d19      	adds	r1, r3, #4
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6011      	str	r1, [r2, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80061ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061d0:	f107 0014 	add.w	r0, r7, #20
 80061d4:	2300      	movs	r3, #0
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	2308      	movs	r3, #8
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2308      	movs	r3, #8
 80061de:	2210      	movs	r2, #16
 80061e0:	f7ff fd4a 	bl	8005c78 <_PrintUnsigned>
        break;
 80061e4:	e007      	b.n	80061f6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80061e6:	f107 0314 	add.w	r3, r7, #20
 80061ea:	2125      	movs	r1, #37	; 0x25
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fcc7 	bl	8005b80 <_StoreChar>
        break;
 80061f2:	e000      	b.n	80061f6 <_VPrintTarget+0x332>
      default:
        break;
 80061f4:	bf00      	nop
      }
      sFormat++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	e007      	b.n	800620e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80061fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006202:	f107 0314 	add.w	r3, r7, #20
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fcb9 	bl	8005b80 <_StoreChar>
    }
  } while (*sFormat);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f47f ae72 	bne.w	8005efc <_VPrintTarget+0x38>
 8006218:	e000      	b.n	800621c <_VPrintTarget+0x358>
      break;
 800621a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d041      	beq.n	80062a6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	643b      	str	r3, [r7, #64]	; 0x40
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006232:	e00b      	b.n	800624c <_VPrintTarget+0x388>
 8006234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006236:	b2da      	uxtb	r2, r3
 8006238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623a:	1c59      	adds	r1, r3, #1
 800623c:	6439      	str	r1, [r7, #64]	; 0x40
 800623e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006248:	09db      	lsrs	r3, r3, #7
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b7f      	cmp	r3, #127	; 0x7f
 8006250:	d8f0      	bhi.n	8006234 <_VPrintTarget+0x370>
 8006252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	643a      	str	r2, [r7, #64]	; 0x40
 8006258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006260:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
 800626a:	e00b      	b.n	8006284 <_VPrintTarget+0x3c0>
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	b2da      	uxtb	r2, r3
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	63b9      	str	r1, [r7, #56]	; 0x38
 8006276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	09db      	lsrs	r3, r3, #7
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	2b7f      	cmp	r3, #127	; 0x7f
 8006288:	d8f0      	bhi.n	800626c <_VPrintTarget+0x3a8>
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	221a      	movs	r2, #26
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff faff 	bl	80058a4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80062ac:	bf00      	nop
 80062ae:	3758      	adds	r7, #88	; 0x58
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062c2:	2300      	movs	r3, #0
 80062c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062c8:	4917      	ldr	r1, [pc, #92]	; (8006328 <SEGGER_SYSVIEW_Init+0x74>)
 80062ca:	4818      	ldr	r0, [pc, #96]	; (800632c <SEGGER_SYSVIEW_Init+0x78>)
 80062cc:	f7ff f8dc 	bl	8005488 <SEGGER_RTT_AllocUpBuffer>
 80062d0:	4603      	mov	r3, r0
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 80062d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80062d8:	4b15      	ldr	r3, [pc, #84]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 80062da:	785a      	ldrb	r2, [r3, #1]
 80062dc:	4b14      	ldr	r3, [pc, #80]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 80062de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062e0:	4b13      	ldr	r3, [pc, #76]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 80062e2:	7e1b      	ldrb	r3, [r3, #24]
 80062e4:	4618      	mov	r0, r3
 80062e6:	2300      	movs	r3, #0
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	2308      	movs	r3, #8
 80062ec:	4a11      	ldr	r2, [pc, #68]	; (8006334 <SEGGER_SYSVIEW_Init+0x80>)
 80062ee:	490f      	ldr	r1, [pc, #60]	; (800632c <SEGGER_SYSVIEW_Init+0x78>)
 80062f0:	f7ff f94e 	bl	8005590 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062fa:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <SEGGER_SYSVIEW_Init+0x84>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a0c      	ldr	r2, [pc, #48]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 8006300:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006302:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006308:	4a09      	ldr	r2, [pc, #36]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800630e:	4a08      	ldr	r2, [pc, #32]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006314:	4a06      	ldr	r2, [pc, #24]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <SEGGER_SYSVIEW_Init+0x7c>)
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	200132ec 	.word	0x200132ec
 800632c:	080077d4 	.word	0x080077d4
 8006330:	200142f4 	.word	0x200142f4
 8006334:	200142ec 	.word	0x200142ec
 8006338:	e0001004 	.word	0xe0001004

0800633c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006344:	4a04      	ldr	r2, [pc, #16]	; (8006358 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6113      	str	r3, [r2, #16]
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	200142f4 	.word	0x200142f4

0800635c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006364:	f3ef 8311 	mrs	r3, BASEPRI
 8006368:	f04f 0120 	mov.w	r1, #32
 800636c:	f381 8811 	msr	BASEPRI, r1
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	4808      	ldr	r0, [pc, #32]	; (8006394 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006374:	f7ff f9a8 	bl	80056c8 <_PreparePacket>
 8006378:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	68b8      	ldr	r0, [r7, #8]
 8006380:	f7ff fa90 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f383 8811 	msr	BASEPRI, r3
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20014324 	.word	0x20014324

08006398 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063a2:	f3ef 8311 	mrs	r3, BASEPRI
 80063a6:	f04f 0120 	mov.w	r1, #32
 80063aa:	f381 8811 	msr	BASEPRI, r1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	4816      	ldr	r0, [pc, #88]	; (800640c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80063b2:	f7ff f989 	bl	80056c8 <_PreparePacket>
 80063b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e00b      	b.n	80063de <SEGGER_SYSVIEW_RecordU32+0x46>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	61f9      	str	r1, [r7, #28]
 80063d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	09db      	lsrs	r3, r3, #7
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b7f      	cmp	r3, #127	; 0x7f
 80063e2:	d8f0      	bhi.n	80063c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	61fa      	str	r2, [r7, #28]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	6938      	ldr	r0, [r7, #16]
 80063fa:	f7ff fa53 	bl	80058a4 <_SendPacket>
  RECORD_END();
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f383 8811 	msr	BASEPRI, r3
}
 8006404:	bf00      	nop
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20014324 	.word	0x20014324

08006410 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800641c:	f3ef 8311 	mrs	r3, BASEPRI
 8006420:	f04f 0120 	mov.w	r1, #32
 8006424:	f381 8811 	msr	BASEPRI, r1
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	4825      	ldr	r0, [pc, #148]	; (80064c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800642c:	f7ff f94c 	bl	80056c8 <_PreparePacket>
 8006430:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
 800643e:	e00b      	b.n	8006458 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	b2da      	uxtb	r2, r3
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	62f9      	str	r1, [r7, #44]	; 0x2c
 800644a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	09db      	lsrs	r3, r3, #7
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b7f      	cmp	r3, #127	; 0x7f
 800645c:	d8f0      	bhi.n	8006440 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e00b      	b.n	8006490 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	6279      	str	r1, [r7, #36]	; 0x24
 8006482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	09db      	lsrs	r3, r3, #7
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b7f      	cmp	r3, #127	; 0x7f
 8006494:	d8f0      	bhi.n	8006478 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	627a      	str	r2, [r7, #36]	; 0x24
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	6979      	ldr	r1, [r7, #20]
 80064aa:	69b8      	ldr	r0, [r7, #24]
 80064ac:	f7ff f9fa 	bl	80058a4 <_SendPacket>
  RECORD_END();
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f383 8811 	msr	BASEPRI, r3
}
 80064b6:	bf00      	nop
 80064b8:	3730      	adds	r7, #48	; 0x30
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20014324 	.word	0x20014324

080064c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08e      	sub	sp, #56	; 0x38
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80064d2:	f3ef 8311 	mrs	r3, BASEPRI
 80064d6:	f04f 0120 	mov.w	r1, #32
 80064da:	f381 8811 	msr	BASEPRI, r1
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	4832      	ldr	r0, [pc, #200]	; (80065ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80064e2:	f7ff f8f1 	bl	80056c8 <_PreparePacket>
 80064e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	633b      	str	r3, [r7, #48]	; 0x30
 80064f4:	e00b      	b.n	800650e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fc:	1c59      	adds	r1, r3, #1
 80064fe:	6379      	str	r1, [r7, #52]	; 0x34
 8006500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	09db      	lsrs	r3, r3, #7
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	2b7f      	cmp	r3, #127	; 0x7f
 8006512:	d8f0      	bhi.n	80064f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	637a      	str	r2, [r7, #52]	; 0x34
 800651a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
 800652c:	e00b      	b.n	8006546 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	b2da      	uxtb	r2, r3
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	1c59      	adds	r1, r3, #1
 8006536:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006538:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006542:	09db      	lsrs	r3, r3, #7
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	2b7f      	cmp	r3, #127	; 0x7f
 800654a:	d8f0      	bhi.n	800652e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	623b      	str	r3, [r7, #32]
 8006564:	e00b      	b.n	800657e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	6279      	str	r1, [r7, #36]	; 0x24
 8006570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	09db      	lsrs	r3, r3, #7
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2b7f      	cmp	r3, #127	; 0x7f
 8006582:	d8f0      	bhi.n	8006566 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	627a      	str	r2, [r7, #36]	; 0x24
 800658a:	6a3a      	ldr	r2, [r7, #32]
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	69b8      	ldr	r0, [r7, #24]
 800659a:	f7ff f983 	bl	80058a4 <_SendPacket>
  RECORD_END();
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f383 8811 	msr	BASEPRI, r3
}
 80065a4:	bf00      	nop
 80065a6:	3738      	adds	r7, #56	; 0x38
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20014324 	.word	0x20014324

080065b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b090      	sub	sp, #64	; 0x40
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065be:	f3ef 8311 	mrs	r3, BASEPRI
 80065c2:	f04f 0120 	mov.w	r1, #32
 80065c6:	f381 8811 	msr	BASEPRI, r1
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	4840      	ldr	r0, [pc, #256]	; (80066d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80065ce:	f7ff f87b 	bl	80056c8 <_PreparePacket>
 80065d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e0:	e00b      	b.n	80065fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	1c59      	adds	r1, r3, #1
 80065ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	09db      	lsrs	r3, r3, #7
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	2b7f      	cmp	r3, #127	; 0x7f
 80065fe:	d8f0      	bhi.n	80065e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	633b      	str	r3, [r7, #48]	; 0x30
 8006618:	e00b      	b.n	8006632 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	b2da      	uxtb	r2, r3
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	1c59      	adds	r1, r3, #1
 8006622:	6379      	str	r1, [r7, #52]	; 0x34
 8006624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	09db      	lsrs	r3, r3, #7
 8006630:	633b      	str	r3, [r7, #48]	; 0x30
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	2b7f      	cmp	r3, #127	; 0x7f
 8006636:	d8f0      	bhi.n	800661a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	637a      	str	r2, [r7, #52]	; 0x34
 800663e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006650:	e00b      	b.n	800666a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	b2da      	uxtb	r2, r3
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	1c59      	adds	r1, r3, #1
 800665a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800665c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	09db      	lsrs	r3, r3, #7
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	2b7f      	cmp	r3, #127	; 0x7f
 800666e:	d8f0      	bhi.n	8006652 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
 8006684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006686:	623b      	str	r3, [r7, #32]
 8006688:	e00b      	b.n	80066a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	b2da      	uxtb	r2, r3
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	1c59      	adds	r1, r3, #1
 8006692:	6279      	str	r1, [r7, #36]	; 0x24
 8006694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	09db      	lsrs	r3, r3, #7
 80066a0:	623b      	str	r3, [r7, #32]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	2b7f      	cmp	r3, #127	; 0x7f
 80066a6:	d8f0      	bhi.n	800668a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	627a      	str	r2, [r7, #36]	; 0x24
 80066ae:	6a3a      	ldr	r2, [r7, #32]
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	69b8      	ldr	r0, [r7, #24]
 80066be:	f7ff f8f1 	bl	80058a4 <_SendPacket>
  RECORD_END();
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f383 8811 	msr	BASEPRI, r3
}
 80066c8:	bf00      	nop
 80066ca:	3740      	adds	r7, #64	; 0x40
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20014324 	.word	0x20014324

080066d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	; 0x30
 80066d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80066da:	4b58      	ldr	r3, [pc, #352]	; (800683c <SEGGER_SYSVIEW_Start+0x168>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80066e0:	f3ef 8311 	mrs	r3, BASEPRI
 80066e4:	f04f 0120 	mov.w	r1, #32
 80066e8:	f381 8811 	msr	BASEPRI, r1
 80066ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80066ee:	4b53      	ldr	r3, [pc, #332]	; (800683c <SEGGER_SYSVIEW_Start+0x168>)
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	220a      	movs	r2, #10
 80066f4:	4952      	ldr	r1, [pc, #328]	; (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7f9 fd7a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006702:	200a      	movs	r0, #10
 8006704:	f7ff fe2a 	bl	800635c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	f04f 0120 	mov.w	r1, #32
 8006710:	f381 8811 	msr	BASEPRI, r1
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	484b      	ldr	r0, [pc, #300]	; (8006844 <SEGGER_SYSVIEW_Start+0x170>)
 8006718:	f7fe ffd6 	bl	80056c8 <_PreparePacket>
 800671c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006726:	4b45      	ldr	r3, [pc, #276]	; (800683c <SEGGER_SYSVIEW_Start+0x168>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
 800672c:	e00b      	b.n	8006746 <SEGGER_SYSVIEW_Start+0x72>
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	b2da      	uxtb	r2, r3
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	1c59      	adds	r1, r3, #1
 8006736:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006738:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	09db      	lsrs	r3, r3, #7
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	2b7f      	cmp	r3, #127	; 0x7f
 800674a:	d8f0      	bhi.n	800672e <SEGGER_SYSVIEW_Start+0x5a>
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	4b36      	ldr	r3, [pc, #216]	; (800683c <SEGGER_SYSVIEW_Start+0x168>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	623b      	str	r3, [r7, #32]
 8006766:	e00b      	b.n	8006780 <SEGGER_SYSVIEW_Start+0xac>
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	6279      	str	r1, [r7, #36]	; 0x24
 8006772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	09db      	lsrs	r3, r3, #7
 800677e:	623b      	str	r3, [r7, #32]
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	2b7f      	cmp	r3, #127	; 0x7f
 8006784:	d8f0      	bhi.n	8006768 <SEGGER_SYSVIEW_Start+0x94>
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	627a      	str	r2, [r7, #36]	; 0x24
 800678c:	6a3a      	ldr	r2, [r7, #32]
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	4b28      	ldr	r3, [pc, #160]	; (800683c <SEGGER_SYSVIEW_Start+0x168>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	e00b      	b.n	80067ba <SEGGER_SYSVIEW_Start+0xe6>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	61f9      	str	r1, [r7, #28]
 80067ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b7f      	cmp	r3, #127	; 0x7f
 80067be:	d8f0      	bhi.n	80067a2 <SEGGER_SYSVIEW_Start+0xce>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	61fa      	str	r2, [r7, #28]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	e00b      	b.n	80067f2 <SEGGER_SYSVIEW_Start+0x11e>
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	6179      	str	r1, [r7, #20]
 80067e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	09db      	lsrs	r3, r3, #7
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b7f      	cmp	r3, #127	; 0x7f
 80067f6:	d8f0      	bhi.n	80067da <SEGGER_SYSVIEW_Start+0x106>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	617a      	str	r2, [r7, #20]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006808:	2218      	movs	r2, #24
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff f849 	bl	80058a4 <_SendPacket>
      RECORD_END();
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <SEGGER_SYSVIEW_Start+0x168>)
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <SEGGER_SYSVIEW_Start+0x168>)
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006826:	f000 f9eb 	bl	8006c00 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800682a:	f000 f9b1 	bl	8006b90 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800682e:	f000 fc83 	bl	8007138 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006832:	bf00      	nop
 8006834:	3730      	adds	r7, #48	; 0x30
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	200142f4 	.word	0x200142f4
 8006840:	080078b4 	.word	0x080078b4
 8006844:	20014324 	.word	0x20014324

08006848 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800684e:	f3ef 8311 	mrs	r3, BASEPRI
 8006852:	f04f 0120 	mov.w	r1, #32
 8006856:	f381 8811 	msr	BASEPRI, r1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	480b      	ldr	r0, [pc, #44]	; (800688c <SEGGER_SYSVIEW_Stop+0x44>)
 800685e:	f7fe ff33 	bl	80056c8 <_PreparePacket>
 8006862:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <SEGGER_SYSVIEW_Stop+0x48>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800686c:	220b      	movs	r2, #11
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6838      	ldr	r0, [r7, #0]
 8006872:	f7ff f817 	bl	80058a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <SEGGER_SYSVIEW_Stop+0x48>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f383 8811 	msr	BASEPRI, r3
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20014324 	.word	0x20014324
 8006890:	200142f4 	.word	0x200142f4

08006894 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b08c      	sub	sp, #48	; 0x30
 8006898:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800689a:	f3ef 8311 	mrs	r3, BASEPRI
 800689e:	f04f 0120 	mov.w	r1, #32
 80068a2:	f381 8811 	msr	BASEPRI, r1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	4845      	ldr	r0, [pc, #276]	; (80069c0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80068aa:	f7fe ff0d 	bl	80056c8 <_PreparePacket>
 80068ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b8:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068be:	e00b      	b.n	80068d8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	09db      	lsrs	r3, r3, #7
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	2b7f      	cmp	r3, #127	; 0x7f
 80068dc:	d8f0      	bhi.n	80068c0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
 80068f2:	4b34      	ldr	r3, [pc, #208]	; (80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	e00b      	b.n	8006912 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	6279      	str	r1, [r7, #36]	; 0x24
 8006904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	09db      	lsrs	r3, r3, #7
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	2b7f      	cmp	r3, #127	; 0x7f
 8006916:	d8f0      	bhi.n	80068fa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	627a      	str	r2, [r7, #36]	; 0x24
 800691e:	6a3a      	ldr	r2, [r7, #32]
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	e00b      	b.n	800694c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	1c59      	adds	r1, r3, #1
 800693c:	61f9      	str	r1, [r7, #28]
 800693e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	09db      	lsrs	r3, r3, #7
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b7f      	cmp	r3, #127	; 0x7f
 8006950:	d8f0      	bhi.n	8006934 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	61fa      	str	r2, [r7, #28]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	2300      	movs	r3, #0
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	e00b      	b.n	8006984 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	6179      	str	r1, [r7, #20]
 8006976:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	09db      	lsrs	r3, r3, #7
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b7f      	cmp	r3, #127	; 0x7f
 8006988:	d8f0      	bhi.n	800696c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	617a      	str	r2, [r7, #20]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800699a:	2218      	movs	r2, #24
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	68b8      	ldr	r0, [r7, #8]
 80069a0:	f7fe ff80 	bl	80058a4 <_SendPacket>
  RECORD_END();
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069aa:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80069b2:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	4798      	blx	r3
  }
}
 80069b8:	bf00      	nop
 80069ba:	3730      	adds	r7, #48	; 0x30
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20014324 	.word	0x20014324
 80069c4:	200142f4 	.word	0x200142f4

080069c8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b092      	sub	sp, #72	; 0x48
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069d0:	f3ef 8311 	mrs	r3, BASEPRI
 80069d4:	f04f 0120 	mov.w	r1, #32
 80069d8:	f381 8811 	msr	BASEPRI, r1
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	486a      	ldr	r0, [pc, #424]	; (8006b88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80069e0:	f7fe fe72 	bl	80056c8 <_PreparePacket>
 80069e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4b66      	ldr	r3, [pc, #408]	; (8006b8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	643b      	str	r3, [r7, #64]	; 0x40
 80069fa:	e00b      	b.n	8006a14 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80069fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	6479      	str	r1, [r7, #68]	; 0x44
 8006a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a10:	09db      	lsrs	r3, r3, #7
 8006a12:	643b      	str	r3, [r7, #64]	; 0x40
 8006a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a16:	2b7f      	cmp	r3, #127	; 0x7f
 8006a18:	d8f0      	bhi.n	80069fc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a34:	e00b      	b.n	8006a4e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3c:	1c59      	adds	r1, r3, #1
 8006a3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	2b7f      	cmp	r3, #127	; 0x7f
 8006a52:	d8f0      	bhi.n	8006a36 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a62:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7fe fddb 	bl	8005628 <_EncodeStr>
 8006a72:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a74:	2209      	movs	r2, #9
 8006a76:	68f9      	ldr	r1, [r7, #12]
 8006a78:	6938      	ldr	r0, [r7, #16]
 8006a7a:	f7fe ff13 	bl	80058a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	637b      	str	r3, [r7, #52]	; 0x34
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b40      	ldr	r3, [pc, #256]	; (8006b8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30
 8006a92:	e00b      	b.n	8006aac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	6379      	str	r1, [r7, #52]	; 0x34
 8006a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	09db      	lsrs	r3, r3, #7
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab0:	d8f0      	bhi.n	8006a94 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	637a      	str	r2, [r7, #52]	; 0x34
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006acc:	e00b      	b.n	8006ae6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	1c59      	adds	r1, r3, #1
 8006ad6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	09db      	lsrs	r3, r3, #7
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aea:	d8f0      	bhi.n	8006ace <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	623b      	str	r3, [r7, #32]
 8006b06:	e00b      	b.n	8006b20 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	6279      	str	r1, [r7, #36]	; 0x24
 8006b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	09db      	lsrs	r3, r3, #7
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	2b7f      	cmp	r3, #127	; 0x7f
 8006b24:	d8f0      	bhi.n	8006b08 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	e00b      	b.n	8006b58 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	1c59      	adds	r1, r3, #1
 8006b48:	61f9      	str	r1, [r7, #28]
 8006b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	09db      	lsrs	r3, r3, #7
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5c:	d8f0      	bhi.n	8006b40 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	61fa      	str	r2, [r7, #28]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b6e:	2215      	movs	r2, #21
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	6938      	ldr	r0, [r7, #16]
 8006b74:	f7fe fe96 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f383 8811 	msr	BASEPRI, r3
}
 8006b7e:	bf00      	nop
 8006b80:	3748      	adds	r7, #72	; 0x48
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20014324 	.word	0x20014324
 8006b8c:	200142f4 	.word	0x200142f4

08006b90 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006ba6:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	4798      	blx	r3
  }
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200142f4 	.word	0x200142f4

08006bb8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc4:	f04f 0120 	mov.w	r1, #32
 8006bc8:	f381 8811 	msr	BASEPRI, r1
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	480b      	ldr	r0, [pc, #44]	; (8006bfc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006bd0:	f7fe fd7a 	bl	80056c8 <_PreparePacket>
 8006bd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bd6:	2280      	movs	r2, #128	; 0x80
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f7fe fd24 	bl	8005628 <_EncodeStr>
 8006be0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006be2:	220e      	movs	r2, #14
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	6938      	ldr	r0, [r7, #16]
 8006be8:	f7fe fe5c 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f383 8811 	msr	BASEPRI, r3
}
 8006bf2:	bf00      	nop
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20014324 	.word	0x20014324

08006c00 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006c00:	b590      	push	{r4, r7, lr}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006c06:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01a      	beq.n	8006c44 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006c18:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4798      	blx	r3
 8006c20:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c24:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	000a      	movs	r2, r1
 8006c34:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c36:	4613      	mov	r3, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	200d      	movs	r0, #13
 8006c3e:	f7ff fbe7 	bl	8006410 <SEGGER_SYSVIEW_RecordU32x2>
 8006c42:	e006      	b.n	8006c52 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	200c      	movs	r0, #12
 8006c4c:	f7ff fba4 	bl	8006398 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd90      	pop	{r4, r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200142f4 	.word	0x200142f4
 8006c60:	e0001004 	.word	0xe0001004

08006c64 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6e:	f04f 0120 	mov.w	r1, #32
 8006c72:	f381 8811 	msr	BASEPRI, r1
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	4819      	ldr	r0, [pc, #100]	; (8006ce0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c7a:	f7fe fd25 	bl	80056c8 <_PreparePacket>
 8006c7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c84:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	e00b      	b.n	8006cb0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	6179      	str	r1, [r7, #20]
 8006ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	09db      	lsrs	r3, r3, #7
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb4:	d8f0      	bhi.n	8006c98 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	617a      	str	r2, [r7, #20]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	68b8      	ldr	r0, [r7, #8]
 8006ccc:	f7fe fdea 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f383 8811 	msr	BASEPRI, r3
}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20014324 	.word	0x20014324
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cee:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf2:	f04f 0120 	mov.w	r1, #32
 8006cf6:	f381 8811 	msr	BASEPRI, r1
 8006cfa:	607b      	str	r3, [r7, #4]
 8006cfc:	4807      	ldr	r0, [pc, #28]	; (8006d1c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006cfe:	f7fe fce3 	bl	80056c8 <_PreparePacket>
 8006d02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006d04:	2203      	movs	r2, #3
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6838      	ldr	r0, [r7, #0]
 8006d0a:	f7fe fdcb 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f383 8811 	msr	BASEPRI, r3
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20014324 	.word	0x20014324

08006d20 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d26:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2a:	f04f 0120 	mov.w	r1, #32
 8006d2e:	f381 8811 	msr	BASEPRI, r1
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	4807      	ldr	r0, [pc, #28]	; (8006d54 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d36:	f7fe fcc7 	bl	80056c8 <_PreparePacket>
 8006d3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d3c:	2212      	movs	r2, #18
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6838      	ldr	r0, [r7, #0]
 8006d42:	f7fe fdaf 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f383 8811 	msr	BASEPRI, r3
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20014324 	.word	0x20014324

08006d58 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d62:	f04f 0120 	mov.w	r1, #32
 8006d66:	f381 8811 	msr	BASEPRI, r1
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	4807      	ldr	r0, [pc, #28]	; (8006d8c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d6e:	f7fe fcab 	bl	80056c8 <_PreparePacket>
 8006d72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d74:	2211      	movs	r2, #17
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f7fe fd93 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f383 8811 	msr	BASEPRI, r3
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20014324 	.word	0x20014324

08006d90 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d98:	f3ef 8311 	mrs	r3, BASEPRI
 8006d9c:	f04f 0120 	mov.w	r1, #32
 8006da0:	f381 8811 	msr	BASEPRI, r1
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	4819      	ldr	r0, [pc, #100]	; (8006e0c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006da8:	f7fe fc8e 	bl	80056c8 <_PreparePacket>
 8006dac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	e00b      	b.n	8006dde <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	61f9      	str	r1, [r7, #28]
 8006dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	09db      	lsrs	r3, r3, #7
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b7f      	cmp	r3, #127	; 0x7f
 8006de2:	d8f0      	bhi.n	8006dc6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	61fa      	str	r2, [r7, #28]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006df4:	2208      	movs	r2, #8
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	6938      	ldr	r0, [r7, #16]
 8006dfa:	f7fe fd53 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f383 8811 	msr	BASEPRI, r3
}
 8006e04:	bf00      	nop
 8006e06:	3720      	adds	r7, #32
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20014324 	.word	0x20014324
 8006e10:	200142f4 	.word	0x200142f4

08006e14 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e20:	f04f 0120 	mov.w	r1, #32
 8006e24:	f381 8811 	msr	BASEPRI, r1
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	4819      	ldr	r0, [pc, #100]	; (8006e90 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e2c:	f7fe fc4c 	bl	80056c8 <_PreparePacket>
 8006e30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e36:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e00b      	b.n	8006e62 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	1c59      	adds	r1, r3, #1
 8006e52:	61f9      	str	r1, [r7, #28]
 8006e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	09db      	lsrs	r3, r3, #7
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b7f      	cmp	r3, #127	; 0x7f
 8006e66:	d8f0      	bhi.n	8006e4a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	61fa      	str	r2, [r7, #28]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e78:	2204      	movs	r2, #4
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6938      	ldr	r0, [r7, #16]
 8006e7e:	f7fe fd11 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f383 8811 	msr	BASEPRI, r3
}
 8006e88:	bf00      	nop
 8006e8a:	3720      	adds	r7, #32
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20014324 	.word	0x20014324
 8006e94:	200142f4 	.word	0x200142f4

08006e98 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea4:	f04f 0120 	mov.w	r1, #32
 8006ea8:	f381 8811 	msr	BASEPRI, r1
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	4819      	ldr	r0, [pc, #100]	; (8006f14 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006eb0:	f7fe fc0a 	bl	80056c8 <_PreparePacket>
 8006eb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eba:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e00b      	b.n	8006ee6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	61f9      	str	r1, [r7, #28]
 8006ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	09db      	lsrs	r3, r3, #7
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eea:	d8f0      	bhi.n	8006ece <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	61fa      	str	r2, [r7, #28]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006efc:	2206      	movs	r2, #6
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	6938      	ldr	r0, [r7, #16]
 8006f02:	f7fe fccf 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f383 8811 	msr	BASEPRI, r3
}
 8006f0c:	bf00      	nop
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20014324 	.word	0x20014324
 8006f18:	200142f4 	.word	0x200142f4

08006f1c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	; 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f26:	f3ef 8311 	mrs	r3, BASEPRI
 8006f2a:	f04f 0120 	mov.w	r1, #32
 8006f2e:	f381 8811 	msr	BASEPRI, r1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	4827      	ldr	r0, [pc, #156]	; (8006fd4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f36:	f7fe fbc7 	bl	80056c8 <_PreparePacket>
 8006f3a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	623b      	str	r3, [r7, #32]
 8006f52:	e00b      	b.n	8006f6c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	1c59      	adds	r1, r3, #1
 8006f5c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	09db      	lsrs	r3, r3, #7
 8006f6a:	623b      	str	r3, [r7, #32]
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f70:	d8f0      	bhi.n	8006f54 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	627a      	str	r2, [r7, #36]	; 0x24
 8006f78:	6a3a      	ldr	r2, [r7, #32]
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	61fb      	str	r3, [r7, #28]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	e00b      	b.n	8006fa4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	61f9      	str	r1, [r7, #28]
 8006f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	09db      	lsrs	r3, r3, #7
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa8:	d8f0      	bhi.n	8006f8c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	61fa      	str	r2, [r7, #28]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006fba:	2207      	movs	r2, #7
 8006fbc:	68f9      	ldr	r1, [r7, #12]
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f7fe fc70 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f383 8811 	msr	BASEPRI, r3
}
 8006fca:	bf00      	nop
 8006fcc:	3728      	adds	r7, #40	; 0x28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20014324 	.word	0x20014324
 8006fd8:	200142f4 	.word	0x200142f4

08006fdc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006fe4:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	1ad3      	subs	r3, r2, r3
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	200142f4 	.word	0x200142f4

08006ffc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	; 0x30
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007006:	4b3b      	ldr	r3, [pc, #236]	; (80070f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d06d      	beq.n	80070ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800700e:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007014:	2300      	movs	r3, #0
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
 8007018:	e008      	b.n	800702c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	3301      	adds	r3, #1
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007030:	429a      	cmp	r2, r3
 8007032:	d3f2      	bcc.n	800701a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007034:	e000      	b.n	8007038 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007036:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d055      	beq.n	80070ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800703e:	f3ef 8311 	mrs	r3, BASEPRI
 8007042:	f04f 0120 	mov.w	r1, #32
 8007046:	f381 8811 	msr	BASEPRI, r1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	482a      	ldr	r0, [pc, #168]	; (80070f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800704e:	f7fe fb3b 	bl	80056c8 <_PreparePacket>
 8007052:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	623b      	str	r3, [r7, #32]
 8007060:	e00b      	b.n	800707a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	1c59      	adds	r1, r3, #1
 800706a:	6279      	str	r1, [r7, #36]	; 0x24
 800706c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	09db      	lsrs	r3, r3, #7
 8007078:	623b      	str	r3, [r7, #32]
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	2b7f      	cmp	r3, #127	; 0x7f
 800707e:	d8f0      	bhi.n	8007062 <SEGGER_SYSVIEW_SendModule+0x66>
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	627a      	str	r2, [r7, #36]	; 0x24
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e00b      	b.n	80070b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	1c59      	adds	r1, r3, #1
 80070a4:	61f9      	str	r1, [r7, #28]
 80070a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	09db      	lsrs	r3, r3, #7
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b7f      	cmp	r3, #127	; 0x7f
 80070b8:	d8f0      	bhi.n	800709c <SEGGER_SYSVIEW_SendModule+0xa0>
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	61fa      	str	r2, [r7, #28]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2280      	movs	r2, #128	; 0x80
 80070d0:	4619      	mov	r1, r3
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7fe faa8 	bl	8005628 <_EncodeStr>
 80070d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070da:	2216      	movs	r2, #22
 80070dc:	68f9      	ldr	r1, [r7, #12]
 80070de:	6938      	ldr	r0, [r7, #16]
 80070e0:	f7fe fbe0 	bl	80058a4 <_SendPacket>
      RECORD_END();
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80070ea:	bf00      	nop
 80070ec:	3730      	adds	r7, #48	; 0x30
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	2001431c 	.word	0x2001431c
 80070f8:	20014324 	.word	0x20014324

080070fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007102:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800710a:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f2      	bne.n	8007110 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2001431c 	.word	0x2001431c

08007138 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800713e:	f3ef 8311 	mrs	r3, BASEPRI
 8007142:	f04f 0120 	mov.w	r1, #32
 8007146:	f381 8811 	msr	BASEPRI, r1
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	4817      	ldr	r0, [pc, #92]	; (80071ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800714e:	f7fe fabb 	bl	80056c8 <_PreparePacket>
 8007152:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e00b      	b.n	800717c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	1c59      	adds	r1, r3, #1
 800716c:	6179      	str	r1, [r7, #20]
 800716e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	09db      	lsrs	r3, r3, #7
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b7f      	cmp	r3, #127	; 0x7f
 8007180:	d8f0      	bhi.n	8007164 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	617a      	str	r2, [r7, #20]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007192:	221b      	movs	r2, #27
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	68b8      	ldr	r0, [r7, #8]
 8007198:	f7fe fb84 	bl	80058a4 <_SendPacket>
  RECORD_END();
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f383 8811 	msr	BASEPRI, r3
}
 80071a2:	bf00      	nop
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20014324 	.word	0x20014324
 80071b0:	20014320 	.word	0x20014320

080071b4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80071b4:	b40f      	push	{r0, r1, r2, r3}
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80071bc:	f107 0314 	add.w	r3, r7, #20
 80071c0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	461a      	mov	r2, r3
 80071c6:	2100      	movs	r1, #0
 80071c8:	6938      	ldr	r0, [r7, #16]
 80071ca:	f7fe fe7b 	bl	8005ec4 <_VPrintTarget>
  va_end(ParamList);
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071d8:	b004      	add	sp, #16
 80071da:	4770      	bx	lr

080071dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08a      	sub	sp, #40	; 0x28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071e4:	f3ef 8311 	mrs	r3, BASEPRI
 80071e8:	f04f 0120 	mov.w	r1, #32
 80071ec:	f381 8811 	msr	BASEPRI, r1
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	4827      	ldr	r0, [pc, #156]	; (8007290 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071f4:	f7fe fa68 	bl	80056c8 <_PreparePacket>
 80071f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071fa:	2280      	movs	r2, #128	; 0x80
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	6938      	ldr	r0, [r7, #16]
 8007200:	f7fe fa12 	bl	8005628 <_EncodeStr>
 8007204:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	2301      	movs	r3, #1
 800720c:	623b      	str	r3, [r7, #32]
 800720e:	e00b      	b.n	8007228 <SEGGER_SYSVIEW_Warn+0x4c>
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	1c59      	adds	r1, r3, #1
 8007218:	6279      	str	r1, [r7, #36]	; 0x24
 800721a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	09db      	lsrs	r3, r3, #7
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	2b7f      	cmp	r3, #127	; 0x7f
 800722c:	d8f0      	bhi.n	8007210 <SEGGER_SYSVIEW_Warn+0x34>
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	627a      	str	r2, [r7, #36]	; 0x24
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	2300      	movs	r3, #0
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e00b      	b.n	8007260 <SEGGER_SYSVIEW_Warn+0x84>
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	1c59      	adds	r1, r3, #1
 8007250:	61f9      	str	r1, [r7, #28]
 8007252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	09db      	lsrs	r3, r3, #7
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b7f      	cmp	r3, #127	; 0x7f
 8007264:	d8f0      	bhi.n	8007248 <SEGGER_SYSVIEW_Warn+0x6c>
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	61fa      	str	r2, [r7, #28]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007276:	221a      	movs	r2, #26
 8007278:	68f9      	ldr	r1, [r7, #12]
 800727a:	6938      	ldr	r0, [r7, #16]
 800727c:	f7fe fb12 	bl	80058a4 <_SendPacket>
  RECORD_END();
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f383 8811 	msr	BASEPRI, r3
}
 8007286:	bf00      	nop
 8007288:	3728      	adds	r7, #40	; 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20014324 	.word	0x20014324

08007294 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007298:	4803      	ldr	r0, [pc, #12]	; (80072a8 <_cbSendSystemDesc+0x14>)
 800729a:	f7ff fc8d 	bl	8006bb8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800729e:	4803      	ldr	r0, [pc, #12]	; (80072ac <_cbSendSystemDesc+0x18>)
 80072a0:	f7ff fc8a 	bl	8006bb8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80072a4:	bf00      	nop
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	080077dc 	.word	0x080077dc
 80072ac:	08007820 	.word	0x08007820

080072b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80072ba:	6819      	ldr	r1, [r3, #0]
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80072be:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80072c0:	f7fe fff8 	bl	80062b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80072c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80072c8:	f7ff f838 	bl	800633c <SEGGER_SYSVIEW_SetRAMBase>
}
 80072cc:	bf00      	nop
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000000 	.word	0x20000000
 80072d4:	08007295 	.word	0x08007295
 80072d8:	080078d0 	.word	0x080078d0

080072dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072de:	b085      	sub	sp, #20
 80072e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80072e2:	2300      	movs	r3, #0
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	e033      	b.n	8007350 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80072e8:	491e      	ldr	r1, [pc, #120]	; (8007364 <_cbSendTaskList+0x88>)
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	491a      	ldr	r1, [pc, #104]	; (8007364 <_cbSendTaskList+0x88>)
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3304      	adds	r3, #4
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	4c16      	ldr	r4, [pc, #88]	; (8007364 <_cbSendTaskList+0x88>)
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4423      	add	r3, r4
 8007318:	3308      	adds	r3, #8
 800731a:	681c      	ldr	r4, [r3, #0]
 800731c:	4d11      	ldr	r5, [pc, #68]	; (8007364 <_cbSendTaskList+0x88>)
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	442b      	add	r3, r5
 800732a:	330c      	adds	r3, #12
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	4e0d      	ldr	r6, [pc, #52]	; (8007364 <_cbSendTaskList+0x88>)
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4433      	add	r3, r6
 800733c:	3310      	adds	r3, #16
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	462b      	mov	r3, r5
 8007344:	4622      	mov	r2, r4
 8007346:	f000 f979 	bl	800763c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3301      	adds	r3, #1
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <_cbSendTaskList+0x8c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	429a      	cmp	r2, r3
 8007358:	d3c6      	bcc.n	80072e8 <_cbSendTaskList+0xc>
  }
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007364:	20014408 	.word	0x20014408
 8007368:	200144a8 	.word	0x200144a8

0800736c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800736c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007374:	f7fc fa02 	bl	800377c <xTaskGetTickCountFromISR>
 8007378:	4603      	mov	r3, r0
 800737a:	2200      	movs	r2, #0
 800737c:	469a      	mov	sl, r3
 800737e:	4693      	mov	fp, r2
 8007380:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	f04f 0a00 	mov.w	sl, #0
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007398:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800739c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80073a0:	4652      	mov	r2, sl
 80073a2:	465b      	mov	r3, fp
 80073a4:	1a14      	subs	r4, r2, r0
 80073a6:	eb63 0501 	sbc.w	r5, r3, r1
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	00ab      	lsls	r3, r5, #2
 80073b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80073b8:	00a2      	lsls	r2, r4, #2
 80073ba:	4614      	mov	r4, r2
 80073bc:	461d      	mov	r5, r3
 80073be:	eb14 0800 	adds.w	r8, r4, r0
 80073c2:	eb45 0901 	adc.w	r9, r5, r1
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073da:	4690      	mov	r8, r2
 80073dc:	4699      	mov	r9, r3
 80073de:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80073e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80073e6:	4610      	mov	r0, r2
 80073e8:	4619      	mov	r1, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080073f4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007402:	2205      	movs	r2, #5
 8007404:	492b      	ldr	r1, [pc, #172]	; (80074b4 <SYSVIEW_AddTask+0xc0>)
 8007406:	68b8      	ldr	r0, [r7, #8]
 8007408:	f000 f95e 	bl	80076c8 <memcmp>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d04b      	beq.n	80074aa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007412:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b07      	cmp	r3, #7
 8007418:	d903      	bls.n	8007422 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800741a:	4828      	ldr	r0, [pc, #160]	; (80074bc <SYSVIEW_AddTask+0xc8>)
 800741c:	f7ff fede 	bl	80071dc <SEGGER_SYSVIEW_Warn>
    return;
 8007420:	e044      	b.n	80074ac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007422:	4b25      	ldr	r3, [pc, #148]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4926      	ldr	r1, [pc, #152]	; (80074c0 <SYSVIEW_AddTask+0xcc>)
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007436:	4b20      	ldr	r3, [pc, #128]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4921      	ldr	r1, [pc, #132]	; (80074c0 <SYSVIEW_AddTask+0xcc>)
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3304      	adds	r3, #4
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800744c:	4b1a      	ldr	r3, [pc, #104]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	491b      	ldr	r1, [pc, #108]	; (80074c0 <SYSVIEW_AddTask+0xcc>)
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	3308      	adds	r3, #8
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4916      	ldr	r1, [pc, #88]	; (80074c0 <SYSVIEW_AddTask+0xcc>)
 8007468:	4613      	mov	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	330c      	adds	r3, #12
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	4910      	ldr	r1, [pc, #64]	; (80074c0 <SYSVIEW_AddTask+0xcc>)
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	3310      	adds	r3, #16
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <SYSVIEW_AddTask+0xc4>)
 8007496:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 f8ca 	bl	800763c <SYSVIEW_SendTaskInfo>
 80074a8:	e000      	b.n	80074ac <SYSVIEW_AddTask+0xb8>
    return;
 80074aa:	bf00      	nop

}
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	08007830 	.word	0x08007830
 80074b8:	200144a8 	.word	0x200144a8
 80074bc:	08007838 	.word	0x08007838
 80074c0:	20014408 	.word	0x20014408

080074c4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80074cc:	4b59      	ldr	r3, [pc, #356]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80ab 	beq.w	800762c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e00d      	b.n	80074f8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80074dc:	4956      	ldr	r1, [pc, #344]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d008      	beq.n	8007504 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	4b4e      	ldr	r3, [pc, #312]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d3ec      	bcc.n	80074dc <SYSVIEW_DeleteTask+0x18>
 8007502:	e000      	b.n	8007506 <SYSVIEW_DeleteTask+0x42>
      break;
 8007504:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8007506:	4b4b      	ldr	r3, [pc, #300]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3b01      	subs	r3, #1
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	429a      	cmp	r2, r3
 8007510:	d111      	bne.n	8007536 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4a46      	ldr	r2, [pc, #280]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 800751e:	4413      	add	r3, r2
 8007520:	2214      	movs	r2, #20
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f000 f8ed 	bl	8007704 <memset>
    _NumTasks--;
 800752a:	4b42      	ldr	r3, [pc, #264]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3b01      	subs	r3, #1
 8007530:	4a40      	ldr	r2, [pc, #256]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	e07b      	b.n	800762e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8007536:	4b3f      	ldr	r3, [pc, #252]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d276      	bcs.n	800762e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8007540:	4b3c      	ldr	r3, [pc, #240]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	1e5a      	subs	r2, r3, #1
 8007546:	493c      	ldr	r1, [pc, #240]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	6819      	ldr	r1, [r3, #0]
 8007554:	4838      	ldr	r0, [pc, #224]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4403      	add	r3, r0
 8007562:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8007564:	4b33      	ldr	r3, [pc, #204]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	1e5a      	subs	r2, r3, #1
 800756a:	4933      	ldr	r1, [pc, #204]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3304      	adds	r3, #4
 8007578:	6819      	ldr	r1, [r3, #0]
 800757a:	482f      	ldr	r0, [pc, #188]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4403      	add	r3, r0
 8007588:	3304      	adds	r3, #4
 800758a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800758c:	4b29      	ldr	r3, [pc, #164]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	1e5a      	subs	r2, r3, #1
 8007592:	4929      	ldr	r1, [pc, #164]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	3308      	adds	r3, #8
 80075a0:	6819      	ldr	r1, [r3, #0]
 80075a2:	4825      	ldr	r0, [pc, #148]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4403      	add	r3, r0
 80075b0:	3308      	adds	r3, #8
 80075b2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	1e5a      	subs	r2, r3, #1
 80075ba:	491f      	ldr	r1, [pc, #124]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	330c      	adds	r3, #12
 80075c8:	6819      	ldr	r1, [r3, #0]
 80075ca:	481b      	ldr	r0, [pc, #108]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4403      	add	r3, r0
 80075d8:	330c      	adds	r3, #12
 80075da:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80075dc:	4b15      	ldr	r3, [pc, #84]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	4915      	ldr	r1, [pc, #84]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	3310      	adds	r3, #16
 80075f0:	6819      	ldr	r1, [r3, #0]
 80075f2:	4811      	ldr	r0, [pc, #68]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4403      	add	r3, r0
 8007600:	3310      	adds	r3, #16
 8007602:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4a09      	ldr	r2, [pc, #36]	; (8007638 <SYSVIEW_DeleteTask+0x174>)
 8007614:	4413      	add	r3, r2
 8007616:	2214      	movs	r2, #20
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f872 	bl	8007704 <memset>
    _NumTasks--;
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3b01      	subs	r3, #1
 8007626:	4a03      	ldr	r2, [pc, #12]	; (8007634 <SYSVIEW_DeleteTask+0x170>)
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	e000      	b.n	800762e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800762c:	bf00      	nop
  }
}
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	200144a8 	.word	0x200144a8
 8007638:	20014408 	.word	0x20014408

0800763c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	; 0x28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	2214      	movs	r2, #20
 8007650:	2100      	movs	r1, #0
 8007652:	4618      	mov	r0, r3
 8007654:	f000 f856 	bl	8007704 <memset>
  TaskInfo.TaskID     = TaskID;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff f9a9 	bl	80069c8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007676:	bf00      	nop
 8007678:	3728      	adds	r7, #40	; 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <__libc_init_array>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4d0d      	ldr	r5, [pc, #52]	; (80076b8 <__libc_init_array+0x38>)
 8007684:	4c0d      	ldr	r4, [pc, #52]	; (80076bc <__libc_init_array+0x3c>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	2600      	movs	r6, #0
 800768c:	42a6      	cmp	r6, r4
 800768e:	d109      	bne.n	80076a4 <__libc_init_array+0x24>
 8007690:	4d0b      	ldr	r5, [pc, #44]	; (80076c0 <__libc_init_array+0x40>)
 8007692:	4c0c      	ldr	r4, [pc, #48]	; (80076c4 <__libc_init_array+0x44>)
 8007694:	f000 f83e 	bl	8007714 <_init>
 8007698:	1b64      	subs	r4, r4, r5
 800769a:	10a4      	asrs	r4, r4, #2
 800769c:	2600      	movs	r6, #0
 800769e:	42a6      	cmp	r6, r4
 80076a0:	d105      	bne.n	80076ae <__libc_init_array+0x2e>
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a8:	4798      	blx	r3
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7ee      	b.n	800768c <__libc_init_array+0xc>
 80076ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b2:	4798      	blx	r3
 80076b4:	3601      	adds	r6, #1
 80076b6:	e7f2      	b.n	800769e <__libc_init_array+0x1e>
 80076b8:	080078e0 	.word	0x080078e0
 80076bc:	080078e0 	.word	0x080078e0
 80076c0:	080078e0 	.word	0x080078e0
 80076c4:	080078e4 	.word	0x080078e4

080076c8 <memcmp>:
 80076c8:	b510      	push	{r4, lr}
 80076ca:	3901      	subs	r1, #1
 80076cc:	4402      	add	r2, r0
 80076ce:	4290      	cmp	r0, r2
 80076d0:	d101      	bne.n	80076d6 <memcmp+0xe>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e005      	b.n	80076e2 <memcmp+0x1a>
 80076d6:	7803      	ldrb	r3, [r0, #0]
 80076d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076dc:	42a3      	cmp	r3, r4
 80076de:	d001      	beq.n	80076e4 <memcmp+0x1c>
 80076e0:	1b18      	subs	r0, r3, r4
 80076e2:	bd10      	pop	{r4, pc}
 80076e4:	3001      	adds	r0, #1
 80076e6:	e7f2      	b.n	80076ce <memcmp+0x6>

080076e8 <memcpy>:
 80076e8:	440a      	add	r2, r1
 80076ea:	4291      	cmp	r1, r2
 80076ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f0:	d100      	bne.n	80076f4 <memcpy+0xc>
 80076f2:	4770      	bx	lr
 80076f4:	b510      	push	{r4, lr}
 80076f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076fe:	4291      	cmp	r1, r2
 8007700:	d1f9      	bne.n	80076f6 <memcpy+0xe>
 8007702:	bd10      	pop	{r4, pc}

08007704 <memset>:
 8007704:	4402      	add	r2, r0
 8007706:	4603      	mov	r3, r0
 8007708:	4293      	cmp	r3, r2
 800770a:	d100      	bne.n	800770e <memset+0xa>
 800770c:	4770      	bx	lr
 800770e:	f803 1b01 	strb.w	r1, [r3], #1
 8007712:	e7f9      	b.n	8007708 <memset+0x4>

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr
