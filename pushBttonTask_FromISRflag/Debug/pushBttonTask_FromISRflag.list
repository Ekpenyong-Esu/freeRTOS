
pushBttonTask_FromISRflag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014418  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001442c  2001442c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012054  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ea  00000000  00000000  00032098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00034888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  00035980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025132  00000000  00000000  00036920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001227b  00000000  00000000  0005ba52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4e85  00000000  00000000  0006dccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152b52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046ac  00000000  00000000  00152ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c7c 	.word	0x08005c7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08005c7c 	.word	0x08005c7c

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012db4 	.word	0x20012db4

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b974 	b.w	8000594 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	9d08      	ldr	r5, [sp, #32]
 80002ca:	4604      	mov	r4, r0
 80002cc:	468e      	mov	lr, r1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d14d      	bne.n	800036e <__udivmoddi4+0xaa>
 80002d2:	428a      	cmp	r2, r1
 80002d4:	4694      	mov	ip, r2
 80002d6:	d969      	bls.n	80003ac <__udivmoddi4+0xe8>
 80002d8:	fab2 f282 	clz	r2, r2
 80002dc:	b152      	cbz	r2, 80002f4 <__udivmoddi4+0x30>
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	f1c2 0120 	rsb	r1, r2, #32
 80002e6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ee:	ea41 0e03 	orr.w	lr, r1, r3
 80002f2:	4094      	lsls	r4, r2
 80002f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f8:	0c21      	lsrs	r1, r4, #16
 80002fa:	fbbe f6f8 	udiv	r6, lr, r8
 80002fe:	fa1f f78c 	uxth.w	r7, ip
 8000302:	fb08 e316 	mls	r3, r8, r6, lr
 8000306:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800030a:	fb06 f107 	mul.w	r1, r6, r7
 800030e:	4299      	cmp	r1, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x64>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 30ff 	add.w	r0, r6, #4294967295
 800031a:	f080 811f 	bcs.w	800055c <__udivmoddi4+0x298>
 800031e:	4299      	cmp	r1, r3
 8000320:	f240 811c 	bls.w	800055c <__udivmoddi4+0x298>
 8000324:	3e02      	subs	r6, #2
 8000326:	4463      	add	r3, ip
 8000328:	1a5b      	subs	r3, r3, r1
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000338:	fb00 f707 	mul.w	r7, r0, r7
 800033c:	42a7      	cmp	r7, r4
 800033e:	d90a      	bls.n	8000356 <__udivmoddi4+0x92>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295
 8000348:	f080 810a 	bcs.w	8000560 <__udivmoddi4+0x29c>
 800034c:	42a7      	cmp	r7, r4
 800034e:	f240 8107 	bls.w	8000560 <__udivmoddi4+0x29c>
 8000352:	4464      	add	r4, ip
 8000354:	3802      	subs	r0, #2
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	1be4      	subs	r4, r4, r7
 800035c:	2600      	movs	r6, #0
 800035e:	b11d      	cbz	r5, 8000368 <__udivmoddi4+0xa4>
 8000360:	40d4      	lsrs	r4, r2
 8000362:	2300      	movs	r3, #0
 8000364:	e9c5 4300 	strd	r4, r3, [r5]
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d909      	bls.n	8000386 <__udivmoddi4+0xc2>
 8000372:	2d00      	cmp	r5, #0
 8000374:	f000 80ef 	beq.w	8000556 <__udivmoddi4+0x292>
 8000378:	2600      	movs	r6, #0
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	4630      	mov	r0, r6
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	fab3 f683 	clz	r6, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d14a      	bne.n	8000424 <__udivmoddi4+0x160>
 800038e:	428b      	cmp	r3, r1
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xd4>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 80f9 	bhi.w	800058a <__udivmoddi4+0x2c6>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb61 0303 	sbc.w	r3, r1, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	469e      	mov	lr, r3
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e0      	beq.n	8000368 <__udivmoddi4+0xa4>
 80003a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003aa:	e7dd      	b.n	8000368 <__udivmoddi4+0xa4>
 80003ac:	b902      	cbnz	r2, 80003b0 <__udivmoddi4+0xec>
 80003ae:	deff      	udf	#255	; 0xff
 80003b0:	fab2 f282 	clz	r2, r2
 80003b4:	2a00      	cmp	r2, #0
 80003b6:	f040 8092 	bne.w	80004de <__udivmoddi4+0x21a>
 80003ba:	eba1 010c 	sub.w	r1, r1, ip
 80003be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	2601      	movs	r6, #1
 80003c8:	0c20      	lsrs	r0, r4, #16
 80003ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ce:	fb07 1113 	mls	r1, r7, r3, r1
 80003d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d6:	fb0e f003 	mul.w	r0, lr, r3
 80003da:	4288      	cmp	r0, r1
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x12c>
 80003de:	eb1c 0101 	adds.w	r1, ip, r1
 80003e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x12a>
 80003e8:	4288      	cmp	r0, r1
 80003ea:	f200 80cb 	bhi.w	8000584 <__udivmoddi4+0x2c0>
 80003ee:	4643      	mov	r3, r8
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f8:	fb07 1110 	mls	r1, r7, r0, r1
 80003fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000400:	fb0e fe00 	mul.w	lr, lr, r0
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x156>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x154>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2ca>
 8000418:	4608      	mov	r0, r1
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000422:	e79c      	b.n	800035e <__udivmoddi4+0x9a>
 8000424:	f1c6 0720 	rsb	r7, r6, #32
 8000428:	40b3      	lsls	r3, r6
 800042a:	fa22 fc07 	lsr.w	ip, r2, r7
 800042e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000432:	fa20 f407 	lsr.w	r4, r0, r7
 8000436:	fa01 f306 	lsl.w	r3, r1, r6
 800043a:	431c      	orrs	r4, r3
 800043c:	40f9      	lsrs	r1, r7
 800043e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000442:	fa00 f306 	lsl.w	r3, r0, r6
 8000446:	fbb1 f8f9 	udiv	r8, r1, r9
 800044a:	0c20      	lsrs	r0, r4, #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fb09 1118 	mls	r1, r9, r8, r1
 8000454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000458:	fb08 f00e 	mul.w	r0, r8, lr
 800045c:	4288      	cmp	r0, r1
 800045e:	fa02 f206 	lsl.w	r2, r2, r6
 8000462:	d90b      	bls.n	800047c <__udivmoddi4+0x1b8>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f108 3aff 	add.w	sl, r8, #4294967295
 800046c:	f080 8088 	bcs.w	8000580 <__udivmoddi4+0x2bc>
 8000470:	4288      	cmp	r0, r1
 8000472:	f240 8085 	bls.w	8000580 <__udivmoddi4+0x2bc>
 8000476:	f1a8 0802 	sub.w	r8, r8, #2
 800047a:	4461      	add	r1, ip
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f9 	udiv	r0, r1, r9
 8000484:	fb09 1110 	mls	r1, r9, r0, r1
 8000488:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800048c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000490:	458e      	cmp	lr, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x1e2>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 34ff 	add.w	r4, r0, #4294967295
 800049c:	d26c      	bcs.n	8000578 <__udivmoddi4+0x2b4>
 800049e:	458e      	cmp	lr, r1
 80004a0:	d96a      	bls.n	8000578 <__udivmoddi4+0x2b4>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004aa:	fba0 9402 	umull	r9, r4, r0, r2
 80004ae:	eba1 010e 	sub.w	r1, r1, lr
 80004b2:	42a1      	cmp	r1, r4
 80004b4:	46c8      	mov	r8, r9
 80004b6:	46a6      	mov	lr, r4
 80004b8:	d356      	bcc.n	8000568 <__udivmoddi4+0x2a4>
 80004ba:	d053      	beq.n	8000564 <__udivmoddi4+0x2a0>
 80004bc:	b15d      	cbz	r5, 80004d6 <__udivmoddi4+0x212>
 80004be:	ebb3 0208 	subs.w	r2, r3, r8
 80004c2:	eb61 010e 	sbc.w	r1, r1, lr
 80004c6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ca:	fa22 f306 	lsr.w	r3, r2, r6
 80004ce:	40f1      	lsrs	r1, r6
 80004d0:	431f      	orrs	r7, r3
 80004d2:	e9c5 7100 	strd	r7, r1, [r5]
 80004d6:	2600      	movs	r6, #0
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	f1c2 0320 	rsb	r3, r2, #32
 80004e2:	40d8      	lsrs	r0, r3
 80004e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e8:	fa21 f303 	lsr.w	r3, r1, r3
 80004ec:	4091      	lsls	r1, r2
 80004ee:	4301      	orrs	r1, r0
 80004f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f4:	fa1f fe8c 	uxth.w	lr, ip
 80004f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004fc:	fb07 3610 	mls	r6, r7, r0, r3
 8000500:	0c0b      	lsrs	r3, r1, #16
 8000502:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000506:	fb00 f60e 	mul.w	r6, r0, lr
 800050a:	429e      	cmp	r6, r3
 800050c:	fa04 f402 	lsl.w	r4, r4, r2
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x260>
 8000512:	eb1c 0303 	adds.w	r3, ip, r3
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	d22f      	bcs.n	800057c <__udivmoddi4+0x2b8>
 800051c:	429e      	cmp	r6, r3
 800051e:	d92d      	bls.n	800057c <__udivmoddi4+0x2b8>
 8000520:	3802      	subs	r0, #2
 8000522:	4463      	add	r3, ip
 8000524:	1b9b      	subs	r3, r3, r6
 8000526:	b289      	uxth	r1, r1
 8000528:	fbb3 f6f7 	udiv	r6, r3, r7
 800052c:	fb07 3316 	mls	r3, r7, r6, r3
 8000530:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000534:	fb06 f30e 	mul.w	r3, r6, lr
 8000538:	428b      	cmp	r3, r1
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x28a>
 800053c:	eb1c 0101 	adds.w	r1, ip, r1
 8000540:	f106 38ff 	add.w	r8, r6, #4294967295
 8000544:	d216      	bcs.n	8000574 <__udivmoddi4+0x2b0>
 8000546:	428b      	cmp	r3, r1
 8000548:	d914      	bls.n	8000574 <__udivmoddi4+0x2b0>
 800054a:	3e02      	subs	r6, #2
 800054c:	4461      	add	r1, ip
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000554:	e738      	b.n	80003c8 <__udivmoddi4+0x104>
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e705      	b.n	8000368 <__udivmoddi4+0xa4>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e3      	b.n	8000328 <__udivmoddi4+0x64>
 8000560:	4618      	mov	r0, r3
 8000562:	e6f8      	b.n	8000356 <__udivmoddi4+0x92>
 8000564:	454b      	cmp	r3, r9
 8000566:	d2a9      	bcs.n	80004bc <__udivmoddi4+0x1f8>
 8000568:	ebb9 0802 	subs.w	r8, r9, r2
 800056c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000570:	3801      	subs	r0, #1
 8000572:	e7a3      	b.n	80004bc <__udivmoddi4+0x1f8>
 8000574:	4646      	mov	r6, r8
 8000576:	e7ea      	b.n	800054e <__udivmoddi4+0x28a>
 8000578:	4620      	mov	r0, r4
 800057a:	e794      	b.n	80004a6 <__udivmoddi4+0x1e2>
 800057c:	4640      	mov	r0, r8
 800057e:	e7d1      	b.n	8000524 <__udivmoddi4+0x260>
 8000580:	46d0      	mov	r8, sl
 8000582:	e77b      	b.n	800047c <__udivmoddi4+0x1b8>
 8000584:	3b02      	subs	r3, #2
 8000586:	4461      	add	r1, ip
 8000588:	e732      	b.n	80003f0 <__udivmoddi4+0x12c>
 800058a:	4630      	mov	r0, r6
 800058c:	e709      	b.n	80003a2 <__udivmoddi4+0xde>
 800058e:	4464      	add	r4, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x156>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fce3 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f84f 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f8b9 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0x90>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <main+0x90>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005b6:	f005 f97b 	bl	80058b0 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(ledGreenHandler,"Led-G", 500, NULL, 2, &led_Green_handle);
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <main+0x94>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005c8:	4919      	ldr	r1, [pc, #100]	; (8000630 <main+0x98>)
 80005ca:	481a      	ldr	r0, [pc, #104]	; (8000634 <main+0x9c>)
 80005cc:	f001 fff7 	bl	80025be <xTaskCreate>
 80005d0:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0x54>


  status = xTaskCreate(ledRedHandler, "Led-R", 500, NULL, 3, &led_Red_Handle);
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <main+0xa0>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2303      	movs	r3, #3
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005fc:	490f      	ldr	r1, [pc, #60]	; (800063c <main+0xa4>)
 80005fe:	4810      	ldr	r0, [pc, #64]	; (8000640 <main+0xa8>)
 8000600:	f001 ffdd 	bl	80025be <xTaskCreate>
 8000604:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0x8a>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	607b      	str	r3, [r7, #4]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0x88>

  //status = xTaskCreate(button_handler,"Button_Task", 200, NULL, 3, &button_Handle);
  //configASSERT(status == pdPASS);


  vTaskStartScheduler();
 8000622:	f002 fa09 	bl	8002a38 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0x8e>
 8000628:	e0001000 	.word	0xe0001000
 800062c:	20000034 	.word	0x20000034
 8000630:	08005c94 	.word	0x08005c94
 8000634:	08000cad 	.word	0x08000cad
 8000638:	20000038 	.word	0x20000038
 800063c:	08005c9c 	.word	0x08005c9c
 8000640:	08000cd9 	.word	0x08000cd9

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fb0a 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a28      	ldr	r2, [pc, #160]	; (8000714 <SystemClock_Config+0xd0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd4>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 ff97 	bl	8001600 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 fb36 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f9f8 	bl	8001af0 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000706:	f000 fb1f 	bl	8000d48 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
 8000736:	4bb2      	ldr	r3, [pc, #712]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4ab1      	ldr	r2, [pc, #708]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4baf      	ldr	r3, [pc, #700]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	623b      	str	r3, [r7, #32]
 800074c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	4bab      	ldr	r3, [pc, #684]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4aaa      	ldr	r2, [pc, #680]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4ba8      	ldr	r3, [pc, #672]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4ba4      	ldr	r3, [pc, #656]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4aa3      	ldr	r2, [pc, #652]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4ba1      	ldr	r3, [pc, #644]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b9d      	ldr	r3, [pc, #628]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a9c      	ldr	r2, [pc, #624]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b9a      	ldr	r3, [pc, #616]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b96      	ldr	r3, [pc, #600]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a95      	ldr	r2, [pc, #596]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b93      	ldr	r3, [pc, #588]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b8f      	ldr	r3, [pc, #572]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a8e      	ldr	r2, [pc, #568]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b8c      	ldr	r3, [pc, #560]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b88      	ldr	r3, [pc, #544]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a87      	ldr	r2, [pc, #540]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b85      	ldr	r3, [pc, #532]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b81      	ldr	r3, [pc, #516]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a80      	ldr	r2, [pc, #512]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b7e      	ldr	r3, [pc, #504]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2116      	movs	r1, #22
 8000816:	487b      	ldr	r0, [pc, #492]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 8000818:	f000 fe9a 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	4879      	ldr	r0, [pc, #484]	; (8000a08 <MX_GPIO_Init+0x2ec>)
 8000822:	f000 fe95 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800082c:	4877      	ldr	r0, [pc, #476]	; (8000a0c <MX_GPIO_Init+0x2f0>)
 800082e:	f000 fe8f 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000838:	4875      	ldr	r0, [pc, #468]	; (8000a10 <MX_GPIO_Init+0x2f4>)
 800083a:	f000 fe89 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800083e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000850:	230c      	movs	r3, #12
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	486e      	ldr	r0, [pc, #440]	; (8000a14 <MX_GPIO_Init+0x2f8>)
 800085c:	f000 fccc 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000860:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000872:	2305      	movs	r3, #5
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4865      	ldr	r0, [pc, #404]	; (8000a14 <MX_GPIO_Init+0x2f8>)
 800087e:	f000 fcbb 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000894:	230e      	movs	r3, #14
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	485d      	ldr	r0, [pc, #372]	; (8000a14 <MX_GPIO_Init+0x2f8>)
 80008a0:	f000 fcaa 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008a4:	2301      	movs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b4:	230c      	movs	r3, #12
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	4851      	ldr	r0, [pc, #324]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 80008c0:	f000 fc9a 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008c4:	2316      	movs	r3, #22
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	484a      	ldr	r0, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 80008dc:	f000 fc8c 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4844      	ldr	r0, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x2ec>)
 80008f6:	f000 fc7f 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008fa:	f248 0306 	movw	r3, #32774	; 0x8006
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000900:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	483d      	ldr	r0, [pc, #244]	; (8000a08 <MX_GPIO_Init+0x2ec>)
 8000912:	f000 fc71 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000916:	f641 0358 	movw	r3, #6232	; 0x1858
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000928:	230e      	movs	r3, #14
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	4835      	ldr	r0, [pc, #212]	; (8000a08 <MX_GPIO_Init+0x2ec>)
 8000934:	f000 fc60 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	482e      	ldr	r0, [pc, #184]	; (8000a08 <MX_GPIO_Init+0x2ec>)
 8000950:	f000 fc52 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000958:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4826      	ldr	r0, [pc, #152]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 800096a:	f000 fc45 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800096e:	2303      	movs	r3, #3
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800097e:	2309      	movs	r3, #9
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4823      	ldr	r0, [pc, #140]	; (8000a18 <MX_GPIO_Init+0x2fc>)
 800098a:	f000 fc35 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098e:	2304      	movs	r3, #4
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	481d      	ldr	r0, [pc, #116]	; (8000a18 <MX_GPIO_Init+0x2fc>)
 80009a2:	f000 fc29 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009a6:	f248 1333 	movw	r3, #33075	; 0x8133
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b8:	230c      	movs	r3, #12
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_GPIO_Init+0x2f4>)
 80009c4:	f000 fc18 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009da:	230c      	movs	r3, #12
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_GPIO_Init+0x300>)
 80009e6:	f000 fc07 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
 80009fc:	e010      	b.n	8000a20 <MX_GPIO_Init+0x304>
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40021400 	.word	0x40021400
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a20:	230e      	movs	r3, #14
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4877      	ldr	r0, [pc, #476]	; (8000c08 <MX_GPIO_Init+0x4ec>)
 8000a2c:	f000 fbe4 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a30:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a42:	230c      	movs	r3, #12
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	486e      	ldr	r0, [pc, #440]	; (8000c08 <MX_GPIO_Init+0x4ec>)
 8000a4e:	f000 fbd3 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4868      	ldr	r0, [pc, #416]	; (8000c08 <MX_GPIO_Init+0x4ec>)
 8000a68:	f000 fbc6 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a6c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4860      	ldr	r0, [pc, #384]	; (8000c0c <MX_GPIO_Init+0x4f0>)
 8000a8a:	f000 fbb5 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	485a      	ldr	r0, [pc, #360]	; (8000c0c <MX_GPIO_Init+0x4f0>)
 8000aa4:	f000 fba8 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000aa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4852      	ldr	r0, [pc, #328]	; (8000c0c <MX_GPIO_Init+0x4f0>)
 8000ac2:	f000 fb99 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ac6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad8:	230e      	movs	r3, #14
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	484b      	ldr	r0, [pc, #300]	; (8000c10 <MX_GPIO_Init+0x4f4>)
 8000ae4:	f000 fb88 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ae8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000afa:	230e      	movs	r3, #14
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4843      	ldr	r0, [pc, #268]	; (8000c14 <MX_GPIO_Init+0x4f8>)
 8000b06:	f000 fb77 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b10:	2312      	movs	r3, #18
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	483b      	ldr	r0, [pc, #236]	; (8000c14 <MX_GPIO_Init+0x4f8>)
 8000b28:	f000 fb66 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b32:	2312      	movs	r3, #18
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4833      	ldr	r0, [pc, #204]	; (8000c18 <MX_GPIO_Init+0x4fc>)
 8000b4a:	f000 fb55 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b60:	2307      	movs	r3, #7
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482b      	ldr	r0, [pc, #172]	; (8000c18 <MX_GPIO_Init+0x4fc>)
 8000b6c:	f000 fb44 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b70:	2348      	movs	r3, #72	; 0x48
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b80:	230e      	movs	r3, #14
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4820      	ldr	r0, [pc, #128]	; (8000c0c <MX_GPIO_Init+0x4f0>)
 8000b8c:	f000 fb34 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ba2:	2309      	movs	r3, #9
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <MX_GPIO_Init+0x4f4>)
 8000bae:	f000 fb23 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bb2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <MX_GPIO_Init+0x4f4>)
 8000bcc:	f000 fb14 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bd0:	2360      	movs	r3, #96	; 0x60
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000be0:	230c      	movs	r3, #12
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_GPIO_Init+0x4ec>)
 8000bec:	f000 fb04 	bl	80011f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2106      	movs	r1, #6
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f000 fad5 	bl	80011a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bfa:	2006      	movs	r0, #6
 8000bfc:	f000 faee 	bl	80011dc <HAL_NVIC_EnableIRQ>

}
 8000c00:	bf00      	nop
 8000c02:	3738      	adds	r7, #56	; 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40020c00 	.word	0x40020c00
 8000c10:	40021800 	.word	0x40021800
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020000 	.word	0x40020000

08000c1c <switch_priority>:




void switch_priority(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;


	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000c26:	f002 fc8d 	bl	8003544 <vPortEnterCritical>
	if(status_button){
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <switch_priority+0x84>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <switch_priority+0x20>
		status_button = 0;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <switch_priority+0x84>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000c3c:	f002 fcb2 	bl	80035a4 <vPortExitCritical>

	if(switch_priority){
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d027      	beq.n	8000c96 <switch_priority+0x7a>
		t1 = xTaskGetHandle("Led-G");
 8000c46:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <switch_priority+0x88>)
 8000c48:	f002 f880 	bl	8002d4c <xTaskGetHandle>
 8000c4c:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Led-R");
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <switch_priority+0x8c>)
 8000c50:	f002 f87c 	bl	8002d4c <xTaskGetHandle>
 8000c54:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000c56:	6938      	ldr	r0, [r7, #16]
 8000c58:	f001 fe14 	bl	8002884 <uxTaskPriorityGet>
 8000c5c:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f001 fe10 	bl	8002884 <uxTaskPriorityGet>
 8000c64:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000c66:	f002 faaf 	bl	80031c8 <xTaskGetCurrentTaskHandle>
 8000c6a:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d108      	bne.n	8000c86 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	6938      	ldr	r0, [r7, #16]
 8000c78:	f001 fe1e 	bl	80028b8 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f001 fe1a 	bl	80028b8 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000c84:	e007      	b.n	8000c96 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f001 fe15 	bl	80028b8 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	6938      	ldr	r0, [r7, #16]
 8000c92:	f001 fe11 	bl	80028b8 <vTaskPrioritySet>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000030 	.word	0x20000030
 8000ca4:	08005c94 	.word	0x08005c94
 8000ca8:	08005c9c 	.word	0x08005c9c

08000cac <ledGreenHandler>:


static void ledGreenHandler(void* parameters)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]


	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <ledGreenHandler+0x24>)
 8000cb6:	f004 fd7d 	bl	80057b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledGreen);
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <ledGreenHandler+0x28>)
 8000cc0:	f000 fc5f 	bl	8001582 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000cc4:	2064      	movs	r0, #100	; 0x64
 8000cc6:	f000 f991 	bl	8000fec <HAL_Delay>
		switch_priority();
 8000cca:	f7ff ffa7 	bl	8000c1c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000cce:	e7f1      	b.n	8000cb4 <ledGreenHandler+0x8>
 8000cd0:	08005ca4 	.word	0x08005ca4
 8000cd4:	40021800 	.word	0x40021800

08000cd8 <ledRedHandler>:
}



static void ledRedHandler(void* parameters)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

	while(1)
		{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000ce0:	4807      	ldr	r0, [pc, #28]	; (8000d00 <ledRedHandler+0x28>)
 8000ce2:	f004 fd67 	bl	80057b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledRed);
 8000ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <ledRedHandler+0x2c>)
 8000cec:	f000 fc49 	bl	8001582 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf4:	f000 f97a 	bl	8000fec <HAL_Delay>
		switch_priority();
 8000cf8:	f7ff ff90 	bl	8000c1c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000cfc:	e7f0      	b.n	8000ce0 <ledRedHandler+0x8>
 8000cfe:	bf00      	nop
 8000d00:	08005cbc 	.word	0x08005cbc
 8000d04:	40021800 	.word	0x40021800

08000d08 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000d0c:	f004 fb0a 	bl	8005324 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <button_interrupt_handler+0x18>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000d16:	f004 fb47 	bl	80053a8 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000030 	.word	0x20000030

08000d24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d36:	f000 f939 	bl	8000fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40001000 	.word	0x40001000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
    vInitPrioGroupValue();
 8000d92:	f002 fb59 	bl	8003448 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_InitTick+0xe4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a32      	ldr	r2, [pc, #200]	; (8000e88 <HAL_InitTick+0xe4>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <HAL_InitTick+0xe4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd0:	f107 0210 	add.w	r2, r7, #16
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f894 	bl	8001f08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dea:	f001 f879 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8000dee:	6378      	str	r0, [r7, #52]	; 0x34
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000df2:	f001 f875 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8000df6:	4603      	mov	r3, r0
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfe:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	0c9b      	lsrs	r3, r3, #18
 8000e06:	3b01      	subs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <HAL_InitTick+0xec>)
 8000e0c:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_InitTick+0xec>)
 8000e12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <HAL_InitTick+0xec>)
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_InitTick+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_InitTick+0xec>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_InitTick+0xec>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <HAL_InitTick+0xec>)
 8000e32:	f001 f89b 	bl	8001f6c <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d11b      	bne.n	8000e7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <HAL_InitTick+0xec>)
 8000e46:	f001 f8eb 	bl	8002020 <HAL_TIM_Base_Start_IT>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d111      	bne.n	8000e7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e58:	2036      	movs	r0, #54	; 0x36
 8000e5a:	f000 f9bf 	bl	80011dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d808      	bhi.n	8000e76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	2036      	movs	r0, #54	; 0x36
 8000e6a:	f000 f99b 	bl	80011a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_InitTick+0xf4>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e002      	b.n	8000e7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	2000003c 	.word	0x2000003c
 8000e94:	40001000 	.word	0x40001000
 8000e98:	20000004 	.word	0x20000004

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  button_interrupt_handler();
 8000ecc:	f7ff ff1c 	bl	8000d08 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 fb71 	bl	80015b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM6_DAC_IRQHandler+0x10>)
 8000ee2:	f001 f90d 	bl	8002100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000003c 	.word	0x2000003c

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3e:	f7ff ffd7 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f004 fe51 	bl	8005be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb27 	bl	8000598 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f58:	08005df8 	.word	0x08005df8
  ldr r2, =_sbss
 8000f5c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f60:	2001442c 	.word	0x2001442c

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f8fc 	bl	800118e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f7ff ff04 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff feda 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000084 	.word	0x20000084

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000084 	.word	0x20000084

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff4c 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b6:	f7ff ff61 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	6978      	ldr	r0, [r7, #20]
 80011c2:	f7ff ffb1 	bl	8001128 <NVIC_EncodePriority>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff80 	bl	80010d4 <__NVIC_SetPriority>
}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff54 	bl	8001098 <__NVIC_EnableIRQ>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e177      	b.n	8001504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8166 	bne.w	80014fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80c0 	beq.w	80014fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b66      	ldr	r3, [pc, #408]	; (800151c <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a65      	ldr	r2, [pc, #404]	; (800151c <HAL_GPIO_Init+0x324>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <HAL_GPIO_Init+0x324>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a61      	ldr	r2, [pc, #388]	; (8001520 <HAL_GPIO_Init+0x328>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a58      	ldr	r2, [pc, #352]	; (8001524 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d037      	beq.n	8001436 <HAL_GPIO_Init+0x23e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a57      	ldr	r2, [pc, #348]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0x23a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a56      	ldr	r2, [pc, #344]	; (800152c <HAL_GPIO_Init+0x334>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x236>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_GPIO_Init+0x338>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x232>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a54      	ldr	r2, [pc, #336]	; (8001534 <HAL_GPIO_Init+0x33c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a53      	ldr	r2, [pc, #332]	; (8001538 <HAL_GPIO_Init+0x340>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x22a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_GPIO_Init+0x344>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_GPIO_Init+0x348>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x34c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x350>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x21a>
 800140e:	2309      	movs	r3, #9
 8001410:	e012      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001412:	230a      	movs	r3, #10
 8001414:	e010      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001416:	2308      	movs	r3, #8
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141a:	2307      	movs	r3, #7
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x328>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_GPIO_Init+0x354>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a34      	ldr	r2, [pc, #208]	; (800154c <HAL_GPIO_Init+0x354>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_GPIO_Init+0x354>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a29      	ldr	r2, [pc, #164]	; (800154c <HAL_GPIO_Init+0x354>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <HAL_GPIO_Init+0x354>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_GPIO_Init+0x354>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_GPIO_Init+0x354>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_GPIO_Init+0x354>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae84 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40021c00 	.word	0x40021c00
 8001544:	40022000 	.word	0x40022000
 8001548:	40022400 	.word	0x40022400
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001594:	887a      	ldrh	r2, [r7, #2]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	041a      	lsls	r2, r3, #16
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43d9      	mvns	r1, r3
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	400b      	ands	r3, r1
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f806 	bl	80015e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e267      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d075      	beq.n	800170a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d00c      	beq.n	8001644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d112      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001642:	d10b      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4b7e      	ldr	r3, [pc, #504]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d05b      	beq.n	8001708 <HAL_RCC_OscConfig+0x108>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d157      	bne.n	8001708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e242      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d106      	bne.n	8001674 <HAL_RCC_OscConfig+0x74>
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a75      	ldr	r2, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e01d      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x98>
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6f      	ldr	r2, [pc, #444]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6c      	ldr	r2, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001698:	4b69      	ldr	r3, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a68      	ldr	r2, [pc, #416]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b66      	ldr	r3, [pc, #408]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc8c 	bl	8000fd4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fc88 	bl	8000fd4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e207      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0xc0>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc78 	bl	8000fd4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fc74 	bl	8000fd4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1f3      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0xe8>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d063      	beq.n	80017de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172a:	2b08      	cmp	r3, #8
 800172c:	d11c      	bne.n	8001768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x152>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e1c7      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4937      	ldr	r1, [pc, #220]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	e03a      	b.n	80017de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCC_OscConfig+0x244>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fc2d 	bl	8000fd4 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fc29 	bl	8000fd4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1a8      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4925      	ldr	r1, [pc, #148]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x244>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc0c 	bl	8000fd4 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff fc08 	bl	8000fd4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e187      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d036      	beq.n	8001858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d016      	beq.n	8001820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_RCC_OscConfig+0x248>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fbec 	bl	8000fd4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fbe8 	bl	8000fd4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e167      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x200>
 800181e:	e01b      	b.n	8001858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_OscConfig+0x248>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fbd5 	bl	8000fd4 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	e00e      	b.n	800184c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff fbd1 	bl	8000fd4 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d907      	bls.n	800184c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e150      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	42470000 	.word	0x42470000
 8001848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ea      	bne.n	800182e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8097 	beq.w	8001994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186a:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a7c      	ldr	r2, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a73      	ldr	r2, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb91 	bl	8000fd4 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff fb8d 	bl	8000fd4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e10c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x2ea>
 80018dc:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a63      	ldr	r2, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e01c      	b.n	8001924 <HAL_RCC_OscConfig+0x324>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x30c>
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0x324>
 800190c:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a54      	ldr	r2, [pc, #336]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d015      	beq.n	8001958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fb52 	bl	8000fd4 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fb4e 	bl	8000fd4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0cb      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ee      	beq.n	8001934 <HAL_RCC_OscConfig+0x334>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fb3c 	bl	8000fd4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff fb38 	bl	8000fd4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0b5      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ee      	bne.n	8001960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800198e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a1 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d05c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d141      	bne.n	8001a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb0c 	bl	8000fd4 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fb08 	bl	8000fd4 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e087      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	491b      	ldr	r1, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fae1 	bl	8000fd4 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff fadd 	bl	8000fd4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e05c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x416>
 8001a34:	e054      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff faca 	bl	8000fd4 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fac6 	bl	8000fd4 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e045      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x444>
 8001a62:	e03d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e038      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000
 8001a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x4ec>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d028      	beq.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d121      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d11a      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0cc      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d90c      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b65      	ldr	r3, [pc, #404]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	494d      	ldr	r1, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d044      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d119      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e06f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e067      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4934      	ldr	r1, [pc, #208]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff f9f8 	bl	8000fd4 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff f9f4 	bl	8000fd4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e04f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 020c 	and.w	r2, r3, #12
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1eb      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d20c      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c76:	f000 f821 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	490a      	ldr	r1, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f884 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08005d98 	.word	0x08005d98
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc0:	b094      	sub	sp, #80	; 0x50
 8001cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd4:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d00d      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x40>
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	f200 80e1 	bhi.w	8001ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cee:	e0db      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b73      	ldr	r3, [pc, #460]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cf4:	e0db      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cfa:	e0d8      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d063      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d2e:	4622      	mov	r2, r4
 8001d30:	462b      	mov	r3, r5
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	0159      	lsls	r1, r3, #5
 8001d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d40:	0150      	lsls	r0, r2, #5
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4621      	mov	r1, r4
 8001d48:	1a51      	subs	r1, r2, r1
 8001d4a:	6139      	str	r1, [r7, #16]
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d60:	4659      	mov	r1, fp
 8001d62:	018b      	lsls	r3, r1, #6
 8001d64:	4651      	mov	r1, sl
 8001d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6a:	4651      	mov	r1, sl
 8001d6c:	018a      	lsls	r2, r1, #6
 8001d6e:	4651      	mov	r1, sl
 8001d70:	ebb2 0801 	subs.w	r8, r2, r1
 8001d74:	4659      	mov	r1, fp
 8001d76:	eb63 0901 	sbc.w	r9, r3, r1
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4699      	mov	r9, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	eb18 0303 	adds.w	r3, r8, r3
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	eb49 0303 	adc.w	r3, r9, r3
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dae:	4629      	mov	r1, r5
 8001db0:	024b      	lsls	r3, r1, #9
 8001db2:	4621      	mov	r1, r4
 8001db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001db8:	4621      	mov	r1, r4
 8001dba:	024a      	lsls	r2, r1, #9
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dcc:	f7fe fa62 	bl	8000294 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd8:	e058      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	099b      	lsrs	r3, r3, #6
 8001de0:	2200      	movs	r2, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	4611      	mov	r1, r2
 8001de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001df4:	4642      	mov	r2, r8
 8001df6:	464b      	mov	r3, r9
 8001df8:	f04f 0000 	mov.w	r0, #0
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	0159      	lsls	r1, r3, #5
 8001e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e06:	0150      	lsls	r0, r2, #5
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e12:	4649      	mov	r1, r9
 8001e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e30:	eb63 050b 	sbc.w	r5, r3, fp
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	00eb      	lsls	r3, r5, #3
 8001e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e42:	00e2      	lsls	r2, r4, #3
 8001e44:	4614      	mov	r4, r2
 8001e46:	461d      	mov	r5, r3
 8001e48:	4643      	mov	r3, r8
 8001e4a:	18e3      	adds	r3, r4, r3
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	464b      	mov	r3, r9
 8001e50:	eb45 0303 	adc.w	r3, r5, r3
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e62:	4629      	mov	r1, r5
 8001e64:	028b      	lsls	r3, r1, #10
 8001e66:	4621      	mov	r1, r4
 8001e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	028a      	lsls	r2, r1, #10
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e76:	2200      	movs	r2, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	61fa      	str	r2, [r7, #28]
 8001e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e80:	f7fe fa08 	bl	8000294 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ea6:	e002      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3750      	adds	r7, #80	; 0x50
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000000 	.word	0x20000000

08001ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08005da8 	.word	0x08005da8

08001f08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	220f      	movs	r2, #15
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_RCC_GetClockConfig+0x60>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 020f 	and.w	r2, r3, #15
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e041      	b.n	8002002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f839 	bl	800200a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f000 f9d8 	bl	8002360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d001      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e04e      	b.n	80020d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d022      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x80>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d01d      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x80>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d018      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x80>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x80>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00e      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x80>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x80>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d004      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x80>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_TIM_Base_Start_IT+0xdc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d111      	bne.n	80020c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d010      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c2:	e007      	b.n	80020d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40000c00 	.word	0x40000c00
 80020f4:	40010400 	.word	0x40010400
 80020f8:	40014000 	.word	0x40014000
 80020fc:	40001800 	.word	0x40001800

08002100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0202 	mvn.w	r2, #2
 800212c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8ee 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8e0 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8f1 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b04      	cmp	r3, #4
 8002168:	d122      	bne.n	80021b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b04      	cmp	r3, #4
 8002176:	d11b      	bne.n	80021b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0204 	mvn.w	r2, #4
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8c4 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8b6 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f8c7 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d122      	bne.n	8002204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d11b      	bne.n	8002204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0208 	mvn.w	r2, #8
 80021d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2204      	movs	r2, #4
 80021da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f89a 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f88c 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f89d 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b10      	cmp	r3, #16
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b10      	cmp	r3, #16
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0210 	mvn.w	r2, #16
 8002228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2208      	movs	r2, #8
 800222e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f870 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f862 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f873 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d107      	bne.n	8002284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0201 	mvn.w	r2, #1
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fd50 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	d10e      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d107      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f902 	bl	80024b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d107      	bne.n	80022dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f838 	bl	800234c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d107      	bne.n	8002308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0220 	mvn.w	r2, #32
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f8cc 	bl	80024a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a40      	ldr	r2, [pc, #256]	; (8002474 <TIM_Base_SetConfig+0x114>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d00f      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3d      	ldr	r2, [pc, #244]	; (8002478 <TIM_Base_SetConfig+0x118>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00b      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3c      	ldr	r2, [pc, #240]	; (800247c <TIM_Base_SetConfig+0x11c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d007      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <TIM_Base_SetConfig+0x120>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <TIM_Base_SetConfig+0x124>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d108      	bne.n	80023b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <TIM_Base_SetConfig+0x114>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c0:	d027      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2c      	ldr	r2, [pc, #176]	; (8002478 <TIM_Base_SetConfig+0x118>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d023      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2b      	ldr	r2, [pc, #172]	; (800247c <TIM_Base_SetConfig+0x11c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01f      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2a      	ldr	r2, [pc, #168]	; (8002480 <TIM_Base_SetConfig+0x120>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01b      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <TIM_Base_SetConfig+0x124>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d017      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a28      	ldr	r2, [pc, #160]	; (8002488 <TIM_Base_SetConfig+0x128>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a27      	ldr	r2, [pc, #156]	; (800248c <TIM_Base_SetConfig+0x12c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00f      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a26      	ldr	r2, [pc, #152]	; (8002490 <TIM_Base_SetConfig+0x130>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00b      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a25      	ldr	r2, [pc, #148]	; (8002494 <TIM_Base_SetConfig+0x134>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <TIM_Base_SetConfig+0x138>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a23      	ldr	r2, [pc, #140]	; (800249c <TIM_Base_SetConfig+0x13c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <TIM_Base_SetConfig+0x114>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d003      	beq.n	8002458 <TIM_Base_SetConfig+0xf8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <TIM_Base_SetConfig+0x124>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d103      	bne.n	8002460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	615a      	str	r2, [r3, #20]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40010000 	.word	0x40010000
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40010400 	.word	0x40010400
 8002488:	40014000 	.word	0x40014000
 800248c:	40014400 	.word	0x40014400
 8002490:	40014800 	.word	0x40014800
 8002494:	40001800 	.word	0x40001800
 8002498:	40001c00 	.word	0x40001c00
 800249c:	40002000 	.word	0x40002000

080024a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0208 	add.w	r2, r3, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f103 0208 	add.w	r2, r3, #8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f103 0208 	add.w	r2, r3, #8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6892      	ldr	r2, [r2, #8]
 8002580:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6852      	ldr	r2, [r2, #4]
 800258a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	d103      	bne.n	800259e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	1e5a      	subs	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08c      	sub	sp, #48	; 0x30
 80025c2:	af04      	add	r7, sp, #16
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 f8e2 	bl	800379c <pvPortMalloc>
 80025d8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025e0:	2058      	movs	r0, #88	; 0x58
 80025e2:	f001 f8db 	bl	800379c <pvPortMalloc>
 80025e6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	e005      	b.n	8002602 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f001 f9b0 	bl	800395c <vPortFree>
 80025fc:	e001      	b.n	8002602 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	2300      	movs	r3, #0
 800260c:	9303      	str	r3, [sp, #12]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f80e 	bl	8002640 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f000 f8a1 	bl	800276c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800262a:	2301      	movs	r3, #1
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e002      	b.n	8002636 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002636:	69bb      	ldr	r3, [r7, #24]
    }
 8002638:	4618      	mov	r0, r3
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	461a      	mov	r2, r3
 8002658:	21a5      	movs	r1, #165	; 0xa5
 800265a:	f003 fb07 	bl	8005c6c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002668:	3b01      	subs	r3, #1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f023 0307 	bic.w	r3, r3, #7
 8002676:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	617b      	str	r3, [r7, #20]
    }
 8002694:	bf00      	nop
 8002696:	e7fe      	b.n	8002696 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01f      	beq.n	80026de <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	e012      	b.n	80026ca <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	7819      	ldrb	r1, [r3, #0]
 80026ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	3334      	adds	r3, #52	; 0x34
 80026b4:	460a      	mov	r2, r1
 80026b6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d9e9      	bls.n	80026a4 <prvInitialiseNewTask+0x64>
 80026d0:	e000      	b.n	80026d4 <prvInitialiseNewTask+0x94>
            {
                break;
 80026d2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80026dc:	e003      	b.n	80026e6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d901      	bls.n	80026f0 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026ec:	2304      	movs	r3, #4
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026fa:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	2200      	movs	r2, #0
 8002700:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	3304      	adds	r3, #4
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fefe 	bl	8002508 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	3318      	adds	r3, #24
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fef9 	bl	8002508 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	f1c3 0205 	rsb	r2, r3, #5
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	3350      	adds	r3, #80	; 0x50
 8002730:	2204      	movs	r2, #4
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f003 fa99 	bl	8005c6c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	3354      	adds	r3, #84	; 0x54
 800273e:	2201      	movs	r2, #1
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fa92 	bl	8005c6c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	69b8      	ldr	r0, [r7, #24]
 800274e:	f000 fd4b 	bl	80031e8 <pxPortInitialiseStack>
 8002752:	4602      	mov	r2, r0
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002762:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002764:	bf00      	nop
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002774:	f000 fee6 	bl	8003544 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002778:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <prvAddNewTaskToReadyList+0xfc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <prvAddNewTaskToReadyList+0xfc>)
 8002780:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <prvAddNewTaskToReadyList+0x100>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800278a:	4a38      	ldr	r2, [pc, #224]	; (800286c <prvAddNewTaskToReadyList+0x100>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <prvAddNewTaskToReadyList+0xfc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d110      	bne.n	80027ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002798:	f000 fc7c 	bl	8003094 <prvInitialiseTaskLists>
 800279c:	e00d      	b.n	80027ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <prvAddNewTaskToReadyList+0x104>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <prvAddNewTaskToReadyList+0x100>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d802      	bhi.n	80027ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80027b4:	4a2d      	ldr	r2, [pc, #180]	; (800286c <prvAddNewTaskToReadyList+0x100>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80027ba:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <prvAddNewTaskToReadyList+0x108>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	4a2c      	ldr	r2, [pc, #176]	; (8002874 <prvAddNewTaskToReadyList+0x108>)
 80027c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027c4:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <prvAddNewTaskToReadyList+0x108>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <prvAddNewTaskToReadyList+0x94>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 fe3b 	bl	8005450 <SEGGER_SYSVIEW_OnTaskCreate>
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	461d      	mov	r5, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461c      	mov	r4, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	1ae3      	subs	r3, r4, r3
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	462b      	mov	r3, r5
 80027fc:	f003 f8fa 	bl	80059f4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fea8 	bl	8005558 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2201      	movs	r2, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <prvAddNewTaskToReadyList+0x10c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <prvAddNewTaskToReadyList+0x10c>)
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4a15      	ldr	r2, [pc, #84]	; (800287c <prvAddNewTaskToReadyList+0x110>)
 8002828:	441a      	add	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7ff fe76 	bl	8002522 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002836:	f000 feb5 	bl	80035a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <prvAddNewTaskToReadyList+0x104>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00e      	beq.n	8002860 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <prvAddNewTaskToReadyList+0x100>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <prvAddNewTaskToReadyList+0x114>)
 8002852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bdb0      	pop	{r4, r5, r7, pc}
 8002868:	20000160 	.word	0x20000160
 800286c:	20000088 	.word	0x20000088
 8002870:	2000016c 	.word	0x2000016c
 8002874:	2000017c 	.word	0x2000017c
 8002878:	20000168 	.word	0x20000168
 800287c:	2000008c 	.word	0x2000008c
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 800288c:	f000 fe5a 	bl	8003544 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <uxTaskPriorityGet+0x18>
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <uxTaskPriorityGet+0x30>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	e000      	b.n	800289e <uxTaskPriorityGet+0x1a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80028a6:	f000 fe7d 	bl	80035a4 <vPortExitCritical>

        return uxReturn;
 80028aa:	68bb      	ldr	r3, [r7, #8]
    }
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000088 	.word	0x20000088

080028b8 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d90a      	bls.n	80028e2 <vTaskPrioritySet+0x2a>
        __asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60fb      	str	r3, [r7, #12]
    }
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d901      	bls.n	80028ec <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028e8:	2304      	movs	r3, #4
 80028ea:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80028ec:	f000 fe2a 	bl	8003544 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <vTaskPrioritySet+0x44>
 80028f6:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <vTaskPrioritySet+0x170>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e000      	b.n	80028fe <vTaskPrioritySet+0x46>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fe6a 	bl	80055dc <SEGGER_SYSVIEW_ShrinkId>
 8002908:	4603      	mov	r3, r0
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	2028      	movs	r0, #40	; 0x28
 8002910:	f002 f9e6 	bl	8004ce0 <SEGGER_SYSVIEW_RecordU32x2>
 8002914:	69b8      	ldr	r0, [r7, #24]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	461a      	mov	r2, r3
 8002922:	2300      	movs	r3, #0
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	f003 f8cb 	bl	8005ac4 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002932:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d06f      	beq.n	8002a1c <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	d90d      	bls.n	8002960 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <vTaskPrioritySet+0x170>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	429a      	cmp	r2, r3
 800294c:	d00f      	beq.n	800296e <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <vTaskPrioritySet+0x170>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d309      	bcc.n	800296e <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 800295a:	2301      	movs	r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e006      	b.n	800296e <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <vTaskPrioritySet+0x170>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	429a      	cmp	r2, r3
 8002968:	d101      	bne.n	800296e <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	429a      	cmp	r2, r3
 800297e:	d102      	bne.n	8002986 <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db04      	blt.n	800299e <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f1c3 0205 	rsb	r2, r3, #5
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	6959      	ldr	r1, [r3, #20]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <vTaskPrioritySet+0x174>)
 80029ae:	4413      	add	r3, r2
 80029b0:	4299      	cmp	r1, r3
 80029b2:	d128      	bne.n	8002a06 <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fdd6 	bl	800256a <uxListRemove>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80029c4:	2201      	movs	r2, #1
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43da      	mvns	r2, r3
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <vTaskPrioritySet+0x178>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4013      	ands	r3, r2
 80029d4:	4a16      	ldr	r2, [pc, #88]	; (8002a30 <vTaskPrioritySet+0x178>)
 80029d6:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2201      	movs	r2, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <vTaskPrioritySet+0x178>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <vTaskPrioritySet+0x178>)
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4a0d      	ldr	r2, [pc, #52]	; (8002a2c <vTaskPrioritySet+0x174>)
 80029f8:	441a      	add	r2, r3
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	3304      	adds	r3, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7ff fd8e 	bl	8002522 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <vTaskPrioritySet+0x17c>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002a1c:	f000 fdc2 	bl	80035a4 <vPortExitCritical>
    }
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000088 	.word	0x20000088
 8002a2c:	2000008c 	.word	0x2000008c
 8002a30:	20000168 	.word	0x20000168
 8002a34:	e000ed04 	.word	0xe000ed04

08002a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <vTaskStartScheduler+0x98>)
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	2282      	movs	r2, #130	; 0x82
 8002a4a:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <vTaskStartScheduler+0x9c>)
 8002a4c:	4822      	ldr	r0, [pc, #136]	; (8002ad8 <vTaskStartScheduler+0xa0>)
 8002a4e:	f7ff fdb6 	bl	80025be <xTaskCreate>
 8002a52:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d124      	bne.n	8002aa4 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	60bb      	str	r3, [r7, #8]
    }
 8002a6c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <vTaskStartScheduler+0xa4>)
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <vTaskStartScheduler+0xa8>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <vTaskStartScheduler+0xac>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <vTaskStartScheduler+0xb0>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <vTaskStartScheduler+0x98>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d102      	bne.n	8002a94 <vTaskStartScheduler+0x5c>
 8002a8e:	f002 fcc3 	bl	8005418 <SEGGER_SYSVIEW_OnIdle>
 8002a92:	e004      	b.n	8002a9e <vTaskStartScheduler+0x66>
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <vTaskStartScheduler+0xb0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 fd1b 	bl	80054d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a9e:	f000 fc31 	bl	8003304 <xPortStartScheduler>
 8002aa2:	e00e      	b.n	8002ac2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d10a      	bne.n	8002ac2 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	607b      	str	r3, [r7, #4]
    }
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <vTaskStartScheduler+0xb4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000184 	.word	0x20000184
 8002ad4:	08005cd0 	.word	0x08005cd0
 8002ad8:	08003065 	.word	0x08003065
 8002adc:	20000180 	.word	0x20000180
 8002ae0:	2000016c 	.word	0x2000016c
 8002ae4:	20000164 	.word	0x20000164
 8002ae8:	20000088 	.word	0x20000088
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <vTaskSuspendAll+0x18>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <vTaskSuspendAll+0x18>)
 8002afc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	20000188 	.word	0x20000188

08002b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b1a:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	603b      	str	r3, [r7, #0]
    }
 8002b34:	bf00      	nop
 8002b36:	e7fe      	b.n	8002b36 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b38:	f000 fd04 	bl	8003544 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	4a39      	ldr	r2, [pc, #228]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <xTaskResumeAll+0x11c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d165      	bne.n	8002c1a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <xTaskResumeAll+0x120>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d061      	beq.n	8002c1a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b56:	e032      	b.n	8002bbe <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <xTaskResumeAll+0x124>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3318      	adds	r3, #24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fd00 	bl	800256a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fcfb 	bl	800256a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fcee 	bl	8005558 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	2201      	movs	r2, #1
 8002b82:	409a      	lsls	r2, r3
 8002b84:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <xTaskResumeAll+0x128>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <xTaskResumeAll+0x128>)
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <xTaskResumeAll+0x12c>)
 8002b9c:	441a      	add	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7ff fcbc 	bl	8002522 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <xTaskResumeAll+0x130>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <xTaskResumeAll+0x134>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <xTaskResumeAll+0x124>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1c8      	bne.n	8002b58 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bcc:	f000 fae0 	bl	8003190 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <xTaskResumeAll+0x138>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bdc:	f000 f91c 	bl	8002e18 <xTaskIncrementTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <xTaskResumeAll+0x134>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f1      	bne.n	8002bdc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <xTaskResumeAll+0x138>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <xTaskResumeAll+0x134>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c06:	2301      	movs	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <xTaskResumeAll+0x13c>)
 8002c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c1a:	f000 fcc3 	bl	80035a4 <vPortExitCritical>

    return xAlreadyYielded;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000188 	.word	0x20000188
 8002c2c:	20000160 	.word	0x20000160
 8002c30:	20000120 	.word	0x20000120
 8002c34:	20000168 	.word	0x20000168
 8002c38:	2000008c 	.word	0x2000008c
 8002c3c:	20000088 	.word	0x20000088
 8002c40:	20000174 	.word	0x20000174
 8002c44:	20000170 	.word	0x20000170
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c52:	f000 fd63 	bl	800371c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <xTaskGetTickCountFromISR+0x20>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c60:	683b      	ldr	r3, [r7, #0]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000164 	.word	0x20000164

08002c70 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8002c70:	b480      	push	{r7}
 8002c72:	b08b      	sub	sp, #44	; 0x2c
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d05b      	beq.n	8002d3e <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d104      	bne.n	8002caa <prvSearchForNameWithinSingleList+0x3a>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d104      	bne.n	8002cd6 <prvSearchForNameWithinSingleList+0x66>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	e01c      	b.n	8002d22 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	4413      	add	r3, r2
 8002cee:	3334      	adds	r3, #52	; 0x34
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	7afa      	ldrb	r2, [r7, #11]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d002      	beq.n	8002d08 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e006      	b.n	8002d16 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	d9df      	bls.n	8002ce8 <prvSearchForNameWithinSingleList+0x78>
 8002d28:	e000      	b.n	8002d2c <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8002d2a:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d1bb      	bne.n	8002cb2 <prvSearchForNameWithinSingleList+0x42>
 8002d3a:	e000      	b.n	8002d3e <prvSearchForNameWithinSingleList+0xce>
                    break;
 8002d3c:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002d40:	4618      	mov	r0, r3
 8002d42:	372c      	adds	r7, #44	; 0x2c
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8002d54:	2305      	movs	r3, #5
 8002d56:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fd fa93 	bl	8000284 <strlen>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b09      	cmp	r3, #9
 8002d62:	d90a      	bls.n	8002d7a <xTaskGetHandle+0x2e>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	60fb      	str	r3, [r7, #12]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8002d7a:	f7ff feb9 	bl	8002af0 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <xTaskGetHandle+0xb8>)
 8002d90:	4413      	add	r3, r2
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff6b 	bl	8002c70 <prvSearchForNameWithinSingleList>
 8002d9a:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ea      	bne.n	8002d7e <xTaskGetHandle+0x32>
 8002da8:	e000      	b.n	8002dac <xTaskGetHandle+0x60>
                    break;
 8002daa:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <xTaskGetHandle+0xbc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff59 	bl	8002c70 <prvSearchForNameWithinSingleList>
 8002dbe:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <xTaskGetHandle+0xc0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff4f 	bl	8002c70 <prvSearchForNameWithinSingleList>
 8002dd2:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <xTaskGetHandle+0xc4>)
 8002dde:	f7ff ff47 	bl	8002c70 <prvSearchForNameWithinSingleList>
 8002de2:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4809      	ldr	r0, [pc, #36]	; (8002e14 <xTaskGetHandle+0xc8>)
 8002dee:	f7ff ff3f 	bl	8002c70 <prvSearchForNameWithinSingleList>
 8002df2:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8002df4:	f7ff fe8a 	bl	8002b0c <xTaskResumeAll>

        return pxTCB;
 8002df8:	693b      	ldr	r3, [r7, #16]
    }
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000008c 	.word	0x2000008c
 8002e08:	20000118 	.word	0x20000118
 8002e0c:	2000011c 	.word	0x2000011c
 8002e10:	2000014c 	.word	0x2000014c
 8002e14:	20000134 	.word	0x20000134

08002e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <xTaskIncrementTick+0x14c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 8092 	bne.w	8002f50 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e2c:	4b4e      	ldr	r3, [pc, #312]	; (8002f68 <xTaskIncrementTick+0x150>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <xTaskIncrementTick+0x150>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d120      	bne.n	8002e82 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <xTaskIncrementTick+0x154>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <xTaskIncrementTick+0x48>
        __asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	603b      	str	r3, [r7, #0]
    }
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <xTaskIncrementTick+0x46>
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <xTaskIncrementTick+0x154>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <xTaskIncrementTick+0x158>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a40      	ldr	r2, [pc, #256]	; (8002f6c <xTaskIncrementTick+0x154>)
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4a40      	ldr	r2, [pc, #256]	; (8002f70 <xTaskIncrementTick+0x158>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <xTaskIncrementTick+0x15c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	4a3e      	ldr	r2, [pc, #248]	; (8002f74 <xTaskIncrementTick+0x15c>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	f000 f987 	bl	8003190 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e82:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <xTaskIncrementTick+0x160>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d34c      	bcc.n	8002f26 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <xTaskIncrementTick+0x154>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <xTaskIncrementTick+0x160>)
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	601a      	str	r2, [r3, #0]
                    break;
 8002e9e:	e042      	b.n	8002f26 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <xTaskIncrementTick+0x154>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d203      	bcs.n	8002ec0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002eb8:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <xTaskIncrementTick+0x160>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ebe:	e032      	b.n	8002f26 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fb50 	bl	800256a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3318      	adds	r3, #24
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fb47 	bl	800256a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fb3a 	bl	8005558 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <xTaskIncrementTick+0x164>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <xTaskIncrementTick+0x164>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <xTaskIncrementTick+0x168>)
 8002f04:	441a      	add	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f7ff fb08 	bl	8002522 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <xTaskIncrementTick+0x16c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d3b5      	bcc.n	8002e8c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f24:	e7b2      	b.n	8002e8c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <xTaskIncrementTick+0x16c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	4914      	ldr	r1, [pc, #80]	; (8002f80 <xTaskIncrementTick+0x168>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d901      	bls.n	8002f42 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <xTaskIncrementTick+0x170>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e004      	b.n	8002f5a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <xTaskIncrementTick+0x174>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3301      	adds	r3, #1
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <xTaskIncrementTick+0x174>)
 8002f58:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002f5a:	697b      	ldr	r3, [r7, #20]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000188 	.word	0x20000188
 8002f68:	20000164 	.word	0x20000164
 8002f6c:	20000118 	.word	0x20000118
 8002f70:	2000011c 	.word	0x2000011c
 8002f74:	20000178 	.word	0x20000178
 8002f78:	20000180 	.word	0x20000180
 8002f7c:	20000168 	.word	0x20000168
 8002f80:	2000008c 	.word	0x2000008c
 8002f84:	20000088 	.word	0x20000088
 8002f88:	20000174 	.word	0x20000174
 8002f8c:	20000170 	.word	0x20000170

08002f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <vTaskSwitchContext+0xbc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <vTaskSwitchContext+0xc0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002fa4:	e04d      	b.n	8003042 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <vTaskSwitchContext+0xc0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fac:	4b29      	ldr	r3, [pc, #164]	; (8003054 <vTaskSwitchContext+0xc4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	f1c3 031f 	rsb	r3, r3, #31
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	4925      	ldr	r1, [pc, #148]	; (8003058 <vTaskSwitchContext+0xc8>)
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <vTaskSwitchContext+0x5c>
        __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	607b      	str	r3, [r7, #4]
    }
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <vTaskSwitchContext+0x5a>
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4a18      	ldr	r2, [pc, #96]	; (8003058 <vTaskSwitchContext+0xc8>)
 8002ff8:	4413      	add	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3308      	adds	r3, #8
 800300e:	429a      	cmp	r2, r3
 8003010:	d104      	bne.n	800301c <vTaskSwitchContext+0x8c>
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4a0e      	ldr	r2, [pc, #56]	; (800305c <vTaskSwitchContext+0xcc>)
 8003024:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <vTaskSwitchContext+0xcc>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <vTaskSwitchContext+0xd0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d102      	bne.n	8003038 <vTaskSwitchContext+0xa8>
 8003032:	f002 f9f1 	bl	8005418 <SEGGER_SYSVIEW_OnIdle>
}
 8003036:	e004      	b.n	8003042 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <vTaskSwitchContext+0xcc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fa49 	bl	80054d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000188 	.word	0x20000188
 8003050:	20000174 	.word	0x20000174
 8003054:	20000168 	.word	0x20000168
 8003058:	2000008c 	.word	0x2000008c
 800305c:	20000088 	.word	0x20000088
 8003060:	20000184 	.word	0x20000184

08003064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800306c:	f000 f852 	bl	8003114 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <prvIdleTask+0x28>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d9f9      	bls.n	800306c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <prvIdleTask+0x2c>)
 800307a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003088:	e7f0      	b.n	800306c <prvIdleTask+0x8>
 800308a:	bf00      	nop
 800308c:	2000008c 	.word	0x2000008c
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e00c      	b.n	80030ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <prvInitialiseTaskLists+0x60>)
 80030ac:	4413      	add	r3, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fa0a 	bl	80024c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3301      	adds	r3, #1
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d9ef      	bls.n	80030a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030c0:	480d      	ldr	r0, [pc, #52]	; (80030f8 <prvInitialiseTaskLists+0x64>)
 80030c2:	f7ff fa01 	bl	80024c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030c6:	480d      	ldr	r0, [pc, #52]	; (80030fc <prvInitialiseTaskLists+0x68>)
 80030c8:	f7ff f9fe 	bl	80024c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <prvInitialiseTaskLists+0x6c>)
 80030ce:	f7ff f9fb 	bl	80024c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80030d2:	480c      	ldr	r0, [pc, #48]	; (8003104 <prvInitialiseTaskLists+0x70>)
 80030d4:	f7ff f9f8 	bl	80024c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80030d8:	480b      	ldr	r0, [pc, #44]	; (8003108 <prvInitialiseTaskLists+0x74>)
 80030da:	f7ff f9f5 	bl	80024c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <prvInitialiseTaskLists+0x78>)
 80030e0:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <prvInitialiseTaskLists+0x64>)
 80030e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <prvInitialiseTaskLists+0x7c>)
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <prvInitialiseTaskLists+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	2000008c 	.word	0x2000008c
 80030f8:	200000f0 	.word	0x200000f0
 80030fc:	20000104 	.word	0x20000104
 8003100:	20000120 	.word	0x20000120
 8003104:	20000134 	.word	0x20000134
 8003108:	2000014c 	.word	0x2000014c
 800310c:	20000118 	.word	0x20000118
 8003110:	2000011c 	.word	0x2000011c

08003114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800311a:	e019      	b.n	8003150 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800311c:	f000 fa12 	bl	8003544 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <prvCheckTasksWaitingTermination+0x50>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fa1c 	bl	800256a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <prvCheckTasksWaitingTermination+0x54>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3b01      	subs	r3, #1
 8003138:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <prvCheckTasksWaitingTermination+0x54>)
 800313a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <prvCheckTasksWaitingTermination+0x58>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3b01      	subs	r3, #1
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <prvCheckTasksWaitingTermination+0x58>)
 8003144:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003146:	f000 fa2d 	bl	80035a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f810 	bl	8003170 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <prvCheckTasksWaitingTermination+0x58>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e1      	bne.n	800311c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000134 	.word	0x20000134
 8003168:	20000160 	.word	0x20000160
 800316c:	20000148 	.word	0x20000148

08003170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fbed 	bl	800395c <vPortFree>
                vPortFree( pxTCB );
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fbea 	bl	800395c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <prvResetNextTaskUnblockTime+0x30>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <prvResetNextTaskUnblockTime+0x34>)
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031a6:	e005      	b.n	80031b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <prvResetNextTaskUnblockTime+0x30>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <prvResetNextTaskUnblockTime+0x34>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000118 	.word	0x20000118
 80031c4:	20000180 	.word	0x20000180

080031c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <xTaskGetCurrentTaskHandle+0x1c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	607b      	str	r3, [r7, #4]

        return xReturn;
 80031d4:	687b      	ldr	r3, [r7, #4]
    }
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000088 	.word	0x20000088

080031e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3b04      	subs	r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3b04      	subs	r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b04      	subs	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <pxPortInitialiseStack+0x64>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b14      	subs	r3, #20
 8003222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3b04      	subs	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f06f 0202 	mvn.w	r2, #2
 8003236:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b20      	subs	r3, #32
 800323c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	08003251 	.word	0x08003251

08003250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <prvTaskExitError+0x54>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d00a      	beq.n	800327a <prvTaskExitError+0x2a>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60fb      	str	r3, [r7, #12]
    }
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <prvTaskExitError+0x28>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60bb      	str	r3, [r7, #8]
    }
 800328c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800328e:	bf00      	nop
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0fc      	beq.n	8003290 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000010 	.word	0x20000010
	...

080032b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <pxCurrentTCBConst2>)
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	6808      	ldr	r0, [r1, #0]
 80032b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	f380 8809 	msr	PSP, r0
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8811 	msr	BASEPRI, r0
 80032ca:	4770      	bx	lr
 80032cc:	f3af 8000 	nop.w

080032d0 <pxCurrentTCBConst2>:
 80032d0:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop

080032d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <prvPortStartFirstTask+0x24>)
 80032da:	6800      	ldr	r0, [r0, #0]
 80032dc:	6800      	ldr	r0, [r0, #0]
 80032de:	f380 8808 	msr	MSP, r0
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8814 	msr	CONTROL, r0
 80032ea:	b662      	cpsie	i
 80032ec:	b661      	cpsie	f
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	df00      	svc	0
 80032f8:	bf00      	nop
 80032fa:	0000      	.short	0x0000
 80032fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop

08003304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <xPortStartScheduler+0x120>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a46      	ldr	r2, [pc, #280]	; (8003428 <xPortStartScheduler+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10a      	bne.n	800332a <xPortStartScheduler+0x26>
        __asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	613b      	str	r3, [r7, #16]
    }
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <xPortStartScheduler+0x120>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3f      	ldr	r2, [pc, #252]	; (800342c <xPortStartScheduler+0x128>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10a      	bne.n	800334a <xPortStartScheduler+0x46>
        __asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	60fb      	str	r3, [r7, #12]
    }
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <xPortStartScheduler+0x12c>)
 800334c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <xPortStartScheduler+0x130>)
 8003370:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <xPortStartScheduler+0x134>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003378:	e009      	b.n	800338e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800337a:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <xPortStartScheduler+0x134>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	4a2d      	ldr	r2, [pc, #180]	; (8003438 <xPortStartScheduler+0x134>)
 8003382:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d0ef      	beq.n	800337a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <xPortStartScheduler+0x134>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d00a      	beq.n	80033bc <xPortStartScheduler+0xb8>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	60bb      	str	r3, [r7, #8]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <xPortStartScheduler+0x134>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <xPortStartScheduler+0x134>)
 80033c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <xPortStartScheduler+0x134>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033ce:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <xPortStartScheduler+0x134>)
 80033d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <xPortStartScheduler+0x138>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <xPortStartScheduler+0x138>)
 80033e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <xPortStartScheduler+0x138>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <xPortStartScheduler+0x138>)
 80033ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80033f2:	f000 f963 	bl	80036bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <xPortStartScheduler+0x13c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80033fc:	f000 f982 	bl	8003704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <xPortStartScheduler+0x140>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <xPortStartScheduler+0x140>)
 8003406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800340a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800340c:	f7ff ff64 	bl	80032d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003410:	f7ff fdbe 	bl	8002f90 <vTaskSwitchContext>
    prvTaskExitError();
 8003414:	f7ff ff1c 	bl	8003250 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000ed00 	.word	0xe000ed00
 8003428:	410fc271 	.word	0x410fc271
 800342c:	410fc270 	.word	0x410fc270
 8003430:	e000e400 	.word	0xe000e400
 8003434:	2000018c 	.word	0x2000018c
 8003438:	20000190 	.word	0x20000190
 800343c:	e000ed20 	.word	0xe000ed20
 8003440:	20000010 	.word	0x20000010
 8003444:	e000ef34 	.word	0xe000ef34

08003448 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <vInitPrioGroupValue+0xe4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a37      	ldr	r2, [pc, #220]	; (8003530 <vInitPrioGroupValue+0xe8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10a      	bne.n	800346e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	613b      	str	r3, [r7, #16]
    }
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <vInitPrioGroupValue+0xe4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a30      	ldr	r2, [pc, #192]	; (8003534 <vInitPrioGroupValue+0xec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10a      	bne.n	800348e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	60fb      	str	r3, [r7, #12]
    }
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <vInitPrioGroupValue+0xf0>)
 8003490:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <vInitPrioGroupValue+0xf4>)
 80034b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034bc:	e009      	b.n	80034d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d0ef      	beq.n	80034be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00a      	beq.n	8003500 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
    }
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003508:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <vInitPrioGroupValue+0xf8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003514:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00
 8003530:	410fc271 	.word	0x410fc271
 8003534:	410fc270 	.word	0x410fc270
 8003538:	e000e400 	.word	0xe000e400
 800353c:	2000018c 	.word	0x2000018c
 8003540:	20000190 	.word	0x20000190

08003544 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
        __asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
    }
 800355c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <vPortEnterCritical+0x58>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <vPortEnterCritical+0x58>)
 8003566:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <vPortEnterCritical+0x58>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10f      	bne.n	8003590 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <vPortEnterCritical+0x5c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <vPortEnterCritical+0x4c>
        __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	603b      	str	r3, [r7, #0]
    }
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <vPortEnterCritical+0x4a>
    }
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	20000010 	.word	0x20000010
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <vPortExitCritical+0x50>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <vPortExitCritical+0x24>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	607b      	str	r3, [r7, #4]
    }
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <vPortExitCritical+0x50>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <vPortExitCritical+0x50>)
 80035d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <vPortExitCritical+0x50>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <vPortExitCritical+0x42>
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80035e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000010 	.word	0x20000010
	...

08003600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003600:	f3ef 8009 	mrs	r0, PSP
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <pxCurrentTCBConst>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f01e 0f10 	tst.w	lr, #16
 8003610:	bf08      	it	eq
 8003612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361a:	6010      	str	r0, [r2, #0]
 800361c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003624:	f380 8811 	msr	BASEPRI, r0
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f7ff fcae 	bl	8002f90 <vTaskSwitchContext>
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f380 8811 	msr	BASEPRI, r0
 800363c:	bc09      	pop	{r0, r3}
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	6808      	ldr	r0, [r1, #0]
 8003642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003646:	f01e 0f10 	tst.w	lr, #16
 800364a:	bf08      	it	eq
 800364c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003650:	f380 8809 	msr	PSP, r0
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	f3af 8000 	nop.w

08003660 <pxCurrentTCBConst>:
 8003660:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop

08003668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
        __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	607b      	str	r3, [r7, #4]
    }
 8003680:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003682:	f001 fe4f 	bl	8005324 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003686:	f7ff fbc7 	bl	8002e18 <xTaskIncrementTick>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003690:	f001 fea6 	bl	80053e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <SysTick_Handler+0x50>)
 8003696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e001      	b.n	80036a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800369e:	f001 fe83 	bl	80053a8 <SEGGER_SYSVIEW_RecordExitISR>
 80036a2:	2300      	movs	r3, #0
 80036a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f383 8811 	msr	BASEPRI, r3
    }
 80036ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <vPortSetupTimerInterrupt+0x34>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <vPortSetupTimerInterrupt+0x38>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <vPortSetupTimerInterrupt+0x3c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <vPortSetupTimerInterrupt+0x40>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	4a09      	ldr	r2, [pc, #36]	; (8003700 <vPortSetupTimerInterrupt+0x44>)
 80036da:	3b01      	subs	r3, #1
 80036dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <vPortSetupTimerInterrupt+0x34>)
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000e010 	.word	0xe000e010
 80036f4:	e000e018 	.word	0xe000e018
 80036f8:	20000000 	.word	0x20000000
 80036fc:	10624dd3 	.word	0x10624dd3
 8003700:	e000e014 	.word	0xe000e014

08003704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003714 <vPortEnableVFP+0x10>
 8003708:	6801      	ldr	r1, [r0, #0]
 800370a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800370e:	6001      	str	r1, [r0, #0]
 8003710:	4770      	bx	lr
 8003712:	0000      	.short	0x0000
 8003714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop

0800371c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003722:	f3ef 8305 	mrs	r3, IPSR
 8003726:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b0f      	cmp	r3, #15
 800372c:	d914      	bls.n	8003758 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <vPortValidateInterruptPriority+0x70>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <vPortValidateInterruptPriority+0x74>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	7afa      	ldrb	r2, [r7, #11]
 800373e:	429a      	cmp	r2, r3
 8003740:	d20a      	bcs.n	8003758 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	607b      	str	r3, [r7, #4]
    }
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <vPortValidateInterruptPriority+0x78>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <vPortValidateInterruptPriority+0x7c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d90a      	bls.n	800377e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	603b      	str	r3, [r7, #0]
    }
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <vPortValidateInterruptPriority+0x60>
    }
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e3f0 	.word	0xe000e3f0
 8003790:	2000018c 	.word	0x2000018c
 8003794:	e000ed0c 	.word	0xe000ed0c
 8003798:	20000190 	.word	0x20000190

0800379c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80037a8:	f7ff f9a2 	bl	8002af0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037ac:	4b65      	ldr	r3, [pc, #404]	; (8003944 <pvPortMalloc+0x1a8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037b4:	f000 f934 	bl	8003a20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037b8:	4b63      	ldr	r3, [pc, #396]	; (8003948 <pvPortMalloc+0x1ac>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 80a7 	bne.w	8003914 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02d      	beq.n	8003828 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80037cc:	2208      	movs	r2, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d227      	bcs.n	8003828 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80037d8:	2208      	movs	r2, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d021      	beq.n	800382e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f023 0307 	bic.w	r3, r3, #7
 80037f0:	3308      	adds	r3, #8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d214      	bcs.n	8003822 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f023 0307 	bic.w	r3, r3, #7
 80037fe:	3308      	adds	r3, #8
 8003800:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <pvPortMalloc+0x92>
        __asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	617b      	str	r3, [r7, #20]
    }
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003826:	e002      	b.n	800382e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	e000      	b.n	8003830 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800382e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06e      	beq.n	8003914 <pvPortMalloc+0x178>
 8003836:	4b45      	ldr	r3, [pc, #276]	; (800394c <pvPortMalloc+0x1b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d869      	bhi.n	8003914 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <pvPortMalloc+0x1b4>)
 8003842:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003844:	4b42      	ldr	r3, [pc, #264]	; (8003950 <pvPortMalloc+0x1b4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384a:	e004      	b.n	8003856 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d903      	bls.n	8003868 <pvPortMalloc+0xcc>
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f1      	bne.n	800384c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003868:	4b36      	ldr	r3, [pc, #216]	; (8003944 <pvPortMalloc+0x1a8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	429a      	cmp	r2, r3
 8003870:	d050      	beq.n	8003914 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2208      	movs	r2, #8
 8003878:	4413      	add	r3, r2
 800387a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1ad2      	subs	r2, r2, r3
 800388c:	2308      	movs	r3, #8
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	429a      	cmp	r2, r3
 8003892:	d91f      	bls.n	80038d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <pvPortMalloc+0x120>
        __asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	613b      	str	r3, [r7, #16]
    }
 80038b8:	bf00      	nop
 80038ba:	e7fe      	b.n	80038ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038ce:	69b8      	ldr	r0, [r7, #24]
 80038d0:	f000 f908 	bl	8003ae4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <pvPortMalloc+0x1b0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	4a1b      	ldr	r2, [pc, #108]	; (800394c <pvPortMalloc+0x1b0>)
 80038e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <pvPortMalloc+0x1b0>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <pvPortMalloc+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d203      	bcs.n	80038f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038ee:	4b17      	ldr	r3, [pc, #92]	; (800394c <pvPortMalloc+0x1b0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <pvPortMalloc+0x1b8>)
 80038f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <pvPortMalloc+0x1ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	431a      	orrs	r2, r3
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <pvPortMalloc+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a11      	ldr	r2, [pc, #68]	; (8003958 <pvPortMalloc+0x1bc>)
 8003912:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003914:	f7ff f8fa 	bl	8002b0c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <pvPortMalloc+0x19c>
        __asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60fb      	str	r3, [r7, #12]
    }
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <pvPortMalloc+0x19a>
    return pvReturn;
 8003938:	69fb      	ldr	r3, [r7, #28]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20012d9c 	.word	0x20012d9c
 8003948:	20012db0 	.word	0x20012db0
 800394c:	20012da0 	.word	0x20012da0
 8003950:	20012d94 	.word	0x20012d94
 8003954:	20012da4 	.word	0x20012da4
 8003958:	20012da8 	.word	0x20012da8

0800395c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04d      	beq.n	8003a0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800396e:	2308      	movs	r3, #8
 8003970:	425b      	negs	r3, r3
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4413      	add	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <vPortFree+0xb8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <vPortFree+0x44>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	60fb      	str	r3, [r7, #12]
    }
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <vPortFree+0x62>
        __asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60bb      	str	r3, [r7, #8]
    }
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <vPortFree+0xb8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01e      	beq.n	8003a0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11a      	bne.n	8003a0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <vPortFree+0xb8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80039e4:	f7ff f884 	bl	8002af0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <vPortFree+0xbc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <vPortFree+0xbc>)
 80039f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039f6:	6938      	ldr	r0, [r7, #16]
 80039f8:	f000 f874 	bl	8003ae4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <vPortFree+0xc0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a06      	ldr	r2, [pc, #24]	; (8003a1c <vPortFree+0xc0>)
 8003a04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a06:	f7ff f881 	bl	8002b0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20012db0 	.word	0x20012db0
 8003a18:	20012da0 	.word	0x20012da0
 8003a1c:	20012dac 	.word	0x20012dac

08003a20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <prvHeapInit+0xac>)
 8003a2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3307      	adds	r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0307 	bic.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <prvHeapInit+0xac>)
 8003a50:	4413      	add	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <prvHeapInit+0xb0>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <prvHeapInit+0xb0>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0307 	bic.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <prvHeapInit+0xb4>)
 8003a80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <prvHeapInit+0xb4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <prvHeapInit+0xb4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <prvHeapInit+0xb4>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <prvHeapInit+0xb8>)
 8003aae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <prvHeapInit+0xbc>)
 8003ab6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <prvHeapInit+0xc0>)
 8003aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000194 	.word	0x20000194
 8003ad0:	20012d94 	.word	0x20012d94
 8003ad4:	20012d9c 	.word	0x20012d9c
 8003ad8:	20012da4 	.word	0x20012da4
 8003adc:	20012da0 	.word	0x20012da0
 8003ae0:	20012db0 	.word	0x20012db0

08003ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <prvInsertBlockIntoFreeList+0xac>)
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e002      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x14>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d8f7      	bhi.n	8003af2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d108      	bne.n	8003b26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	441a      	add	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	441a      	add	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d118      	bne.n	8003b6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <prvInsertBlockIntoFreeList+0xb0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d00d      	beq.n	8003b62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e008      	b.n	8003b74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <prvInsertBlockIntoFreeList+0xb0>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e003      	b.n	8003b74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d002      	beq.n	8003b82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20012d94 	.word	0x20012d94
 8003b94:	20012d9c 	.word	0x20012d9c

08003b98 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b9e:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <_DoInit+0xa0>)
 8003ba0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003ba2:	22a8      	movs	r2, #168	; 0xa8
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f002 f860 	bl	8005c6c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <_DoInit+0xa4>)
 8003bbc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <_DoInit+0xa8>)
 8003bc2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <_DoInit+0xa4>)
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <_DoInit+0xac>)
 8003be8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2210      	movs	r2, #16
 8003bee:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c02:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	e00c      	b.n	8003c26 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f1c3 030f 	rsb	r3, r3, #15
 8003c12:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <_DoInit+0xb0>)
 8003c14:	5cd1      	ldrb	r1, [r2, r3]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	460a      	mov	r2, r1
 8003c1e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3301      	adds	r3, #1
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0f      	cmp	r3, #15
 8003c2a:	d9ef      	bls.n	8003c0c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c2c:	f3bf 8f5f 	dmb	sy
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20012db4 	.word	0x20012db4
 8003c3c:	08005cd8 	.word	0x08005cd8
 8003c40:	20012e5c 	.word	0x20012e5c
 8003c44:	2001325c 	.word	0x2001325c
 8003c48:	08005db0 	.word	0x08005db0

08003c4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	; 0x30
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <SEGGER_RTT_ReadNoLock+0x1e>
 8003c66:	f7ff ff97 	bl	8003b98 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	3360      	adds	r3, #96	; 0x60
 8003c76:	4a37      	ldr	r2, [pc, #220]	; (8003d54 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d92b      	bls.n	8003cf0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	bf28      	it	cs
 8003caa:	4613      	movcs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	4413      	add	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	6939      	ldr	r1, [r7, #16]
 8003cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cbe:	f001 ffc7 	bl	8005c50 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	4413      	add	r3, r2
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	4413      	add	r3, r2
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d101      	bne.n	8003cf0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	bf28      	it	cs
 8003d00:	4613      	movcs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d019      	beq.n	8003d3e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	4413      	add	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d1a:	f001 ff99 	bl	8005c50 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4413      	add	r3, r2
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3730      	adds	r7, #48	; 0x30
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20012db4 	.word	0x20012db4

08003d58 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003d74:	f7ff ff10 	bl	8003b98 <_DoInit>
  SEGGER_RTT_LOCK();
 8003d78:	f3ef 8311 	mrs	r3, BASEPRI
 8003d7c:	f04f 0120 	mov.w	r1, #32
 8003d80:	f381 8811 	msr	BASEPRI, r1
 8003d84:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d86:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d88:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d8e:	6939      	ldr	r1, [r7, #16]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3304      	adds	r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3301      	adds	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	dbeb      	blt.n	8003d8e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003db6:	e000      	b.n	8003dba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003db8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	da3f      	bge.n	8003e44 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003dc4:	6939      	ldr	r1, [r7, #16]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003dd8:	6939      	ldr	r1, [r7, #16]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	4613      	mov	r3, r2
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	3304      	adds	r3, #4
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003dee:	6939      	ldr	r1, [r7, #16]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3320      	adds	r3, #32
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003e02:	6939      	ldr	r1, [r7, #16]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	440b      	add	r3, r1
 8003e10:	3328      	adds	r3, #40	; 0x28
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003e16:	6939      	ldr	r1, [r7, #16]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	440b      	add	r3, r1
 8003e24:	3324      	adds	r3, #36	; 0x24
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003e2a:	6939      	ldr	r1, [r7, #16]
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	440b      	add	r3, r1
 8003e38:	332c      	adds	r3, #44	; 0x2c
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e3e:	f3bf 8f5f 	dmb	sy
 8003e42:	e002      	b.n	8003e4a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003e50:	69fb      	ldr	r3, [r7, #28]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20012db4 	.word	0x20012db4

08003e60 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003e6e:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003e7c:	f7ff fe8c 	bl	8003b98 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003e82:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d82c      	bhi.n	8003ee4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e8e:	f04f 0120 	mov.w	r1, #32
 8003e92:	f381 8811 	msr	BASEPRI, r1
 8003e96:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	3360      	adds	r3, #96	; 0x60
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ed4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee2:	e002      	b.n	8003eea <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20012db4 	.word	0x20012db4

08003ef8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00f      	beq.n	8003f2e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003f0e:	e002      	b.n	8003f16 <_EncodeStr+0x1e>
      Len++;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	3301      	adds	r3, #1
 8003f14:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f6      	bne.n	8003f10 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d901      	bls.n	8003f2e <_EncodeStr+0x36>
      Len = Limit;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2bfe      	cmp	r3, #254	; 0xfe
 8003f32:	d806      	bhi.n	8003f42 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	60fa      	str	r2, [r7, #12]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e011      	b.n	8003f66 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	60fa      	str	r2, [r7, #12]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	60fa      	str	r2, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	0a19      	lsrs	r1, r3, #8
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	60fa      	str	r2, [r7, #12]
 8003f62:	b2ca      	uxtb	r2, r1
 8003f64:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f6a:	e00a      	b.n	8003f82 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	1c53      	adds	r3, r2, #1
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1c59      	adds	r1, r3, #1
 8003f76:	60f9      	str	r1, [r7, #12]
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	701a      	strb	r2, [r3, #0]
    n++;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3f0      	bcc.n	8003f6c <_EncodeStr+0x74>
  }
  return pPayload;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3307      	adds	r3, #7
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fb6:	4b35      	ldr	r3, [pc, #212]	; (800408c <_HandleIncomingPacket+0xdc>)
 8003fb8:	7e1b      	ldrb	r3, [r3, #24]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	1cfb      	adds	r3, r7, #3
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f7ff fe43 	bl	8003c4c <SEGGER_RTT_ReadNoLock>
 8003fc6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d052      	beq.n	8004074 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d031      	beq.n	8004038 <_HandleIncomingPacket+0x88>
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	dc40      	bgt.n	800405a <_HandleIncomingPacket+0xaa>
 8003fd8:	2b07      	cmp	r3, #7
 8003fda:	dc15      	bgt.n	8004008 <_HandleIncomingPacket+0x58>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dd3c      	ble.n	800405a <_HandleIncomingPacket+0xaa>
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d839      	bhi.n	800405a <_HandleIncomingPacket+0xaa>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <_HandleIncomingPacket+0x3c>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	0800400f 	.word	0x0800400f
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401b 	.word	0x0800401b
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004027 	.word	0x08004027
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004033 	.word	0x08004033
 8004008:	2b7f      	cmp	r3, #127	; 0x7f
 800400a:	d035      	beq.n	8004078 <_HandleIncomingPacket+0xc8>
 800400c:	e025      	b.n	800405a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800400e:	f000 fec1 	bl	8004d94 <SEGGER_SYSVIEW_Start>
      break;
 8004012:	e036      	b.n	8004082 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004014:	f000 ff78 	bl	8004f08 <SEGGER_SYSVIEW_Stop>
      break;
 8004018:	e033      	b.n	8004082 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800401a:	f001 f951 	bl	80052c0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800401e:	e030      	b.n	8004082 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004020:	f001 f916 	bl	8005250 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004024:	e02d      	b.n	8004082 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004026:	f000 ff95 	bl	8004f54 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800402a:	e02a      	b.n	8004082 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800402c:	f001 fb84 	bl	8005738 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004030:	e027      	b.n	8004082 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004032:	f001 fb63 	bl	80056fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004036:	e024      	b.n	8004082 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004038:	4b14      	ldr	r3, [pc, #80]	; (800408c <_HandleIncomingPacket+0xdc>)
 800403a:	7e1b      	ldrb	r3, [r3, #24]
 800403c:	4618      	mov	r0, r3
 800403e:	1cfb      	adds	r3, r7, #3
 8004040:	2201      	movs	r2, #1
 8004042:	4619      	mov	r1, r3
 8004044:	f7ff fe02 	bl	8003c4c <SEGGER_RTT_ReadNoLock>
 8004048:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d015      	beq.n	800407c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	4618      	mov	r0, r3
 8004054:	f001 fad2 	bl	80055fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004058:	e010      	b.n	800407c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	b25b      	sxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	da0e      	bge.n	8004080 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <_HandleIncomingPacket+0xdc>)
 8004064:	7e1b      	ldrb	r3, [r3, #24]
 8004066:	4618      	mov	r0, r3
 8004068:	1cfb      	adds	r3, r7, #3
 800406a:	2201      	movs	r2, #1
 800406c:	4619      	mov	r1, r3
 800406e:	f7ff fded 	bl	8003c4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004072:	e005      	b.n	8004080 <_HandleIncomingPacket+0xd0>
    }
  }
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <_HandleIncomingPacket+0xd2>
      break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <_HandleIncomingPacket+0xd2>
      break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <_HandleIncomingPacket+0xd2>
      break;
 8004080:	bf00      	nop
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20014274 	.word	0x20014274

08004090 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	; 0x30
 8004094:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004096:	2301      	movs	r3, #1
 8004098:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	3301      	adds	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a4:	4b31      	ldr	r3, [pc, #196]	; (800416c <_TrySendOverflowPacket+0xdc>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040aa:	e00b      	b.n	80040c4 <_TrySendOverflowPacket+0x34>
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	1c59      	adds	r1, r3, #1
 80040b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	09db      	lsrs	r3, r3, #7
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	2b7f      	cmp	r3, #127	; 0x7f
 80040c8:	d8f0      	bhi.n	80040ac <_TrySendOverflowPacket+0x1c>
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80040da:	4b25      	ldr	r3, [pc, #148]	; (8004170 <_TrySendOverflowPacket+0xe0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <_TrySendOverflowPacket+0xdc>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	e00b      	b.n	800410c <_TrySendOverflowPacket+0x7c>
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	6279      	str	r1, [r7, #36]	; 0x24
 80040fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	09db      	lsrs	r3, r3, #7
 800410a:	623b      	str	r3, [r7, #32]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2b7f      	cmp	r3, #127	; 0x7f
 8004110:	d8f0      	bhi.n	80040f4 <_TrySendOverflowPacket+0x64>
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	627a      	str	r2, [r7, #36]	; 0x24
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <_TrySendOverflowPacket+0xdc>)
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	4618      	mov	r0, r3
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	461a      	mov	r2, r3
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc f85c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004138:	4603      	mov	r3, r0
 800413a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <_TrySendOverflowPacket+0xdc>)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <_TrySendOverflowPacket+0xdc>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <_TrySendOverflowPacket+0xdc>)
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e004      	b.n	8004160 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <_TrySendOverflowPacket+0xdc>)
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	3301      	adds	r3, #1
 800415c:	4a03      	ldr	r2, [pc, #12]	; (800416c <_TrySendOverflowPacket+0xdc>)
 800415e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004160:	693b      	ldr	r3, [r7, #16]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3730      	adds	r7, #48	; 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20014274 	.word	0x20014274
 8004170:	e0001004 	.word	0xe0001004

08004174 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004180:	4b98      	ldr	r3, [pc, #608]	; (80043e4 <_SendPacket+0x270>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d010      	beq.n	80041aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004188:	4b96      	ldr	r3, [pc, #600]	; (80043e4 <_SendPacket+0x270>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 812d 	beq.w	80043ec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004192:	4b94      	ldr	r3, [pc, #592]	; (80043e4 <_SendPacket+0x270>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d109      	bne.n	80041ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800419a:	f7ff ff79 	bl	8004090 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800419e:	4b91      	ldr	r3, [pc, #580]	; (80043e4 <_SendPacket+0x270>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	f040 8124 	bne.w	80043f0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80041a8:	e001      	b.n	80041ae <_SendPacket+0x3a>
    goto Send;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <_SendPacket+0x3c>
Send:
 80041ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b1f      	cmp	r3, #31
 80041b4:	d809      	bhi.n	80041ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80041b6:	4b8b      	ldr	r3, [pc, #556]	; (80043e4 <_SendPacket+0x270>)
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f040 8115 	bne.w	80043f4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b17      	cmp	r3, #23
 80041ce:	d807      	bhi.n	80041e0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e0c4      	b.n	800436a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b7f      	cmp	r3, #127	; 0x7f
 80041ec:	d912      	bls.n	8004214 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	09da      	lsrs	r2, r3, #7
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	3a01      	subs	r2, #1
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e006      	b.n	8004222 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b7e      	cmp	r3, #126	; 0x7e
 8004226:	d807      	bhi.n	8004238 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3b01      	subs	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e098      	b.n	800436a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423e:	d212      	bcs.n	8004266 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	09da      	lsrs	r2, r3, #7
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b01      	subs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	3a01      	subs	r2, #1
 8004258:	60fa      	str	r2, [r7, #12]
 800425a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	e081      	b.n	800436a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426c:	d21d      	bcs.n	80042aa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0b9a      	lsrs	r2, r3, #14
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b01      	subs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	09db      	lsrs	r3, r3, #7
 8004282:	b2db      	uxtb	r3, r3
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	3a01      	subs	r2, #1
 8004288:	60fa      	str	r2, [r7, #12]
 800428a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	3a01      	subs	r2, #1
 800429c:	60fa      	str	r2, [r7, #12]
 800429e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e05f      	b.n	800436a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042b0:	d228      	bcs.n	8004304 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0d5a      	lsrs	r2, r3, #21
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0b9b      	lsrs	r3, r3, #14
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	3a01      	subs	r2, #1
 80042cc:	60fa      	str	r2, [r7, #12]
 80042ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	3a01      	subs	r2, #1
 80042e2:	60fa      	str	r2, [r7, #12]
 80042e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	3a01      	subs	r2, #1
 80042f6:	60fa      	str	r2, [r7, #12]
 80042f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e032      	b.n	800436a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	0f1a      	lsrs	r2, r3, #28
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0d5b      	lsrs	r3, r3, #21
 8004318:	b2db      	uxtb	r3, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	3a01      	subs	r2, #1
 800431e:	60fa      	str	r2, [r7, #12]
 8004320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0b9b      	lsrs	r3, r3, #14
 800432e:	b2db      	uxtb	r3, r3
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	3a01      	subs	r2, #1
 8004334:	60fa      	str	r2, [r7, #12]
 8004336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	09db      	lsrs	r3, r3, #7
 8004344:	b2db      	uxtb	r3, r3
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	3a01      	subs	r2, #1
 800434a:	60fa      	str	r2, [r7, #12]
 800434c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004350:	b2da      	uxtb	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	3a01      	subs	r2, #1
 800435e:	60fa      	str	r2, [r7, #12]
 8004360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800436a:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <_SendPacket+0x274>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004370:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <_SendPacket+0x270>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	623b      	str	r3, [r7, #32]
 8004382:	e00b      	b.n	800439c <_SendPacket+0x228>
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	1c59      	adds	r1, r3, #1
 800438c:	6279      	str	r1, [r7, #36]	; 0x24
 800438e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	09db      	lsrs	r3, r3, #7
 800439a:	623b      	str	r3, [r7, #32]
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	2b7f      	cmp	r3, #127	; 0x7f
 80043a0:	d8f0      	bhi.n	8004384 <_SendPacket+0x210>
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	627a      	str	r2, [r7, #36]	; 0x24
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <_SendPacket+0x270>)
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	4618      	mov	r0, r3
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	f7fb ff15 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043c6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043ce:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <_SendPacket+0x270>)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	60d3      	str	r3, [r2, #12]
 80043d4:	e00f      	b.n	80043f6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80043d6:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <_SendPacket+0x270>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4b01      	ldr	r3, [pc, #4]	; (80043e4 <_SendPacket+0x270>)
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e008      	b.n	80043f6 <_SendPacket+0x282>
 80043e4:	20014274 	.word	0x20014274
 80043e8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <_SendPacket+0x282>
      goto SendDone;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <_SendPacket+0x282>
      goto SendDone;
 80043f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <_SendPacket+0x2d4>)
 80043f8:	7e1b      	ldrb	r3, [r3, #24]
 80043fa:	4619      	mov	r1, r3
 80043fc:	4a13      	ldr	r2, [pc, #76]	; (800444c <_SendPacket+0x2d8>)
 80043fe:	460b      	mov	r3, r1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	440b      	add	r3, r1
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	336c      	adds	r3, #108	; 0x6c
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <_SendPacket+0x2d4>)
 800440e:	7e1b      	ldrb	r3, [r3, #24]
 8004410:	4618      	mov	r0, r3
 8004412:	490e      	ldr	r1, [pc, #56]	; (800444c <_SendPacket+0x2d8>)
 8004414:	4603      	mov	r3, r0
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4403      	add	r3, r0
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	440b      	add	r3, r1
 800441e:	3370      	adds	r3, #112	; 0x70
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d00b      	beq.n	800443e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <_SendPacket+0x2d4>)
 8004428:	789b      	ldrb	r3, [r3, #2]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <_SendPacket+0x2d4>)
 8004430:	2201      	movs	r2, #1
 8004432:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004434:	f7ff fdbc 	bl	8003fb0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <_SendPacket+0x2d4>)
 800443a:	2200      	movs	r2, #0
 800443c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800443e:	bf00      	nop
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20014274 	.word	0x20014274
 800444c:	20012db4 	.word	0x20012db4

08004450 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3301      	adds	r3, #1
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d80a      	bhi.n	8004480 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	1c59      	adds	r1, r3, #1
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6051      	str	r1, [r2, #4]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d15a      	bne.n	800453e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	e00b      	b.n	80044c2 <_StoreChar+0x72>
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1c59      	adds	r1, r3, #1
 80044b2:	6279      	str	r1, [r7, #36]	; 0x24
 80044b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	09db      	lsrs	r3, r3, #7
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	2b7f      	cmp	r3, #127	; 0x7f
 80044c6:	d8f0      	bhi.n	80044aa <_StoreChar+0x5a>
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	627a      	str	r2, [r7, #36]	; 0x24
 80044ce:	6a3a      	ldr	r2, [r7, #32]
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e00b      	b.n	80044fa <_StoreChar+0xaa>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	61f9      	str	r1, [r7, #28]
 80044ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	09db      	lsrs	r3, r3, #7
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b7f      	cmp	r3, #127	; 0x7f
 80044fe:	d8f0      	bhi.n	80044e2 <_StoreChar+0x92>
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	61fa      	str	r2, [r7, #28]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	221a      	movs	r2, #26
 8004516:	6939      	ldr	r1, [r7, #16]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fe2b 	bl	8004174 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fd38 	bl	8003f98 <_PreparePacket>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
  }
}
 800453e:	bf00      	nop
 8004540:	3728      	adds	r7, #40	; 0x28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800455a:	2301      	movs	r3, #1
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004562:	e007      	b.n	8004574 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	623b      	str	r3, [r7, #32]
    Width++;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3301      	adds	r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d2f3      	bcs.n	8004564 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	429a      	cmp	r2, r3
 8004582:	d901      	bls.n	8004588 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11f      	bne.n	80045d2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01c      	beq.n	80045d2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <_PrintUnsigned+0x66>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <_PrintUnsigned+0x66>
        c = '0';
 80045a8:	2330      	movs	r3, #48	; 0x30
 80045aa:	76fb      	strb	r3, [r7, #27]
 80045ac:	e001      	b.n	80045b2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80045ae:	2320      	movs	r3, #32
 80045b0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045b2:	e007      	b.n	80045c4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	3b01      	subs	r3, #1
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80045ba:	7efb      	ldrb	r3, [r7, #27]
 80045bc:	4619      	mov	r1, r3
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff ff46 	bl	8004450 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <_PrintUnsigned+0x8a>
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3f0      	bcc.n	80045b4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d903      	bls.n	80045e0 <_PrintUnsigned+0x98>
      NumDigits--;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	e009      	b.n	80045f4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d200      	bcs.n	80045f4 <_PrintUnsigned+0xac>
        break;
 80045f2:	e005      	b.n	8004600 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80045fe:	e7e8      	b.n	80045d2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004618:	4a15      	ldr	r2, [pc, #84]	; (8004670 <_PrintUnsigned+0x128>)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	4619      	mov	r1, r3
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff ff14 	bl	8004450 <_StoreChar>
    Digit /= Base;
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e3      	bne.n	8004600 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d011      	beq.n	8004666 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004648:	e006      	b.n	8004658 <_PrintUnsigned+0x110>
        FieldWidth--;
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	3b01      	subs	r3, #1
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004650:	2120      	movs	r1, #32
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff fefc 	bl	8004450 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <_PrintUnsigned+0x11e>
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	429a      	cmp	r2, r3
 8004664:	d3f1      	bcc.n	800464a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004666:	bf00      	nop
 8004668:	3728      	adds	r7, #40	; 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	08005dd0 	.word	0x08005dd0

08004674 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	bfb8      	it	lt
 8004688:	425b      	neglt	r3, r3
 800468a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004690:	e007      	b.n	80046a2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	fb92 f3f3 	sdiv	r3, r2, r3
 800469a:	613b      	str	r3, [r7, #16]
    Width++;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3301      	adds	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	daf3      	bge.n	8004692 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d901      	bls.n	80046b6 <_PrintInt+0x42>
    Width = NumDigits;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <_PrintInt+0x5e>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db04      	blt.n	80046cc <_PrintInt+0x58>
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <_PrintInt+0x5e>
    FieldWidth--;
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <_PrintInt+0x6e>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <_PrintInt+0x9c>
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d111      	bne.n	8004710 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046f2:	e006      	b.n	8004702 <_PrintInt+0x8e>
        FieldWidth--;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80046fa:	2120      	movs	r1, #32
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff fea7 	bl	8004450 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <_PrintInt+0x9c>
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	429a      	cmp	r2, r3
 800470e:	d3f1      	bcc.n	80046f4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da07      	bge.n	8004726 <_PrintInt+0xb2>
    v = -v;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	425b      	negs	r3, r3
 800471a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800471c:	212d      	movs	r1, #45	; 0x2d
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fe96 	bl	8004450 <_StoreChar>
 8004724:	e008      	b.n	8004738 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004730:	212b      	movs	r1, #43	; 0x2b
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff fe8c 	bl	8004450 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d019      	beq.n	8004776 <_PrintInt+0x102>
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d114      	bne.n	8004776 <_PrintInt+0x102>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d111      	bne.n	8004776 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004758:	e006      	b.n	8004768 <_PrintInt+0xf4>
        FieldWidth--;
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	3b01      	subs	r3, #1
 800475e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004760:	2130      	movs	r1, #48	; 0x30
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fe74 	bl	8004450 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <_PrintInt+0x102>
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3f1      	bcc.n	800475a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff fedf 	bl	8004548 <_PrintUnsigned>
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b098      	sub	sp, #96	; 0x60
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80047a0:	f3ef 8311 	mrs	r3, BASEPRI
 80047a4:	f04f 0120 	mov.w	r1, #32
 80047a8:	f381 8811 	msr	BASEPRI, r1
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30
 80047ae:	48b7      	ldr	r0, [pc, #732]	; (8004a8c <_VPrintTarget+0x2f8>)
 80047b0:	f7ff fbf2 	bl	8003f98 <_PreparePacket>
 80047b4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80047b6:	4bb5      	ldr	r3, [pc, #724]	; (8004a8c <_VPrintTarget+0x2f8>)
 80047b8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3301      	adds	r3, #1
 80047c6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80047da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8183 	beq.w	8004aea <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80047e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047e8:	2b25      	cmp	r3, #37	; 0x25
 80047ea:	f040 8170 	bne.w	8004ace <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80047ee:	2300      	movs	r3, #0
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80047fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004802:	3b23      	subs	r3, #35	; 0x23
 8004804:	2b0d      	cmp	r3, #13
 8004806:	d83f      	bhi.n	8004888 <_VPrintTarget+0xf4>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <_VPrintTarget+0x7c>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004879 	.word	0x08004879
 8004814:	08004889 	.word	0x08004889
 8004818:	08004889 	.word	0x08004889
 800481c:	08004889 	.word	0x08004889
 8004820:	08004889 	.word	0x08004889
 8004824:	08004889 	.word	0x08004889
 8004828:	08004889 	.word	0x08004889
 800482c:	08004889 	.word	0x08004889
 8004830:	08004869 	.word	0x08004869
 8004834:	08004889 	.word	0x08004889
 8004838:	08004849 	.word	0x08004849
 800483c:	08004889 	.word	0x08004889
 8004840:	08004889 	.word	0x08004889
 8004844:	08004859 	.word	0x08004859
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e01a      	b.n	800488e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485a:	f043 0302 	orr.w	r3, r3, #2
 800485e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e012      	b.n	800488e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486a:	f043 0304 	orr.w	r3, r3, #4
 800486e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e00a      	b.n	800488e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487a:	f043 0308 	orr.w	r3, r3, #8
 800487e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e002      	b.n	800488e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004888:	2300      	movs	r3, #0
 800488a:	653b      	str	r3, [r7, #80]	; 0x50
 800488c:	bf00      	nop
        }
      } while (v);
 800488e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1b0      	bne.n	80047f6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004894:	2300      	movs	r3, #0
 8004896:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80048a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048a4:	2b2f      	cmp	r3, #47	; 0x2f
 80048a6:	d912      	bls.n	80048ce <_VPrintTarget+0x13a>
 80048a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ac:	2b39      	cmp	r3, #57	; 0x39
 80048ae:	d80e      	bhi.n	80048ce <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80048b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	461a      	mov	r2, r3
 80048c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048c6:	4413      	add	r3, r2
 80048c8:	3b30      	subs	r3, #48	; 0x30
 80048ca:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80048cc:	e7e4      	b.n	8004898 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80048ce:	2300      	movs	r3, #0
 80048d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80048da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048de:	2b2e      	cmp	r3, #46	; 0x2e
 80048e0:	d11d      	bne.n	800491e <_VPrintTarget+0x18a>
        sFormat++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80048f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048f4:	2b2f      	cmp	r3, #47	; 0x2f
 80048f6:	d912      	bls.n	800491e <_VPrintTarget+0x18a>
 80048f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048fc:	2b39      	cmp	r3, #57	; 0x39
 80048fe:	d80e      	bhi.n	800491e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	461a      	mov	r2, r3
 8004912:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004916:	4413      	add	r3, r2
 8004918:	3b30      	subs	r3, #48	; 0x30
 800491a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800491c:	e7e4      	b.n	80048e8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800492a:	2b6c      	cmp	r3, #108	; 0x6c
 800492c:	d003      	beq.n	8004936 <_VPrintTarget+0x1a2>
 800492e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004932:	2b68      	cmp	r3, #104	; 0x68
 8004934:	d107      	bne.n	8004946 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004944:	e7ef      	b.n	8004926 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004946:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800494a:	2b25      	cmp	r3, #37	; 0x25
 800494c:	f000 80b3 	beq.w	8004ab6 <_VPrintTarget+0x322>
 8004950:	2b25      	cmp	r3, #37	; 0x25
 8004952:	f2c0 80b7 	blt.w	8004ac4 <_VPrintTarget+0x330>
 8004956:	2b78      	cmp	r3, #120	; 0x78
 8004958:	f300 80b4 	bgt.w	8004ac4 <_VPrintTarget+0x330>
 800495c:	2b58      	cmp	r3, #88	; 0x58
 800495e:	f2c0 80b1 	blt.w	8004ac4 <_VPrintTarget+0x330>
 8004962:	3b58      	subs	r3, #88	; 0x58
 8004964:	2b20      	cmp	r3, #32
 8004966:	f200 80ad 	bhi.w	8004ac4 <_VPrintTarget+0x330>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <_VPrintTarget+0x1dc>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004a67 	.word	0x08004a67
 8004974:	08004ac5 	.word	0x08004ac5
 8004978:	08004ac5 	.word	0x08004ac5
 800497c:	08004ac5 	.word	0x08004ac5
 8004980:	08004ac5 	.word	0x08004ac5
 8004984:	08004ac5 	.word	0x08004ac5
 8004988:	08004ac5 	.word	0x08004ac5
 800498c:	08004ac5 	.word	0x08004ac5
 8004990:	08004ac5 	.word	0x08004ac5
 8004994:	08004ac5 	.word	0x08004ac5
 8004998:	08004ac5 	.word	0x08004ac5
 800499c:	080049f5 	.word	0x080049f5
 80049a0:	08004a1b 	.word	0x08004a1b
 80049a4:	08004ac5 	.word	0x08004ac5
 80049a8:	08004ac5 	.word	0x08004ac5
 80049ac:	08004ac5 	.word	0x08004ac5
 80049b0:	08004ac5 	.word	0x08004ac5
 80049b4:	08004ac5 	.word	0x08004ac5
 80049b8:	08004ac5 	.word	0x08004ac5
 80049bc:	08004ac5 	.word	0x08004ac5
 80049c0:	08004ac5 	.word	0x08004ac5
 80049c4:	08004ac5 	.word	0x08004ac5
 80049c8:	08004ac5 	.word	0x08004ac5
 80049cc:	08004ac5 	.word	0x08004ac5
 80049d0:	08004a91 	.word	0x08004a91
 80049d4:	08004ac5 	.word	0x08004ac5
 80049d8:	08004ac5 	.word	0x08004ac5
 80049dc:	08004ac5 	.word	0x08004ac5
 80049e0:	08004ac5 	.word	0x08004ac5
 80049e4:	08004a41 	.word	0x08004a41
 80049e8:	08004ac5 	.word	0x08004ac5
 80049ec:	08004ac5 	.word	0x08004ac5
 80049f0:	08004a67 	.word	0x08004a67
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1d19      	adds	r1, r3, #4
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6011      	str	r1, [r2, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004a08:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004a0c:	f107 0314 	add.w	r3, r7, #20
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fd1c 	bl	8004450 <_StoreChar>
        break;
 8004a18:	e055      	b.n	8004ac6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	1d19      	adds	r1, r3, #4
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6011      	str	r1, [r2, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a28:	f107 0014 	add.w	r0, r7, #20
 8004a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a36:	220a      	movs	r2, #10
 8004a38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a3a:	f7ff fe1b 	bl	8004674 <_PrintInt>
        break;
 8004a3e:	e042      	b.n	8004ac6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d19      	adds	r1, r3, #4
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a50:	f107 0014 	add.w	r0, r7, #20
 8004a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5e:	220a      	movs	r2, #10
 8004a60:	f7ff fd72 	bl	8004548 <_PrintUnsigned>
        break;
 8004a64:	e02f      	b.n	8004ac6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	1d19      	adds	r1, r3, #4
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6011      	str	r1, [r2, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004a74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a76:	f107 0014 	add.w	r0, r7, #20
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	2210      	movs	r2, #16
 8004a86:	f7ff fd5f 	bl	8004548 <_PrintUnsigned>
        break;
 8004a8a:	e01c      	b.n	8004ac6 <_VPrintTarget+0x332>
 8004a8c:	200142a4 	.word	0x200142a4
      case 'p':
        v = va_arg(*pParamList, int);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aa0:	f107 0014 	add.w	r0, r7, #20
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2308      	movs	r3, #8
 8004aae:	2210      	movs	r2, #16
 8004ab0:	f7ff fd4a 	bl	8004548 <_PrintUnsigned>
        break;
 8004ab4:	e007      	b.n	8004ac6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	2125      	movs	r1, #37	; 0x25
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fcc7 	bl	8004450 <_StoreChar>
        break;
 8004ac2:	e000      	b.n	8004ac6 <_VPrintTarget+0x332>
      default:
        break;
 8004ac4:	bf00      	nop
      }
      sFormat++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e007      	b.n	8004ade <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004ace:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004ad2:	f107 0314 	add.w	r3, r7, #20
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fcb9 	bl	8004450 <_StoreChar>
    }
  } while (*sFormat);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f47f ae72 	bne.w	80047cc <_VPrintTarget+0x38>
 8004ae8:	e000      	b.n	8004aec <_VPrintTarget+0x358>
      break;
 8004aea:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d041      	beq.n	8004b76 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	643b      	str	r3, [r7, #64]	; 0x40
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b02:	e00b      	b.n	8004b1c <_VPrintTarget+0x388>
 8004b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	6439      	str	r1, [r7, #64]	; 0x40
 8004b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b20:	d8f0      	bhi.n	8004b04 <_VPrintTarget+0x370>
 8004b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	643a      	str	r2, [r7, #64]	; 0x40
 8004b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b30:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	e00b      	b.n	8004b54 <_VPrintTarget+0x3c0>
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	1c59      	adds	r1, r3, #1
 8004b44:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	09db      	lsrs	r3, r3, #7
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	2b7f      	cmp	r3, #127	; 0x7f
 8004b58:	d8f0      	bhi.n	8004b3c <_VPrintTarget+0x3a8>
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b68:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	69b9      	ldr	r1, [r7, #24]
 8004b6e:	221a      	movs	r2, #26
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff faff 	bl	8004174 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004b7c:	bf00      	nop
 8004b7e:	3758      	adds	r7, #88	; 0x58
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b92:	2300      	movs	r3, #0
 8004b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b98:	4917      	ldr	r1, [pc, #92]	; (8004bf8 <SEGGER_SYSVIEW_Init+0x74>)
 8004b9a:	4818      	ldr	r0, [pc, #96]	; (8004bfc <SEGGER_SYSVIEW_Init+0x78>)
 8004b9c:	f7ff f8dc 	bl	8003d58 <SEGGER_RTT_AllocUpBuffer>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ba6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004baa:	785a      	ldrb	r2, [r3, #1]
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bb0:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bb2:	7e1b      	ldrb	r3, [r3, #24]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2308      	movs	r3, #8
 8004bbc:	4a11      	ldr	r2, [pc, #68]	; (8004c04 <SEGGER_SYSVIEW_Init+0x80>)
 8004bbe:	490f      	ldr	r1, [pc, #60]	; (8004bfc <SEGGER_SYSVIEW_Init+0x78>)
 8004bc0:	f7ff f94e 	bl	8003e60 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <SEGGER_SYSVIEW_Init+0x84>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bd0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004bd2:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004bd8:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004be4:	4a06      	ldr	r2, [pc, #24]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	2001326c 	.word	0x2001326c
 8004bfc:	08005ce4 	.word	0x08005ce4
 8004c00:	20014274 	.word	0x20014274
 8004c04:	2001426c 	.word	0x2001426c
 8004c08:	e0001004 	.word	0xe0001004

08004c0c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6113      	str	r3, [r2, #16]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20014274 	.word	0x20014274

08004c2c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c34:	f3ef 8311 	mrs	r3, BASEPRI
 8004c38:	f04f 0120 	mov.w	r1, #32
 8004c3c:	f381 8811 	msr	BASEPRI, r1
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	4808      	ldr	r0, [pc, #32]	; (8004c64 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c44:	f7ff f9a8 	bl	8003f98 <_PreparePacket>
 8004c48:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	68b8      	ldr	r0, [r7, #8]
 8004c50:	f7ff fa90 	bl	8004174 <_SendPacket>
  RECORD_END();
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f383 8811 	msr	BASEPRI, r3
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200142a4 	.word	0x200142a4

08004c68 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c72:	f3ef 8311 	mrs	r3, BASEPRI
 8004c76:	f04f 0120 	mov.w	r1, #32
 8004c7a:	f381 8811 	msr	BASEPRI, r1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	4816      	ldr	r0, [pc, #88]	; (8004cdc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c82:	f7ff f989 	bl	8003f98 <_PreparePacket>
 8004c86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e00b      	b.n	8004cae <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	1c59      	adds	r1, r3, #1
 8004c9e:	61f9      	str	r1, [r7, #28]
 8004ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	09db      	lsrs	r3, r3, #7
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb2:	d8f0      	bhi.n	8004c96 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	61fa      	str	r2, [r7, #28]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	6938      	ldr	r0, [r7, #16]
 8004cca:	f7ff fa53 	bl	8004174 <_SendPacket>
  RECORD_END();
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f383 8811 	msr	BASEPRI, r3
}
 8004cd4:	bf00      	nop
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200142a4 	.word	0x200142a4

08004ce0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08c      	sub	sp, #48	; 0x30
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cec:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf0:	f04f 0120 	mov.w	r1, #32
 8004cf4:	f381 8811 	msr	BASEPRI, r1
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	4825      	ldr	r0, [pc, #148]	; (8004d90 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004cfc:	f7ff f94c 	bl	8003f98 <_PreparePacket>
 8004d00:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0e:	e00b      	b.n	8004d28 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	1c59      	adds	r1, r3, #1
 8004d18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	09db      	lsrs	r3, r3, #7
 8004d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d2c:	d8f0      	bhi.n	8004d10 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	e00b      	b.n	8004d60 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	1c59      	adds	r1, r3, #1
 8004d50:	6279      	str	r1, [r7, #36]	; 0x24
 8004d52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	09db      	lsrs	r3, r3, #7
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b7f      	cmp	r3, #127	; 0x7f
 8004d64:	d8f0      	bhi.n	8004d48 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	627a      	str	r2, [r7, #36]	; 0x24
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	69b8      	ldr	r0, [r7, #24]
 8004d7c:	f7ff f9fa 	bl	8004174 <_SendPacket>
  RECORD_END();
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f383 8811 	msr	BASEPRI, r3
}
 8004d86:	bf00      	nop
 8004d88:	3730      	adds	r7, #48	; 0x30
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	200142a4 	.word	0x200142a4

08004d94 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004d9a:	4b58      	ldr	r3, [pc, #352]	; (8004efc <SEGGER_SYSVIEW_Start+0x168>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004da0:	f3ef 8311 	mrs	r3, BASEPRI
 8004da4:	f04f 0120 	mov.w	r1, #32
 8004da8:	f381 8811 	msr	BASEPRI, r1
 8004dac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004dae:	4b53      	ldr	r3, [pc, #332]	; (8004efc <SEGGER_SYSVIEW_Start+0x168>)
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	220a      	movs	r2, #10
 8004db4:	4952      	ldr	r1, [pc, #328]	; (8004f00 <SEGGER_SYSVIEW_Start+0x16c>)
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb fa1a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004dc2:	200a      	movs	r0, #10
 8004dc4:	f7ff ff32 	bl	8004c2c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dc8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dcc:	f04f 0120 	mov.w	r1, #32
 8004dd0:	f381 8811 	msr	BASEPRI, r1
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	484b      	ldr	r0, [pc, #300]	; (8004f04 <SEGGER_SYSVIEW_Start+0x170>)
 8004dd8:	f7ff f8de 	bl	8003f98 <_PreparePacket>
 8004ddc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de6:	4b45      	ldr	r3, [pc, #276]	; (8004efc <SEGGER_SYSVIEW_Start+0x168>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dec:	e00b      	b.n	8004e06 <SEGGER_SYSVIEW_Start+0x72>
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	1c59      	adds	r1, r3, #1
 8004df6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004df8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	09db      	lsrs	r3, r3, #7
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0a:	d8f0      	bhi.n	8004dee <SEGGER_SYSVIEW_Start+0x5a>
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	4b36      	ldr	r3, [pc, #216]	; (8004efc <SEGGER_SYSVIEW_Start+0x168>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e00b      	b.n	8004e40 <SEGGER_SYSVIEW_Start+0xac>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6279      	str	r1, [r7, #36]	; 0x24
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <SEGGER_SYSVIEW_Start+0x94>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	4b28      	ldr	r3, [pc, #160]	; (8004efc <SEGGER_SYSVIEW_Start+0x168>)
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	e00b      	b.n	8004e7a <SEGGER_SYSVIEW_Start+0xe6>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	1c59      	adds	r1, r3, #1
 8004e6a:	61f9      	str	r1, [r7, #28]
 8004e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	09db      	lsrs	r3, r3, #7
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e7e:	d8f0      	bhi.n	8004e62 <SEGGER_SYSVIEW_Start+0xce>
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	61fa      	str	r2, [r7, #28]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	2300      	movs	r3, #0
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	e00b      	b.n	8004eb2 <SEGGER_SYSVIEW_Start+0x11e>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1c59      	adds	r1, r3, #1
 8004ea2:	6179      	str	r1, [r7, #20]
 8004ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	09db      	lsrs	r3, r3, #7
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb6:	d8f0      	bhi.n	8004e9a <SEGGER_SYSVIEW_Start+0x106>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	617a      	str	r2, [r7, #20]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ec8:	2218      	movs	r2, #24
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff f951 	bl	8004174 <_SendPacket>
      RECORD_END();
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <SEGGER_SYSVIEW_Start+0x168>)
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <SEGGER_SYSVIEW_Start+0x168>)
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004ee6:	f000 f9eb 	bl	80052c0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004eea:	f000 f9b1 	bl	8005250 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004eee:	f000 fc23 	bl	8005738 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004ef2:	bf00      	nop
 8004ef4:	3730      	adds	r7, #48	; 0x30
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20014274 	.word	0x20014274
 8004f00:	08005dc4 	.word	0x08005dc4
 8004f04:	200142a4 	.word	0x200142a4

08004f08 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f12:	f04f 0120 	mov.w	r1, #32
 8004f16:	f381 8811 	msr	BASEPRI, r1
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	480b      	ldr	r0, [pc, #44]	; (8004f4c <SEGGER_SYSVIEW_Stop+0x44>)
 8004f1e:	f7ff f83b 	bl	8003f98 <_PreparePacket>
 8004f22:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f2c:	220b      	movs	r2, #11
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6838      	ldr	r0, [r7, #0]
 8004f32:	f7ff f91f 	bl	8004174 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f383 8811 	msr	BASEPRI, r3
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200142a4 	.word	0x200142a4
 8004f50:	20014274 	.word	0x20014274

08004f54 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	; 0x30
 8004f58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5e:	f04f 0120 	mov.w	r1, #32
 8004f62:	f381 8811 	msr	BASEPRI, r1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	4845      	ldr	r0, [pc, #276]	; (8005080 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f6a:	f7ff f815 	bl	8003f98 <_PreparePacket>
 8004f6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f78:	4b42      	ldr	r3, [pc, #264]	; (8005084 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7e:	e00b      	b.n	8004f98 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	09db      	lsrs	r3, r3, #7
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f9c:	d8f0      	bhi.n	8004f80 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	4b34      	ldr	r3, [pc, #208]	; (8005084 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	e00b      	b.n	8004fd2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1c59      	adds	r1, r3, #1
 8004fc2:	6279      	str	r1, [r7, #36]	; 0x24
 8004fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	09db      	lsrs	r3, r3, #7
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd6:	d8f0      	bhi.n	8004fba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	627a      	str	r2, [r7, #36]	; 0x24
 8004fde:	6a3a      	ldr	r2, [r7, #32]
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	e00b      	b.n	800500c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	61f9      	str	r1, [r7, #28]
 8004ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	09db      	lsrs	r3, r3, #7
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2b7f      	cmp	r3, #127	; 0x7f
 8005010:	d8f0      	bhi.n	8004ff4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	61fa      	str	r2, [r7, #28]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	e00b      	b.n	8005044 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	6179      	str	r1, [r7, #20]
 8005036:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	09db      	lsrs	r3, r3, #7
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b7f      	cmp	r3, #127	; 0x7f
 8005048:	d8f0      	bhi.n	800502c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	617a      	str	r2, [r7, #20]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800505a:	2218      	movs	r2, #24
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	68b8      	ldr	r0, [r7, #8]
 8005060:	f7ff f888 	bl	8004174 <_SendPacket>
  RECORD_END();
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005072:	4b04      	ldr	r3, [pc, #16]	; (8005084 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	4798      	blx	r3
  }
}
 8005078:	bf00      	nop
 800507a:	3730      	adds	r7, #48	; 0x30
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	200142a4 	.word	0x200142a4
 8005084:	20014274 	.word	0x20014274

08005088 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b092      	sub	sp, #72	; 0x48
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005090:	f3ef 8311 	mrs	r3, BASEPRI
 8005094:	f04f 0120 	mov.w	r1, #32
 8005098:	f381 8811 	msr	BASEPRI, r1
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	486a      	ldr	r0, [pc, #424]	; (8005248 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80050a0:	f7fe ff7a 	bl	8003f98 <_PreparePacket>
 80050a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	647b      	str	r3, [r7, #68]	; 0x44
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b66      	ldr	r3, [pc, #408]	; (800524c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
 80050ba:	e00b      	b.n	80050d4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80050bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	1c59      	adds	r1, r3, #1
 80050c4:	6479      	str	r1, [r7, #68]	; 0x44
 80050c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d0:	09db      	lsrs	r3, r3, #7
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
 80050d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d6:	2b7f      	cmp	r3, #127	; 0x7f
 80050d8:	d8f0      	bhi.n	80050bc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80050da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	647a      	str	r2, [r7, #68]	; 0x44
 80050e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f4:	e00b      	b.n	800510e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005100:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	09db      	lsrs	r3, r3, #7
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	2b7f      	cmp	r3, #127	; 0x7f
 8005112:	d8f0      	bhi.n	80050f6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800511a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005122:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	4619      	mov	r1, r3
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7fe fee3 	bl	8003ef8 <_EncodeStr>
 8005132:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005134:	2209      	movs	r2, #9
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	6938      	ldr	r0, [r7, #16]
 800513a:	f7ff f81b 	bl	8004174 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	637b      	str	r3, [r7, #52]	; 0x34
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b40      	ldr	r3, [pc, #256]	; (800524c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	633b      	str	r3, [r7, #48]	; 0x30
 8005152:	e00b      	b.n	800516c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	b2da      	uxtb	r2, r3
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	1c59      	adds	r1, r3, #1
 800515c:	6379      	str	r1, [r7, #52]	; 0x34
 800515e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	09db      	lsrs	r3, r3, #7
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b7f      	cmp	r3, #127	; 0x7f
 8005170:	d8f0      	bhi.n	8005154 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	637a      	str	r2, [r7, #52]	; 0x34
 8005178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
 800518c:	e00b      	b.n	80051a6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	b2da      	uxtb	r2, r3
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	1c59      	adds	r1, r3, #1
 8005196:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005198:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	09db      	lsrs	r3, r3, #7
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	2b7f      	cmp	r3, #127	; 0x7f
 80051aa:	d8f0      	bhi.n	800518e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	e00b      	b.n	80051e0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	6279      	str	r1, [r7, #36]	; 0x24
 80051d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	09db      	lsrs	r3, r3, #7
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b7f      	cmp	r3, #127	; 0x7f
 80051e4:	d8f0      	bhi.n	80051c8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	627a      	str	r2, [r7, #36]	; 0x24
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	e00b      	b.n	8005218 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	61f9      	str	r1, [r7, #28]
 800520a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	09db      	lsrs	r3, r3, #7
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b7f      	cmp	r3, #127	; 0x7f
 800521c:	d8f0      	bhi.n	8005200 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	61fa      	str	r2, [r7, #28]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800522e:	2215      	movs	r2, #21
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	6938      	ldr	r0, [r7, #16]
 8005234:	f7fe ff9e 	bl	8004174 <_SendPacket>
  RECORD_END();
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f383 8811 	msr	BASEPRI, r3
}
 800523e:	bf00      	nop
 8005240:	3748      	adds	r7, #72	; 0x48
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200142a4 	.word	0x200142a4
 800524c:	20014274 	.word	0x20014274

08005250 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005254:	4b07      	ldr	r3, [pc, #28]	; (8005274 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005266:	4b03      	ldr	r3, [pc, #12]	; (8005274 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4798      	blx	r3
  }
}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20014274 	.word	0x20014274

08005278 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005280:	f3ef 8311 	mrs	r3, BASEPRI
 8005284:	f04f 0120 	mov.w	r1, #32
 8005288:	f381 8811 	msr	BASEPRI, r1
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	480b      	ldr	r0, [pc, #44]	; (80052bc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005290:	f7fe fe82 	bl	8003f98 <_PreparePacket>
 8005294:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	6938      	ldr	r0, [r7, #16]
 800529c:	f7fe fe2c 	bl	8003ef8 <_EncodeStr>
 80052a0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80052a2:	220e      	movs	r2, #14
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	6938      	ldr	r0, [r7, #16]
 80052a8:	f7fe ff64 	bl	8004174 <_SendPacket>
  RECORD_END();
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f383 8811 	msr	BASEPRI, r3
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200142a4 	.word	0x200142a4

080052c0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01a      	beq.n	8005304 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d015      	beq.n	8005304 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4798      	blx	r3
 80052e0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052e4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	000a      	movs	r2, r1
 80052f4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052f6:	4613      	mov	r3, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4621      	mov	r1, r4
 80052fc:	200d      	movs	r0, #13
 80052fe:	f7ff fcef 	bl	8004ce0 <SEGGER_SYSVIEW_RecordU32x2>
 8005302:	e006      	b.n	8005312 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	200c      	movs	r0, #12
 800530c:	f7ff fcac 	bl	8004c68 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bd90      	pop	{r4, r7, pc}
 800531a:	bf00      	nop
 800531c:	20014274 	.word	0x20014274
 8005320:	e0001004 	.word	0xe0001004

08005324 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800532a:	f3ef 8311 	mrs	r3, BASEPRI
 800532e:	f04f 0120 	mov.w	r1, #32
 8005332:	f381 8811 	msr	BASEPRI, r1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	4819      	ldr	r0, [pc, #100]	; (80053a0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800533a:	f7fe fe2d 	bl	8003f98 <_PreparePacket>
 800533e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	e00b      	b.n	8005370 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	6179      	str	r1, [r7, #20]
 8005362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	09db      	lsrs	r3, r3, #7
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b7f      	cmp	r3, #127	; 0x7f
 8005374:	d8f0      	bhi.n	8005358 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	617a      	str	r2, [r7, #20]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005386:	2202      	movs	r2, #2
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	68b8      	ldr	r0, [r7, #8]
 800538c:	f7fe fef2 	bl	8004174 <_SendPacket>
  RECORD_END();
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f383 8811 	msr	BASEPRI, r3
}
 8005396:	bf00      	nop
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200142a4 	.word	0x200142a4
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ae:	f3ef 8311 	mrs	r3, BASEPRI
 80053b2:	f04f 0120 	mov.w	r1, #32
 80053b6:	f381 8811 	msr	BASEPRI, r1
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	4807      	ldr	r0, [pc, #28]	; (80053dc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80053be:	f7fe fdeb 	bl	8003f98 <_PreparePacket>
 80053c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80053c4:	2203      	movs	r2, #3
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6838      	ldr	r0, [r7, #0]
 80053ca:	f7fe fed3 	bl	8004174 <_SendPacket>
  RECORD_END();
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f383 8811 	msr	BASEPRI, r3
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200142a4 	.word	0x200142a4

080053e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053e6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ea:	f04f 0120 	mov.w	r1, #32
 80053ee:	f381 8811 	msr	BASEPRI, r1
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	4807      	ldr	r0, [pc, #28]	; (8005414 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80053f6:	f7fe fdcf 	bl	8003f98 <_PreparePacket>
 80053fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80053fc:	2212      	movs	r2, #18
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6838      	ldr	r0, [r7, #0]
 8005402:	f7fe feb7 	bl	8004174 <_SendPacket>
  RECORD_END();
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f383 8811 	msr	BASEPRI, r3
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	200142a4 	.word	0x200142a4

08005418 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800541e:	f3ef 8311 	mrs	r3, BASEPRI
 8005422:	f04f 0120 	mov.w	r1, #32
 8005426:	f381 8811 	msr	BASEPRI, r1
 800542a:	607b      	str	r3, [r7, #4]
 800542c:	4807      	ldr	r0, [pc, #28]	; (800544c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800542e:	f7fe fdb3 	bl	8003f98 <_PreparePacket>
 8005432:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005434:	2211      	movs	r2, #17
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6838      	ldr	r0, [r7, #0]
 800543a:	f7fe fe9b 	bl	8004174 <_SendPacket>
  RECORD_END();
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f383 8811 	msr	BASEPRI, r3
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	200142a4 	.word	0x200142a4

08005450 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005458:	f3ef 8311 	mrs	r3, BASEPRI
 800545c:	f04f 0120 	mov.w	r1, #32
 8005460:	f381 8811 	msr	BASEPRI, r1
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	4819      	ldr	r0, [pc, #100]	; (80054cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005468:	f7fe fd96 	bl	8003f98 <_PreparePacket>
 800546c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005472:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e00b      	b.n	800549e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	1c59      	adds	r1, r3, #1
 800548e:	61f9      	str	r1, [r7, #28]
 8005490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b7f      	cmp	r3, #127	; 0x7f
 80054a2:	d8f0      	bhi.n	8005486 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	61fa      	str	r2, [r7, #28]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80054b4:	2208      	movs	r2, #8
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	6938      	ldr	r0, [r7, #16]
 80054ba:	f7fe fe5b 	bl	8004174 <_SendPacket>
  RECORD_END();
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f383 8811 	msr	BASEPRI, r3
}
 80054c4:	bf00      	nop
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200142a4 	.word	0x200142a4
 80054d0:	20014274 	.word	0x20014274

080054d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054dc:	f3ef 8311 	mrs	r3, BASEPRI
 80054e0:	f04f 0120 	mov.w	r1, #32
 80054e4:	f381 8811 	msr	BASEPRI, r1
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	4819      	ldr	r0, [pc, #100]	; (8005550 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80054ec:	f7fe fd54 	bl	8003f98 <_PreparePacket>
 80054f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054f6:	4b17      	ldr	r3, [pc, #92]	; (8005554 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e00b      	b.n	8005522 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	61f9      	str	r1, [r7, #28]
 8005514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	09db      	lsrs	r3, r3, #7
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b7f      	cmp	r3, #127	; 0x7f
 8005526:	d8f0      	bhi.n	800550a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	61fa      	str	r2, [r7, #28]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005538:	2204      	movs	r2, #4
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	6938      	ldr	r0, [r7, #16]
 800553e:	f7fe fe19 	bl	8004174 <_SendPacket>
  RECORD_END();
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f383 8811 	msr	BASEPRI, r3
}
 8005548:	bf00      	nop
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	200142a4 	.word	0x200142a4
 8005554:	20014274 	.word	0x20014274

08005558 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005560:	f3ef 8311 	mrs	r3, BASEPRI
 8005564:	f04f 0120 	mov.w	r1, #32
 8005568:	f381 8811 	msr	BASEPRI, r1
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	4819      	ldr	r0, [pc, #100]	; (80055d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005570:	f7fe fd12 	bl	8003f98 <_PreparePacket>
 8005574:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800557a:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	e00b      	b.n	80055a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	61f9      	str	r1, [r7, #28]
 8005598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	09db      	lsrs	r3, r3, #7
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b7f      	cmp	r3, #127	; 0x7f
 80055aa:	d8f0      	bhi.n	800558e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	61fa      	str	r2, [r7, #28]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80055bc:	2206      	movs	r2, #6
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	6938      	ldr	r0, [r7, #16]
 80055c2:	f7fe fdd7 	bl	8004174 <_SendPacket>
  RECORD_END();
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f383 8811 	msr	BASEPRI, r3
}
 80055cc:	bf00      	nop
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200142a4 	.word	0x200142a4
 80055d8:	20014274 	.word	0x20014274

080055dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	1ad3      	subs	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20014274 	.word	0x20014274

080055fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	; 0x30
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005606:	4b3b      	ldr	r3, [pc, #236]	; (80056f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d06d      	beq.n	80056ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800560e:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005614:	2300      	movs	r3, #0
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28
 8005618:	e008      	b.n	800562c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	3301      	adds	r3, #1
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005630:	429a      	cmp	r2, r3
 8005632:	d3f2      	bcc.n	800561a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005634:	e000      	b.n	8005638 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005636:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d055      	beq.n	80056ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800563e:	f3ef 8311 	mrs	r3, BASEPRI
 8005642:	f04f 0120 	mov.w	r1, #32
 8005646:	f381 8811 	msr	BASEPRI, r1
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	482a      	ldr	r0, [pc, #168]	; (80056f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800564e:	f7fe fca3 	bl	8003f98 <_PreparePacket>
 8005652:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	623b      	str	r3, [r7, #32]
 8005660:	e00b      	b.n	800567a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	1c59      	adds	r1, r3, #1
 800566a:	6279      	str	r1, [r7, #36]	; 0x24
 800566c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	09db      	lsrs	r3, r3, #7
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2b7f      	cmp	r3, #127	; 0x7f
 800567e:	d8f0      	bhi.n	8005662 <SEGGER_SYSVIEW_SendModule+0x66>
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	627a      	str	r2, [r7, #36]	; 0x24
 8005686:	6a3a      	ldr	r2, [r7, #32]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e00b      	b.n	80056b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	1c59      	adds	r1, r3, #1
 80056a4:	61f9      	str	r1, [r7, #28]
 80056a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	09db      	lsrs	r3, r3, #7
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b7f      	cmp	r3, #127	; 0x7f
 80056b8:	d8f0      	bhi.n	800569c <SEGGER_SYSVIEW_SendModule+0xa0>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	61fa      	str	r2, [r7, #28]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7fe fc10 	bl	8003ef8 <_EncodeStr>
 80056d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80056da:	2216      	movs	r2, #22
 80056dc:	68f9      	ldr	r1, [r7, #12]
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f7fe fd48 	bl	8004174 <_SendPacket>
      RECORD_END();
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80056ea:	bf00      	nop
 80056ec:	3730      	adds	r7, #48	; 0x30
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2001429c 	.word	0x2001429c
 80056f8:	200142a4 	.word	0x200142a4

080056fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00f      	beq.n	800572a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f2      	bne.n	8005710 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	2001429c 	.word	0x2001429c

08005738 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800573e:	f3ef 8311 	mrs	r3, BASEPRI
 8005742:	f04f 0120 	mov.w	r1, #32
 8005746:	f381 8811 	msr	BASEPRI, r1
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	4817      	ldr	r0, [pc, #92]	; (80057ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800574e:	f7fe fc23 	bl	8003f98 <_PreparePacket>
 8005752:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e00b      	b.n	800577c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	1c59      	adds	r1, r3, #1
 800576c:	6179      	str	r1, [r7, #20]
 800576e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	09db      	lsrs	r3, r3, #7
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b7f      	cmp	r3, #127	; 0x7f
 8005780:	d8f0      	bhi.n	8005764 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	617a      	str	r2, [r7, #20]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005792:	221b      	movs	r2, #27
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	68b8      	ldr	r0, [r7, #8]
 8005798:	f7fe fcec 	bl	8004174 <_SendPacket>
  RECORD_END();
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f383 8811 	msr	BASEPRI, r3
}
 80057a2:	bf00      	nop
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	200142a4 	.word	0x200142a4
 80057b0:	200142a0 	.word	0x200142a0

080057b4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80057b4:	b40f      	push	{r0, r1, r2, r3}
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	461a      	mov	r2, r3
 80057c6:	2100      	movs	r1, #0
 80057c8:	6938      	ldr	r0, [r7, #16]
 80057ca:	f7fe ffe3 	bl	8004794 <_VPrintTarget>
  va_end(ParamList);
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057d8:	b004      	add	sp, #16
 80057da:	4770      	bx	lr

080057dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057e4:	f3ef 8311 	mrs	r3, BASEPRI
 80057e8:	f04f 0120 	mov.w	r1, #32
 80057ec:	f381 8811 	msr	BASEPRI, r1
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	4827      	ldr	r0, [pc, #156]	; (8005890 <SEGGER_SYSVIEW_Warn+0xb4>)
 80057f4:	f7fe fbd0 	bl	8003f98 <_PreparePacket>
 80057f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057fa:	2280      	movs	r2, #128	; 0x80
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	6938      	ldr	r0, [r7, #16]
 8005800:	f7fe fb7a 	bl	8003ef8 <_EncodeStr>
 8005804:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
 800580a:	2301      	movs	r3, #1
 800580c:	623b      	str	r3, [r7, #32]
 800580e:	e00b      	b.n	8005828 <SEGGER_SYSVIEW_Warn+0x4c>
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	1c59      	adds	r1, r3, #1
 8005818:	6279      	str	r1, [r7, #36]	; 0x24
 800581a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	09db      	lsrs	r3, r3, #7
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	2b7f      	cmp	r3, #127	; 0x7f
 800582c:	d8f0      	bhi.n	8005810 <SEGGER_SYSVIEW_Warn+0x34>
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	627a      	str	r2, [r7, #36]	; 0x24
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e00b      	b.n	8005860 <SEGGER_SYSVIEW_Warn+0x84>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	b2da      	uxtb	r2, r3
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	1c59      	adds	r1, r3, #1
 8005850:	61f9      	str	r1, [r7, #28]
 8005852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	09db      	lsrs	r3, r3, #7
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b7f      	cmp	r3, #127	; 0x7f
 8005864:	d8f0      	bhi.n	8005848 <SEGGER_SYSVIEW_Warn+0x6c>
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	61fa      	str	r2, [r7, #28]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005876:	221a      	movs	r2, #26
 8005878:	68f9      	ldr	r1, [r7, #12]
 800587a:	6938      	ldr	r0, [r7, #16]
 800587c:	f7fe fc7a 	bl	8004174 <_SendPacket>
  RECORD_END();
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f383 8811 	msr	BASEPRI, r3
}
 8005886:	bf00      	nop
 8005888:	3728      	adds	r7, #40	; 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200142a4 	.word	0x200142a4

08005894 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005898:	4803      	ldr	r0, [pc, #12]	; (80058a8 <_cbSendSystemDesc+0x14>)
 800589a:	f7ff fced 	bl	8005278 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800589e:	4803      	ldr	r0, [pc, #12]	; (80058ac <_cbSendSystemDesc+0x18>)
 80058a0:	f7ff fcea 	bl	8005278 <SEGGER_SYSVIEW_SendSysDesc>
}
 80058a4:	bf00      	nop
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	08005cec 	.word	0x08005cec
 80058ac:	08005d30 	.word	0x08005d30

080058b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80058ba:	6819      	ldr	r1, [r3, #0]
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80058be:	4a06      	ldr	r2, [pc, #24]	; (80058d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80058c0:	f7ff f960 	bl	8004b84 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80058c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80058c8:	f7ff f9a0 	bl	8004c0c <SEGGER_SYSVIEW_SetRAMBase>
}
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000000 	.word	0x20000000
 80058d4:	08005895 	.word	0x08005895
 80058d8:	08005de0 	.word	0x08005de0

080058dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80058e2:	2300      	movs	r3, #0
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	e033      	b.n	8005950 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80058e8:	491e      	ldr	r1, [pc, #120]	; (8005964 <_cbSendTaskList+0x88>)
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	491a      	ldr	r1, [pc, #104]	; (8005964 <_cbSendTaskList+0x88>)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	3304      	adds	r3, #4
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	4c16      	ldr	r4, [pc, #88]	; (8005964 <_cbSendTaskList+0x88>)
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4423      	add	r3, r4
 8005918:	3308      	adds	r3, #8
 800591a:	681c      	ldr	r4, [r3, #0]
 800591c:	4d11      	ldr	r5, [pc, #68]	; (8005964 <_cbSendTaskList+0x88>)
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	442b      	add	r3, r5
 800592a:	330c      	adds	r3, #12
 800592c:	681d      	ldr	r5, [r3, #0]
 800592e:	4e0d      	ldr	r6, [pc, #52]	; (8005964 <_cbSendTaskList+0x88>)
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4433      	add	r3, r6
 800593c:	3310      	adds	r3, #16
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	462b      	mov	r3, r5
 8005944:	4622      	mov	r2, r4
 8005946:	f000 f92d 	bl	8005ba4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3301      	adds	r3, #1
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <_cbSendTaskList+0x8c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d3c6      	bcc.n	80058e8 <_cbSendTaskList+0xc>
  }
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005964:	20014388 	.word	0x20014388
 8005968:	20014428 	.word	0x20014428

0800596c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800596c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005974:	f7fd f96a 	bl	8002c4c <xTaskGetTickCountFromISR>
 8005978:	4603      	mov	r3, r0
 800597a:	2200      	movs	r2, #0
 800597c:	469a      	mov	sl, r3
 800597e:	4693      	mov	fp, r2
 8005980:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005984:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	f04f 0a00 	mov.w	sl, #0
 8005990:	f04f 0b00 	mov.w	fp, #0
 8005994:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005998:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800599c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80059a0:	4652      	mov	r2, sl
 80059a2:	465b      	mov	r3, fp
 80059a4:	1a14      	subs	r4, r2, r0
 80059a6:	eb63 0501 	sbc.w	r5, r3, r1
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	00ab      	lsls	r3, r5, #2
 80059b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80059b8:	00a2      	lsls	r2, r4, #2
 80059ba:	4614      	mov	r4, r2
 80059bc:	461d      	mov	r5, r3
 80059be:	eb14 0800 	adds.w	r8, r4, r0
 80059c2:	eb45 0901 	adc.w	r9, r5, r1
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059da:	4690      	mov	r8, r2
 80059dc:	4699      	mov	r9, r3
 80059de:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80059e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080059f4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005a02:	2205      	movs	r2, #5
 8005a04:	492b      	ldr	r1, [pc, #172]	; (8005ab4 <SYSVIEW_AddTask+0xc0>)
 8005a06:	68b8      	ldr	r0, [r7, #8]
 8005a08:	f000 f912 	bl	8005c30 <memcmp>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d04b      	beq.n	8005aaa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b07      	cmp	r3, #7
 8005a18:	d903      	bls.n	8005a22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005a1a:	4828      	ldr	r0, [pc, #160]	; (8005abc <SYSVIEW_AddTask+0xc8>)
 8005a1c:	f7ff fede 	bl	80057dc <SEGGER_SYSVIEW_Warn>
    return;
 8005a20:	e044      	b.n	8005aac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005a22:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4926      	ldr	r1, [pc, #152]	; (8005ac0 <SYSVIEW_AddTask+0xcc>)
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005a36:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4921      	ldr	r1, [pc, #132]	; (8005ac0 <SYSVIEW_AddTask+0xcc>)
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	3304      	adds	r3, #4
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	491b      	ldr	r1, [pc, #108]	; (8005ac0 <SYSVIEW_AddTask+0xcc>)
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4916      	ldr	r1, [pc, #88]	; (8005ac0 <SYSVIEW_AddTask+0xcc>)
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	330c      	adds	r3, #12
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4910      	ldr	r1, [pc, #64]	; (8005ac0 <SYSVIEW_AddTask+0xcc>)
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	3310      	adds	r3, #16
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <SYSVIEW_AddTask+0xc4>)
 8005a96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f87e 	bl	8005ba4 <SYSVIEW_SendTaskInfo>
 8005aa8:	e000      	b.n	8005aac <SYSVIEW_AddTask+0xb8>
    return;
 8005aaa:	bf00      	nop

}
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	08005d40 	.word	0x08005d40
 8005ab8:	20014428 	.word	0x20014428
 8005abc:	08005d48 	.word	0x08005d48
 8005ac0:	20014388 	.word	0x20014388

08005ac4 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005ad2:	2205      	movs	r2, #5
 8005ad4:	4930      	ldr	r1, [pc, #192]	; (8005b98 <SYSVIEW_UpdateTask+0xd4>)
 8005ad6:	68b8      	ldr	r0, [r7, #8]
 8005ad8:	f000 f8aa 	bl	8005c30 <memcmp>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d056      	beq.n	8005b90 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e00d      	b.n	8005b04 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8005ae8:	492c      	ldr	r1, [pc, #176]	; (8005b9c <SYSVIEW_UpdateTask+0xd8>)
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d008      	beq.n	8005b10 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	3301      	adds	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <SYSVIEW_UpdateTask+0xdc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3ec      	bcc.n	8005ae8 <SYSVIEW_UpdateTask+0x24>
 8005b0e:	e000      	b.n	8005b12 <SYSVIEW_UpdateTask+0x4e>
      break;
 8005b10:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8005b12:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <SYSVIEW_UpdateTask+0xdc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d230      	bcs.n	8005b7e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8005b1c:	491f      	ldr	r1, [pc, #124]	; (8005b9c <SYSVIEW_UpdateTask+0xd8>)
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8005b30:	491a      	ldr	r1, [pc, #104]	; (8005b9c <SYSVIEW_UpdateTask+0xd8>)
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3308      	adds	r3, #8
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8005b44:	4915      	ldr	r1, [pc, #84]	; (8005b9c <SYSVIEW_UpdateTask+0xd8>)
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	330c      	adds	r3, #12
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8005b58:	4910      	ldr	r1, [pc, #64]	; (8005b9c <SYSVIEW_UpdateTask+0xd8>)
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	3310      	adds	r3, #16
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f814 	bl	8005ba4 <SYSVIEW_SendTaskInfo>
 8005b7c:	e009      	b.n	8005b92 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff ff33 	bl	80059f4 <SYSVIEW_AddTask>
 8005b8e:	e000      	b.n	8005b92 <SYSVIEW_UpdateTask+0xce>
    return;
 8005b90:	bf00      	nop
  }
}
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	08005d40 	.word	0x08005d40
 8005b9c:	20014388 	.word	0x20014388
 8005ba0:	20014428 	.word	0x20014428

08005ba4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005bb2:	f107 0314 	add.w	r3, r7, #20
 8005bb6:	2214      	movs	r2, #20
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f856 	bl	8005c6c <memset>
  TaskInfo.TaskID     = TaskID;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fa55 	bl	8005088 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005bde:	bf00      	nop
 8005be0:	3728      	adds	r7, #40	; 0x28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <__libc_init_array>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4d0d      	ldr	r5, [pc, #52]	; (8005c20 <__libc_init_array+0x38>)
 8005bec:	4c0d      	ldr	r4, [pc, #52]	; (8005c24 <__libc_init_array+0x3c>)
 8005bee:	1b64      	subs	r4, r4, r5
 8005bf0:	10a4      	asrs	r4, r4, #2
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	d109      	bne.n	8005c0c <__libc_init_array+0x24>
 8005bf8:	4d0b      	ldr	r5, [pc, #44]	; (8005c28 <__libc_init_array+0x40>)
 8005bfa:	4c0c      	ldr	r4, [pc, #48]	; (8005c2c <__libc_init_array+0x44>)
 8005bfc:	f000 f83e 	bl	8005c7c <_init>
 8005c00:	1b64      	subs	r4, r4, r5
 8005c02:	10a4      	asrs	r4, r4, #2
 8005c04:	2600      	movs	r6, #0
 8005c06:	42a6      	cmp	r6, r4
 8005c08:	d105      	bne.n	8005c16 <__libc_init_array+0x2e>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c10:	4798      	blx	r3
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7ee      	b.n	8005bf4 <__libc_init_array+0xc>
 8005c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1a:	4798      	blx	r3
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	e7f2      	b.n	8005c06 <__libc_init_array+0x1e>
 8005c20:	08005df0 	.word	0x08005df0
 8005c24:	08005df0 	.word	0x08005df0
 8005c28:	08005df0 	.word	0x08005df0
 8005c2c:	08005df4 	.word	0x08005df4

08005c30 <memcmp>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	3901      	subs	r1, #1
 8005c34:	4402      	add	r2, r0
 8005c36:	4290      	cmp	r0, r2
 8005c38:	d101      	bne.n	8005c3e <memcmp+0xe>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e005      	b.n	8005c4a <memcmp+0x1a>
 8005c3e:	7803      	ldrb	r3, [r0, #0]
 8005c40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d001      	beq.n	8005c4c <memcmp+0x1c>
 8005c48:	1b18      	subs	r0, r3, r4
 8005c4a:	bd10      	pop	{r4, pc}
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	e7f2      	b.n	8005c36 <memcmp+0x6>

08005c50 <memcpy>:
 8005c50:	440a      	add	r2, r1
 8005c52:	4291      	cmp	r1, r2
 8005c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c58:	d100      	bne.n	8005c5c <memcpy+0xc>
 8005c5a:	4770      	bx	lr
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c66:	4291      	cmp	r1, r2
 8005c68:	d1f9      	bne.n	8005c5e <memcpy+0xe>
 8005c6a:	bd10      	pop	{r4, pc}

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr
