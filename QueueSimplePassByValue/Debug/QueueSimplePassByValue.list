
QueueSimplePassByValue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006718  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f8  080069f8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a00  08006a00  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          0001448c  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b8  200144b8  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001489e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f10  00000000  00000000  000348fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  00037810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  00038b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d39  00000000  00000000  00039cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001555c  00000000  00000000  0005fa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a6b  00000000  00000000  00074f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b9f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ff4  00000000  00000000  0015ba48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080068b0 	.word	0x080068b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000030 	.word	0x20000030
 80001ec:	080068b0 	.word	0x080068b0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e40 	.word	0x20012e40

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <GreenOn>:
#include "STM32_Disc1_Gpio.h"
#include "main.h"



void GreenOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);}
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <GreenOn+0x14>)
 8000594:	f000 ffe0 	bl	8001558 <HAL_GPIO_WritePin>
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021800 	.word	0x40021800

080005a0 <GreenOff>:
void GreenOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);}
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <GreenOff+0x14>)
 80005ac:	f000 ffd4 	bl	8001558 <HAL_GPIO_WritePin>
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021800 	.word	0x40021800

080005b8 <BlueOn>:
LED GreenLed = { GreenOn, GreenOff };   // initialize the GreenLed struct




void BlueOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);}
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <BlueOn+0x14>)
 80005c4:	f000 ffc8 	bl	8001558 <HAL_GPIO_WritePin>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021800 	.word	0x40021800

080005d0 <BlueOff>:
void BlueOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <BlueOff+0x14>)
 80005dc:	f000 ffbc 	bl	8001558 <HAL_GPIO_WritePin>
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021800 	.word	0x40021800

080005e8 <RedOn>:
LED BlueLed = { BlueOn, BlueOff }; // initialize the BlueLed struct




void RedOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);}
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4802      	ldr	r0, [pc, #8]	; (80005fc <RedOn+0x14>)
 80005f4:	f000 ffb0 	bl	8001558 <HAL_GPIO_WritePin>
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021800 	.word	0x40021800

08000600 <RedOff>:
void RedOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);}
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	4802      	ldr	r0, [pc, #8]	; (8000614 <RedOff+0x14>)
 800060c:	f000 ffa4 	bl	8001558 <HAL_GPIO_WritePin>
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021800 	.word	0x40021800

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fccb 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f85b 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f8c5 	bl	80007b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 800062a:	f005 ffcb 	bl	80065c4 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 800062e:	2003      	movs	r0, #3
 8000630:	f000 fdb1 	bl	8001196 <HAL_NVIC_SetPriorityGrouping>


  //setup tasks, making sure they have been properly created before moving on
  configASSERT(xTaskCreate(recvTask, "recvTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	4921      	ldr	r1, [pc, #132]	; (80006c8 <main+0xb0>)
 8000642:	4822      	ldr	r0, [pc, #136]	; (80006cc <main+0xb4>)
 8000644:	f002 fd14 	bl	8003070 <xTaskCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d00a      	beq.n	8000664 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000652:	f383 8811 	msr	BASEPRI, r3
 8000656:	f3bf 8f6f 	isb	sy
 800065a:	f3bf 8f4f 	dsb	sy
 800065e:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000660:	bf00      	nop
 8000662:	e7fe      	b.n	8000662 <main+0x4a>
  configASSERT(xTaskCreate(sendingTask, "sendingTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
 8000664:	2300      	movs	r3, #0
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2301      	movs	r3, #1
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	4917      	ldr	r1, [pc, #92]	; (80006d0 <main+0xb8>)
 8000672:	4818      	ldr	r0, [pc, #96]	; (80006d4 <main+0xbc>)
 8000674:	f002 fcfc 	bl	8003070 <xTaskCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0x7c>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60bb      	str	r3, [r7, #8]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0x7a>


  //create a queue that can store 2 uint8_t's
  //using ledCmdQueue to point to it
  ledCmdQueue = xQueueCreate(2, sizeof(uint8_t));
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	2002      	movs	r0, #2
 800069a:	f001 fff7 	bl	800268c <xQueueGenericCreate>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <main+0xc0>)
 80006a2:	6013      	str	r3, [r2, #0]
  configASSERT(ledCmdQueue != NULL);
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <main+0xc0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10a      	bne.n	80006c2 <main+0xaa>
        __asm volatile
 80006ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	607b      	str	r3, [r7, #4]
    }
 80006be:	bf00      	nop
 80006c0:	e7fe      	b.n	80006c0 <main+0xa8>


  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 80006c2:	f002 fe71 	bl	80033a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0xae>
 80006c8:	080068c8 	.word	0x080068c8
 80006cc:	08000c8d 	.word	0x08000c8d
 80006d0:	080068d4 	.word	0x080068d4
 80006d4:	08000d49 	.word	0x08000d49
 80006d8:	20000048 	.word	0x20000048

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 f8d8 	bl	80068a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a28      	ldr	r2, [pc, #160]	; (80007ac <SystemClock_Config+0xd0>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd4>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000758:	2304      	movs	r3, #4
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 ff11 	bl	800158c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000770:	f000 fb1c 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f972 	bl	8001a7c <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079e:	f000 fb05 	bl	8000dac <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
 80007ce:	4bb2      	ldr	r3, [pc, #712]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4ab1      	ldr	r2, [pc, #708]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	623b      	str	r3, [r7, #32]
 80007e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	4bab      	ldr	r3, [pc, #684]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4aaa      	ldr	r2, [pc, #680]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4ba8      	ldr	r3, [pc, #672]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4ba4      	ldr	r3, [pc, #656]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4aa3      	ldr	r2, [pc, #652]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4ba1      	ldr	r3, [pc, #644]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b9d      	ldr	r3, [pc, #628]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a9c      	ldr	r2, [pc, #624]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b9a      	ldr	r3, [pc, #616]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b96      	ldr	r3, [pc, #600]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a95      	ldr	r2, [pc, #596]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b93      	ldr	r3, [pc, #588]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b8f      	ldr	r3, [pc, #572]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a8e      	ldr	r2, [pc, #568]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b8c      	ldr	r3, [pc, #560]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b88      	ldr	r3, [pc, #544]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a87      	ldr	r2, [pc, #540]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b81      	ldr	r3, [pc, #516]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a80      	ldr	r2, [pc, #512]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2116      	movs	r1, #22
 80008ae:	487b      	ldr	r0, [pc, #492]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 80008b0:	f000 fe52 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	4879      	ldr	r0, [pc, #484]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 80008ba:	f000 fe4d 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008c4:	4877      	ldr	r0, [pc, #476]	; (8000aa4 <MX_GPIO_Init+0x2f0>)
 80008c6:	f000 fe47 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80008d0:	4875      	ldr	r0, [pc, #468]	; (8000aa8 <MX_GPIO_Init+0x2f4>)
 80008d2:	f000 fe41 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e8:	230c      	movs	r3, #12
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	486e      	ldr	r0, [pc, #440]	; (8000aac <MX_GPIO_Init+0x2f8>)
 80008f4:	f000 fc84 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80008f8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800090a:	2305      	movs	r3, #5
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	4865      	ldr	r0, [pc, #404]	; (8000aac <MX_GPIO_Init+0x2f8>)
 8000916:	f000 fc73 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800092c:	230e      	movs	r3, #14
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	485d      	ldr	r0, [pc, #372]	; (8000aac <MX_GPIO_Init+0x2f8>)
 8000938:	f000 fc62 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800093c:	2301      	movs	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094c:	230c      	movs	r3, #12
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4851      	ldr	r0, [pc, #324]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 8000958:	f000 fc52 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800095c:	2316      	movs	r3, #22
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	484a      	ldr	r0, [pc, #296]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 8000974:	f000 fc44 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000978:	f248 0307 	movw	r3, #32775	; 0x8007
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4844      	ldr	r0, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 8000990:	f000 fc36 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000994:	f641 0358 	movw	r3, #6232	; 0x1858
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009a6:	230e      	movs	r3, #14
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 80009b2:	f000 fc25 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4834      	ldr	r0, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 80009ce:	f000 fc17 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 80009e8:	f000 fc0a 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009ec:	2303      	movs	r3, #3
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009fc:	2309      	movs	r3, #9
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x2fc>)
 8000a08:	f000 fbfa 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4824      	ldr	r0, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x2fc>)
 8000a20:	f000 fbee 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a24:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a36:	230c      	movs	r3, #12
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0x2f4>)
 8000a42:	f000 fbdd 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a46:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x300>)
 8000a64:	f000 fbcc 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a7a:	230e      	movs	r3, #14
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <MX_GPIO_Init+0x2fc>)
 8000a86:	f000 fbbb 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a8a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a94:	e010      	b.n	8000ab8 <MX_GPIO_Init+0x304>
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40021400 	.word	0x40021400
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	486b      	ldr	r0, [pc, #428]	; (8000c78 <MX_GPIO_Init+0x4c4>)
 8000acc:	f000 fb98 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4864      	ldr	r0, [pc, #400]	; (8000c78 <MX_GPIO_Init+0x4c4>)
 8000ae6:	f000 fb8b 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000aea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	230c      	movs	r3, #12
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	485d      	ldr	r0, [pc, #372]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000b08:	f000 fb7a 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4856      	ldr	r0, [pc, #344]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000b22:	f000 fb6d 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	484f      	ldr	r0, [pc, #316]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000b40:	f000 fb5e 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b44:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b56:	230e      	movs	r3, #14
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4847      	ldr	r0, [pc, #284]	; (8000c80 <MX_GPIO_Init+0x4cc>)
 8000b62:	f000 fb4d 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b66:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x4d0>)
 8000b84:	f000 fb3c 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4837      	ldr	r0, [pc, #220]	; (8000c84 <MX_GPIO_Init+0x4d0>)
 8000ba6:	f000 fb2b 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4830      	ldr	r0, [pc, #192]	; (8000c88 <MX_GPIO_Init+0x4d4>)
 8000bc8:	f000 fb1a 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bde:	2307      	movs	r3, #7
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4827      	ldr	r0, [pc, #156]	; (8000c88 <MX_GPIO_Init+0x4d4>)
 8000bea:	f000 fb09 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bee:	2348      	movs	r3, #72	; 0x48
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bfe:	230e      	movs	r3, #14
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	481c      	ldr	r0, [pc, #112]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000c0a:	f000 faf9 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c20:	2309      	movs	r3, #9
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <MX_GPIO_Init+0x4cc>)
 8000c2c:	f000 fae8 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000c30:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_GPIO_Init+0x4cc>)
 8000c4a:	f000 fad9 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c4e:	2360      	movs	r3, #96	; 0x60
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_GPIO_Init+0x4c4>)
 8000c6a:	f000 fac9 	bl	8001200 <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3738      	adds	r7, #56	; 0x38
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000

08000c8c <recvTask>:

/**
 * This receive task watches a queue for a new ledCmd to be added to it
 */
void recvTask( void* NotUsed )
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	uint8_t nextCmd = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		if(xQueueReceive(ledCmdQueue, &nextCmd, portMAX_DELAY) == pdTRUE)
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <recvTask+0xac>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f107 010f 	add.w	r1, r7, #15
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 ff5d 	bl	8002b64 <xQueueReceive>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d141      	bne.n	8000d34 <recvTask+0xa8>
		{
			switch(nextCmd)
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2b07      	cmp	r3, #7
 8000cb4:	d8f0      	bhi.n	8000c98 <recvTask+0xc>
 8000cb6:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <recvTask+0x30>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000cdd 	.word	0x08000cdd
 8000cc0:	08000d01 	.word	0x08000d01
 8000cc4:	08000d09 	.word	0x08000d09
 8000cc8:	08000d11 	.word	0x08000d11
 8000ccc:	08000d19 	.word	0x08000d19
 8000cd0:	08000cf1 	.word	0x08000cf1
 8000cd4:	08000cf9 	.word	0x08000cf9
 8000cd8:	08000d21 	.word	0x08000d21
			{
			case ALL_OFF:
				RedLed.Off();
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <recvTask+0xb0>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4798      	blx	r3
				GreenLed.Off();
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <recvTask+0xb4>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4798      	blx	r3
				BlueLed.Off();
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <recvTask+0xb8>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4798      	blx	r3
				break;
 8000cee:	e022      	b.n	8000d36 <recvTask+0xaa>
			case GREEN_ON:
				GreenLed.On();
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <recvTask+0xb4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4798      	blx	r3
				break;
 8000cf6:	e01e      	b.n	8000d36 <recvTask+0xaa>
			case GREEN_OFF:
				GreenLed.Off();
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <recvTask+0xb4>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4798      	blx	r3
				break;
 8000cfe:	e01a      	b.n	8000d36 <recvTask+0xaa>
			case RED_ON:
				RedLed.On();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <recvTask+0xb0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4798      	blx	r3
				break;
 8000d06:	e016      	b.n	8000d36 <recvTask+0xaa>
			case RED_OFF:
				RedLed.Off();
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <recvTask+0xb0>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4798      	blx	r3
				break;
 8000d0e:	e012      	b.n	8000d36 <recvTask+0xaa>
			case BLUE_ON:
				BlueLed.On();
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <recvTask+0xb8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4798      	blx	r3
				break;
 8000d16:	e00e      	b.n	8000d36 <recvTask+0xaa>
			case BLUE_OFF:
				BlueLed.Off();
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <recvTask+0xb8>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4798      	blx	r3
				break;
 8000d1e:	e00a      	b.n	8000d36 <recvTask+0xaa>
			case ALL_ON:
				GreenLed.On();
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <recvTask+0xb4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4798      	blx	r3
				RedLed.On();
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <recvTask+0xb0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4798      	blx	r3
				BlueLed.On();
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <recvTask+0xb8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4798      	blx	r3
				break;
 8000d32:	e000      	b.n	8000d36 <recvTask+0xaa>
			}
		}
 8000d34:	bf00      	nop
		if(xQueueReceive(ledCmdQueue, &nextCmd, portMAX_DELAY) == pdTRUE)
 8000d36:	e7af      	b.n	8000c98 <recvTask+0xc>
 8000d38:	20000048 	.word	0x20000048
 8000d3c:	20000010 	.word	0x20000010
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008

08000d48 <sendingTask>:

/**
 * sendingTask loops through
 */
void sendingTask( void* NotUsed )
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		for(int i = 0; i < 8; i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e011      	b.n	8000d7a <sendingTask+0x32>
		{
			uint8_t ledCmd = (LED_CMDS) i;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	72fb      	strb	r3, [r7, #11]
			xQueueSend(ledCmdQueue, &ledCmd, portMAX_DELAY);
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <sendingTask+0x3c>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	f107 010b 	add.w	r1, r7, #11
 8000d64:	2300      	movs	r3, #0
 8000d66:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6a:	f001 fd17 	bl	800279c <xQueueGenericSend>
			vTaskDelay(200/portTICK_PERIOD_MS);
 8000d6e:	20c8      	movs	r0, #200	; 0xc8
 8000d70:	f002 fae2 	bl	8003338 <vTaskDelay>
		for(int i = 0; i < 8; i++)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b07      	cmp	r3, #7
 8000d7e:	ddea      	ble.n	8000d56 <sendingTask+0xe>
 8000d80:	e7e6      	b.n	8000d50 <sendingTask+0x8>
 8000d82:	bf00      	nop
 8000d84:	20000048 	.word	0x20000048

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 f92f 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40001000 	.word	0x40001000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x4c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x4c>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000df6:	2007      	movs	r0, #7
 8000df8:	f000 f9cd 	bl	8001196 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <HAL_InitTick+0xe4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <HAL_InitTick+0xe4>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_InitTick+0xe4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f828 	bl	8001e94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f001 f80d 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8000e52:	6378      	str	r0, [r7, #52]	; 0x34
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e56:	f001 f809 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_InitTick+0xe8>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <HAL_InitTick+0xf0>)
 8000e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e96:	f001 f82f 	bl	8001ef8 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea8:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <HAL_InitTick+0xec>)
 8000eaa:	f001 f87f 	bl	8001fac <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ebc:	2036      	movs	r0, #54	; 0x36
 8000ebe:	f000 f991 	bl	80011e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d808      	bhi.n	8000eda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2036      	movs	r0, #54	; 0x36
 8000ece:	f000 f96d 	bl	80011ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_InitTick+0xf4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e002      	b.n	8000ee0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3738      	adds	r7, #56	; 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	2000004c 	.word	0x2000004c
 8000ef8:	40001000 	.word	0x40001000
 8000efc:	2000001c 	.word	0x2000001c

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <TIM6_DAC_IRQHandler+0x10>)
 8000f32:	f001 f8ab 	bl	800208c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000004c 	.word	0x2000004c

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd7 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f005 fc43 	bl	800681c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fb3f 	bl	8000618 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000fa8:	08006a08 	.word	0x08006a08
  ldr r2, =_sbss
 8000fac:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000fb0:	200144b8 	.word	0x200144b8

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f8d8 	bl	8001196 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff ff0e 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fee4 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000020 	.word	0x20000020
 8001020:	20000094 	.word	0x20000094

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000094 	.word	0x20000094

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff4c 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011be:	f7ff ff61 	bl	8001084 <__NVIC_GetPriorityGrouping>
 80011c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	6978      	ldr	r0, [r7, #20]
 80011ca:	f7ff ffb1 	bl	8001130 <NVIC_EncodePriority>
 80011ce:	4602      	mov	r2, r0
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff80 	bl	80010dc <__NVIC_SetPriority>
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff54 	bl	80010a0 <__NVIC_EnableIRQ>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e177      	b.n	800150c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8166 	bne.w	8001506 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	2b02      	cmp	r3, #2
 8001250:	d130      	bne.n	80012b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 0201 	and.w	r2, r3, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d017      	beq.n	80012f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80c0 	beq.w	8001506 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_GPIO_Init+0x324>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a65      	ldr	r2, [pc, #404]	; (8001524 <HAL_GPIO_Init+0x324>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_GPIO_Init+0x324>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a61      	ldr	r2, [pc, #388]	; (8001528 <HAL_GPIO_Init+0x328>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_GPIO_Init+0x32c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d037      	beq.n	800143e <HAL_GPIO_Init+0x23e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a57      	ldr	r2, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d031      	beq.n	800143a <HAL_GPIO_Init+0x23a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a56      	ldr	r2, [pc, #344]	; (8001534 <HAL_GPIO_Init+0x334>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02b      	beq.n	8001436 <HAL_GPIO_Init+0x236>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a55      	ldr	r2, [pc, #340]	; (8001538 <HAL_GPIO_Init+0x338>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_Init+0x232>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a54      	ldr	r2, [pc, #336]	; (800153c <HAL_GPIO_Init+0x33c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x22e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a53      	ldr	r2, [pc, #332]	; (8001540 <HAL_GPIO_Init+0x340>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x22a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_GPIO_Init+0x344>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <HAL_GPIO_Init+0x348>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a50      	ldr	r2, [pc, #320]	; (800154c <HAL_GPIO_Init+0x34c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x21a>
 8001416:	2309      	movs	r3, #9
 8001418:	e012      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800141a:	230a      	movs	r3, #10
 800141c:	e010      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800141e:	2308      	movs	r3, #8
 8001420:	e00e      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001422:	2307      	movs	r3, #7
 8001424:	e00c      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001426:	2306      	movs	r3, #6
 8001428:	e00a      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800142a:	2305      	movs	r3, #5
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800142e:	2304      	movs	r3, #4
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x328>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_GPIO_Init+0x354>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a34      	ldr	r2, [pc, #208]	; (8001554 <HAL_GPIO_Init+0x354>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b32      	ldr	r3, [pc, #200]	; (8001554 <HAL_GPIO_Init+0x354>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_GPIO_Init+0x354>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f ae84 	bls.w	800121c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40021c00 	.word	0x40021c00
 800154c:	40022000 	.word	0x40022000
 8001550:	40022400 	.word	0x40022400
 8001554:	40013c00 	.word	0x40013c00

08001558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001574:	e003      	b.n	800157e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	041a      	lsls	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	619a      	str	r2, [r3, #24]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e267      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d075      	beq.n	8001696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d00c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d112      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c2:	4b82      	ldr	r3, [pc, #520]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ce:	d10b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d05b      	beq.n	8001694 <HAL_RCC_OscConfig+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d157      	bne.n	8001694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e242      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x74>
 80015f2:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a75      	ldr	r2, [pc, #468]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e01d      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x98>
 800160a:	4b70      	ldr	r3, [pc, #448]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6f      	ldr	r2, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b6d      	ldr	r3, [pc, #436]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6c      	ldr	r2, [pc, #432]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a68      	ldr	r2, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a65      	ldr	r2, [pc, #404]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fcee 	bl	8001024 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fcea 	bl	8001024 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e207      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0xc0>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fcda 	bl	8001024 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fcd6 	bl	8001024 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1f3      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b51      	ldr	r3, [pc, #324]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0xe8>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d11c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b44      	ldr	r3, [pc, #272]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e1c7      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4937      	ldr	r1, [pc, #220]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e03a      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x244>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fc8f 	bl	8001024 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fc8b 	bl	8001024 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1a8      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4925      	ldr	r1, [pc, #148]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_OscConfig+0x244>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fc6e 	bl	8001024 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fc6a 	bl	8001024 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e187      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d036      	beq.n	80017e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_RCC_OscConfig+0x248>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fc4e 	bl	8001024 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fc4a 	bl	8001024 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e167      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x200>
 80017aa:	e01b      	b.n	80017e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_RCC_OscConfig+0x248>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fc37 	bl	8001024 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	e00e      	b.n	80017d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fc33 	bl	8001024 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d907      	bls.n	80017d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e150      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
 80017cc:	40023800 	.word	0x40023800
 80017d0:	42470000 	.word	0x42470000
 80017d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ea      	bne.n	80017ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8097 	beq.w	8001920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b7d      	ldr	r3, [pc, #500]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a7c      	ldr	r2, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b77      	ldr	r3, [pc, #476]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b74      	ldr	r3, [pc, #464]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a73      	ldr	r2, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff fbf3 	bl	8001024 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001842:	f7ff fbef 	bl	8001024 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e10c      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x2ea>
 8001868:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a63      	ldr	r2, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	e01c      	b.n	80018b0 <HAL_RCC_OscConfig+0x324>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x30c>
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a5e      	ldr	r2, [pc, #376]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0x324>
 8001898:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a57      	ldr	r2, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80018aa:	f023 0304 	bic.w	r3, r3, #4
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d015      	beq.n	80018e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fbb4 	bl	8001024 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff fbb0 	bl	8001024 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e0cb      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0ee      	beq.n	80018c0 <HAL_RCC_OscConfig+0x334>
 80018e2:	e014      	b.n	800190e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb9e 	bl	8001024 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fb9a 	bl	8001024 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0b5      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ee      	bne.n	80018ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a38      	ldr	r2, [pc, #224]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800191a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a1 	beq.w	8001a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b08      	cmp	r3, #8
 8001934:	d05c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d141      	bne.n	80019c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_RCC_OscConfig+0x478>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fb6e 	bl	8001024 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fb6a 	bl	8001024 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e087      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x478>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fb43 	bl	8001024 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fb3f 	bl	8001024 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e05c      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x416>
 80019c0:	e054      	b.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x478>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb2c 	bl	8001024 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff fb28 	bl	8001024 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e045      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x444>
 80019ee:	e03d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e038      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x4ec>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d028      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d121      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d11a      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a38:	4013      	ands	r3, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d111      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	3b01      	subs	r3, #1
 8001a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0cc      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d90c      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0b8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad0:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	494d      	ldr	r1, [pc, #308]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d044      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d119      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e07f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e067      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4934      	ldr	r1, [pc, #208]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff fa5a 	bl	8001024 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff fa56 	bl	8001024 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e04f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d20c      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e032      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4916      	ldr	r1, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c02:	f000 f821 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	490a      	ldr	r1, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	5ccb      	ldrb	r3, [r1, r3]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f8f0 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	080069b8 	.word	0x080069b8
 8001c40:	20000018 	.word	0x20000018
 8001c44:	2000001c 	.word	0x2000001c

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c4c:	b094      	sub	sp, #80	; 0x50
 8001c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
 8001c54:	2300      	movs	r3, #0
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c58:	2300      	movs	r3, #0
 8001c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c60:	4b79      	ldr	r3, [pc, #484]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d00d      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x40>
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	f200 80e1 	bhi.w	8001e34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x34>
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d003      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7a:	e0db      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c80:	e0db      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c82:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c86:	e0d8      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cba:	4622      	mov	r2, r4
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0159      	lsls	r1, r3, #5
 8001cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ccc:	0150      	lsls	r0, r2, #5
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	1a51      	subs	r1, r2, r1
 8001cd6:	6139      	str	r1, [r7, #16]
 8001cd8:	4629      	mov	r1, r5
 8001cda:	eb63 0301 	sbc.w	r3, r3, r1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cec:	4659      	mov	r1, fp
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	4651      	mov	r1, sl
 8001cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cf6:	4651      	mov	r1, sl
 8001cf8:	018a      	lsls	r2, r1, #6
 8001cfa:	4651      	mov	r1, sl
 8001cfc:	ebb2 0801 	subs.w	r8, r2, r1
 8001d00:	4659      	mov	r1, fp
 8001d02:	eb63 0901 	sbc.w	r9, r3, r1
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	eb18 0303 	adds.w	r3, r8, r3
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	462b      	mov	r3, r5
 8001d28:	eb49 0303 	adc.w	r3, r9, r3
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	024b      	lsls	r3, r1, #9
 8001d3e:	4621      	mov	r1, r4
 8001d40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d44:	4621      	mov	r1, r4
 8001d46:	024a      	lsls	r2, r1, #9
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d58:	f7fe fa94 	bl	8000284 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4613      	mov	r3, r2
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d64:	e058      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4611      	mov	r1, r2
 8001d72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d76:	623b      	str	r3, [r7, #32]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d80:	4642      	mov	r2, r8
 8001d82:	464b      	mov	r3, r9
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f04f 0100 	mov.w	r1, #0
 8001d8c:	0159      	lsls	r1, r3, #5
 8001d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d92:	0150      	lsls	r0, r2, #5
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4641      	mov	r1, r8
 8001d9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d9e:	4649      	mov	r1, r9
 8001da0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001db0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001db4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001db8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dbc:	eb63 050b 	sbc.w	r5, r3, fp
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	00eb      	lsls	r3, r5, #3
 8001dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dce:	00e2      	lsls	r2, r4, #3
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	18e3      	adds	r3, r4, r3
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	464b      	mov	r3, r9
 8001ddc:	eb45 0303 	adc.w	r3, r5, r3
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dee:	4629      	mov	r1, r5
 8001df0:	028b      	lsls	r3, r1, #10
 8001df2:	4621      	mov	r1, r4
 8001df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df8:	4621      	mov	r1, r4
 8001dfa:	028a      	lsls	r2, r1, #10
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e02:	2200      	movs	r2, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	61fa      	str	r2, [r7, #28]
 8001e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e0c:	f7fe fa3a 	bl	8000284 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3750      	adds	r7, #80	; 0x50
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	007a1200 	.word	0x007a1200

08001e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000018 	.word	0x20000018

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	080069c8 	.word	0x080069c8

08001e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCC_GetClockConfig+0x60>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e041      	b.n	8001f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f839 	bl	8001f96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 f9d8 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e04e      	b.n	8002062 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a23      	ldr	r2, [pc, #140]	; (8002070 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d022      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d01d      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d018      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_TIM_Base_Start_IT+0xcc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_TIM_Base_Start_IT+0xd0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00e      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_TIM_Base_Start_IT+0xd4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_TIM_Base_Start_IT+0xd8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_TIM_Base_Start_IT+0xdc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d010      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204e:	e007      	b.n	8002060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40010000 	.word	0x40010000
 8002074:	40000400 	.word	0x40000400
 8002078:	40000800 	.word	0x40000800
 800207c:	40000c00 	.word	0x40000c00
 8002080:	40010400 	.word	0x40010400
 8002084:	40014000 	.word	0x40014000
 8002088:	40001800 	.word	0x40001800

0800208c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0202 	mvn.w	r2, #2
 80020b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8ee 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8e0 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8f1 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0204 	mvn.w	r2, #4
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8c4 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8b6 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8c7 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b08      	cmp	r3, #8
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0208 	mvn.w	r2, #8
 8002160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2204      	movs	r2, #4
 8002166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f89a 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f88c 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f89d 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b10      	cmp	r3, #16
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0210 	mvn.w	r2, #16
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2208      	movs	r2, #8
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f870 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f862 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f873 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0201 	mvn.w	r2, #1
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fdbc 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	d10e      	bne.n	800223c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b80      	cmp	r3, #128	; 0x80
 800222a:	d107      	bne.n	800223c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f902 	bl	8002440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f838 	bl	80022d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b20      	cmp	r3, #32
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0220 	mvn.w	r2, #32
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8cc 	bl	800242c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <TIM_Base_SetConfig+0x114>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d00f      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	; (8002404 <TIM_Base_SetConfig+0x118>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00b      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <TIM_Base_SetConfig+0x11c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3b      	ldr	r2, [pc, #236]	; (800240c <TIM_Base_SetConfig+0x120>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <TIM_Base_SetConfig+0x124>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <TIM_Base_SetConfig+0x114>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d027      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2c      	ldr	r2, [pc, #176]	; (8002404 <TIM_Base_SetConfig+0x118>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d023      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <TIM_Base_SetConfig+0x11c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2a      	ldr	r2, [pc, #168]	; (800240c <TIM_Base_SetConfig+0x120>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <TIM_Base_SetConfig+0x124>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d017      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a28      	ldr	r2, [pc, #160]	; (8002414 <TIM_Base_SetConfig+0x128>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <TIM_Base_SetConfig+0x12c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00f      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <TIM_Base_SetConfig+0x130>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <TIM_Base_SetConfig+0x134>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a24      	ldr	r2, [pc, #144]	; (8002424 <TIM_Base_SetConfig+0x138>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a23      	ldr	r2, [pc, #140]	; (8002428 <TIM_Base_SetConfig+0x13c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d108      	bne.n	80023b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <TIM_Base_SetConfig+0x114>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <TIM_Base_SetConfig+0xf8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <TIM_Base_SetConfig+0x124>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	615a      	str	r2, [r3, #20]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40010000 	.word	0x40010000
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40000c00 	.word	0x40000c00
 8002410:	40010400 	.word	0x40010400
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800
 8002420:	40001800 	.word	0x40001800
 8002424:	40001c00 	.word	0x40001c00
 8002428:	40002000 	.word	0x40002000

0800242c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f103 0208 	add.w	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f103 0208 	add.w	r2, r3, #8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f103 0208 	add.w	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d103      	bne.n	8002516 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e00c      	b.n	8002530 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3308      	adds	r3, #8
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e002      	b.n	8002524 <vListInsert+0x2e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d2f6      	bcs.n	800251e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6852      	ldr	r2, [r2, #4]
 8002588:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d103      	bne.n	800259c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueGenericReset+0x2a>
        __asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	60bb      	str	r3, [r7, #8]
    }
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80025e6:	f002 f87f 	bl	80046e8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	68f9      	ldr	r1, [r7, #12]
 80025f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	441a      	add	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	3b01      	subs	r3, #1
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	441a      	add	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22ff      	movs	r2, #255	; 0xff
 800262a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d114      	bne.n	8002666 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01a      	beq.n	800267a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3310      	adds	r3, #16
 8002648:	4618      	mov	r0, r3
 800264a:	f001 f957 	bl	80038fc <xTaskRemoveFromEventList>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <xQueueGenericReset+0xcc>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	e009      	b.n	800267a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3310      	adds	r3, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fef2 	bl	8002454 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff feed 	bl	8002454 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800267a:	f002 f865 	bl	8004748 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	61bb      	str	r3, [r7, #24]
    }
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <xQueueGenericCreate+0x48>
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d101      	bne.n	80026d8 <xQueueGenericCreate+0x4c>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <xQueueGenericCreate+0x4e>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <xQueueGenericCreate+0x68>
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	617b      	str	r3, [r7, #20]
    }
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026fa:	d90a      	bls.n	8002712 <xQueueGenericCreate+0x86>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	613b      	str	r3, [r7, #16]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3350      	adds	r3, #80	; 0x50
 8002716:	4618      	mov	r0, r3
 8002718:	f002 f910 	bl	800493c <pvPortMalloc>
 800271c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3350      	adds	r3, #80	; 0x50
 800272c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800272e:	79fa      	ldrb	r2, [r7, #7]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f805 	bl	800274a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002740:	6a3b      	ldr	r3, [r7, #32]
    }
 8002742:	4618      	mov	r0, r3
 8002744:	3728      	adds	r7, #40	; 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e002      	b.n	800276c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002778:	2101      	movs	r1, #1
 800277a:	69b8      	ldr	r0, [r7, #24]
 800277c:	f7ff ff1e 	bl	80025bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	2073      	movs	r0, #115	; 0x73
 8002790:	f003 f836 	bl	8005800 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b090      	sub	sp, #64	; 0x40
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueGenericSend+0x32>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <xQueueGenericSend+0x40>
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <xQueueGenericSend+0x44>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <xQueueGenericSend+0x46>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <xQueueGenericSend+0x60>
        __asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d103      	bne.n	800280a <xQueueGenericSend+0x6e>
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <xQueueGenericSend+0x72>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericSend+0x74>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueGenericSend+0x8e>
        __asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	623b      	str	r3, [r7, #32]
    }
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800282a:	f001 fa07 	bl	8003c3c <xTaskGetSchedulerState>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <xQueueGenericSend+0x9e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xQueueGenericSend+0xa2>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueGenericSend+0xa4>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueGenericSend+0xbe>
        __asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	61fb      	str	r3, [r7, #28]
    }
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800285a:	f001 ff45 	bl	80046e8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <xQueueGenericSend+0xd4>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d136      	bne.n	80028de <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fd50 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	4601      	mov	r1, r0
 8002884:	205a      	movs	r0, #90	; 0x5a
 8002886:	f003 f831 	bl	80058ec <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002890:	f000 fa78 	bl	8002d84 <prvCopyDataToQueue>
 8002894:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 f82a 	bl	80038fc <xTaskRemoveFromEventList>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028ae:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <xQueueGenericSend+0x248>)
 80028b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	e00a      	b.n	80028d6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <xQueueGenericSend+0x248>)
 80028c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80028d6:	f001 ff37 	bl	8004748 <vPortExitCritical>
                return pdPASS;
 80028da:	2301      	movs	r3, #1
 80028dc:	e07d      	b.n	80029da <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d110      	bne.n	8002906 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028e4:	f001 ff30 	bl	8004748 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fd14 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	460b      	mov	r3, r1
 80028fa:	4601      	mov	r1, r0
 80028fc:	205a      	movs	r0, #90	; 0x5a
 80028fe:	f002 fff5 	bl	80058ec <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002902:	2300      	movs	r3, #0
 8002904:	e069      	b.n	80029da <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4618      	mov	r0, r3
 8002912:	f001 f859 	bl	80039c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002916:	2301      	movs	r3, #1
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800291a:	f001 ff15 	bl	8004748 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800291e:	f000 fda5 	bl	800346c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002922:	f001 fee1 	bl	80046e8 <vPortEnterCritical>
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800292c:	b25b      	sxtb	r3, r3
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d103      	bne.n	800293c <xQueueGenericSend+0x1a0>
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002942:	b25b      	sxtb	r3, r3
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d103      	bne.n	8002952 <xQueueGenericSend+0x1b6>
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002952:	f001 fef9 	bl	8004748 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002956:	1d3a      	adds	r2, r7, #4
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f001 f848 	bl	80039f4 <xTaskCheckForTimeOut>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d124      	bne.n	80029b4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800296a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296c:	f000 fb02 	bl	8002f74 <prvIsQueueFull>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d018      	beq.n	80029a8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	3310      	adds	r3, #16
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f000 ff6a 	bl	8003858 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002986:	f000 fa8d 	bl	8002ea4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800298a:	f000 fd7d 	bl	8003488 <xTaskResumeAll>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f af62 	bne.w	800285a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <xQueueGenericSend+0x248>)
 8002998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	e758      	b.n	800285a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029aa:	f000 fa7b 	bl	8002ea4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029ae:	f000 fd6b 	bl	8003488 <xTaskResumeAll>
 80029b2:	e752      	b.n	800285a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 fa75 	bl	8002ea4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029ba:	f000 fd65 	bl	8003488 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fca9 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	460b      	mov	r3, r1
 80029d0:	4601      	mov	r1, r0
 80029d2:	205a      	movs	r0, #90	; 0x5a
 80029d4:	f002 ff8a 	bl	80058ec <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80029d8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3738      	adds	r7, #56	; 0x38
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b090      	sub	sp, #64	; 0x40
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <xQueueGenericSendFromISR+0x3c>
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <xQueueGenericSendFromISR+0x40>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <xQueueGenericSendFromISR+0x42>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d103      	bne.n	8002a52 <xQueueGenericSendFromISR+0x6a>
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <xQueueGenericSendFromISR+0x6e>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericSendFromISR+0x70>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	623b      	str	r3, [r7, #32]
    }
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a72:	f001 ff23 	bl	80048bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a76:	f3ef 8211 	mrs	r2, BASEPRI
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	61fa      	str	r2, [r7, #28]
 8002a8c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <xQueueGenericSendFromISR+0xbc>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d148      	bne.n	8002b36 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fc2e 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002abc:	4601      	mov	r1, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2060      	movs	r0, #96	; 0x60
 8002ac4:	f002 fe42 	bl	800574c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ace:	f000 f959 	bl	8002d84 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002ad2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d112      	bne.n	8002b02 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d025      	beq.n	8002b30 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	3324      	adds	r3, #36	; 0x24
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 ff07 	bl	80038fc <xTaskRemoveFromEventList>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01d      	beq.n	8002b30 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01a      	beq.n	8002b30 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e016      	b.n	8002b30 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b06:	2b7f      	cmp	r3, #127	; 0x7f
 8002b08:	d10a      	bne.n	8002b20 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	617b      	str	r3, [r7, #20]
    }
 8002b1c:	bf00      	nop
 8002b1e:	e7fe      	b.n	8002b1e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	b25a      	sxtb	r2, r3
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b30:	2301      	movs	r3, #1
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b34:	e00b      	b.n	8002b4e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 fbed 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002b3e:	4601      	mov	r1, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	2060      	movs	r0, #96	; 0x60
 8002b46:	f002 fe01 	bl	800574c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b50:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b58:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3740      	adds	r7, #64	; 0x40
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b08f      	sub	sp, #60	; 0x3c
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <xQueueReceive+0x30>
        __asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	623b      	str	r3, [r7, #32]
    }
 8002b90:	bf00      	nop
 8002b92:	e7fe      	b.n	8002b92 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <xQueueReceive+0x3e>
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueReceive+0x42>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueReceive+0x44>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <xQueueReceive+0x5e>
        __asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61fb      	str	r3, [r7, #28]
    }
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc2:	f001 f83b 	bl	8003c3c <xTaskGetSchedulerState>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <xQueueReceive+0x6e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <xQueueReceive+0x72>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueReceive+0x74>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueReceive+0x8e>
        __asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	61bb      	str	r3, [r7, #24]
    }
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bf2:	f001 fd79 	bl	80046e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02f      	beq.n	8002c62 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c06:	f000 f927 	bl	8002e58 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 fb83 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002c12:	4604      	mov	r4, r0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f003 fb7f 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	9100      	str	r1, [sp, #0]
 8002c22:	4621      	mov	r1, r4
 8002c24:	205c      	movs	r0, #92	; 0x5c
 8002c26:	f002 fe61 	bl	80058ec <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fe5c 	bl	80038fc <xTaskRemoveFromEventList>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <xQueueReceive+0x21c>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c5a:	f001 fd75 	bl	8004748 <vPortExitCritical>
                return pdPASS;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e08a      	b.n	8002d78 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d113      	bne.n	8002c90 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c68:	f001 fd6e 	bl	8004748 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fb52 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002c74:	4604      	mov	r4, r0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f003 fb4e 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2101      	movs	r1, #1
 8002c82:	9100      	str	r1, [sp, #0]
 8002c84:	4621      	mov	r1, r4
 8002c86:	205c      	movs	r0, #92	; 0x5c
 8002c88:	f002 fe30 	bl	80058ec <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e073      	b.n	8002d78 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fe94 	bl	80039c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ca4:	f001 fd50 	bl	8004748 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ca8:	f000 fbe0 	bl	800346c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cac:	f001 fd1c 	bl	80046e8 <vPortEnterCritical>
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d103      	bne.n	8002cc6 <xQueueReceive+0x162>
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d103      	bne.n	8002cdc <xQueueReceive+0x178>
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cdc:	f001 fd34 	bl	8004748 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ce0:	1d3a      	adds	r2, r7, #4
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fe83 	bl	80039f4 <xTaskCheckForTimeOut>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d124      	bne.n	8002d3e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf6:	f000 f927 	bl	8002f48 <prvIsQueueEmpty>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d018      	beq.n	8002d32 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	3324      	adds	r3, #36	; 0x24
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fda5 	bl	8003858 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d10:	f000 f8c8 	bl	8002ea4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d14:	f000 fbb8 	bl	8003488 <xTaskResumeAll>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f47f af69 	bne.w	8002bf2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <xQueueReceive+0x21c>)
 8002d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	e75f      	b.n	8002bf2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d34:	f000 f8b6 	bl	8002ea4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d38:	f000 fba6 	bl	8003488 <xTaskResumeAll>
 8002d3c:	e759      	b.n	8002bf2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d40:	f000 f8b0 	bl	8002ea4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d44:	f000 fba0 	bl	8003488 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4a:	f000 f8fd 	bl	8002f48 <prvIsQueueEmpty>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f43f af4e 	beq.w	8002bf2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 fadd 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002d5e:	4604      	mov	r4, r0
 8002d60:	2000      	movs	r0, #0
 8002d62:	f003 fad9 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	9100      	str	r1, [sp, #0]
 8002d6e:	4621      	mov	r1, r4
 8002d70:	205c      	movs	r0, #92	; 0x5c
 8002d72:	f002 fdbb 	bl	80058ec <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3734      	adds	r7, #52	; 0x34
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d14d      	bne.n	8002e46 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 ff62 	bl	8003c78 <xTaskPriorityDisinherit>
 8002db4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e043      	b.n	8002e46 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d119      	bne.n	8002df8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6858      	ldr	r0, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	f003 fd58 	bl	8006884 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	441a      	add	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d32b      	bcc.n	8002e46 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	e026      	b.n	8002e46 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68d8      	ldr	r0, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	461a      	mov	r2, r3
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	f003 fd3e 	bl	8006884 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	425b      	negs	r3, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d105      	bne.n	8002e46 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e4e:	697b      	ldr	r3, [r7, #20]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d303      	bcc.n	8002e8c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68d9      	ldr	r1, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	461a      	mov	r2, r3
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	f003 fcf4 	bl	8006884 <memcpy>
    }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002eac:	f001 fc1c 	bl	80046e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eb8:	e011      	b.n	8002ede <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3324      	adds	r3, #36	; 0x24
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fd18 	bl	80038fc <xTaskRemoveFromEventList>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ed2:	f000 fdf5 	bl	8003ac0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dce9      	bgt.n	8002eba <prvUnlockQueue+0x16>
 8002ee6:	e000      	b.n	8002eea <prvUnlockQueue+0x46>
                        break;
 8002ee8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ef2:	f001 fc29 	bl	8004748 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ef6:	f001 fbf7 	bl	80046e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f00:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f02:	e011      	b.n	8002f28 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3310      	adds	r3, #16
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fcf3 	bl	80038fc <xTaskRemoveFromEventList>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f1c:	f000 fdd0 	bl	8003ac0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	dce9      	bgt.n	8002f04 <prvUnlockQueue+0x60>
 8002f30:	e000      	b.n	8002f34 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f32:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	22ff      	movs	r2, #255	; 0xff
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f3c:	f001 fc04 	bl	8004748 <vPortExitCritical>
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f50:	f001 fbca 	bl	80046e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e001      	b.n	8002f66 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f66:	f001 fbef 	bl	8004748 <vPortExitCritical>

    return xReturn;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f7c:	f001 fbb4 	bl	80046e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d102      	bne.n	8002f92 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e001      	b.n	8002f96 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f96:	f001 fbd7 	bl	8004748 <vPortExitCritical>

    return xReturn;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e01e      	b.n	8002ff2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <vQueueAddToRegistry+0x60>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d115      	bne.n	8002fec <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fc0:	4910      	ldr	r1, [pc, #64]	; (8003004 <vQueueAddToRegistry+0x60>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <vQueueAddToRegistry+0x60>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 f99d 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8002fde:	4601      	mov	r1, r0
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2071      	movs	r0, #113	; 0x71
 8002fe6:	f002 fbb1 	bl	800574c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002fea:	e006      	b.n	8002ffa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b07      	cmp	r3, #7
 8002ff6:	d9dd      	bls.n	8002fb4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000098 	.word	0x20000098

08003008 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003018:	f001 fb66 	bl	80046e8 <vPortEnterCritical>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003022:	b25b      	sxtb	r3, r3
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d103      	bne.n	8003032 <vQueueWaitForMessageRestricted+0x2a>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003038:	b25b      	sxtb	r3, r3
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d103      	bne.n	8003048 <vQueueWaitForMessageRestricted+0x40>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003048:	f001 fb7e 	bl	8004748 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3324      	adds	r3, #36	; 0x24
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fc1f 	bl	80038a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff1e 	bl	8002ea4 <prvUnlockQueue>
    }
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af04      	add	r7, sp, #16
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f001 fc59 	bl	800493c <pvPortMalloc>
 800308a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00e      	beq.n	80030b0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003092:	2058      	movs	r0, #88	; 0x58
 8003094:	f001 fc52 	bl	800493c <pvPortMalloc>
 8003098:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
 80030a6:	e005      	b.n	80030b4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f001 fd27 	bl	8004afc <vPortFree>
 80030ae:	e001      	b.n	80030b4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d013      	beq.n	80030e2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	2300      	movs	r3, #0
 80030be:	9303      	str	r3, [sp, #12]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f80e 	bl	80030f2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030d6:	69f8      	ldr	r0, [r7, #28]
 80030d8:	f000 f8a2 	bl	8003220 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030dc:	2301      	movs	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	e002      	b.n	80030e8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295
 80030e6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030e8:	69bb      	ldr	r3, [r7, #24]
    }
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b088      	sub	sp, #32
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	21a5      	movs	r1, #165	; 0xa5
 800310c:	f003 fbc8 	bl	80068a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800311a:	3b01      	subs	r3, #1
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	617b      	str	r3, [r7, #20]
    }
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01f      	beq.n	8003190 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e012      	b.n	800317c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	7819      	ldrb	r1, [r3, #0]
 800315e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	3334      	adds	r3, #52	; 0x34
 8003166:	460a      	mov	r2, r1
 8003168:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3301      	adds	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b09      	cmp	r3, #9
 8003180:	d9e9      	bls.n	8003156 <prvInitialiseNewTask+0x64>
 8003182:	e000      	b.n	8003186 <prvInitialiseNewTask+0x94>
            {
                break;
 8003184:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800318e:	e003      	b.n	8003198 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2b04      	cmp	r3, #4
 800319c:	d901      	bls.n	80031a2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800319e:	2304      	movs	r3, #4
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ac:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	3304      	adds	r3, #4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f96b 	bl	8002494 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	3318      	adds	r3, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f966 	bl	8002494 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	f1c3 0205 	rsb	r2, r3, #5
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	3350      	adds	r3, #80	; 0x50
 80031e2:	2204      	movs	r2, #4
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fb5a 	bl	80068a0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	3354      	adds	r3, #84	; 0x54
 80031f0:	2201      	movs	r2, #1
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 fb53 	bl	80068a0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	69b8      	ldr	r0, [r7, #24]
 8003200:	f001 f944 	bl	800448c <pxPortInitialiseStack>
 8003204:	4602      	mov	r2, r0
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003214:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003216:	bf00      	nop
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003228:	f001 fa5e 	bl	80046e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <prvAddNewTaskToReadyList+0xfc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	4a3a      	ldr	r2, [pc, #232]	; (800331c <prvAddNewTaskToReadyList+0xfc>)
 8003234:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800323e:	4a38      	ldr	r2, [pc, #224]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <prvAddNewTaskToReadyList+0xfc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d110      	bne.n	800326e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800324c:	f000 fc5c 	bl	8003b08 <prvInitialiseTaskLists>
 8003250:	e00d      	b.n	800326e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <prvAddNewTaskToReadyList+0x104>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d802      	bhi.n	800326e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003268:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <prvAddNewTaskToReadyList+0x108>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <prvAddNewTaskToReadyList+0x108>)
 8003276:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <prvAddNewTaskToReadyList+0x108>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <prvAddNewTaskToReadyList+0x94>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	f002 ff1f 	bl	80060cc <SEGGER_SYSVIEW_OnTaskCreate>
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	461d      	mov	r5, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461c      	mov	r4, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	1ae3      	subs	r3, r4, r3
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	462b      	mov	r3, r5
 80032b0:	f003 fa2a 	bl	8006708 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 ff8c 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2201      	movs	r2, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <prvAddNewTaskToReadyList+0x10c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <prvAddNewTaskToReadyList+0x10c>)
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <prvAddNewTaskToReadyList+0x110>)
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f7ff f8e2 	bl	80024ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032ea:	f001 fa2d 	bl	8004748 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <prvAddNewTaskToReadyList+0x104>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00e      	beq.n	8003314 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	429a      	cmp	r2, r3
 8003302:	d207      	bcs.n	8003314 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <prvAddNewTaskToReadyList+0x114>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bdb0      	pop	{r4, r5, r7, pc}
 800331c:	200001b0 	.word	0x200001b0
 8003320:	200000d8 	.word	0x200000d8
 8003324:	200001bc 	.word	0x200001bc
 8003328:	200001cc 	.word	0x200001cc
 800332c:	200001b8 	.word	0x200001b8
 8003330:	200000dc 	.word	0x200000dc
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01b      	beq.n	8003382 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <vTaskDelay+0x68>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <vTaskDelay+0x30>
        __asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60bb      	str	r3, [r7, #8]
    }
 8003364:	bf00      	nop
 8003366:	e7fe      	b.n	8003366 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003368:	f000 f880 	bl	800346c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	2023      	movs	r0, #35	; 0x23
 8003370:	f002 f9b0 	bl	80056d4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003374:	2100      	movs	r1, #0
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fcfe 	bl	8003d78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800337c:	f000 f884 	bl	8003488 <xTaskResumeAll>
 8003380:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <vTaskDelay+0x6c>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200001d8 	.word	0x200001d8
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <vTaskStartScheduler+0xa4>)
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	2300      	movs	r3, #0
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	2282      	movs	r2, #130	; 0x82
 80033ba:	4925      	ldr	r1, [pc, #148]	; (8003450 <vTaskStartScheduler+0xa8>)
 80033bc:	4825      	ldr	r0, [pc, #148]	; (8003454 <vTaskStartScheduler+0xac>)
 80033be:	f7ff fe57 	bl	8003070 <xTaskCreate>
 80033c2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80033ca:	f000 fd4d 	bl	8003e68 <xTimerCreateTimerTask>
 80033ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d124      	bne.n	8003420 <vTaskStartScheduler+0x78>
        __asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	60bb      	str	r3, [r7, #8]
    }
 80033e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <vTaskStartScheduler+0xb0>)
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <vTaskStartScheduler+0xb4>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <vTaskStartScheduler+0xb8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <vTaskStartScheduler+0xbc>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <vTaskStartScheduler+0xa4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d102      	bne.n	8003410 <vTaskStartScheduler+0x68>
 800340a:	f002 fe43 	bl	8006094 <SEGGER_SYSVIEW_OnIdle>
 800340e:	e004      	b.n	800341a <vTaskStartScheduler+0x72>
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <vTaskStartScheduler+0xbc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f002 fe9b 	bl	8006150 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800341a:	f001 f8c3 	bl	80045a4 <xPortStartScheduler>
 800341e:	e00e      	b.n	800343e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003426:	d10a      	bne.n	800343e <vTaskStartScheduler+0x96>
        __asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	607b      	str	r3, [r7, #4]
    }
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <vTaskStartScheduler+0xc0>)
 8003440:	681b      	ldr	r3, [r3, #0]
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200001d4 	.word	0x200001d4
 8003450:	080068e0 	.word	0x080068e0
 8003454:	08003ad9 	.word	0x08003ad9
 8003458:	200001d0 	.word	0x200001d0
 800345c:	200001bc 	.word	0x200001bc
 8003460:	200001b4 	.word	0x200001b4
 8003464:	200000d8 	.word	0x200000d8
 8003468:	20000024 	.word	0x20000024

0800346c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <vTaskSuspendAll+0x18>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	4a03      	ldr	r2, [pc, #12]	; (8003484 <vTaskSuspendAll+0x18>)
 8003478:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	200001d8 	.word	0x200001d8

08003488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003496:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <xTaskResumeAll+0x11c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	603b      	str	r3, [r7, #0]
    }
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80034b4:	f001 f918 	bl	80046e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80034b8:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <xTaskResumeAll+0x11c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3b01      	subs	r3, #1
 80034be:	4a39      	ldr	r2, [pc, #228]	; (80035a4 <xTaskResumeAll+0x11c>)
 80034c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <xTaskResumeAll+0x11c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d165      	bne.n	8003596 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <xTaskResumeAll+0x120>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d061      	beq.n	8003596 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d2:	e032      	b.n	800353a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <xTaskResumeAll+0x124>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3318      	adds	r3, #24
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f841 	bl	8002568 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f83c 	bl	8002568 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 fe6e 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	2201      	movs	r2, #1
 80034fe:	409a      	lsls	r2, r3
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <xTaskResumeAll+0x128>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <xTaskResumeAll+0x128>)
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <xTaskResumeAll+0x12c>)
 8003518:	441a      	add	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f7fe ffc4 	bl	80024ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <xTaskResumeAll+0x130>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <xTaskResumeAll+0x134>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <xTaskResumeAll+0x124>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1c8      	bne.n	80034d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003548:	f000 fb5c 	bl	8003c04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <xTaskResumeAll+0x138>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003558:	f000 f858 	bl	800360c <xTaskIncrementTick>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003562:	4b16      	ldr	r3, [pc, #88]	; (80035bc <xTaskResumeAll+0x134>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f1      	bne.n	8003558 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <xTaskResumeAll+0x138>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <xTaskResumeAll+0x134>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003582:	2301      	movs	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <xTaskResumeAll+0x13c>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003596:	f001 f8d7 	bl	8004748 <vPortExitCritical>

    return xAlreadyYielded;
 800359a:	68bb      	ldr	r3, [r7, #8]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	200001d8 	.word	0x200001d8
 80035a8:	200001b0 	.word	0x200001b0
 80035ac:	20000170 	.word	0x20000170
 80035b0:	200001b8 	.word	0x200001b8
 80035b4:	200000dc 	.word	0x200000dc
 80035b8:	200000d8 	.word	0x200000d8
 80035bc:	200001c4 	.word	0x200001c4
 80035c0:	200001c0 	.word	0x200001c0
 80035c4:	e000ed04 	.word	0xe000ed04

080035c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <xTaskGetTickCount+0x1c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	200001b4 	.word	0x200001b4

080035e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ee:	f001 f965 	bl	80048bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <xTaskGetTickCountFromISR+0x20>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80035fc:	683b      	ldr	r3, [r7, #0]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200001b4 	.word	0x200001b4

0800360c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003616:	4b50      	ldr	r3, [pc, #320]	; (8003758 <xTaskIncrementTick+0x14c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 8092 	bne.w	8003744 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003620:	4b4e      	ldr	r3, [pc, #312]	; (800375c <xTaskIncrementTick+0x150>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003628:	4a4c      	ldr	r2, [pc, #304]	; (800375c <xTaskIncrementTick+0x150>)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d120      	bne.n	8003676 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003634:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <xTaskIncrementTick+0x154>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <xTaskIncrementTick+0x48>
        __asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	603b      	str	r3, [r7, #0]
    }
 8003650:	bf00      	nop
 8003652:	e7fe      	b.n	8003652 <xTaskIncrementTick+0x46>
 8003654:	4b42      	ldr	r3, [pc, #264]	; (8003760 <xTaskIncrementTick+0x154>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b42      	ldr	r3, [pc, #264]	; (8003764 <xTaskIncrementTick+0x158>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <xTaskIncrementTick+0x154>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4a40      	ldr	r2, [pc, #256]	; (8003764 <xTaskIncrementTick+0x158>)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <xTaskIncrementTick+0x15c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	4a3e      	ldr	r2, [pc, #248]	; (8003768 <xTaskIncrementTick+0x15c>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	f000 fac7 	bl	8003c04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <xTaskIncrementTick+0x160>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d34c      	bcc.n	800371a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003680:	4b37      	ldr	r3, [pc, #220]	; (8003760 <xTaskIncrementTick+0x154>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d104      	bne.n	8003694 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <xTaskIncrementTick+0x160>)
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	601a      	str	r2, [r3, #0]
                    break;
 8003692:	e042      	b.n	800371a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003694:	4b32      	ldr	r3, [pc, #200]	; (8003760 <xTaskIncrementTick+0x154>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d203      	bcs.n	80036b4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036ac:	4a2f      	ldr	r2, [pc, #188]	; (800376c <xTaskIncrementTick+0x160>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036b2:	e032      	b.n	800371a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe ff55 	bl	8002568 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3318      	adds	r3, #24
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe ff4c 	bl	8002568 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fd7e 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <xTaskIncrementTick+0x164>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	4a22      	ldr	r2, [pc, #136]	; (8003770 <xTaskIncrementTick+0x164>)
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <xTaskIncrementTick+0x168>)
 80036f8:	441a      	add	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f7fe fed4 	bl	80024ae <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <xTaskIncrementTick+0x16c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	429a      	cmp	r2, r3
 8003712:	d3b5      	bcc.n	8003680 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003718:	e7b2      	b.n	8003680 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <xTaskIncrementTick+0x16c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	4914      	ldr	r1, [pc, #80]	; (8003774 <xTaskIncrementTick+0x168>)
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d901      	bls.n	8003736 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003732:	2301      	movs	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <xTaskIncrementTick+0x170>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800373e:	2301      	movs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e004      	b.n	800374e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <xTaskIncrementTick+0x174>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <xTaskIncrementTick+0x174>)
 800374c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800374e:	697b      	ldr	r3, [r7, #20]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200001d8 	.word	0x200001d8
 800375c:	200001b4 	.word	0x200001b4
 8003760:	20000168 	.word	0x20000168
 8003764:	2000016c 	.word	0x2000016c
 8003768:	200001c8 	.word	0x200001c8
 800376c:	200001d0 	.word	0x200001d0
 8003770:	200001b8 	.word	0x200001b8
 8003774:	200000dc 	.word	0x200000dc
 8003778:	200000d8 	.word	0x200000d8
 800377c:	200001c4 	.word	0x200001c4
 8003780:	200001c0 	.word	0x200001c0

08003784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <vTaskSwitchContext+0xbc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <vTaskSwitchContext+0xc0>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003798:	e04d      	b.n	8003836 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800379a:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <vTaskSwitchContext+0xc0>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <vTaskSwitchContext+0xc4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80037ae:	7afb      	ldrb	r3, [r7, #11]
 80037b0:	f1c3 031f 	rsb	r3, r3, #31
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	4925      	ldr	r1, [pc, #148]	; (800384c <vTaskSwitchContext+0xc8>)
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	607b      	str	r3, [r7, #4]
    }
 80037dc:	bf00      	nop
 80037de:	e7fe      	b.n	80037de <vTaskSwitchContext+0x5a>
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <vTaskSwitchContext+0xc8>)
 80037ec:	4413      	add	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	3308      	adds	r3, #8
 8003802:	429a      	cmp	r2, r3
 8003804:	d104      	bne.n	8003810 <vTaskSwitchContext+0x8c>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	4a0e      	ldr	r2, [pc, #56]	; (8003850 <vTaskSwitchContext+0xcc>)
 8003818:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <vTaskSwitchContext+0xcc>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <vTaskSwitchContext+0xd0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d102      	bne.n	800382c <vTaskSwitchContext+0xa8>
 8003826:	f002 fc35 	bl	8006094 <SEGGER_SYSVIEW_OnIdle>
}
 800382a:	e004      	b.n	8003836 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <vTaskSwitchContext+0xcc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f002 fc8d 	bl	8006150 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200001d8 	.word	0x200001d8
 8003844:	200001c4 	.word	0x200001c4
 8003848:	200001b8 	.word	0x200001b8
 800384c:	200000dc 	.word	0x200000dc
 8003850:	200000d8 	.word	0x200000d8
 8003854:	200001d4 	.word	0x200001d4

08003858 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	60fb      	str	r3, [r7, #12]
    }
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <vTaskPlaceOnEventList+0x44>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3318      	adds	r3, #24
 8003884:	4619      	mov	r1, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fe35 	bl	80024f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800388c:	2101      	movs	r1, #1
 800388e:	6838      	ldr	r0, [r7, #0]
 8003890:	f000 fa72 	bl	8003d78 <prvAddCurrentTaskToDelayedList>
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200000d8 	.word	0x200000d8

080038a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	617b      	str	r3, [r7, #20]
    }
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <vTaskPlaceOnEventListRestricted+0x58>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3318      	adds	r3, #24
 80038ce:	4619      	mov	r1, r3
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7fe fdec 	bl	80024ae <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
 80038e0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038e2:	2024      	movs	r0, #36	; 0x24
 80038e4:	f001 fed8 	bl	8005698 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	68b8      	ldr	r0, [r7, #8]
 80038ec:	f000 fa44 	bl	8003d78 <prvAddCurrentTaskToDelayedList>
    }
 80038f0:	bf00      	nop
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	200000d8 	.word	0x200000d8

080038fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	60fb      	str	r3, [r7, #12]
    }
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	3318      	adds	r3, #24
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fe1b 	bl	8002568 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <xTaskRemoveFromEventList+0xb4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d120      	bne.n	800397c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fe12 	bl	8002568 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4618      	mov	r0, r3
 8003948:	f002 fc44 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	2201      	movs	r2, #1
 8003952:	409a      	lsls	r2, r3
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <xTaskRemoveFromEventList+0xb8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <xTaskRemoveFromEventList+0xb8>)
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <xTaskRemoveFromEventList+0xbc>)
 800396c:	441a      	add	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	3304      	adds	r3, #4
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f7fe fd9a 	bl	80024ae <vListInsertEnd>
 800397a:	e005      	b.n	8003988 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3318      	adds	r3, #24
 8003980:	4619      	mov	r1, r3
 8003982:	480e      	ldr	r0, [pc, #56]	; (80039bc <xTaskRemoveFromEventList+0xc0>)
 8003984:	f7fe fd93 	bl	80024ae <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <xTaskRemoveFromEventList+0xc4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	429a      	cmp	r2, r3
 8003994:	d905      	bls.n	80039a2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <xTaskRemoveFromEventList+0xc8>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e001      	b.n	80039a6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200001d8 	.word	0x200001d8
 80039b4:	200001b8 	.word	0x200001b8
 80039b8:	200000dc 	.word	0x200000dc
 80039bc:	20000170 	.word	0x20000170
 80039c0:	200000d8 	.word	0x200000d8
 80039c4:	200001c4 	.word	0x200001c4

080039c8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <vTaskInternalSetTimeOutState+0x24>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <vTaskInternalSetTimeOutState+0x28>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	200001c8 	.word	0x200001c8
 80039f0:	200001b4 	.word	0x200001b4

080039f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	613b      	str	r3, [r7, #16]
    }
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	60fb      	str	r3, [r7, #12]
    }
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003a36:	f000 fe57 	bl	80046e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <xTaskCheckForTimeOut+0xc4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d102      	bne.n	8003a5a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	e026      	b.n	8003aa8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <xTaskCheckForTimeOut+0xc8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d00a      	beq.n	8003a7c <xTaskCheckForTimeOut+0x88>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d305      	bcc.n	8003a7c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e015      	b.n	8003aa8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d20b      	bcs.n	8003a9e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	1ad2      	subs	r2, r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ff98 	bl	80039c8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e004      	b.n	8003aa8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003aa8:	f000 fe4e 	bl	8004748 <vPortExitCritical>

    return xReturn;
 8003aac:	69fb      	ldr	r3, [r7, #28]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200001b4 	.word	0x200001b4
 8003abc:	200001c8 	.word	0x200001c8

08003ac0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <vTaskMissedYield+0x14>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	200001c4 	.word	0x200001c4

08003ad8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ae0:	f000 f852 	bl	8003b88 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <prvIdleTask+0x28>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d9f9      	bls.n	8003ae0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <prvIdleTask+0x2c>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003afc:	e7f0      	b.n	8003ae0 <prvIdleTask+0x8>
 8003afe:	bf00      	nop
 8003b00:	200000dc 	.word	0x200000dc
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	e00c      	b.n	8003b2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <prvInitialiseTaskLists+0x60>)
 8003b20:	4413      	add	r3, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fc96 	bl	8002454 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d9ef      	bls.n	8003b14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b34:	480d      	ldr	r0, [pc, #52]	; (8003b6c <prvInitialiseTaskLists+0x64>)
 8003b36:	f7fe fc8d 	bl	8002454 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b3a:	480d      	ldr	r0, [pc, #52]	; (8003b70 <prvInitialiseTaskLists+0x68>)
 8003b3c:	f7fe fc8a 	bl	8002454 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <prvInitialiseTaskLists+0x6c>)
 8003b42:	f7fe fc87 	bl	8002454 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b46:	480c      	ldr	r0, [pc, #48]	; (8003b78 <prvInitialiseTaskLists+0x70>)
 8003b48:	f7fe fc84 	bl	8002454 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b4c:	480b      	ldr	r0, [pc, #44]	; (8003b7c <prvInitialiseTaskLists+0x74>)
 8003b4e:	f7fe fc81 	bl	8002454 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <prvInitialiseTaskLists+0x78>)
 8003b54:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <prvInitialiseTaskLists+0x64>)
 8003b56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <prvInitialiseTaskLists+0x7c>)
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <prvInitialiseTaskLists+0x68>)
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200000dc 	.word	0x200000dc
 8003b6c:	20000140 	.word	0x20000140
 8003b70:	20000154 	.word	0x20000154
 8003b74:	20000170 	.word	0x20000170
 8003b78:	20000184 	.word	0x20000184
 8003b7c:	2000019c 	.word	0x2000019c
 8003b80:	20000168 	.word	0x20000168
 8003b84:	2000016c 	.word	0x2000016c

08003b88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b8e:	e019      	b.n	8003bc4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b90:	f000 fdaa 	bl	80046e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b94:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <prvCheckTasksWaitingTermination+0x50>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fce1 	bl	8002568 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <prvCheckTasksWaitingTermination+0x54>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <prvCheckTasksWaitingTermination+0x54>)
 8003bae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <prvCheckTasksWaitingTermination+0x58>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <prvCheckTasksWaitingTermination+0x58>)
 8003bb8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003bba:	f000 fdc5 	bl	8004748 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f810 	bl	8003be4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <prvCheckTasksWaitingTermination+0x58>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e1      	bne.n	8003b90 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000184 	.word	0x20000184
 8003bdc:	200001b0 	.word	0x200001b0
 8003be0:	20000198 	.word	0x20000198

08003be4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 ff83 	bl	8004afc <vPortFree>
                vPortFree( pxTCB );
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 ff80 	bl	8004afc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <prvResetNextTaskUnblockTime+0x30>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <prvResetNextTaskUnblockTime+0x34>)
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c1a:	e005      	b.n	8003c28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <prvResetNextTaskUnblockTime+0x30>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <prvResetNextTaskUnblockTime+0x34>)
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000168 	.word	0x20000168
 8003c38:	200001d0 	.word	0x200001d0

08003c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <xTaskGetSchedulerState+0x34>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	e008      	b.n	8003c62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <xTaskGetSchedulerState+0x38>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	e001      	b.n	8003c62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c62:	687b      	ldr	r3, [r7, #4]
    }
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	200001bc 	.word	0x200001bc
 8003c74:	200001d8 	.word	0x200001d8

08003c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d068      	beq.n	8003d60 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c8e:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <xTaskPriorityDisinherit+0xf4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d00a      	beq.n	8003cae <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60fb      	str	r3, [r7, #12]
    }
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	60bb      	str	r3, [r7, #8]
    }
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d03e      	beq.n	8003d60 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d13a      	bne.n	8003d60 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe fc3a 	bl	8002568 <uxListRemove>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	2201      	movs	r2, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43da      	mvns	r2, r3
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <xTaskPriorityDisinherit+0xf8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <xTaskPriorityDisinherit+0xf8>)
 8003d0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4619      	mov	r1, r3
 8003d14:	204a      	movs	r0, #74	; 0x4a
 8003d16:	f001 fcdd 	bl	80056d4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	f1c3 0205 	rsb	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	2201      	movs	r2, #1
 8003d34:	409a      	lsls	r2, r3
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <xTaskPriorityDisinherit+0xf8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <xTaskPriorityDisinherit+0xf8>)
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <xTaskPriorityDisinherit+0xfc>)
 8003d4e:	441a      	add	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f7fe fba9 	bl	80024ae <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d60:	697b      	ldr	r3, [r7, #20]
    }
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200000d8 	.word	0x200000d8
 8003d70:	200001b8 	.word	0x200001b8
 8003d74:	200000dc 	.word	0x200000dc

08003d78 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d82:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fbea 	bl	8002568 <uxListRemove>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d9a:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2201      	movs	r2, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43da      	mvns	r2, r3
 8003da8:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4013      	ands	r3, r2
 8003dae:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003db0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d110      	bne.n	8003ddc <prvAddCurrentTaskToDelayedList+0x64>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	211b      	movs	r1, #27
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f002 fa46 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4820      	ldr	r0, [pc, #128]	; (8003e58 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003dd6:	f7fe fb6a 	bl	80024ae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dda:	e032      	b.n	8003e42 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d20f      	bcs.n	8003e14 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2104      	movs	r1, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 fa2c 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f7fe fb72 	bl	80024f6 <vListInsert>
}
 8003e12:	e016      	b.n	8003e42 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2104      	movs	r1, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fa1c 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fb62 	bl	80024f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d202      	bcs.n	8003e42 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003e3c:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200001b4 	.word	0x200001b4
 8003e50:	200000d8 	.word	0x200000d8
 8003e54:	200001b8 	.word	0x200001b8
 8003e58:	2000019c 	.word	0x2000019c
 8003e5c:	2000016c 	.word	0x2000016c
 8003e60:	20000168 	.word	0x20000168
 8003e64:	200001d0 	.word	0x200001d0

08003e68 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e72:	f000 fad5 	bl	8004420 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e76:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <xTimerCreateTimerTask+0x54>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <xTimerCreateTimerTask+0x58>)
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	2302      	movs	r3, #2
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e8c:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <xTimerCreateTimerTask+0x5c>)
 8003e8e:	480e      	ldr	r0, [pc, #56]	; (8003ec8 <xTimerCreateTimerTask+0x60>)
 8003e90:	f7ff f8ee 	bl	8003070 <xTaskCreate>
 8003e94:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	603b      	str	r3, [r7, #0]
    }
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003eb2:	687b      	ldr	r3, [r7, #4]
    }
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	2000020c 	.word	0x2000020c
 8003ec0:	20000210 	.word	0x20000210
 8003ec4:	080068e8 	.word	0x080068e8
 8003ec8:	08004001 	.word	0x08004001

08003ecc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xTimerGenericCommand+0x2e>
        __asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	623b      	str	r3, [r7, #32]
    }
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <xTimerGenericCommand+0x98>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02a      	beq.n	8003f58 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	dc18      	bgt.n	8003f46 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f14:	f7ff fe92 	bl	8003c3c <xTaskGetSchedulerState>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d109      	bne.n	8003f32 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <xTimerGenericCommand+0x98>)
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	f107 0114 	add.w	r1, r7, #20
 8003f26:	2300      	movs	r3, #0
 8003f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2a:	f7fe fc37 	bl	800279c <xQueueGenericSend>
 8003f2e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f30:	e012      	b.n	8003f58 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <xTimerGenericCommand+0x98>)
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	f107 0114 	add.w	r1, r7, #20
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f7fe fc2d 	bl	800279c <xQueueGenericSend>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24
 8003f44:	e008      	b.n	8003f58 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f46:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <xTimerGenericCommand+0x98>)
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	f107 0114 	add.w	r1, r7, #20
 8003f4e:	2300      	movs	r3, #0
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	f7fe fd49 	bl	80029e8 <xQueueGenericSendFromISR>
 8003f56:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000020c 	.word	0x2000020c

08003f68 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <prvProcessExpiredTimer+0x94>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe faf1 	bl	8002568 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d022      	beq.n	8003fda <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	18d1      	adds	r1, r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	6978      	ldr	r0, [r7, #20]
 8003fa2:	f000 f8d1 	bl	8004148 <prvInsertTimerInActiveList>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01f      	beq.n	8003fec <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f7ff ff88 	bl	8003ecc <xTimerGenericCommand>
 8003fbc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d113      	bne.n	8003fec <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
    }
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	6978      	ldr	r0, [r7, #20]
 8003ff2:	4798      	blx	r3
    }
 8003ff4:	bf00      	nop
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000204 	.word	0x20000204

08004000 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004008:	f107 0308 	add.w	r3, r7, #8
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f857 	bl	80040c0 <prvGetNextExpireTime>
 8004012:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4619      	mov	r1, r3
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f803 	bl	8004024 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800401e:	f000 f8d5 	bl	80041cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004022:	e7f1      	b.n	8004008 <prvTimerTask+0x8>

08004024 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800402e:	f7ff fa1d 	bl	800346c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004032:	f107 0308 	add.w	r3, r7, #8
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f866 	bl	8004108 <prvSampleTimeNow>
 800403c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d130      	bne.n	80040a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <prvProcessTimerOrBlockTask+0x3c>
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	429a      	cmp	r2, r3
 8004050:	d806      	bhi.n	8004060 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004052:	f7ff fa19 	bl	8003488 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff85 	bl	8003f68 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800405e:	e024      	b.n	80040aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004066:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <prvProcessTimerOrBlockTask+0x90>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <prvProcessTimerOrBlockTask+0x50>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <prvProcessTimerOrBlockTask+0x52>
 8004074:	2300      	movs	r3, #0
 8004076:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <prvProcessTimerOrBlockTask+0x94>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	4619      	mov	r1, r3
 8004086:	f7fe ffbf 	bl	8003008 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800408a:	f7ff f9fd 	bl	8003488 <xTaskResumeAll>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <prvProcessTimerOrBlockTask+0x98>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
    }
 80040a4:	e001      	b.n	80040aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80040a6:	f7ff f9ef 	bl	8003488 <xTaskResumeAll>
    }
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000208 	.word	0x20000208
 80040b8:	2000020c 	.word	0x2000020c
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040c8:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <prvGetNextExpireTime+0x44>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <prvGetNextExpireTime+0x16>
 80040d2:	2201      	movs	r2, #1
 80040d4:	e000      	b.n	80040d8 <prvGetNextExpireTime+0x18>
 80040d6:	2200      	movs	r2, #0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <prvGetNextExpireTime+0x44>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e001      	b.n	80040f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040f4:	68fb      	ldr	r3, [r7, #12]
    }
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000204 	.word	0x20000204

08004108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004110:	f7ff fa5a 	bl	80035c8 <xTaskGetTickCount>
 8004114:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <prvSampleTimeNow+0x3c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d205      	bcs.n	800412c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004120:	f000 f91a 	bl	8004358 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e002      	b.n	8004132 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <prvSampleTimeNow+0x3c>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004138:	68fb      	ldr	r3, [r7, #12]
    }
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000214 	.word	0x20000214

08004148 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d812      	bhi.n	8004194 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	1ad2      	subs	r2, r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800417c:	2301      	movs	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e01b      	b.n	80041ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <prvInsertTimerInActiveList+0x7c>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f7fe f9b2 	bl	80024f6 <vListInsert>
 8004192:	e012      	b.n	80041ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d206      	bcs.n	80041aa <prvInsertTimerInActiveList+0x62>
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e007      	b.n	80041ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <prvInsertTimerInActiveList+0x80>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7fe f99e 	bl	80024f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041ba:	697b      	ldr	r3, [r7, #20]
    }
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000208 	.word	0x20000208
 80041c8:	20000204 	.word	0x20000204

080041cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041d2:	e0ae      	b.n	8004332 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f2c0 80aa 	blt.w	8004330 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe f9bb 	bl	8002568 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff87 	bl	8004108 <prvSampleTimeNow>
 80041fa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b09      	cmp	r3, #9
 8004200:	f200 8097 	bhi.w	8004332 <prvProcessReceivedCommands+0x166>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <prvProcessReceivedCommands+0x40>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004235 	.word	0x08004235
 8004210:	08004235 	.word	0x08004235
 8004214:	08004235 	.word	0x08004235
 8004218:	080042a9 	.word	0x080042a9
 800421c:	080042bd 	.word	0x080042bd
 8004220:	08004307 	.word	0x08004307
 8004224:	08004235 	.word	0x08004235
 8004228:	08004235 	.word	0x08004235
 800422c:	080042a9 	.word	0x080042a9
 8004230:	080042bd 	.word	0x080042bd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	18d1      	adds	r1, r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a3a      	ldr	r2, [r7, #32]
 8004252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004254:	f7ff ff78 	bl	8004148 <prvInsertTimerInActiveList>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d069      	beq.n	8004332 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004264:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d05e      	beq.n	8004332 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	441a      	add	r2, r3
 800427c:	2300      	movs	r3, #0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	2100      	movs	r1, #0
 8004284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004286:	f7ff fe21 	bl	8003ecc <xTimerGenericCommand>
 800428a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d14f      	bne.n	8004332 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	61bb      	str	r3, [r7, #24]
    }
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80042ba:	e03a      	b.n	8004332 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	617b      	str	r3, [r7, #20]
    }
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	18d1      	adds	r1, r2, r3
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004300:	f7ff ff22 	bl	8004148 <prvInsertTimerInActiveList>
                        break;
 8004304:	e015      	b.n	8004332 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004316:	f000 fbf1 	bl	8004afc <vPortFree>
 800431a:	e00a      	b.n	8004332 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800432e:	e000      	b.n	8004332 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004330:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <prvProcessReceivedCommands+0x188>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f107 0108 	add.w	r1, r7, #8
 800433a:	2200      	movs	r2, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fc11 	bl	8002b64 <xQueueReceive>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f af45 	bne.w	80041d4 <prvProcessReceivedCommands+0x8>
        }
    }
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	2000020c 	.word	0x2000020c

08004358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800435e:	e048      	b.n	80043f2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004360:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <prvSwitchTimerLists+0xc0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <prvSwitchTimerLists+0xc0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3304      	adds	r3, #4
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe f8f5 	bl	8002568 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02e      	beq.n	80043f2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d90e      	bls.n	80043c4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043b2:	4b19      	ldr	r3, [pc, #100]	; (8004418 <prvSwitchTimerLists+0xc0>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fe f89a 	bl	80024f6 <vListInsert>
 80043c2:	e016      	b.n	80043f2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043c4:	2300      	movs	r3, #0
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	2100      	movs	r1, #0
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff fd7c 	bl	8003ecc <xTimerGenericCommand>
 80043d4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	603b      	str	r3, [r7, #0]
    }
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <prvSwitchTimerLists+0xc0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1b1      	bne.n	8004360 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <prvSwitchTimerLists+0xc0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <prvSwitchTimerLists+0xc4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <prvSwitchTimerLists+0xc0>)
 8004408:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800440a:	4a04      	ldr	r2, [pc, #16]	; (800441c <prvSwitchTimerLists+0xc4>)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6013      	str	r3, [r2, #0]
    }
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000204 	.word	0x20000204
 800441c:	20000208 	.word	0x20000208

08004420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004424:	f000 f960 	bl	80046e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <prvCheckForValidListAndQueue+0x54>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11d      	bne.n	800446c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004430:	4811      	ldr	r0, [pc, #68]	; (8004478 <prvCheckForValidListAndQueue+0x58>)
 8004432:	f7fe f80f 	bl	8002454 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004436:	4811      	ldr	r0, [pc, #68]	; (800447c <prvCheckForValidListAndQueue+0x5c>)
 8004438:	f7fe f80c 	bl	8002454 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800443c:	4b10      	ldr	r3, [pc, #64]	; (8004480 <prvCheckForValidListAndQueue+0x60>)
 800443e:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <prvCheckForValidListAndQueue+0x58>)
 8004440:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <prvCheckForValidListAndQueue+0x64>)
 8004444:	4a0d      	ldr	r2, [pc, #52]	; (800447c <prvCheckForValidListAndQueue+0x5c>)
 8004446:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004448:	2200      	movs	r2, #0
 800444a:	210c      	movs	r1, #12
 800444c:	200a      	movs	r0, #10
 800444e:	f7fe f91d 	bl	800268c <xQueueGenericCreate>
 8004452:	4603      	mov	r3, r0
 8004454:	4a07      	ldr	r2, [pc, #28]	; (8004474 <prvCheckForValidListAndQueue+0x54>)
 8004456:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <prvCheckForValidListAndQueue+0x54>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <prvCheckForValidListAndQueue+0x54>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4908      	ldr	r1, [pc, #32]	; (8004488 <prvCheckForValidListAndQueue+0x68>)
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fd9c 	bl	8002fa4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800446c:	f000 f96c 	bl	8004748 <vPortExitCritical>
    }
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}
 8004474:	2000020c 	.word	0x2000020c
 8004478:	200001dc 	.word	0x200001dc
 800447c:	200001f0 	.word	0x200001f0
 8004480:	20000204 	.word	0x20000204
 8004484:	20000208 	.word	0x20000208
 8004488:	080068f0 	.word	0x080068f0

0800448c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3b04      	subs	r3, #4
 800449c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b04      	subs	r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f023 0201 	bic.w	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b04      	subs	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <pxPortInitialiseStack+0x64>)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3b14      	subs	r3, #20
 80044c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3b04      	subs	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f06f 0202 	mvn.w	r2, #2
 80044da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b20      	subs	r3, #32
 80044e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	080044f5 	.word	0x080044f5

080044f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <prvTaskExitError+0x54>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d00a      	beq.n	800451e <prvTaskExitError+0x2a>
        __asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
    }
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <prvTaskExitError+0x28>
        __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	60bb      	str	r3, [r7, #8]
    }
 8004530:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004532:	bf00      	nop
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0fc      	beq.n	8004534 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000028 	.word	0x20000028
 800454c:	00000000 	.word	0x00000000

08004550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <pxCurrentTCBConst2>)
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	6808      	ldr	r0, [r1, #0]
 8004556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455a:	f380 8809 	msr	PSP, r0
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f380 8811 	msr	BASEPRI, r0
 800456a:	4770      	bx	lr
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst2>:
 8004570:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004578:	4808      	ldr	r0, [pc, #32]	; (800459c <prvPortStartFirstTask+0x24>)
 800457a:	6800      	ldr	r0, [r0, #0]
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	f380 8808 	msr	MSP, r0
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8814 	msr	CONTROL, r0
 800458a:	b662      	cpsie	i
 800458c:	b661      	cpsie	f
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	df00      	svc	0
 8004598:	bf00      	nop
 800459a:	0000      	.short	0x0000
 800459c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop

080045a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045aa:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <xPortStartScheduler+0x120>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a46      	ldr	r2, [pc, #280]	; (80046c8 <xPortStartScheduler+0x124>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10a      	bne.n	80045ca <xPortStartScheduler+0x26>
        __asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	613b      	str	r3, [r7, #16]
    }
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ca:	4b3e      	ldr	r3, [pc, #248]	; (80046c4 <xPortStartScheduler+0x120>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3f      	ldr	r2, [pc, #252]	; (80046cc <xPortStartScheduler+0x128>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10a      	bne.n	80045ea <xPortStartScheduler+0x46>
        __asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60fb      	str	r3, [r7, #12]
    }
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ea:	4b39      	ldr	r3, [pc, #228]	; (80046d0 <xPortStartScheduler+0x12c>)
 80045ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	22ff      	movs	r2, #255	; 0xff
 80045fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <xPortStartScheduler+0x130>)
 8004610:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004612:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <xPortStartScheduler+0x134>)
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004618:	e009      	b.n	800462e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800461a:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <xPortStartScheduler+0x134>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3b01      	subs	r3, #1
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <xPortStartScheduler+0x134>)
 8004622:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d0ef      	beq.n	800461a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800463a:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <xPortStartScheduler+0x134>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1c3 0307 	rsb	r3, r3, #7
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00a      	beq.n	800465c <xPortStartScheduler+0xb8>
        __asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	60bb      	str	r3, [r7, #8]
    }
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <xPortStartScheduler+0x134>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <xPortStartScheduler+0x134>)
 8004664:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004666:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <xPortStartScheduler+0x134>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800466e:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <xPortStartScheduler+0x134>)
 8004670:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <xPortStartScheduler+0x138>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <xPortStartScheduler+0x138>)
 8004680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004684:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <xPortStartScheduler+0x138>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a14      	ldr	r2, [pc, #80]	; (80046dc <xPortStartScheduler+0x138>)
 800468c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004690:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004692:	f000 f8e3 	bl	800485c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <xPortStartScheduler+0x13c>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800469c:	f000 f902 	bl	80048a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046a0:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <xPortStartScheduler+0x140>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0f      	ldr	r2, [pc, #60]	; (80046e4 <xPortStartScheduler+0x140>)
 80046a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80046ac:	f7ff ff64 	bl	8004578 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046b0:	f7ff f868 	bl	8003784 <vTaskSwitchContext>
    prvTaskExitError();
 80046b4:	f7ff ff1e 	bl	80044f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	e000ed00 	.word	0xe000ed00
 80046c8:	410fc271 	.word	0x410fc271
 80046cc:	410fc270 	.word	0x410fc270
 80046d0:	e000e400 	.word	0xe000e400
 80046d4:	20000218 	.word	0x20000218
 80046d8:	2000021c 	.word	0x2000021c
 80046dc:	e000ed20 	.word	0xe000ed20
 80046e0:	20000028 	.word	0x20000028
 80046e4:	e000ef34 	.word	0xe000ef34

080046e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
        __asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
    }
 8004700:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <vPortEnterCritical+0x58>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <vPortEnterCritical+0x58>)
 800470a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <vPortEnterCritical+0x58>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10f      	bne.n	8004734 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <vPortEnterCritical+0x5c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <vPortEnterCritical+0x4c>
        __asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	603b      	str	r3, [r7, #0]
    }
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <vPortEnterCritical+0x4a>
    }
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000028 	.word	0x20000028
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <vPortExitCritical+0x50>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <vPortExitCritical+0x24>
        __asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	607b      	str	r3, [r7, #4]
    }
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vPortExitCritical+0x50>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3b01      	subs	r3, #1
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <vPortExitCritical+0x50>)
 8004774:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004776:	4b08      	ldr	r3, [pc, #32]	; (8004798 <vPortExitCritical+0x50>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <vPortExitCritical+0x42>
 800477e:	2300      	movs	r3, #0
 8004780:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f383 8811 	msr	BASEPRI, r3
    }
 8004788:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000028 	.word	0x20000028
 800479c:	00000000 	.word	0x00000000

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <pxCurrentTCBConst>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f01e 0f10 	tst.w	lr, #16
 80047b0:	bf08      	it	eq
 80047b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047c4:	f380 8811 	msr	BASEPRI, r0
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f7fe ffd8 	bl	8003784 <vTaskSwitchContext>
 80047d4:	f04f 0000 	mov.w	r0, #0
 80047d8:	f380 8811 	msr	BASEPRI, r0
 80047dc:	bc09      	pop	{r0, r3}
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	6808      	ldr	r0, [r1, #0]
 80047e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e6:	f01e 0f10 	tst.w	lr, #16
 80047ea:	bf08      	it	eq
 80047ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047f0:	f380 8809 	msr	PSP, r0
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst>:
 8004800:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
    }
 8004820:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004822:	f001 fbbd 	bl	8005fa0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004826:	f7fe fef1 	bl	800360c <xTaskIncrementTick>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d006      	beq.n	800483e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004830:	f001 fc14 	bl	800605c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <SysTick_Handler+0x50>)
 8004836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e001      	b.n	8004842 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800483e:	f001 fbf1 	bl	8006024 <SEGGER_SYSVIEW_RecordExitISR>
 8004842:	2300      	movs	r3, #0
 8004844:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f383 8811 	msr	BASEPRI, r3
    }
 800484c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000018 	.word	0x20000018
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
 80048b2:	0000      	.short	0x0000
 80048b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop

080048bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048c2:	f3ef 8305 	mrs	r3, IPSR
 80048c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d914      	bls.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <vPortValidateInterruptPriority+0x70>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <vPortValidateInterruptPriority+0x74>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	7afa      	ldrb	r2, [r7, #11]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20a      	bcs.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
    }
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <vPortValidateInterruptPriority+0x78>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <vPortValidateInterruptPriority+0x7c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d90a      	bls.n	800491e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	603b      	str	r3, [r7, #0]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vPortValidateInterruptPriority+0x60>
    }
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e3f0 	.word	0xe000e3f0
 8004930:	20000218 	.word	0x20000218
 8004934:	e000ed0c 	.word	0xe000ed0c
 8004938:	2000021c 	.word	0x2000021c

0800493c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004948:	f7fe fd90 	bl	800346c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800494c:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <pvPortMalloc+0x1a8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004954:	f000 f934 	bl	8004bc0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004958:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <pvPortMalloc+0x1ac>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 80a7 	bne.w	8004ab4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02d      	beq.n	80049c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800496c:	2208      	movs	r2, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d227      	bcs.n	80049c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004978:	2208      	movs	r2, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d021      	beq.n	80049ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d214      	bcs.n	80049c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f023 0307 	bic.w	r3, r3, #7
 800499e:	3308      	adds	r3, #8
 80049a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <pvPortMalloc+0x92>
        __asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	617b      	str	r3, [r7, #20]
    }
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049c6:	e002      	b.n	80049ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e000      	b.n	80049d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d06e      	beq.n	8004ab4 <pvPortMalloc+0x178>
 80049d6:	4b45      	ldr	r3, [pc, #276]	; (8004aec <pvPortMalloc+0x1b0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d869      	bhi.n	8004ab4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <pvPortMalloc+0x1b4>)
 80049e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049e4:	4b42      	ldr	r3, [pc, #264]	; (8004af0 <pvPortMalloc+0x1b4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ea:	e004      	b.n	80049f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d903      	bls.n	8004a08 <pvPortMalloc+0xcc>
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f1      	bne.n	80049ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a08:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <pvPortMalloc+0x1a8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d050      	beq.n	8004ab4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2208      	movs	r2, #8
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d91f      	bls.n	8004a74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <pvPortMalloc+0x120>
        __asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	613b      	str	r3, [r7, #16]
    }
 8004a58:	bf00      	nop
 8004a5a:	e7fe      	b.n	8004a5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a6e:	69b8      	ldr	r0, [r7, #24]
 8004a70:	f000 f908 	bl	8004c84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <pvPortMalloc+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d203      	bcs.n	8004a96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <pvPortMalloc+0x1b8>)
 8004a94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <pvPortMalloc+0x1ac>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <pvPortMalloc+0x1bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <pvPortMalloc+0x1bc>)
 8004ab2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ab4:	f7fe fce8 	bl	8003488 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <pvPortMalloc+0x19c>
        __asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60fb      	str	r3, [r7, #12]
    }
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3728      	adds	r7, #40	; 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20012e28 	.word	0x20012e28
 8004ae8:	20012e3c 	.word	0x20012e3c
 8004aec:	20012e2c 	.word	0x20012e2c
 8004af0:	20012e20 	.word	0x20012e20
 8004af4:	20012e30 	.word	0x20012e30
 8004af8:	20012e34 	.word	0x20012e34

08004afc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d04d      	beq.n	8004baa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	425b      	negs	r3, r3
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <vPortFree+0xb8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <vPortFree+0x44>
        __asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	60fb      	str	r3, [r7, #12]
    }
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <vPortFree+0x62>
        __asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60bb      	str	r3, [r7, #8]
    }
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <vPortFree+0xb8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01e      	beq.n	8004baa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11a      	bne.n	8004baa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <vPortFree+0xb8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	401a      	ands	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b84:	f7fe fc72 	bl	800346c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <vPortFree+0xbc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <vPortFree+0xbc>)
 8004b94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b96:	6938      	ldr	r0, [r7, #16]
 8004b98:	f000 f874 	bl	8004c84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b9c:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <vPortFree+0xc0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	4a06      	ldr	r2, [pc, #24]	; (8004bbc <vPortFree+0xc0>)
 8004ba4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ba6:	f7fe fc6f 	bl	8003488 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004baa:	bf00      	nop
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20012e3c 	.word	0x20012e3c
 8004bb8:	20012e2c 	.word	0x20012e2c
 8004bbc:	20012e38 	.word	0x20012e38

08004bc0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bc6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004bca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <prvHeapInit+0xac>)
 8004bce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3307      	adds	r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0307 	bic.w	r3, r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <prvHeapInit+0xac>)
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <prvHeapInit+0xb0>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <prvHeapInit+0xb0>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0307 	bic.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <prvHeapInit+0xb4>)
 8004c20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <prvHeapInit+0xb4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <prvHeapInit+0xb4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <prvHeapInit+0xb4>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <prvHeapInit+0xb8>)
 8004c4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <prvHeapInit+0xbc>)
 8004c56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <prvHeapInit+0xc0>)
 8004c5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000220 	.word	0x20000220
 8004c70:	20012e20 	.word	0x20012e20
 8004c74:	20012e28 	.word	0x20012e28
 8004c78:	20012e30 	.word	0x20012e30
 8004c7c:	20012e2c 	.word	0x20012e2c
 8004c80:	20012e3c 	.word	0x20012e3c

08004c84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c8c:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <prvInsertBlockIntoFreeList+0xac>)
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e002      	b.n	8004c98 <prvInsertBlockIntoFreeList+0x14>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d8f7      	bhi.n	8004c92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d108      	bne.n	8004cc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	441a      	add	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d118      	bne.n	8004d0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d00d      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e008      	b.n	8004d14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <prvInsertBlockIntoFreeList+0xb0>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e003      	b.n	8004d14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d002      	beq.n	8004d22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20012e20 	.word	0x20012e20
 8004d34:	20012e28 	.word	0x20012e28

08004d38 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d3e:	4b26      	ldr	r3, [pc, #152]	; (8004dd8 <_DoInit+0xa0>)
 8004d40:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d42:	22a8      	movs	r2, #168	; 0xa8
 8004d44:	2100      	movs	r1, #0
 8004d46:	6838      	ldr	r0, [r7, #0]
 8004d48:	f001 fdaa 	bl	80068a0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2203      	movs	r2, #3
 8004d56:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <_DoInit+0xa4>)
 8004d5c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <_DoInit+0xa8>)
 8004d62:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d6a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <_DoInit+0xa4>)
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <_DoInit+0xac>)
 8004d88:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004da2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	e00c      	b.n	8004dc6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f1c3 030f 	rsb	r3, r3, #15
 8004db2:	4a0d      	ldr	r2, [pc, #52]	; (8004de8 <_DoInit+0xb0>)
 8004db4:	5cd1      	ldrb	r1, [r2, r3]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	460a      	mov	r2, r1
 8004dbe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b0f      	cmp	r3, #15
 8004dca:	d9ef      	bls.n	8004dac <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dcc:	f3bf 8f5f 	dmb	sy
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20012e40 	.word	0x20012e40
 8004ddc:	080068f8 	.word	0x080068f8
 8004de0:	20012ee8 	.word	0x20012ee8
 8004de4:	200132e8 	.word	0x200132e8
 8004de8:	080069d0 	.word	0x080069d0

08004dec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08c      	sub	sp, #48	; 0x30
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004df8:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dfa:	623b      	str	r3, [r7, #32]
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e06:	f7ff ff97 	bl	8004d38 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	4413      	add	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	3360      	adds	r3, #96	; 0x60
 8004e16:	4a37      	ldr	r2, [pc, #220]	; (8004ef4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d92b      	bls.n	8004e90 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bf28      	it	cs
 8004e4a:	4613      	movcs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	4413      	add	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	6939      	ldr	r1, [r7, #16]
 8004e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e5e:	f001 fd11 	bl	8006884 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4413      	add	r3, r2
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d101      	bne.n	8004e90 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	bf28      	it	cs
 8004ea0:	4613      	movcs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d019      	beq.n	8004ede <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	4413      	add	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	6939      	ldr	r1, [r7, #16]
 8004eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eba:	f001 fce3 	bl	8006884 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4413      	add	r3, r2
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3730      	adds	r7, #48	; 0x30
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20012e40 	.word	0x20012e40

08004ef8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f06:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f14:	f7ff ff10 	bl	8004d38 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f18:	f3ef 8311 	mrs	r3, BASEPRI
 8004f1c:	f04f 0120 	mov.w	r1, #32
 8004f20:	f381 8811 	msr	BASEPRI, r1
 8004f24:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f26:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f28:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f2e:	6939      	ldr	r1, [r7, #16]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	4613      	mov	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	440b      	add	r3, r1
 8004f3e:	3304      	adds	r3, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	dbeb      	blt.n	8004f2e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f56:	e000      	b.n	8004f5a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f58:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	da3f      	bge.n	8004fe4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f64:	6939      	ldr	r1, [r7, #16]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	440b      	add	r3, r1
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f78:	6939      	ldr	r1, [r7, #16]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	4613      	mov	r3, r2
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	4413      	add	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	440b      	add	r3, r1
 8004f88:	3304      	adds	r3, #4
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	4613      	mov	r3, r2
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	440b      	add	r3, r1
 8004f9c:	3320      	adds	r3, #32
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004fa2:	6939      	ldr	r1, [r7, #16]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	440b      	add	r3, r1
 8004fb0:	3328      	adds	r3, #40	; 0x28
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fb6:	6939      	ldr	r1, [r7, #16]
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3324      	adds	r3, #36	; 0x24
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004fca:	6939      	ldr	r1, [r7, #16]
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	440b      	add	r3, r1
 8004fd8:	332c      	adds	r3, #44	; 0x2c
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fde:	f3bf 8f5f 	dmb	sy
 8004fe2:	e002      	b.n	8004fea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20012e40 	.word	0x20012e40

08005000 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800501c:	f7ff fe8c 	bl	8004d38 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005022:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d82c      	bhi.n	8005084 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800502a:	f3ef 8311 	mrs	r3, BASEPRI
 800502e:	f04f 0120 	mov.w	r1, #32
 8005032:	f381 8811 	msr	BASEPRI, r1
 8005036:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	3360      	adds	r3, #96	; 0x60
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00e      	beq.n	800506e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2200      	movs	r2, #0
 800506c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005072:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005074:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	e002      	b.n	800508a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20012e40 	.word	0x20012e40

08005098 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00f      	beq.n	80050ce <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80050ae:	e002      	b.n	80050b6 <_EncodeStr+0x1e>
      Len++;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	3301      	adds	r3, #1
 80050b4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f6      	bne.n	80050b0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d901      	bls.n	80050ce <_EncodeStr+0x36>
      Len = Limit;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2bfe      	cmp	r3, #254	; 0xfe
 80050d2:	d806      	bhi.n	80050e2 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	60fa      	str	r2, [r7, #12]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	e011      	b.n	8005106 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	60fa      	str	r2, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	60fa      	str	r2, [r7, #12]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	0a19      	lsrs	r1, r3, #8
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	60fa      	str	r2, [r7, #12]
 8005102:	b2ca      	uxtb	r2, r1
 8005104:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800510a:	e00a      	b.n	8005122 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	1c53      	adds	r3, r2, #1
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1c59      	adds	r1, r3, #1
 8005116:	60f9      	str	r1, [r7, #12]
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	701a      	strb	r2, [r3, #0]
    n++;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d3f0      	bcc.n	800510c <_EncodeStr+0x74>
  }
  return pPayload;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3307      	adds	r3, #7
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005156:	4b35      	ldr	r3, [pc, #212]	; (800522c <_HandleIncomingPacket+0xdc>)
 8005158:	7e1b      	ldrb	r3, [r3, #24]
 800515a:	4618      	mov	r0, r3
 800515c:	1cfb      	adds	r3, r7, #3
 800515e:	2201      	movs	r2, #1
 8005160:	4619      	mov	r1, r3
 8005162:	f7ff fe43 	bl	8004dec <SEGGER_RTT_ReadNoLock>
 8005166:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d052      	beq.n	8005214 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d031      	beq.n	80051d8 <_HandleIncomingPacket+0x88>
 8005174:	2b80      	cmp	r3, #128	; 0x80
 8005176:	dc40      	bgt.n	80051fa <_HandleIncomingPacket+0xaa>
 8005178:	2b07      	cmp	r3, #7
 800517a:	dc15      	bgt.n	80051a8 <_HandleIncomingPacket+0x58>
 800517c:	2b00      	cmp	r3, #0
 800517e:	dd3c      	ble.n	80051fa <_HandleIncomingPacket+0xaa>
 8005180:	3b01      	subs	r3, #1
 8005182:	2b06      	cmp	r3, #6
 8005184:	d839      	bhi.n	80051fa <_HandleIncomingPacket+0xaa>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <_HandleIncomingPacket+0x3c>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051af 	.word	0x080051af
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051bb 	.word	0x080051bb
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c7 	.word	0x080051c7
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	2b7f      	cmp	r3, #127	; 0x7f
 80051aa:	d035      	beq.n	8005218 <_HandleIncomingPacket+0xc8>
 80051ac:	e025      	b.n	80051fa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80051ae:	f000 fc2f 	bl	8005a10 <SEGGER_SYSVIEW_Start>
      break;
 80051b2:	e036      	b.n	8005222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80051b4:	f000 fce6 	bl	8005b84 <SEGGER_SYSVIEW_Stop>
      break;
 80051b8:	e033      	b.n	8005222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80051ba:	f000 febf 	bl	8005f3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80051be:	e030      	b.n	8005222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80051c0:	f000 fe84 	bl	8005ecc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80051c4:	e02d      	b.n	8005222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80051c6:	f000 fd03 	bl	8005bd0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80051ca:	e02a      	b.n	8005222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80051cc:	f001 f952 	bl	8006474 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80051d0:	e027      	b.n	8005222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80051d2:	f001 f931 	bl	8006438 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80051d6:	e024      	b.n	8005222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051d8:	4b14      	ldr	r3, [pc, #80]	; (800522c <_HandleIncomingPacket+0xdc>)
 80051da:	7e1b      	ldrb	r3, [r3, #24]
 80051dc:	4618      	mov	r0, r3
 80051de:	1cfb      	adds	r3, r7, #3
 80051e0:	2201      	movs	r2, #1
 80051e2:	4619      	mov	r1, r3
 80051e4:	f7ff fe02 	bl	8004dec <SEGGER_RTT_ReadNoLock>
 80051e8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 f8a0 	bl	8006338 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80051f8:	e010      	b.n	800521c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da0e      	bge.n	8005220 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <_HandleIncomingPacket+0xdc>)
 8005204:	7e1b      	ldrb	r3, [r3, #24]
 8005206:	4618      	mov	r0, r3
 8005208:	1cfb      	adds	r3, r7, #3
 800520a:	2201      	movs	r2, #1
 800520c:	4619      	mov	r1, r3
 800520e:	f7ff fded 	bl	8004dec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005212:	e005      	b.n	8005220 <_HandleIncomingPacket+0xd0>
    }
  }
 8005214:	bf00      	nop
 8005216:	e004      	b.n	8005222 <_HandleIncomingPacket+0xd2>
      break;
 8005218:	bf00      	nop
 800521a:	e002      	b.n	8005222 <_HandleIncomingPacket+0xd2>
      break;
 800521c:	bf00      	nop
 800521e:	e000      	b.n	8005222 <_HandleIncomingPacket+0xd2>
      break;
 8005220:	bf00      	nop
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20014300 	.word	0x20014300

08005230 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b08c      	sub	sp, #48	; 0x30
 8005234:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005236:	2301      	movs	r3, #1
 8005238:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005244:	4b31      	ldr	r3, [pc, #196]	; (800530c <_TrySendOverflowPacket+0xdc>)
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
 800524a:	e00b      	b.n	8005264 <_TrySendOverflowPacket+0x34>
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	b2da      	uxtb	r2, r3
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	1c59      	adds	r1, r3, #1
 8005254:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	09db      	lsrs	r3, r3, #7
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	2b7f      	cmp	r3, #127	; 0x7f
 8005268:	d8f0      	bhi.n	800524c <_TrySendOverflowPacket+0x1c>
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800527a:	4b25      	ldr	r3, [pc, #148]	; (8005310 <_TrySendOverflowPacket+0xe0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <_TrySendOverflowPacket+0xdc>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	e00b      	b.n	80052ac <_TrySendOverflowPacket+0x7c>
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	6279      	str	r1, [r7, #36]	; 0x24
 800529e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	09db      	lsrs	r3, r3, #7
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b7f      	cmp	r3, #127	; 0x7f
 80052b0:	d8f0      	bhi.n	8005294 <_TrySendOverflowPacket+0x64>
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	627a      	str	r2, [r7, #36]	; 0x24
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <_TrySendOverflowPacket+0xdc>)
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	4618      	mov	r0, r3
 80052c8:	1d3b      	adds	r3, r7, #4
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	f7fa ff8c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052d8:	4603      	mov	r3, r0
 80052da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052e2:	4a0a      	ldr	r2, [pc, #40]	; (800530c <_TrySendOverflowPacket+0xdc>)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80052e8:	4b08      	ldr	r3, [pc, #32]	; (800530c <_TrySendOverflowPacket+0xdc>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <_TrySendOverflowPacket+0xdc>)
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e004      	b.n	8005300 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <_TrySendOverflowPacket+0xdc>)
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	3301      	adds	r3, #1
 80052fc:	4a03      	ldr	r2, [pc, #12]	; (800530c <_TrySendOverflowPacket+0xdc>)
 80052fe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005300:	693b      	ldr	r3, [r7, #16]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3730      	adds	r7, #48	; 0x30
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20014300 	.word	0x20014300
 8005310:	e0001004 	.word	0xe0001004

08005314 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005320:	4b98      	ldr	r3, [pc, #608]	; (8005584 <_SendPacket+0x270>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d010      	beq.n	800534a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005328:	4b96      	ldr	r3, [pc, #600]	; (8005584 <_SendPacket+0x270>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 812d 	beq.w	800558c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005332:	4b94      	ldr	r3, [pc, #592]	; (8005584 <_SendPacket+0x270>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d109      	bne.n	800534e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800533a:	f7ff ff79 	bl	8005230 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800533e:	4b91      	ldr	r3, [pc, #580]	; (8005584 <_SendPacket+0x270>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	f040 8124 	bne.w	8005590 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005348:	e001      	b.n	800534e <_SendPacket+0x3a>
    goto Send;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <_SendPacket+0x3c>
Send:
 800534e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b1f      	cmp	r3, #31
 8005354:	d809      	bhi.n	800536a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005356:	4b8b      	ldr	r3, [pc, #556]	; (8005584 <_SendPacket+0x270>)
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	f040 8115 	bne.w	8005594 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b17      	cmp	r3, #23
 800536e:	d807      	bhi.n	8005380 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	b2da      	uxtb	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	e0c4      	b.n	800550a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b7f      	cmp	r3, #127	; 0x7f
 800538c:	d912      	bls.n	80053b4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	09da      	lsrs	r2, r3, #7
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3b01      	subs	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	3a01      	subs	r2, #1
 80053a6:	60fa      	str	r2, [r7, #12]
 80053a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	e006      	b.n	80053c2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b7e      	cmp	r3, #126	; 0x7e
 80053c6:	d807      	bhi.n	80053d8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e098      	b.n	800550a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053de:	d212      	bcs.n	8005406 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	09da      	lsrs	r2, r3, #7
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	3a01      	subs	r2, #1
 80053f8:	60fa      	str	r2, [r7, #12]
 80053fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	e081      	b.n	800550a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800540c:	d21d      	bcs.n	800544a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0b9a      	lsrs	r2, r3, #14
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3b01      	subs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	09db      	lsrs	r3, r3, #7
 8005422:	b2db      	uxtb	r3, r3
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	3a01      	subs	r2, #1
 8005428:	60fa      	str	r2, [r7, #12]
 800542a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	3a01      	subs	r2, #1
 800543c:	60fa      	str	r2, [r7, #12]
 800543e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e05f      	b.n	800550a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005450:	d228      	bcs.n	80054a4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0d5a      	lsrs	r2, r3, #21
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b01      	subs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0b9b      	lsrs	r3, r3, #14
 8005466:	b2db      	uxtb	r3, r3
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	3a01      	subs	r2, #1
 800546c:	60fa      	str	r2, [r7, #12]
 800546e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005472:	b2da      	uxtb	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	09db      	lsrs	r3, r3, #7
 800547c:	b2db      	uxtb	r3, r3
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	3a01      	subs	r2, #1
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	3a01      	subs	r2, #1
 8005496:	60fa      	str	r2, [r7, #12]
 8005498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	e032      	b.n	800550a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0f1a      	lsrs	r2, r3, #28
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	0d5b      	lsrs	r3, r3, #21
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	3a01      	subs	r2, #1
 80054be:	60fa      	str	r2, [r7, #12]
 80054c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0b9b      	lsrs	r3, r3, #14
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	3a01      	subs	r2, #1
 80054d4:	60fa      	str	r2, [r7, #12]
 80054d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	09db      	lsrs	r3, r3, #7
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	3a01      	subs	r2, #1
 80054ea:	60fa      	str	r2, [r7, #12]
 80054ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	3a01      	subs	r2, #1
 80054fe:	60fa      	str	r2, [r7, #12]
 8005500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800550a:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <_SendPacket+0x274>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005510:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <_SendPacket+0x270>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	e00b      	b.n	800553c <_SendPacket+0x228>
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	6279      	str	r1, [r7, #36]	; 0x24
 800552e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	09db      	lsrs	r3, r3, #7
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	2b7f      	cmp	r3, #127	; 0x7f
 8005540:	d8f0      	bhi.n	8005524 <_SendPacket+0x210>
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	627a      	str	r2, [r7, #36]	; 0x24
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <_SendPacket+0x270>)
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	4618      	mov	r0, r3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	461a      	mov	r2, r3
 8005560:	68f9      	ldr	r1, [r7, #12]
 8005562:	f7fa fe45 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005566:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800556e:	4a05      	ldr	r2, [pc, #20]	; (8005584 <_SendPacket+0x270>)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	60d3      	str	r3, [r2, #12]
 8005574:	e00f      	b.n	8005596 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005576:	4b03      	ldr	r3, [pc, #12]	; (8005584 <_SendPacket+0x270>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4b01      	ldr	r3, [pc, #4]	; (8005584 <_SendPacket+0x270>)
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e008      	b.n	8005596 <_SendPacket+0x282>
 8005584:	20014300 	.word	0x20014300
 8005588:	e0001004 	.word	0xe0001004
    goto SendDone;
 800558c:	bf00      	nop
 800558e:	e002      	b.n	8005596 <_SendPacket+0x282>
      goto SendDone;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <_SendPacket+0x282>
      goto SendDone;
 8005594:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <_SendPacket+0x2d4>)
 8005598:	7e1b      	ldrb	r3, [r3, #24]
 800559a:	4619      	mov	r1, r3
 800559c:	4a13      	ldr	r2, [pc, #76]	; (80055ec <_SendPacket+0x2d8>)
 800559e:	460b      	mov	r3, r1
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	440b      	add	r3, r1
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	336c      	adds	r3, #108	; 0x6c
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <_SendPacket+0x2d4>)
 80055ae:	7e1b      	ldrb	r3, [r3, #24]
 80055b0:	4618      	mov	r0, r3
 80055b2:	490e      	ldr	r1, [pc, #56]	; (80055ec <_SendPacket+0x2d8>)
 80055b4:	4603      	mov	r3, r0
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	4403      	add	r3, r0
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	3370      	adds	r3, #112	; 0x70
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d00b      	beq.n	80055de <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <_SendPacket+0x2d4>)
 80055c8:	789b      	ldrb	r3, [r3, #2]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <_SendPacket+0x2d4>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055d4:	f7ff fdbc 	bl	8005150 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055d8:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <_SendPacket+0x2d4>)
 80055da:	2200      	movs	r2, #0
 80055dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055de:	bf00      	nop
 80055e0:	3728      	adds	r7, #40	; 0x28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20014300 	.word	0x20014300
 80055ec:	20012e40 	.word	0x20012e40

080055f0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055fe:	2300      	movs	r3, #0
 8005600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005604:	4917      	ldr	r1, [pc, #92]	; (8005664 <SEGGER_SYSVIEW_Init+0x74>)
 8005606:	4818      	ldr	r0, [pc, #96]	; (8005668 <SEGGER_SYSVIEW_Init+0x78>)
 8005608:	f7ff fc76 	bl	8004ef8 <SEGGER_RTT_AllocUpBuffer>
 800560c:	4603      	mov	r3, r0
 800560e:	b2da      	uxtb	r2, r3
 8005610:	4b16      	ldr	r3, [pc, #88]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 8005612:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 8005616:	785a      	ldrb	r2, [r3, #1]
 8005618:	4b14      	ldr	r3, [pc, #80]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 800561a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800561c:	4b13      	ldr	r3, [pc, #76]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 800561e:	7e1b      	ldrb	r3, [r3, #24]
 8005620:	4618      	mov	r0, r3
 8005622:	2300      	movs	r3, #0
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	2308      	movs	r3, #8
 8005628:	4a11      	ldr	r2, [pc, #68]	; (8005670 <SEGGER_SYSVIEW_Init+0x80>)
 800562a:	490f      	ldr	r1, [pc, #60]	; (8005668 <SEGGER_SYSVIEW_Init+0x78>)
 800562c:	f7ff fce8 	bl	8005000 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005630:	4b0e      	ldr	r3, [pc, #56]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 8005632:	2200      	movs	r2, #0
 8005634:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <SEGGER_SYSVIEW_Init+0x84>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a0c      	ldr	r2, [pc, #48]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 800563c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800563e:	4a0b      	ldr	r2, [pc, #44]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005644:	4a09      	ldr	r2, [pc, #36]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800564a:	4a08      	ldr	r2, [pc, #32]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005650:	4a06      	ldr	r2, [pc, #24]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <SEGGER_SYSVIEW_Init+0x7c>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	200132f8 	.word	0x200132f8
 8005668:	08006904 	.word	0x08006904
 800566c:	20014300 	.word	0x20014300
 8005670:	200142f8 	.word	0x200142f8
 8005674:	e0001004 	.word	0xe0001004

08005678 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005680:	4a04      	ldr	r2, [pc, #16]	; (8005694 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6113      	str	r3, [r2, #16]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20014300 	.word	0x20014300

08005698 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056a0:	f3ef 8311 	mrs	r3, BASEPRI
 80056a4:	f04f 0120 	mov.w	r1, #32
 80056a8:	f381 8811 	msr	BASEPRI, r1
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	4808      	ldr	r0, [pc, #32]	; (80056d0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80056b0:	f7ff fd42 	bl	8005138 <_PreparePacket>
 80056b4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	68b8      	ldr	r0, [r7, #8]
 80056bc:	f7ff fe2a 	bl	8005314 <_SendPacket>
  RECORD_END();
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f383 8811 	msr	BASEPRI, r3
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20014330 	.word	0x20014330

080056d4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056de:	f3ef 8311 	mrs	r3, BASEPRI
 80056e2:	f04f 0120 	mov.w	r1, #32
 80056e6:	f381 8811 	msr	BASEPRI, r1
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	4816      	ldr	r0, [pc, #88]	; (8005748 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80056ee:	f7ff fd23 	bl	8005138 <_PreparePacket>
 80056f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	e00b      	b.n	800571a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	61f9      	str	r1, [r7, #28]
 800570c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	09db      	lsrs	r3, r3, #7
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b7f      	cmp	r3, #127	; 0x7f
 800571e:	d8f0      	bhi.n	8005702 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	61fa      	str	r2, [r7, #28]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	6938      	ldr	r0, [r7, #16]
 8005736:	f7ff fded 	bl	8005314 <_SendPacket>
  RECORD_END();
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f383 8811 	msr	BASEPRI, r3
}
 8005740:	bf00      	nop
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20014330 	.word	0x20014330

0800574c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005758:	f3ef 8311 	mrs	r3, BASEPRI
 800575c:	f04f 0120 	mov.w	r1, #32
 8005760:	f381 8811 	msr	BASEPRI, r1
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	4825      	ldr	r0, [pc, #148]	; (80057fc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005768:	f7ff fce6 	bl	8005138 <_PreparePacket>
 800576c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
 800577a:	e00b      	b.n	8005794 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	b2da      	uxtb	r2, r3
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	2b7f      	cmp	r3, #127	; 0x7f
 8005798:	d8f0      	bhi.n	800577c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	e00b      	b.n	80057cc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	6279      	str	r1, [r7, #36]	; 0x24
 80057be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	09db      	lsrs	r3, r3, #7
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	2b7f      	cmp	r3, #127	; 0x7f
 80057d0:	d8f0      	bhi.n	80057b4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	627a      	str	r2, [r7, #36]	; 0x24
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6979      	ldr	r1, [r7, #20]
 80057e6:	69b8      	ldr	r0, [r7, #24]
 80057e8:	f7ff fd94 	bl	8005314 <_SendPacket>
  RECORD_END();
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f383 8811 	msr	BASEPRI, r3
}
 80057f2:	bf00      	nop
 80057f4:	3730      	adds	r7, #48	; 0x30
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20014330 	.word	0x20014330

08005800 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	; 0x38
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800580e:	f3ef 8311 	mrs	r3, BASEPRI
 8005812:	f04f 0120 	mov.w	r1, #32
 8005816:	f381 8811 	msr	BASEPRI, r1
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	4832      	ldr	r0, [pc, #200]	; (80058e8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800581e:	f7ff fc8b 	bl	8005138 <_PreparePacket>
 8005822:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
 8005830:	e00b      	b.n	800584a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	b2da      	uxtb	r2, r3
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	1c59      	adds	r1, r3, #1
 800583a:	6379      	str	r1, [r7, #52]	; 0x34
 800583c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	09db      	lsrs	r3, r3, #7
 8005848:	633b      	str	r3, [r7, #48]	; 0x30
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b7f      	cmp	r3, #127	; 0x7f
 800584e:	d8f0      	bhi.n	8005832 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	637a      	str	r2, [r7, #52]	; 0x34
 8005856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
 8005868:	e00b      	b.n	8005882 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	b2da      	uxtb	r2, r3
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	2b7f      	cmp	r3, #127	; 0x7f
 8005886:	d8f0      	bhi.n	800586a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800588e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	e00b      	b.n	80058ba <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	6279      	str	r1, [r7, #36]	; 0x24
 80058ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	09db      	lsrs	r3, r3, #7
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	2b7f      	cmp	r3, #127	; 0x7f
 80058be:	d8f0      	bhi.n	80058a2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	627a      	str	r2, [r7, #36]	; 0x24
 80058c6:	6a3a      	ldr	r2, [r7, #32]
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	6979      	ldr	r1, [r7, #20]
 80058d4:	69b8      	ldr	r0, [r7, #24]
 80058d6:	f7ff fd1d 	bl	8005314 <_SendPacket>
  RECORD_END();
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f383 8811 	msr	BASEPRI, r3
}
 80058e0:	bf00      	nop
 80058e2:	3738      	adds	r7, #56	; 0x38
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20014330 	.word	0x20014330

080058ec <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b090      	sub	sp, #64	; 0x40
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80058fa:	f3ef 8311 	mrs	r3, BASEPRI
 80058fe:	f04f 0120 	mov.w	r1, #32
 8005902:	f381 8811 	msr	BASEPRI, r1
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	4840      	ldr	r0, [pc, #256]	; (8005a0c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800590a:	f7ff fc15 	bl	8005138 <_PreparePacket>
 800590e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
 800591c:	e00b      	b.n	8005936 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	b2da      	uxtb	r2, r3
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005928:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	09db      	lsrs	r3, r3, #7
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b7f      	cmp	r3, #127	; 0x7f
 800593a:	d8f0      	bhi.n	800591e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
 8005954:	e00b      	b.n	800596e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	1c59      	adds	r1, r3, #1
 800595e:	6379      	str	r1, [r7, #52]	; 0x34
 8005960:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	09db      	lsrs	r3, r3, #7
 800596c:	633b      	str	r3, [r7, #48]	; 0x30
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	2b7f      	cmp	r3, #127	; 0x7f
 8005972:	d8f0      	bhi.n	8005956 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	637a      	str	r2, [r7, #52]	; 0x34
 800597a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
 800598c:	e00b      	b.n	80059a6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	b2da      	uxtb	r2, r3
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005998:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	09db      	lsrs	r3, r3, #7
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	2b7f      	cmp	r3, #127	; 0x7f
 80059aa:	d8f0      	bhi.n	800598e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
 80059c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	e00b      	b.n	80059de <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	6279      	str	r1, [r7, #36]	; 0x24
 80059d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	09db      	lsrs	r3, r3, #7
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	2b7f      	cmp	r3, #127	; 0x7f
 80059e2:	d8f0      	bhi.n	80059c6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ea:	6a3a      	ldr	r2, [r7, #32]
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	69b8      	ldr	r0, [r7, #24]
 80059fa:	f7ff fc8b 	bl	8005314 <_SendPacket>
  RECORD_END();
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	f383 8811 	msr	BASEPRI, r3
}
 8005a04:	bf00      	nop
 8005a06:	3740      	adds	r7, #64	; 0x40
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20014330 	.word	0x20014330

08005a10 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005a16:	4b58      	ldr	r3, [pc, #352]	; (8005b78 <SEGGER_SYSVIEW_Start+0x168>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a20:	f04f 0120 	mov.w	r1, #32
 8005a24:	f381 8811 	msr	BASEPRI, r1
 8005a28:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005a2a:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <SEGGER_SYSVIEW_Start+0x168>)
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	220a      	movs	r2, #10
 8005a30:	4952      	ldr	r1, [pc, #328]	; (8005b7c <SEGGER_SYSVIEW_Start+0x16c>)
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fa fbdc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005a3e:	200a      	movs	r0, #10
 8005a40:	f7ff fe2a 	bl	8005698 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a44:	f3ef 8311 	mrs	r3, BASEPRI
 8005a48:	f04f 0120 	mov.w	r1, #32
 8005a4c:	f381 8811 	msr	BASEPRI, r1
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	484b      	ldr	r0, [pc, #300]	; (8005b80 <SEGGER_SYSVIEW_Start+0x170>)
 8005a54:	f7ff fb70 	bl	8005138 <_PreparePacket>
 8005a58:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a62:	4b45      	ldr	r3, [pc, #276]	; (8005b78 <SEGGER_SYSVIEW_Start+0x168>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a68:	e00b      	b.n	8005a82 <SEGGER_SYSVIEW_Start+0x72>
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	09db      	lsrs	r3, r3, #7
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	2b7f      	cmp	r3, #127	; 0x7f
 8005a86:	d8f0      	bhi.n	8005a6a <SEGGER_SYSVIEW_Start+0x5a>
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <SEGGER_SYSVIEW_Start+0x168>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	e00b      	b.n	8005abc <SEGGER_SYSVIEW_Start+0xac>
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	6279      	str	r1, [r7, #36]	; 0x24
 8005aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	09db      	lsrs	r3, r3, #7
 8005aba:	623b      	str	r3, [r7, #32]
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac0:	d8f0      	bhi.n	8005aa4 <SEGGER_SYSVIEW_Start+0x94>
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac8:	6a3a      	ldr	r2, [r7, #32]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <SEGGER_SYSVIEW_Start+0x168>)
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e00b      	b.n	8005af6 <SEGGER_SYSVIEW_Start+0xe6>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	61f9      	str	r1, [r7, #28]
 8005ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b7f      	cmp	r3, #127	; 0x7f
 8005afa:	d8f0      	bhi.n	8005ade <SEGGER_SYSVIEW_Start+0xce>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	61fa      	str	r2, [r7, #28]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e00b      	b.n	8005b2e <SEGGER_SYSVIEW_Start+0x11e>
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1c59      	adds	r1, r3, #1
 8005b1e:	6179      	str	r1, [r7, #20]
 8005b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	09db      	lsrs	r3, r3, #7
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b7f      	cmp	r3, #127	; 0x7f
 8005b32:	d8f0      	bhi.n	8005b16 <SEGGER_SYSVIEW_Start+0x106>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	617a      	str	r2, [r7, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b44:	2218      	movs	r2, #24
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fbe3 	bl	8005314 <_SendPacket>
      RECORD_END();
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <SEGGER_SYSVIEW_Start+0x168>)
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <SEGGER_SYSVIEW_Start+0x168>)
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005b62:	f000 f9eb 	bl	8005f3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005b66:	f000 f9b1 	bl	8005ecc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005b6a:	f000 fc83 	bl	8006474 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005b6e:	bf00      	nop
 8005b70:	3730      	adds	r7, #48	; 0x30
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20014300 	.word	0x20014300
 8005b7c:	080069e4 	.word	0x080069e4
 8005b80:	20014330 	.word	0x20014330

08005b84 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8e:	f04f 0120 	mov.w	r1, #32
 8005b92:	f381 8811 	msr	BASEPRI, r1
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	480b      	ldr	r0, [pc, #44]	; (8005bc8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005b9a:	f7ff facd 	bl	8005138 <_PreparePacket>
 8005b9e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <SEGGER_SYSVIEW_Stop+0x48>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ba8:	220b      	movs	r2, #11
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	f7ff fbb1 	bl	8005314 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <SEGGER_SYSVIEW_Stop+0x48>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20014330 	.word	0x20014330
 8005bcc:	20014300 	.word	0x20014300

08005bd0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08c      	sub	sp, #48	; 0x30
 8005bd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bda:	f04f 0120 	mov.w	r1, #32
 8005bde:	f381 8811 	msr	BASEPRI, r1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	4845      	ldr	r0, [pc, #276]	; (8005cfc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005be6:	f7ff faa7 	bl	8005138 <_PreparePacket>
 8005bea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf4:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bfa:	e00b      	b.n	8005c14 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	09db      	lsrs	r3, r3, #7
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b7f      	cmp	r3, #127	; 0x7f
 8005c18:	d8f0      	bhi.n	8005bfc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	4b34      	ldr	r3, [pc, #208]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	e00b      	b.n	8005c4e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b7f      	cmp	r3, #127	; 0x7f
 8005c52:	d8f0      	bhi.n	8005c36 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	627a      	str	r2, [r7, #36]	; 0x24
 8005c5a:	6a3a      	ldr	r2, [r7, #32]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e00b      	b.n	8005c88 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	1c59      	adds	r1, r3, #1
 8005c78:	61f9      	str	r1, [r7, #28]
 8005c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	09db      	lsrs	r3, r3, #7
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8c:	d8f0      	bhi.n	8005c70 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	61fa      	str	r2, [r7, #28]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	e00b      	b.n	8005cc0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	6179      	str	r1, [r7, #20]
 8005cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	09db      	lsrs	r3, r3, #7
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc4:	d8f0      	bhi.n	8005ca8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	617a      	str	r2, [r7, #20]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005cd6:	2218      	movs	r2, #24
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	f7ff fb1a 	bl	8005314 <_SendPacket>
  RECORD_END();
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	4798      	blx	r3
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3730      	adds	r7, #48	; 0x30
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20014330 	.word	0x20014330
 8005d00:	20014300 	.word	0x20014300

08005d04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b092      	sub	sp, #72	; 0x48
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d10:	f04f 0120 	mov.w	r1, #32
 8005d14:	f381 8811 	msr	BASEPRI, r1
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	486a      	ldr	r0, [pc, #424]	; (8005ec4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005d1c:	f7ff fa0c 	bl	8005138 <_PreparePacket>
 8005d20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b66      	ldr	r3, [pc, #408]	; (8005ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	643b      	str	r3, [r7, #64]	; 0x40
 8005d36:	e00b      	b.n	8005d50 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	6479      	str	r1, [r7, #68]	; 0x44
 8005d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4c:	09db      	lsrs	r3, r3, #7
 8005d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d52:	2b7f      	cmp	r3, #127	; 0x7f
 8005d54:	d8f0      	bhi.n	8005d38 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d70:	e00b      	b.n	8005d8a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d78:	1c59      	adds	r1, r3, #1
 8005d7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	09db      	lsrs	r3, r3, #7
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d8e:	d8f0      	bhi.n	8005d72 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff f975 	bl	8005098 <_EncodeStr>
 8005dae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005db0:	2209      	movs	r2, #9
 8005db2:	68f9      	ldr	r1, [r7, #12]
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f7ff faad 	bl	8005314 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b40      	ldr	r3, [pc, #256]	; (8005ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dce:	e00b      	b.n	8005de8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	6379      	str	r1, [r7, #52]	; 0x34
 8005dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	09db      	lsrs	r3, r3, #7
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	2b7f      	cmp	r3, #127	; 0x7f
 8005dec:	d8f0      	bhi.n	8005dd0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	637a      	str	r2, [r7, #52]	; 0x34
 8005df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e08:	e00b      	b.n	8005e22 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	2b7f      	cmp	r3, #127	; 0x7f
 8005e26:	d8f0      	bhi.n	8005e0a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	e00b      	b.n	8005e5c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	09db      	lsrs	r3, r3, #7
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e60:	d8f0      	bhi.n	8005e44 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	627a      	str	r2, [r7, #36]	; 0x24
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e00b      	b.n	8005e94 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	61f9      	str	r1, [r7, #28]
 8005e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	09db      	lsrs	r3, r3, #7
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b7f      	cmp	r3, #127	; 0x7f
 8005e98:	d8f0      	bhi.n	8005e7c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	61fa      	str	r2, [r7, #28]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005eaa:	2215      	movs	r2, #21
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	6938      	ldr	r0, [r7, #16]
 8005eb0:	f7ff fa30 	bl	8005314 <_SendPacket>
  RECORD_END();
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f383 8811 	msr	BASEPRI, r3
}
 8005eba:	bf00      	nop
 8005ebc:	3748      	adds	r7, #72	; 0x48
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20014330 	.word	0x20014330
 8005ec8:	20014300 	.word	0x20014300

08005ecc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005ee2:	4b03      	ldr	r3, [pc, #12]	; (8005ef0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4798      	blx	r3
  }
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20014300 	.word	0x20014300

08005ef4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005efc:	f3ef 8311 	mrs	r3, BASEPRI
 8005f00:	f04f 0120 	mov.w	r1, #32
 8005f04:	f381 8811 	msr	BASEPRI, r1
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	480b      	ldr	r0, [pc, #44]	; (8005f38 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005f0c:	f7ff f914 	bl	8005138 <_PreparePacket>
 8005f10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f12:	2280      	movs	r2, #128	; 0x80
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f7ff f8be 	bl	8005098 <_EncodeStr>
 8005f1c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005f1e:	220e      	movs	r2, #14
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	6938      	ldr	r0, [r7, #16]
 8005f24:	f7ff f9f6 	bl	8005314 <_SendPacket>
  RECORD_END();
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f383 8811 	msr	BASEPRI, r3
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20014330 	.word	0x20014330

08005f3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01a      	beq.n	8005f80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d015      	beq.n	8005f80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4798      	blx	r3
 8005f5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	000a      	movs	r2, r1
 8005f70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f72:	4613      	mov	r3, r2
 8005f74:	461a      	mov	r2, r3
 8005f76:	4621      	mov	r1, r4
 8005f78:	200d      	movs	r0, #13
 8005f7a:	f7ff fbe7 	bl	800574c <SEGGER_SYSVIEW_RecordU32x2>
 8005f7e:	e006      	b.n	8005f8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	200c      	movs	r0, #12
 8005f88:	f7ff fba4 	bl	80056d4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20014300 	.word	0x20014300
 8005f9c:	e0001004 	.word	0xe0001004

08005fa0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	f04f 0120 	mov.w	r1, #32
 8005fae:	f381 8811 	msr	BASEPRI, r1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	4819      	ldr	r0, [pc, #100]	; (800601c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005fb6:	f7ff f8bf 	bl	8005138 <_PreparePacket>
 8005fba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	e00b      	b.n	8005fec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	6179      	str	r1, [r7, #20]
 8005fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	09db      	lsrs	r3, r3, #7
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff0:	d8f0      	bhi.n	8005fd4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	617a      	str	r2, [r7, #20]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006002:	2202      	movs	r2, #2
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f7ff f984 	bl	8005314 <_SendPacket>
  RECORD_END();
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f383 8811 	msr	BASEPRI, r3
}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20014330 	.word	0x20014330
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800602a:	f3ef 8311 	mrs	r3, BASEPRI
 800602e:	f04f 0120 	mov.w	r1, #32
 8006032:	f381 8811 	msr	BASEPRI, r1
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	4807      	ldr	r0, [pc, #28]	; (8006058 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800603a:	f7ff f87d 	bl	8005138 <_PreparePacket>
 800603e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006040:	2203      	movs	r2, #3
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6838      	ldr	r0, [r7, #0]
 8006046:	f7ff f965 	bl	8005314 <_SendPacket>
  RECORD_END();
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f383 8811 	msr	BASEPRI, r3
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20014330 	.word	0x20014330

0800605c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006062:	f3ef 8311 	mrs	r3, BASEPRI
 8006066:	f04f 0120 	mov.w	r1, #32
 800606a:	f381 8811 	msr	BASEPRI, r1
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	4807      	ldr	r0, [pc, #28]	; (8006090 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006072:	f7ff f861 	bl	8005138 <_PreparePacket>
 8006076:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006078:	2212      	movs	r2, #18
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6838      	ldr	r0, [r7, #0]
 800607e:	f7ff f949 	bl	8005314 <_SendPacket>
  RECORD_END();
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f383 8811 	msr	BASEPRI, r3
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20014330 	.word	0x20014330

08006094 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800609a:	f3ef 8311 	mrs	r3, BASEPRI
 800609e:	f04f 0120 	mov.w	r1, #32
 80060a2:	f381 8811 	msr	BASEPRI, r1
 80060a6:	607b      	str	r3, [r7, #4]
 80060a8:	4807      	ldr	r0, [pc, #28]	; (80060c8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80060aa:	f7ff f845 	bl	8005138 <_PreparePacket>
 80060ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80060b0:	2211      	movs	r2, #17
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6838      	ldr	r0, [r7, #0]
 80060b6:	f7ff f92d 	bl	8005314 <_SendPacket>
  RECORD_END();
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f383 8811 	msr	BASEPRI, r3
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20014330 	.word	0x20014330

080060cc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060d4:	f3ef 8311 	mrs	r3, BASEPRI
 80060d8:	f04f 0120 	mov.w	r1, #32
 80060dc:	f381 8811 	msr	BASEPRI, r1
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	4819      	ldr	r0, [pc, #100]	; (8006148 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80060e4:	f7ff f828 	bl	8005138 <_PreparePacket>
 80060e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ee:	4b17      	ldr	r3, [pc, #92]	; (800614c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	e00b      	b.n	800611a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1c59      	adds	r1, r3, #1
 800610a:	61f9      	str	r1, [r7, #28]
 800610c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	09db      	lsrs	r3, r3, #7
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b7f      	cmp	r3, #127	; 0x7f
 800611e:	d8f0      	bhi.n	8006102 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	61fa      	str	r2, [r7, #28]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006130:	2208      	movs	r2, #8
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6938      	ldr	r0, [r7, #16]
 8006136:	f7ff f8ed 	bl	8005314 <_SendPacket>
  RECORD_END();
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f383 8811 	msr	BASEPRI, r3
}
 8006140:	bf00      	nop
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20014330 	.word	0x20014330
 800614c:	20014300 	.word	0x20014300

08006150 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006158:	f3ef 8311 	mrs	r3, BASEPRI
 800615c:	f04f 0120 	mov.w	r1, #32
 8006160:	f381 8811 	msr	BASEPRI, r1
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	4819      	ldr	r0, [pc, #100]	; (80061cc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006168:	f7fe ffe6 	bl	8005138 <_PreparePacket>
 800616c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006172:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e00b      	b.n	800619e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	61f9      	str	r1, [r7, #28]
 8006190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	09db      	lsrs	r3, r3, #7
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b7f      	cmp	r3, #127	; 0x7f
 80061a2:	d8f0      	bhi.n	8006186 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	61fa      	str	r2, [r7, #28]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80061b4:	2204      	movs	r2, #4
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	6938      	ldr	r0, [r7, #16]
 80061ba:	f7ff f8ab 	bl	8005314 <_SendPacket>
  RECORD_END();
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f383 8811 	msr	BASEPRI, r3
}
 80061c4:	bf00      	nop
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20014330 	.word	0x20014330
 80061d0:	20014300 	.word	0x20014300

080061d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061dc:	f3ef 8311 	mrs	r3, BASEPRI
 80061e0:	f04f 0120 	mov.w	r1, #32
 80061e4:	f381 8811 	msr	BASEPRI, r1
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	4819      	ldr	r0, [pc, #100]	; (8006250 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80061ec:	f7fe ffa4 	bl	8005138 <_PreparePacket>
 80061f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	e00b      	b.n	8006222 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	61f9      	str	r1, [r7, #28]
 8006214:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	09db      	lsrs	r3, r3, #7
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b7f      	cmp	r3, #127	; 0x7f
 8006226:	d8f0      	bhi.n	800620a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	61fa      	str	r2, [r7, #28]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006238:	2206      	movs	r2, #6
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	6938      	ldr	r0, [r7, #16]
 800623e:	f7ff f869 	bl	8005314 <_SendPacket>
  RECORD_END();
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f383 8811 	msr	BASEPRI, r3
}
 8006248:	bf00      	nop
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20014330 	.word	0x20014330
 8006254:	20014300 	.word	0x20014300

08006258 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006262:	f3ef 8311 	mrs	r3, BASEPRI
 8006266:	f04f 0120 	mov.w	r1, #32
 800626a:	f381 8811 	msr	BASEPRI, r1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	4827      	ldr	r0, [pc, #156]	; (8006310 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006272:	f7fe ff61 	bl	8005138 <_PreparePacket>
 8006276:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800627c:	4b25      	ldr	r3, [pc, #148]	; (8006314 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	e00b      	b.n	80062a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	6279      	str	r1, [r7, #36]	; 0x24
 800629a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	09db      	lsrs	r3, r3, #7
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	2b7f      	cmp	r3, #127	; 0x7f
 80062ac:	d8f0      	bhi.n	8006290 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	627a      	str	r2, [r7, #36]	; 0x24
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	e00b      	b.n	80062e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	61f9      	str	r1, [r7, #28]
 80062d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b7f      	cmp	r3, #127	; 0x7f
 80062e4:	d8f0      	bhi.n	80062c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	61fa      	str	r2, [r7, #28]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80062f6:	2207      	movs	r2, #7
 80062f8:	68f9      	ldr	r1, [r7, #12]
 80062fa:	6938      	ldr	r0, [r7, #16]
 80062fc:	f7ff f80a 	bl	8005314 <_SendPacket>
  RECORD_END();
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f383 8811 	msr	BASEPRI, r3
}
 8006306:	bf00      	nop
 8006308:	3728      	adds	r7, #40	; 0x28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20014330 	.word	0x20014330
 8006314:	20014300 	.word	0x20014300

08006318 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006320:	4b04      	ldr	r3, [pc, #16]	; (8006334 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	1ad3      	subs	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20014300 	.word	0x20014300

08006338 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006342:	4b3b      	ldr	r3, [pc, #236]	; (8006430 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d06d      	beq.n	8006426 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800634a:	4b39      	ldr	r3, [pc, #228]	; (8006430 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006350:	2300      	movs	r3, #0
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
 8006354:	e008      	b.n	8006368 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	3301      	adds	r3, #1
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	429a      	cmp	r2, r3
 800636e:	d3f2      	bcc.n	8006356 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006370:	e000      	b.n	8006374 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006372:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d055      	beq.n	8006426 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800637a:	f3ef 8311 	mrs	r3, BASEPRI
 800637e:	f04f 0120 	mov.w	r1, #32
 8006382:	f381 8811 	msr	BASEPRI, r1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	482a      	ldr	r0, [pc, #168]	; (8006434 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800638a:	f7fe fed5 	bl	8005138 <_PreparePacket>
 800638e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	623b      	str	r3, [r7, #32]
 800639c:	e00b      	b.n	80063b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	6279      	str	r1, [r7, #36]	; 0x24
 80063a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ba:	d8f0      	bhi.n	800639e <SEGGER_SYSVIEW_SendModule+0x66>
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	627a      	str	r2, [r7, #36]	; 0x24
 80063c2:	6a3a      	ldr	r2, [r7, #32]
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	e00b      	b.n	80063f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	61f9      	str	r1, [r7, #28]
 80063e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b7f      	cmp	r3, #127	; 0x7f
 80063f4:	d8f0      	bhi.n	80063d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	61fa      	str	r2, [r7, #28]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	4619      	mov	r1, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7fe fe42 	bl	8005098 <_EncodeStr>
 8006414:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006416:	2216      	movs	r2, #22
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f7fe ff7a 	bl	8005314 <_SendPacket>
      RECORD_END();
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006426:	bf00      	nop
 8006428:	3730      	adds	r7, #48	; 0x30
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20014328 	.word	0x20014328
 8006434:	20014330 	.word	0x20014330

08006438 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f2      	bne.n	800644c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20014328 	.word	0x20014328

08006474 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800647a:	f3ef 8311 	mrs	r3, BASEPRI
 800647e:	f04f 0120 	mov.w	r1, #32
 8006482:	f381 8811 	msr	BASEPRI, r1
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	4817      	ldr	r0, [pc, #92]	; (80064e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800648a:	f7fe fe55 	bl	8005138 <_PreparePacket>
 800648e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	4b14      	ldr	r3, [pc, #80]	; (80064ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e00b      	b.n	80064b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	6179      	str	r1, [r7, #20]
 80064aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b7f      	cmp	r3, #127	; 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	617a      	str	r2, [r7, #20]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80064ce:	221b      	movs	r2, #27
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f7fe ff1e 	bl	8005314 <_SendPacket>
  RECORD_END();
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f383 8811 	msr	BASEPRI, r3
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20014330 	.word	0x20014330
 80064ec:	2001432c 	.word	0x2001432c

080064f0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064f8:	f3ef 8311 	mrs	r3, BASEPRI
 80064fc:	f04f 0120 	mov.w	r1, #32
 8006500:	f381 8811 	msr	BASEPRI, r1
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	4827      	ldr	r0, [pc, #156]	; (80065a4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006508:	f7fe fe16 	bl	8005138 <_PreparePacket>
 800650c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800650e:	2280      	movs	r2, #128	; 0x80
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	6938      	ldr	r0, [r7, #16]
 8006514:	f7fe fdc0 	bl	8005098 <_EncodeStr>
 8006518:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	2301      	movs	r3, #1
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	e00b      	b.n	800653c <SEGGER_SYSVIEW_Warn+0x4c>
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	1c59      	adds	r1, r3, #1
 800652c:	6279      	str	r1, [r7, #36]	; 0x24
 800652e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	09db      	lsrs	r3, r3, #7
 800653a:	623b      	str	r3, [r7, #32]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b7f      	cmp	r3, #127	; 0x7f
 8006540:	d8f0      	bhi.n	8006524 <SEGGER_SYSVIEW_Warn+0x34>
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	627a      	str	r2, [r7, #36]	; 0x24
 8006548:	6a3a      	ldr	r2, [r7, #32]
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	2300      	movs	r3, #0
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e00b      	b.n	8006574 <SEGGER_SYSVIEW_Warn+0x84>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	61f9      	str	r1, [r7, #28]
 8006566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	09db      	lsrs	r3, r3, #7
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b7f      	cmp	r3, #127	; 0x7f
 8006578:	d8f0      	bhi.n	800655c <SEGGER_SYSVIEW_Warn+0x6c>
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	61fa      	str	r2, [r7, #28]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800658a:	221a      	movs	r2, #26
 800658c:	68f9      	ldr	r1, [r7, #12]
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7fe fec0 	bl	8005314 <_SendPacket>
  RECORD_END();
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f383 8811 	msr	BASEPRI, r3
}
 800659a:	bf00      	nop
 800659c:	3728      	adds	r7, #40	; 0x28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20014330 	.word	0x20014330

080065a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80065ac:	4803      	ldr	r0, [pc, #12]	; (80065bc <_cbSendSystemDesc+0x14>)
 80065ae:	f7ff fca1 	bl	8005ef4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80065b2:	4803      	ldr	r0, [pc, #12]	; (80065c0 <_cbSendSystemDesc+0x18>)
 80065b4:	f7ff fc9e 	bl	8005ef4 <SEGGER_SYSVIEW_SendSysDesc>
}
 80065b8:	bf00      	nop
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	0800690c 	.word	0x0800690c
 80065c0:	08006950 	.word	0x08006950

080065c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80065d2:	4a06      	ldr	r2, [pc, #24]	; (80065ec <SEGGER_SYSVIEW_Conf+0x28>)
 80065d4:	f7ff f80c 	bl	80055f0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80065d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80065dc:	f7ff f84c 	bl	8005678 <SEGGER_SYSVIEW_SetRAMBase>
}
 80065e0:	bf00      	nop
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20000018 	.word	0x20000018
 80065e8:	080065a9 	.word	0x080065a9
 80065ec:	080069f0 	.word	0x080069f0

080065f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80065f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	e033      	b.n	8006664 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80065fc:	491e      	ldr	r1, [pc, #120]	; (8006678 <_cbSendTaskList+0x88>)
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	491a      	ldr	r1, [pc, #104]	; (8006678 <_cbSendTaskList+0x88>)
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	3304      	adds	r3, #4
 800661c:	6819      	ldr	r1, [r3, #0]
 800661e:	4c16      	ldr	r4, [pc, #88]	; (8006678 <_cbSendTaskList+0x88>)
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4423      	add	r3, r4
 800662c:	3308      	adds	r3, #8
 800662e:	681c      	ldr	r4, [r3, #0]
 8006630:	4d11      	ldr	r5, [pc, #68]	; (8006678 <_cbSendTaskList+0x88>)
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	442b      	add	r3, r5
 800663e:	330c      	adds	r3, #12
 8006640:	681d      	ldr	r5, [r3, #0]
 8006642:	4e0d      	ldr	r6, [pc, #52]	; (8006678 <_cbSendTaskList+0x88>)
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4433      	add	r3, r6
 8006650:	3310      	adds	r3, #16
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	462b      	mov	r3, r5
 8006658:	4622      	mov	r2, r4
 800665a:	f000 f8bd 	bl	80067d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3301      	adds	r3, #1
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <_cbSendTaskList+0x8c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	d3c6      	bcc.n	80065fc <_cbSendTaskList+0xc>
  }
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006678:	20014414 	.word	0x20014414
 800667c:	200144b4 	.word	0x200144b4

08006680 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006688:	f7fc ffae 	bl	80035e8 <xTaskGetTickCountFromISR>
 800668c:	4603      	mov	r3, r0
 800668e:	2200      	movs	r2, #0
 8006690:	469a      	mov	sl, r3
 8006692:	4693      	mov	fp, r2
 8006694:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	f04f 0a00 	mov.w	sl, #0
 80066a4:	f04f 0b00 	mov.w	fp, #0
 80066a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80066ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80066b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80066b4:	4652      	mov	r2, sl
 80066b6:	465b      	mov	r3, fp
 80066b8:	1a14      	subs	r4, r2, r0
 80066ba:	eb63 0501 	sbc.w	r5, r3, r1
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	00ab      	lsls	r3, r5, #2
 80066c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80066cc:	00a2      	lsls	r2, r4, #2
 80066ce:	4614      	mov	r4, r2
 80066d0:	461d      	mov	r5, r3
 80066d2:	eb14 0800 	adds.w	r8, r4, r0
 80066d6:	eb45 0901 	adc.w	r9, r5, r1
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ee:	4690      	mov	r8, r2
 80066f0:	4699      	mov	r9, r3
 80066f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80066f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80066fa:	4610      	mov	r0, r2
 80066fc:	4619      	mov	r1, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006708 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006716:	2205      	movs	r2, #5
 8006718:	492b      	ldr	r1, [pc, #172]	; (80067c8 <SYSVIEW_AddTask+0xc0>)
 800671a:	68b8      	ldr	r0, [r7, #8]
 800671c:	f000 f8a2 	bl	8006864 <memcmp>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04b      	beq.n	80067be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006726:	4b29      	ldr	r3, [pc, #164]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b07      	cmp	r3, #7
 800672c:	d903      	bls.n	8006736 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800672e:	4828      	ldr	r0, [pc, #160]	; (80067d0 <SYSVIEW_AddTask+0xc8>)
 8006730:	f7ff fede 	bl	80064f0 <SEGGER_SYSVIEW_Warn>
    return;
 8006734:	e044      	b.n	80067c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006736:	4b25      	ldr	r3, [pc, #148]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4926      	ldr	r1, [pc, #152]	; (80067d4 <SYSVIEW_AddTask+0xcc>)
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800674a:	4b20      	ldr	r3, [pc, #128]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4921      	ldr	r1, [pc, #132]	; (80067d4 <SYSVIEW_AddTask+0xcc>)
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	440b      	add	r3, r1
 800675a:	3304      	adds	r3, #4
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006760:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	491b      	ldr	r1, [pc, #108]	; (80067d4 <SYSVIEW_AddTask+0xcc>)
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	3308      	adds	r3, #8
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4916      	ldr	r1, [pc, #88]	; (80067d4 <SYSVIEW_AddTask+0xcc>)
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	330c      	adds	r3, #12
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4910      	ldr	r1, [pc, #64]	; (80067d4 <SYSVIEW_AddTask+0xcc>)
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	3310      	adds	r3, #16
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <SYSVIEW_AddTask+0xc4>)
 80067aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f80e 	bl	80067d8 <SYSVIEW_SendTaskInfo>
 80067bc:	e000      	b.n	80067c0 <SYSVIEW_AddTask+0xb8>
    return;
 80067be:	bf00      	nop

}
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	08006960 	.word	0x08006960
 80067cc:	200144b4 	.word	0x200144b4
 80067d0:	08006968 	.word	0x08006968
 80067d4:	20014414 	.word	0x20014414

080067d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80067e6:	f107 0314 	add.w	r3, r7, #20
 80067ea:	2214      	movs	r2, #20
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f856 	bl	80068a0 <memset>
  TaskInfo.TaskID     = TaskID;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006808:	f107 0314 	add.w	r3, r7, #20
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fa79 	bl	8005d04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006812:	bf00      	nop
 8006814:	3728      	adds	r7, #40	; 0x28
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <__libc_init_array>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4d0d      	ldr	r5, [pc, #52]	; (8006854 <__libc_init_array+0x38>)
 8006820:	4c0d      	ldr	r4, [pc, #52]	; (8006858 <__libc_init_array+0x3c>)
 8006822:	1b64      	subs	r4, r4, r5
 8006824:	10a4      	asrs	r4, r4, #2
 8006826:	2600      	movs	r6, #0
 8006828:	42a6      	cmp	r6, r4
 800682a:	d109      	bne.n	8006840 <__libc_init_array+0x24>
 800682c:	4d0b      	ldr	r5, [pc, #44]	; (800685c <__libc_init_array+0x40>)
 800682e:	4c0c      	ldr	r4, [pc, #48]	; (8006860 <__libc_init_array+0x44>)
 8006830:	f000 f83e 	bl	80068b0 <_init>
 8006834:	1b64      	subs	r4, r4, r5
 8006836:	10a4      	asrs	r4, r4, #2
 8006838:	2600      	movs	r6, #0
 800683a:	42a6      	cmp	r6, r4
 800683c:	d105      	bne.n	800684a <__libc_init_array+0x2e>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	f855 3b04 	ldr.w	r3, [r5], #4
 8006844:	4798      	blx	r3
 8006846:	3601      	adds	r6, #1
 8006848:	e7ee      	b.n	8006828 <__libc_init_array+0xc>
 800684a:	f855 3b04 	ldr.w	r3, [r5], #4
 800684e:	4798      	blx	r3
 8006850:	3601      	adds	r6, #1
 8006852:	e7f2      	b.n	800683a <__libc_init_array+0x1e>
 8006854:	08006a00 	.word	0x08006a00
 8006858:	08006a00 	.word	0x08006a00
 800685c:	08006a00 	.word	0x08006a00
 8006860:	08006a04 	.word	0x08006a04

08006864 <memcmp>:
 8006864:	b510      	push	{r4, lr}
 8006866:	3901      	subs	r1, #1
 8006868:	4402      	add	r2, r0
 800686a:	4290      	cmp	r0, r2
 800686c:	d101      	bne.n	8006872 <memcmp+0xe>
 800686e:	2000      	movs	r0, #0
 8006870:	e005      	b.n	800687e <memcmp+0x1a>
 8006872:	7803      	ldrb	r3, [r0, #0]
 8006874:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006878:	42a3      	cmp	r3, r4
 800687a:	d001      	beq.n	8006880 <memcmp+0x1c>
 800687c:	1b18      	subs	r0, r3, r4
 800687e:	bd10      	pop	{r4, pc}
 8006880:	3001      	adds	r0, #1
 8006882:	e7f2      	b.n	800686a <memcmp+0x6>

08006884 <memcpy>:
 8006884:	440a      	add	r2, r1
 8006886:	4291      	cmp	r1, r2
 8006888:	f100 33ff 	add.w	r3, r0, #4294967295
 800688c:	d100      	bne.n	8006890 <memcpy+0xc>
 800688e:	4770      	bx	lr
 8006890:	b510      	push	{r4, lr}
 8006892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800689a:	4291      	cmp	r1, r2
 800689c:	d1f9      	bne.n	8006892 <memcpy+0xe>
 800689e:	bd10      	pop	{r4, pc}

080068a0 <memset>:
 80068a0:	4402      	add	r2, r0
 80068a2:	4603      	mov	r3, r0
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d100      	bne.n	80068aa <memset+0xa>
 80068a8:	4770      	bx	lr
 80068aa:	f803 1b01 	strb.w	r1, [r3], #1
 80068ae:	e7f9      	b.n	80068a4 <memset+0x4>

080068b0 <_init>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	bf00      	nop
 80068b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b6:	bc08      	pop	{r3}
 80068b8:	469e      	mov	lr, r3
 80068ba:	4770      	bx	lr

080068bc <_fini>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	bf00      	nop
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr
