
USB_MULTIPLE_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800ecfc  0800ecfc  0001ecfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0a4  0800f0a4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0a4  0800f0a4  0001f0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0ac  0800f0ac  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0ac  0800f0ac  0001f0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0b0  0800f0b0  0001f0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800f0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00016500  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20016668  20016668  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   000249b9  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000520a  00000000  00000000  00044b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  00049d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b50  00000000  00000000  0004bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008d82  00000000  00000000  0004d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026de5  00000000  00000000  000563ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee27f  00000000  00000000  0007d19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016b41e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007fa4  00000000  00000000  0016b470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ece4 	.word	0x0800ece4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	0800ece4 	.word	0x0800ece4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20014fe0 	.word	0x20014fe0
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	db0a      	blt.n	800065e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <__NVIC_SetPriority+0x4c>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	440b      	add	r3, r1
 8000658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800065c:	e00a      	b.n	8000674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4908      	ldr	r1, [pc, #32]	; (8000684 <__NVIC_SetPriority+0x50>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	3b04      	subs	r3, #4
 800066c:	0112      	lsls	r2, r2, #4
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	440b      	add	r3, r1
 8000672:	761a      	strb	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000e100 	.word	0xe000e100
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <VirtualCommInit>:
 * 						the usbTxTask (256 is tested)
 * @param UsbTxPriority Priority with wich the USB task will be created
**/
void VirtualCommInit(	const configSTACK_DEPTH_TYPE UsbStackSize,
						UBaseType_t UsbTxPriority )
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	80fb      	strh	r3, [r7, #6]
	MX_USB_DEVICE_Init();
 8000694:	f007 fcac 	bl	8007ff0 <MX_USB_DEVICE_Init>
	vcom_txStream = xStreamBufferCreate( txBuffLen, 1);
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006a0:	f009 f8f4 	bl	800988c <xStreamBufferGenericCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <VirtualCommInit+0x9c>)
 80006a8:	6013      	str	r3, [r2, #0]
	vcom_rxStream  = xStreamBufferCreate( rxBuffLen, 1);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006b2:	f009 f8eb 	bl	800988c <xStreamBufferGenericCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <VirtualCommInit+0xa0>)
 80006ba:	6013      	str	r3, [r2, #0]
	assert_param( vcom_txStream != NULL);
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <VirtualCommInit+0x9c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d103      	bne.n	80006cc <VirtualCommInit+0x44>
 80006c4:	2151      	movs	r1, #81	; 0x51
 80006c6:	4819      	ldr	r0, [pc, #100]	; (800072c <VirtualCommInit+0xa4>)
 80006c8:	f000 fa53 	bl	8000b72 <assert_failed>
	assert_param( vcom_rxStream != NULL);
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <VirtualCommInit+0xa0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d103      	bne.n	80006dc <VirtualCommInit+0x54>
 80006d4:	2152      	movs	r1, #82	; 0x52
 80006d6:	4815      	ldr	r0, [pc, #84]	; (800072c <VirtualCommInit+0xa4>)
 80006d8:	f000 fa4b 	bl	8000b72 <assert_failed>

	vcom_mutexPtr = xSemaphoreCreateMutex();
 80006dc:	2001      	movs	r0, #1
 80006de:	f008 fb2c 	bl	8008d3a <xQueueCreateMutex>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <VirtualCommInit+0xa8>)
 80006e6:	6013      	str	r3, [r2, #0]
	assert_param(vcom_mutexPtr != NULL);
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <VirtualCommInit+0xa8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d103      	bne.n	80006f8 <VirtualCommInit+0x70>
 80006f0:	2155      	movs	r1, #85	; 0x55
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <VirtualCommInit+0xa4>)
 80006f4:	f000 fa3d 	bl	8000b72 <assert_failed>
	assert_param(xTaskCreate(usbTxTask, "usbTx", UsbStackSize, NULL, UsbTxPriority, &vcom_usbTaskHandle) == pdPASS);
 80006f8:	88fa      	ldrh	r2, [r7, #6]
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <VirtualCommInit+0xac>)
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2300      	movs	r3, #0
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <VirtualCommInit+0xb0>)
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <VirtualCommInit+0xb4>)
 8000708:	f009 fc8f 	bl	800a02a <xTaskCreate>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d003      	beq.n	800071a <VirtualCommInit+0x92>
 8000712:	2156      	movs	r1, #86	; 0x56
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <VirtualCommInit+0xa4>)
 8000716:	f000 fa2c 	bl	8000b72 <assert_failed>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000588 	.word	0x20000588
 8000728:	20000584 	.word	0x20000584
 800072c:	0800ecfc 	.word	0x0800ecfc
 8000730:	20000590 	.word	0x20000590
 8000734:	2000058c 	.word	0x2000058c
 8000738:	0800ed28 	.word	0x0800ed28
 800073c:	080007e9 	.word	0x080007e9

08000740 <TransmitUsbData>:
 * @param DelayMs number of milliseconds to wait for space in the stream buffer
 * 		  to become available
 * @returns number of bytes added to the stream buffer
 */
int32_t TransmitUsbData(uint8_t const*  Buff, uint16_t Len, int32_t DelayMs)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	460b      	mov	r3, r1
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	817b      	strh	r3, [r7, #10]
	int32_t numBytesCopied = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24

	//convert mS into ticks to work in native units
	const uint32_t delayTicks = DelayMs / portTICK_PERIOD_MS;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	623b      	str	r3, [r7, #32]
	const uint32_t startingTime = xTaskGetTickCount();
 8000756:	f009 fef7 	bl	800a548 <xTaskGetTickCount>
 800075a:	61f8      	str	r0, [r7, #28]
	uint32_t endingTime = startingTime + delayTicks;
 800075c:	69fa      	ldr	r2, [r7, #28]
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	4413      	add	r3, r2
 8000762:	61bb      	str	r3, [r7, #24]

	if(xSemaphoreTake(vcom_mutexPtr, delayTicks ) == pdPASS)
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <TransmitUsbData+0xa0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a39      	ldr	r1, [r7, #32]
 800076a:	4618      	mov	r0, r3
 800076c:	f008 fdd0 	bl	8009310 <xQueueSemaphoreTake>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	d12f      	bne.n	80007d6 <TransmitUsbData+0x96>
	{
		uint32_t remainingTime = endingTime - xTaskGetTickCount();
 8000776:	f009 fee7 	bl	800a548 <xTaskGetTickCount>
 800077a:	4602      	mov	r2, r0
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	617b      	str	r3, [r7, #20]
		numBytesCopied = xStreamBufferSend(	vcom_txStream, Buff, Len, remainingTime);
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <TransmitUsbData+0xa4>)
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	897a      	ldrh	r2, [r7, #10]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	68f9      	ldr	r1, [r7, #12]
 800078c:	f009 f920 	bl	80099d0 <xStreamBufferSend>
 8000790:	4603      	mov	r3, r0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24

		if(numBytesCopied != Len)
 8000794:	897b      	ldrh	r3, [r7, #10]
 8000796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000798:	429a      	cmp	r2, r3
 800079a:	d015      	beq.n	80007c8 <TransmitUsbData+0x88>
		{
			remainingTime = endingTime - xTaskGetTickCount();
 800079c:	f009 fed4 	bl	800a548 <xTaskGetTickCount>
 80007a0:	4602      	mov	r2, r0
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	617b      	str	r3, [r7, #20]
			numBytesCopied += xStreamBufferSend(	vcom_txStream, Buff+numBytesCopied, Len-numBytesCopied, remainingTime);
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <TransmitUsbData+0xa4>)
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	18d1      	adds	r1, r2, r3
 80007b2:	897a      	ldrh	r2, [r7, #10]
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	f009 f908 	bl	80099d0 <xStreamBufferSend>
 80007c0:	4602      	mov	r2, r0
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	4413      	add	r3, r2
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
		}

		xSemaphoreGive(vcom_mutexPtr);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <TransmitUsbData+0xa0>)
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	f008 facb 	bl	8008d6c <xQueueGenericSend>
	}

	return numBytesCopied;
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000590 	.word	0x20000590
 80007e4:	20000588 	.word	0x20000588

080007e8 <usbTxTask>:
 * It then then copies up to 2KB of data from the stream buffer to a
 * local buffer, which is passed to the HAL USB stack.
 *
 */
void usbTxTask( void* NotUsed)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	6078      	str	r0, [r7, #4]
	USBD_CDC_HandleTypeDef *hcdc = NULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

	while(hcdc == NULL)
 80007f4:	e006      	b.n	8000804 <usbTxTask+0x1c>
	{
		hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <usbTxTask+0xac>)
 80007f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80007fc:	60fb      	str	r3, [r7, #12]
		vTaskDelay(10);
 80007fe:	200a      	movs	r0, #10
 8000800:	f009 fd68 	bl	800a2d4 <vTaskDelay>
	while(hcdc == NULL)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f5      	beq.n	80007f6 <usbTxTask+0xe>
	}
	if (hcdc->TxState == 0)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000810:	2b00      	cmp	r3, #0
 8000812:	d108      	bne.n	8000826 <usbTxTask+0x3e>
	{
		//if there is no TX in progress, immediately send a task notification
		//to kick things off
		xTaskNotify( vcom_usbTaskHandle, 1, eSetValueWithOverwrite);
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <usbTxTask+0xb0>)
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	2300      	movs	r3, #0
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2303      	movs	r3, #3
 800081e:	2201      	movs	r2, #1
 8000820:	2100      	movs	r1, #0
 8000822:	f00a fc93 	bl	800b14c <xTaskGenericNotify>
	}
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	2101      	movs	r1, #1
 800082c:	2000      	movs	r0, #0
 800082e:	f00a fb97 	bl	800af60 <ulTaskGenericNotifyTake>

	//setup our own callback to be called when transmission is complete
	hcdc->TxCallBack = usbTxComplete;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <usbTxTask+0xb4>)
 8000836:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	//ensure the USB interrupt priority is low enough to allow for
	//FreeRTOS API calls within the ISR
	NVIC_SetPriority(OTG_FS_IRQn, 6);
 800083a:	2106      	movs	r1, #6
 800083c:	2043      	movs	r0, #67	; 0x43
 800083e:	f7ff fef9 	bl	8000634 <__NVIC_SetPriority>

	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("waiting for vcom_txStream");
 8000842:	4817      	ldr	r0, [pc, #92]	; (80008a0 <usbTxTask+0xb8>)
 8000844:	f00d fbe0 	bl	800e008 <SEGGER_SYSVIEW_PrintfHost>
		//wait forever for data to become available in the stream buffer
		//vcom_txStream.  up to txBuffLen bytes of data will be copied into
		//vcom_usbTxBuff when at least 1 byte is available
		uint8_t numBytes = xStreamBufferReceive(	vcom_txStream,
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <usbTxTask+0xbc>)
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000854:	4914      	ldr	r1, [pc, #80]	; (80008a8 <usbTxTask+0xc0>)
 8000856:	f009 f9d0 	bl	8009bfa <xStreamBufferReceive>
 800085a:	4603      	mov	r3, r0
 800085c:	72fb      	strb	r3, [r7, #11]
													vcom_usbTxBuff,
													txBuffLen,
													portMAX_DELAY);
		if(numBytes > 0)
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0ee      	beq.n	8000842 <usbTxTask+0x5a>
		{
			SEGGER_SYSVIEW_PrintfHost("pulled %d bytes from vcom_txStream", numBytes);
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	4619      	mov	r1, r3
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <usbTxTask+0xc4>)
 800086a:	f00d fbcd 	bl	800e008 <SEGGER_SYSVIEW_PrintfHost>
			USBD_CDC_SetTxBuffer(&hUsbDeviceFS, vcom_usbTxBuff, numBytes);
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	461a      	mov	r2, r3
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <usbTxTask+0xc0>)
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <usbTxTask+0xac>)
 8000876:	f006 f80d 	bl	8006894 <USBD_CDC_SetTxBuffer>
			USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <usbTxTask+0xac>)
 800087c:	f006 f84a 	bl	8006914 <USBD_CDC_TransmitPacket>
			//wait forever for a notification, clearing it to 0 when received
			ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	2101      	movs	r1, #1
 8000886:	2000      	movs	r0, #0
 8000888:	f00a fb6a 	bl	800af60 <ulTaskGenericNotifyTake>
			SEGGER_SYSVIEW_PrintfHost("tx complete");
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <usbTxTask+0xc8>)
 800088e:	f00d fbbb 	bl	800e008 <SEGGER_SYSVIEW_PrintfHost>
	{
 8000892:	e7d6      	b.n	8000842 <usbTxTask+0x5a>
 8000894:	2000062c 	.word	0x2000062c
 8000898:	2000058c 	.word	0x2000058c
 800089c:	080008b5 	.word	0x080008b5
 80008a0:	0800ed30 	.word	0x0800ed30
 80008a4:	20000588 	.word	0x20000588
 80008a8:	20000184 	.word	0x20000184
 80008ac:	0800ed4c 	.word	0x0800ed4c
 80008b0:	0800ed70 	.word	0x0800ed70

080008b4 <usbTxComplete>:
		}
	}
}

void usbTxComplete( void )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af02      	add	r7, sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
	xTaskNotifyFromISR( vcom_usbTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <usbTxComplete+0x48>)
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	2300      	movs	r3, #0
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2303      	movs	r3, #3
 80008cc:	2201      	movs	r2, #1
 80008ce:	2100      	movs	r1, #0
 80008d0:	f00a fd1e 	bl	800b310 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00a      	beq.n	80008f0 <usbTxComplete+0x3c>
 80008da:	f00d f94b 	bl	800db74 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <usbTxComplete+0x4c>)
 80008e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	f3bf 8f4f 	dsb	sy
 80008ea:	f3bf 8f6f 	isb	sy
}
 80008ee:	e001      	b.n	80008f4 <usbTxComplete+0x40>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80008f0:	f00d f924 	bl	800db3c <SEGGER_SYSVIEW_RecordExitISR>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000058c 	.word	0x2000058c
 8000900:	e000ed04 	.word	0xe000ed04

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 fac5 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f83d 	bl	800098c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  VirtualCommInit(256, configMAX_PRIORITIES-2);
 8000912:	2103      	movs	r1, #3
 8000914:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000918:	f7ff feb6 	bl	8000688 <VirtualCommInit>
  SEGGER_SYSVIEW_Conf();
 800091c:	f00d fbf2 	bl	800e104 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 8000920:	2003      	movs	r0, #3
 8000922:	f000 fbcd 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 f8c5 	bl	8000ab4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800092a:	f000 f899 	bl	8000a60 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800092e:	f007 fb5f 	bl	8007ff0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //setup tasks, making sure they have been properly created before moving on
  assert_param(xTaskCreate(usbPrintOutTask, "usbprint1", STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 8000932:	2300      	movs	r3, #0
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	2302      	movs	r3, #2
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	490f      	ldr	r1, [pc, #60]	; (800097c <main+0x78>)
 8000940:	480f      	ldr	r0, [pc, #60]	; (8000980 <main+0x7c>)
 8000942:	f009 fb72 	bl	800a02a <xTaskCreate>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d003      	beq.n	8000954 <main+0x50>
 800094c:	2172      	movs	r1, #114	; 0x72
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <main+0x80>)
 8000950:	f000 f90f 	bl	8000b72 <assert_failed>
  assert_param(xTaskCreate(usbPrintOutTask, "usbprint2", STACK_SIZE, (void*)2, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 8000954:	2300      	movs	r3, #0
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	2302      	movs	r3, #2
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2302      	movs	r3, #2
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <main+0x84>)
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <main+0x7c>)
 8000964:	f009 fb61 	bl	800a02a <xTaskCreate>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d003      	beq.n	8000976 <main+0x72>
 800096e:	2173      	movs	r1, #115	; 0x73
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <main+0x80>)
 8000972:	f000 f8fe 	bl	8000b72 <assert_failed>

  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 8000976:	f009 fce5 	bl	800a344 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097a:	e7fe      	b.n	800097a <main+0x76>
 800097c:	0800ed7c 	.word	0x0800ed7c
 8000980:	08000b05 	.word	0x08000b05
 8000984:	0800ed88 	.word	0x0800ed88
 8000988:	0800ed9c 	.word	0x0800ed9c

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f00d fd26 	bl	800e3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <SystemClock_Config+0xcc>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <SystemClock_Config+0xd0>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <SystemClock_Config+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a04:	2348      	movs	r3, #72	; 0x48
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 f969 	bl	8002cec <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a20:	f000 f8a2 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fc7b 	bl	800333c <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a4c:	f000 f88c 	bl	8000b68 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_USART2_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a98:	f003 fb06 	bl	80040a8 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f000 f861 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000594 	.word	0x20000594
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_GPIO_Init+0x4c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <MX_GPIO_Init+0x4c>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_GPIO_Init+0x4c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_GPIO_Init+0x4c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <MX_GPIO_Init+0x4c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_GPIO_Init+0x4c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <usbPrintOutTask>:
/**
 * Define a single task which prints out a string with the argument
 * Number appended to it (for easy identification)
 */
void usbPrintOutTask( void* Number)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
#define TESTSIZE 10
	char testString[TESTSIZE];
	memset(testString, 0, TESTSIZE);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	220a      	movs	r2, #10
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00d fc69 	bl	800e3ec <memset>
	snprintf(testString, TESTSIZE, "task %i\n", (int) Number);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f107 000c 	add.w	r0, r7, #12
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <usbPrintOutTask+0x3c>)
 8000b22:	210a      	movs	r1, #10
 8000b24:	f00d fc6a 	bl	800e3fc <sniprintf>
	{
		/**
		 * transmit the test string, waiting up to 100 mS for space to become available
		 * in the buffer
		 */
		TransmitUsbData((uint8_t*)testString, sizeof(testString), 100);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	210a      	movs	r1, #10
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe05 	bl	8000740 <TransmitUsbData>
		vTaskDelay(2);
 8000b36:	2002      	movs	r0, #2
 8000b38:	f009 fbcc 	bl	800a2d4 <vTaskDelay>
		TransmitUsbData((uint8_t*)testString, sizeof(testString), 100);
 8000b3c:	e7f4      	b.n	8000b28 <usbPrintOutTask+0x24>
 8000b3e:	bf00      	nop
 8000b40:	0800eda8 	.word	0x0800eda8

08000b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b56:	f000 f9c1 	bl	8000edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40001000 	.word	0x40001000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>

08000b72 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 fa7a 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c4e:	f000 fa9b 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40004400 	.word	0x40004400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_InitTick+0xe4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a32      	ldr	r2, [pc, #200]	; (8000d4c <HAL_InitTick+0xe4>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <HAL_InitTick+0xe4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c94:	f107 0210 	add.w	r2, r7, #16
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fe2c 	bl	80038fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cae:	f002 fdfd 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8000cb2:	6378      	str	r0, [r7, #52]	; 0x34
 8000cb4:	e004      	b.n	8000cc0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cb6:	f002 fdf9 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	0c9b      	lsrs	r3, r3, #18
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_InitTick+0xec>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_InitTick+0xf0>)
 8000cd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_InitTick+0xec>)
 8000cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_InitTick+0xec>)
 8000cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_InitTick+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_InitTick+0xec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_InitTick+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cf4:	4817      	ldr	r0, [pc, #92]	; (8000d54 <HAL_InitTick+0xec>)
 8000cf6:	f002 fe33 	bl	8003960 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <HAL_InitTick+0xec>)
 8000d0a:	f002 ff23 	bl	8003b54 <HAL_TIM_Base_Start_IT>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d111      	bne.n	8000d40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1c:	2036      	movs	r0, #54	; 0x36
 8000d1e:	f000 fa1b 	bl	8001158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d808      	bhi.n	8000d3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2036      	movs	r0, #54	; 0x36
 8000d2e:	f000 f9e7 	bl	8001100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_InitTick+0xf4>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e002      	b.n	8000d40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3738      	adds	r7, #56	; 0x38
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	200005d8 	.word	0x200005d8
 8000d58:	40001000 	.word	0x40001000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM6_DAC_IRQHandler+0x10>)
 8000d92:	f002 ffa5 	bl	8003ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200005d8 	.word	0x200005d8

08000da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <OTG_FS_IRQHandler+0x10>)
 8000da6:	f000 fe74 	bl	8001a92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20001b08 	.word	0x20001b08

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f00d faba 	bl	800e35c <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20030000 	.word	0x20030000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000620 	.word	0x20000620
 8000e1c:	20016668 	.word	0x20016668

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e60:	4c0b      	ldr	r4, [pc, #44]	; (8000e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd7 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f00d fa79 	bl	800e368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fd45 	bl	8000904 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000e88:	0800f0b4 	.word	0x0800f0b4
  ldr r2, =_sbss
 8000e8c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000e90:	20016668 	.word	0x20016668

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f8fd 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fece 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe5c 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000624 	.word	0x20000624

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000624 	.word	0x20000624

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d00f      	beq.n	80010ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d00c      	beq.n	80010ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d009      	beq.n	80010ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d006      	beq.n	80010ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d003      	beq.n	80010ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010e6:	2190      	movs	r1, #144	; 0x90
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80010ea:	f7ff fd42 	bl	8000b72 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff38 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800edb4 	.word	0x0800edb4

08001100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d903      	bls.n	8001120 <HAL_NVIC_SetPriority+0x20>
 8001118:	21a8      	movs	r1, #168	; 0xa8
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <HAL_NVIC_SetPriority+0x54>)
 800111c:	f7ff fd29 	bl	8000b72 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d903      	bls.n	800112e <HAL_NVIC_SetPriority+0x2e>
 8001126:	21a9      	movs	r1, #169	; 0xa9
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <HAL_NVIC_SetPriority+0x54>)
 800112a:	f7ff fd22 	bl	8000b72 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112e:	f7ff ff3d 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff ff8d 	bl	8001058 <NVIC_EncodePriority>
 800113e:	4602      	mov	r2, r0
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff5c 	bl	8001004 <__NVIC_SetPriority>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800edb4 	.word	0x0800edb4

08001158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	da03      	bge.n	8001172 <HAL_NVIC_EnableIRQ+0x1a>
 800116a:	21bc      	movs	r1, #188	; 0xbc
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <HAL_NVIC_EnableIRQ+0x2c>)
 800116e:	f7ff fd00 	bl	8000b72 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff26 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	0800edb4 	.word	0x0800edb4

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a3d      	ldr	r2, [pc, #244]	; (8001298 <HAL_GPIO_Init+0x110>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d02b      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a3c      	ldr	r2, [pc, #240]	; (800129c <HAL_GPIO_Init+0x114>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d027      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_GPIO_Init+0x118>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d023      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <HAL_GPIO_Init+0x11c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <HAL_GPIO_Init+0x120>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01b      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a38      	ldr	r2, [pc, #224]	; (80012ac <HAL_GPIO_Init+0x124>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <HAL_GPIO_Init+0x128>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <HAL_GPIO_Init+0x12c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00f      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a35      	ldr	r2, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x130>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00b      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <HAL_GPIO_Init+0x134>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a33      	ldr	r2, [pc, #204]	; (80012c0 <HAL_GPIO_Init+0x138>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x76>
 80011f6:	21ac      	movs	r1, #172	; 0xac
 80011f8:	4832      	ldr	r0, [pc, #200]	; (80012c4 <HAL_GPIO_Init+0x13c>)
 80011fa:	f7ff fcba 	bl	8000b72 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_GPIO_Init+0x8c>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0c1b      	lsrs	r3, r3, #16
 800120e:	041b      	lsls	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x94>
 8001214:	21ad      	movs	r1, #173	; 0xad
 8001216:	482b      	ldr	r0, [pc, #172]	; (80012c4 <HAL_GPIO_Init+0x13c>)
 8001218:	f7ff fcab 	bl	8000b72 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d035      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d031      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b11      	cmp	r3, #17
 8001232:	d02d      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d029      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d025      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800124c:	d020      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001256:	d01b      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001260:	d016      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800126a:	d011      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001274:	d00c      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x108>
 8001288:	21ae      	movs	r1, #174	; 0xae
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <HAL_GPIO_Init+0x13c>)
 800128c:	f7ff fc71 	bl	8000b72 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	e274      	b.n	8001780 <HAL_GPIO_Init+0x5f8>
 8001296:	bf00      	nop
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40021400 	.word	0x40021400
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40021c00 	.word	0x40021c00
 80012b8:	40022000 	.word	0x40022000
 80012bc:	40022400 	.word	0x40022400
 80012c0:	40022800 	.word	0x40022800
 80012c4:	0800edf0 	.word	0x0800edf0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 824a 	bne.w	800177a <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d144      	bne.n	8001388 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00f      	beq.n	8001326 <HAL_GPIO_Init+0x19e>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d00b      	beq.n	8001326 <HAL_GPIO_Init+0x19e>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x19e>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x19e>
 800131e:	21c0      	movs	r1, #192	; 0xc0
 8001320:	4831      	ldr	r0, [pc, #196]	; (80013e8 <HAL_GPIO_Init+0x260>)
 8001322:	f7ff fc26 	bl	8000b72 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d02b      	beq.n	80013ec <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00b      	beq.n	80013b4 <HAL_GPIO_Init+0x22c>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d007      	beq.n	80013b4 <HAL_GPIO_Init+0x22c>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x22c>
 80013ac:	21d1      	movs	r1, #209	; 0xd1
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <HAL_GPIO_Init+0x260>)
 80013b0:	f7ff fbdf 	bl	8000b72 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x264>
 80013e6:	bf00      	nop
 80013e8:	0800edf0 	.word	0x0800edf0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	f040 80df 	bne.w	80015b8 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80b6 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	2b09      	cmp	r3, #9
 800140a:	f000 80b1 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80ac 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80a7 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80a2 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 809d 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b01      	cmp	r3, #1
 800143c:	f000 8098 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b01      	cmp	r3, #1
 8001446:	f000 8093 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b02      	cmp	r3, #2
 8001450:	f000 808e 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	2b02      	cmp	r3, #2
 800145a:	f000 8089 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b02      	cmp	r3, #2
 8001464:	f000 8084 	beq.w	8001570 <HAL_GPIO_Init+0x3e8>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d07f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d07b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d077      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d073      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d06f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d06b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2b09      	cmp	r3, #9
 800149e:	d067      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d063      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d05f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b07      	cmp	r3, #7
 80014b6:	d05b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d057      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	d053      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d04f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d04b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d047      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d043      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d03f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b0a      	cmp	r3, #10
 80014f6:	d03b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b0a      	cmp	r3, #10
 80014fe:	d037      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	2b0b      	cmp	r3, #11
 8001506:	d033      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d02f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d02b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b0d      	cmp	r3, #13
 800151e:	d027      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d023      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d01f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d01b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d017      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b08      	cmp	r3, #8
 8001546:	d013      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b08      	cmp	r3, #8
 800154e:	d00f      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b0c      	cmp	r3, #12
 8001556:	d00b      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b0e      	cmp	r3, #14
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x3e8>
 8001568:	21de      	movs	r1, #222	; 0xde
 800156a:	488a      	ldr	r0, [pc, #552]	; (8001794 <HAL_GPIO_Init+0x60c>)
 800156c:	f7ff fb01 	bl	8000b72 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80c0 	beq.w	800177a <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b66      	ldr	r3, [pc, #408]	; (8001798 <HAL_GPIO_Init+0x610>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_GPIO_Init+0x610>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_GPIO_Init+0x610>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001616:	4a61      	ldr	r2, [pc, #388]	; (800179c <HAL_GPIO_Init+0x614>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_GPIO_Init+0x618>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d037      	beq.n	80016b2 <HAL_GPIO_Init+0x52a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_GPIO_Init+0x61c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d031      	beq.n	80016ae <HAL_GPIO_Init+0x526>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a56      	ldr	r2, [pc, #344]	; (80017a8 <HAL_GPIO_Init+0x620>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d02b      	beq.n	80016aa <HAL_GPIO_Init+0x522>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a55      	ldr	r2, [pc, #340]	; (80017ac <HAL_GPIO_Init+0x624>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d025      	beq.n	80016a6 <HAL_GPIO_Init+0x51e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x628>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01f      	beq.n	80016a2 <HAL_GPIO_Init+0x51a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a53      	ldr	r2, [pc, #332]	; (80017b4 <HAL_GPIO_Init+0x62c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0x516>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_GPIO_Init+0x630>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_GPIO_Init+0x512>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <HAL_GPIO_Init+0x634>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00d      	beq.n	8001696 <HAL_GPIO_Init+0x50e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <HAL_GPIO_Init+0x638>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d007      	beq.n	8001692 <HAL_GPIO_Init+0x50a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	; (80017c4 <HAL_GPIO_Init+0x63c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_GPIO_Init+0x506>
 800168a:	2309      	movs	r3, #9
 800168c:	e012      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 800168e:	230a      	movs	r3, #10
 8001690:	e010      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 8001692:	2308      	movs	r3, #8
 8001694:	e00e      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 8001696:	2307      	movs	r3, #7
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 800169a:	2306      	movs	r3, #6
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x52c>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x614>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_GPIO_Init+0x640>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a34      	ldr	r2, [pc, #208]	; (80017c8 <HAL_GPIO_Init+0x640>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <HAL_GPIO_Init+0x640>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_GPIO_Init+0x640>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_GPIO_Init+0x640>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_GPIO_Init+0x640>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_GPIO_Init+0x640>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <HAL_GPIO_Init+0x640>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f ada0 	bls.w	80012c8 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800edf0 	.word	0x0800edf0
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40021c00 	.word	0x40021c00
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40022400 	.word	0x40022400
 80017c8:	40013c00 	.word	0x40013c00

080017cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	b08f      	sub	sp, #60	; 0x3c
 80017d0:	af0a      	add	r7, sp, #40	; 0x28
 80017d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e11d      	b.n	8001a1a <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e6:	d008      	beq.n	80017fa <HAL_PCD_Init+0x2e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a8d      	ldr	r2, [pc, #564]	; (8001a24 <HAL_PCD_Init+0x258>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d003      	beq.n	80017fa <HAL_PCD_Init+0x2e>
 80017f2:	2187      	movs	r1, #135	; 0x87
 80017f4:	488c      	ldr	r0, [pc, #560]	; (8001a28 <HAL_PCD_Init+0x25c>)
 80017f6:	f7ff f9bc 	bl	8000b72 <assert_failed>

  USBx = hpcd->Instance;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d106      	bne.n	800181a <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f006 fdcb 	bl	80083b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f8e2 	bl	8004a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	687e      	ldr	r6, [r7, #4]
 8001846:	466d      	mov	r5, sp
 8001848:	f106 0410 	add.w	r4, r6, #16
 800184c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001858:	e885 0003 	stmia.w	r5, {r0, r1}
 800185c:	1d33      	adds	r3, r6, #4
 800185e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f002 ffb9 	bl	80047d8 <USB_CoreInit>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f003 f8d0 	bl	8004a24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e04a      	b.n	8001920 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	333d      	adds	r3, #61	; 0x3d
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	333c      	adds	r3, #60	; 0x3c
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	b298      	uxth	r0, r3
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3344      	adds	r3, #68	; 0x44
 80018c6:	4602      	mov	r2, r0
 80018c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	3340      	adds	r3, #64	; 0x40
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	334c      	adds	r3, #76	; 0x4c
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	3354      	adds	r3, #84	; 0x54
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	3301      	adds	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3af      	bcc.n	800188a <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e044      	b.n	80019ba <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	3301      	adds	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d3b5      	bcc.n	8001930 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	687e      	ldr	r6, [r7, #4]
 80019cc:	466d      	mov	r5, sp
 80019ce:	f106 0410 	add.w	r4, r6, #16
 80019d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019de:	e885 0003 	stmia.w	r5, {r0, r1}
 80019e2:	1d33      	adds	r3, r6, #4
 80019e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e6:	6838      	ldr	r0, [r7, #0]
 80019e8:	f003 f868 	bl	8004abc <USB_DevInit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2202      	movs	r2, #2
 80019f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00d      	b.n	8001a1a <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 f9b7 	bl	8005d86 <USB_DevDisconnect>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40040000 	.word	0x40040000
 8001a28:	0800ee2c 	.word	0x0800ee2c

08001a2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_PCD_Start+0x1c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e020      	b.n	8001a8a <HAL_PCD_Start+0x5e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d109      	bne.n	8001a6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d005      	beq.n	8001a6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 ffb5 	bl	80049e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 f962 	bl	8005d44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a92:	b590      	push	{r4, r7, lr}
 8001a94:	b08d      	sub	sp, #52	; 0x34
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fa20 	bl	8005eee <USB_GetMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 848a 	bne.w	80023ca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 f984 	bl	8005dc8 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8480 	beq.w	80023c8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 f971 	bl	8005dc8 <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f002 0202 	and.w	r2, r2, #2
 8001afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f95f 	bl	8005dc8 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d161      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0210 	bic.w	r2, r2, #16
 8001b22:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f003 020f 	and.w	r2, r3, #15
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	0c5b      	lsrs	r3, r3, #17
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d124      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d035      	beq.n	8001bc8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6a38      	ldr	r0, [r7, #32]
 8001b70:	f003 ff96 	bl	8005aa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b80:	441a      	add	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	6a1a      	ldr	r2, [r3, #32]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b92:	441a      	add	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	621a      	str	r2, [r3, #32]
 8001b98:	e016      	b.n	8001bc8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	0c5b      	lsrs	r3, r3, #17
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d110      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001bac:	2208      	movs	r2, #8
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6a38      	ldr	r0, [r7, #32]
 8001bb2:	f003 ff75 	bl	8005aa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	6a1a      	ldr	r2, [r3, #32]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc2:	441a      	add	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0210 	orr.w	r2, r2, #16
 8001bd6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 f8f3 	bl	8005dc8 <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bec:	f040 80a7 	bne.w	8001d3e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 f8f8 	bl	8005dee <USB_ReadDevAllOutEpInterrupt>
 8001bfe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c00:	e099      	b.n	8001d36 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 808e 	beq.w	8001d2a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 f91c 	bl	8005e56 <USB_ReadDevOutEPInterrupt>
 8001c1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00c      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fec2 	bl	80029c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00c      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 ff98 	bl	8002b98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2310      	movs	r3, #16
 8001c82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d030      	beq.n	8001cf0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c96:	2b80      	cmp	r3, #128	; 0x80
 8001c98:	d109      	bne.n	8001cae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	78db      	ldrb	r3, [r3, #3]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d108      	bne.n	8001cde <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f006 fc6f 	bl	80085bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cea:	461a      	mov	r2, r3
 8001cec:	2302      	movs	r3, #2
 8001cee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d06:	461a      	mov	r2, r3
 8001d08:	2320      	movs	r3, #32
 8001d0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d22:	461a      	mov	r2, r3
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f af62 	bne.w	8001c02 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 f840 	bl	8005dc8 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d52:	f040 80db 	bne.w	8001f0c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 f861 	bl	8005e22 <USB_ReadDevAllInEpInterrupt>
 8001d60:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d66:	e0cd      	b.n	8001f04 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80c2 	beq.w	8001ef8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 f887 	bl	8005e92 <USB_ReadDevInEPInterrupt>
 8001d84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d057      	beq.n	8001e40 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	2201      	movs	r2, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69f9      	ldr	r1, [r7, #28]
 8001dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001db0:	4013      	ands	r3, r2
 8001db2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d132      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	334c      	adds	r3, #76	; 0x4c
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4403      	add	r3, r0
 8001dee:	3348      	adds	r3, #72	; 0x48
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4419      	add	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4403      	add	r3, r0
 8001e02:	334c      	adds	r3, #76	; 0x4c
 8001e04:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d113      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x3a2>
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3354      	adds	r3, #84	; 0x54
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d108      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2101      	movs	r1, #1
 8001e30:	f004 f88e 	bl	8005f50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f006 fb39 	bl	80084b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e56:	461a      	mov	r2, r3
 8001e58:	2308      	movs	r3, #8
 8001e5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e72:	461a      	mov	r2, r3
 8001e74:	2310      	movs	r3, #16
 8001e76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2340      	movs	r3, #64	; 0x40
 8001e92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d023      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea0:	6a38      	ldr	r0, [r7, #32]
 8001ea2:	f002 ff6f 	bl	8004d84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3338      	adds	r3, #56	; 0x38
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	78db      	ldrb	r3, [r3, #3]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f006 fb86 	bl	80085e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fcdb 	bl	80028ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	3301      	adds	r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f47f af2e 	bne.w	8001d68 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 ff59 	bl	8005dc8 <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f20:	d122      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fec2 	bl	8002cd4 <HAL_PCDEx_LPM_Callback>
 8001f50:	e002      	b.n	8001f58 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f006 fb24 	bl	80085a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 ff2b 	bl	8005dc8 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f7c:	d112      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f006 fae0 	bl	8008554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fa2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 ff0d 	bl	8005dc8 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb8:	f040 80b7 	bne.w	800212a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2110      	movs	r1, #16
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 fed4 	bl	8004d84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe0:	e046      	b.n	8002070 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ff4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	440a      	add	r2, r1
 800200c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002010:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002014:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002028:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203a:	0151      	lsls	r1, r2, #5
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	440a      	add	r2, r1
 8002040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002048:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800205a:	0151      	lsls	r1, r2, #5
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	440a      	add	r2, r1
 8002060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002064:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002068:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	3301      	adds	r3, #1
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002076:	429a      	cmp	r2, r3
 8002078:	d3b3      	bcc.n	8001fe2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002088:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800208c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800209c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a6:	f043 030b 	orr.w	r3, r3, #11
 80020aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020bc:	f043 030b 	orr.w	r3, r3, #11
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	e015      	b.n	80020f0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ea:	f043 030b 	orr.w	r3, r3, #11
 80020ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002102:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002114:	461a      	mov	r2, r3
 8002116:	f003 ff1b 	bl	8005f50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fe4a 	bl	8005dc8 <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213e:	d124      	bne.n	800218a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fee0 	bl	8005f0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f002 fe95 	bl	8004e7e <USB_GetDevSpeed>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681c      	ldr	r4, [r3, #0]
 8002160:	f001 fb98 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 8002164:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4620      	mov	r0, r4
 8002170:	f002 fb94 	bl	800489c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f006 f9c4 	bl	8008502 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002188:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fe1a 	bl	8005dc8 <USB_ReadInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b08      	cmp	r3, #8
 800219c:	d10a      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f006 f9a1 	bl	80084e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f002 0208 	and.w	r2, r2, #8
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fe05 	bl	8005dc8 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d122      	bne.n	800220e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d4:	2301      	movs	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	e014      	b.n	8002204 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb27 	bl	800284c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	3301      	adds	r3, #1
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220a:	429a      	cmp	r2, r3
 800220c:	d3e5      	bcc.n	80021da <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fdd8 	bl	8005dc8 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002222:	d13b      	bne.n	800229c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002224:	2301      	movs	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
 8002228:	e02b      	b.n	8002282 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3340      	adds	r3, #64	; 0x40
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d115      	bne.n	800227c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002250:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002252:	2b00      	cmp	r3, #0
 8002254:	da12      	bge.n	800227c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	333f      	adds	r3, #63	; 0x3f
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fae8 	bl	800284c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	3301      	adds	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	429a      	cmp	r2, r3
 800228a:	d3ce      	bcc.n	800222a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800229a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fd91 	bl	8005dc8 <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022b0:	d155      	bne.n	800235e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	e045      	b.n	8002344 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d12e      	bne.n	800233e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da2b      	bge.n	800233e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80022f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d121      	bne.n	800233e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233a:	6053      	str	r3, [r2, #4]
            break;
 800233c:	e007      	b.n	800234e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	3301      	adds	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234a:	429a      	cmp	r2, r3
 800234c:	d3b4      	bcc.n	80022b8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800235c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fd30 	bl	8005dc8 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d10a      	bne.n	800238a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f006 f945 	bl	8008604 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fd1a 	bl	8005dc8 <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d115      	bne.n	80023ca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f006 f935 	bl	8008620 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	e000      	b.n	80023ca <HAL_PCD_IRQHandler+0x938>
      return;
 80023c8:	bf00      	nop
    }
  }
}
 80023ca:	3734      	adds	r7, #52	; 0x34
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd90      	pop	{r4, r7, pc}

080023d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_PCD_SetAddress+0x1a>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e013      	b.n	8002412 <HAL_PCD_SetAddress+0x42>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f003 fc78 	bl	8005cf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	4608      	mov	r0, r1
 8002424:	4611      	mov	r1, r2
 8002426:	461a      	mov	r2, r3
 8002428:	4603      	mov	r3, r0
 800242a:	70fb      	strb	r3, [r7, #3]
 800242c:	460b      	mov	r3, r1
 800242e:	803b      	strh	r3, [r7, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da0f      	bge.n	8002460 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	3338      	adds	r3, #56	; 0x38
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	705a      	strb	r2, [r3, #1]
 800245e:	e00f      	b.n	8002480 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	3304      	adds	r3, #4
 8002478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800248c:	883a      	ldrh	r2, [r7, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	78ba      	ldrb	r2, [r7, #2]
 8002496:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024aa:	78bb      	ldrb	r3, [r7, #2]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d102      	bne.n	80024b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_PCD_EP_Open+0xaa>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e00e      	b.n	80024e2 <HAL_PCD_EP_Open+0xc8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fcf8 	bl	8004ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80024e0:	7afb      	ldrb	r3, [r7, #11]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da0f      	bge.n	800251e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	3338      	adds	r3, #56	; 0x38
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	705a      	strb	r2, [r3, #1]
 800251c:	e00f      	b.n	800253e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	b2da      	uxtb	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_PCD_EP_Close+0x6e>
 8002554:	2302      	movs	r3, #2
 8002556:	e00e      	b.n	8002576 <HAL_PCD_EP_Close+0x8c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fd36 	bl	8004fd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	460b      	mov	r3, r1
 800258c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800258e:	7afb      	ldrb	r3, [r7, #11]
 8002590:	f003 020f 	and.w	r2, r3, #15
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2200      	movs	r2, #0
 80025b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2200      	movs	r2, #0
 80025be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	6979      	ldr	r1, [r7, #20]
 80025f2:	f003 f815 	bl	8005620 <USB_EP0StartXfer>
 80025f6:	e008      	b.n	800260a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6979      	ldr	r1, [r7, #20]
 8002606:	f002 fdc3 	bl	8005190 <USB_EPStartXfer>
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	460b      	mov	r3, r1
 8002652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3338      	adds	r3, #56	; 0x38
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2201      	movs	r2, #1
 8002682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	b2da      	uxtb	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	6979      	ldr	r1, [r7, #20]
 80026b6:	f002 ffb3 	bl	8005620 <USB_EP0StartXfer>
 80026ba:	e008      	b.n	80026ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	6979      	ldr	r1, [r7, #20]
 80026ca:	f002 fd61 	bl	8005190 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d901      	bls.n	80026f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e050      	b.n	8002798 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	da0f      	bge.n	800271e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	3338      	adds	r3, #56	; 0x38
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	705a      	strb	r2, [r3, #1]
 800271c:	e00d      	b.n	800273a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_PCD_EP_SetStall+0x82>
 8002756:	2302      	movs	r3, #2
 8002758:	e01e      	b.n	8002798 <HAL_PCD_EP_SetStall+0xc0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 f9f1 	bl	8005b50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	b2d9      	uxtb	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002788:	461a      	mov	r2, r3
 800278a:	f003 fbe1 	bl	8005f50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 020f 	and.w	r2, r3, #15
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d901      	bls.n	80027be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e042      	b.n	8002844 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da0f      	bge.n	80027e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	3338      	adds	r3, #56	; 0x38
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
 80027e4:	e00f      	b.n	8002806 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_PCD_EP_ClrStall+0x86>
 8002822:	2302      	movs	r3, #2
 8002824:	e00e      	b.n	8002844 <HAL_PCD_EP_ClrStall+0xa4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68f9      	ldr	r1, [r7, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	f003 f9f9 	bl	8005c2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800285c:	2b00      	cmp	r3, #0
 800285e:	da0c      	bge.n	800287a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 020f 	and.w	r2, r3, #15
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	3338      	adds	r3, #56	; 0x38
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	3304      	adds	r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e00c      	b.n	8002894 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	3304      	adds	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 f818 	bl	80058d0 <USB_EPStopXfer>
 80028a0:	4603      	mov	r3, r0
 80028a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b08a      	sub	sp, #40	; 0x28
 80028b2:	af02      	add	r7, sp, #8
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	3338      	adds	r3, #56	; 0x38
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	3304      	adds	r3, #4
 80028d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d901      	bls.n	80028e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06c      	b.n	80029c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d902      	bls.n	8002902 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3303      	adds	r3, #3
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800290a:	e02b      	b.n	8002964 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	429a      	cmp	r2, r3
 8002920:	d902      	bls.n	8002928 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	3303      	adds	r3, #3
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6919      	ldr	r1, [r3, #16]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002940:	b2db      	uxtb	r3, r3
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4603      	mov	r3, r0
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f003 f86c 	bl	8005a24 <USB_WritePacket>

    ep->xfer_buff  += len;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1a      	ldr	r2, [r3, #32]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	441a      	add	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	b29b      	uxth	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	429a      	cmp	r2, r3
 8002978:	d809      	bhi.n	800298e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002982:	429a      	cmp	r2, r3
 8002984:	d203      	bcs.n	800298e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1be      	bne.n	800290c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	429a      	cmp	r2, r3
 8002998:	d811      	bhi.n	80029be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	2201      	movs	r2, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	6939      	ldr	r1, [r7, #16]
 80029b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029ba:	4013      	ands	r3, r2
 80029bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	333c      	adds	r3, #60	; 0x3c
 80029e0:	3304      	adds	r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d17b      	bne.n	8002af6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	f240 80b9 	bls.w	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b3 	beq.w	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a30:	6093      	str	r3, [r2, #8]
 8002a32:	e0a7      	b.n	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	6093      	str	r3, [r2, #8]
 8002a50:	e098      	b.n	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 8093 	bne.w	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d90f      	bls.n	8002a86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a82:	6093      	str	r3, [r2, #8]
 8002a84:	e07e      	b.n	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	3304      	adds	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d114      	bne.n	8002ae8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	f003 fa3c 	bl	8005f50 <USB_EP0_OutStart>
 8002ad8:	e006      	b.n	8002ae8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f005 fcc4 	bl	800847c <HAL_PCD_DataOutStageCallback>
 8002af4:	e046      	b.n	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d124      	bne.n	8002b48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b14:	461a      	mov	r2, r3
 8002b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1a:	6093      	str	r3, [r2, #8]
 8002b1c:	e032      	b.n	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b34:	461a      	mov	r2, r3
 8002b36:	2320      	movs	r3, #32
 8002b38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f005 fc9b 	bl	800847c <HAL_PCD_DataOutStageCallback>
 8002b46:	e01d      	b.n	8002b84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d114      	bne.n	8002b78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b70:	461a      	mov	r2, r3
 8002b72:	2100      	movs	r1, #0
 8002b74:	f003 f9ec 	bl	8005f50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f005 fc7c 	bl	800847c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	4f54300a 	.word	0x4f54300a
 8002b94:	4f54310a 	.word	0x4f54310a

08002b98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	333c      	adds	r3, #60	; 0x3c
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d90e      	bls.n	8002bec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be4:	461a      	mov	r2, r3
 8002be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f005 fc33 	bl	8008458 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d90c      	bls.n	8002c14 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f003 f99e 	bl	8005f50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	4f54300a 	.word	0x4f54300a

08002c24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
 8002c30:	4613      	mov	r3, r2
 8002c32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c42:	883b      	ldrh	r3, [r7, #0]
 8002c44:	0419      	lsls	r1, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c50:	e028      	b.n	8002ca4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e00d      	b.n	8002c82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	3340      	adds	r3, #64	; 0x40
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4413      	add	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3ec      	bcc.n	8002c66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c8c:	883b      	ldrh	r3, [r7, #0]
 8002c8e:	0418      	lsls	r0, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4302      	orrs	r2, r0
 8002c9c:	3340      	adds	r3, #64	; 0x40
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e314      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	d903      	bls.n	8002d0e <HAL_RCC_OscConfig+0x22>
 8002d06:	21e6      	movs	r1, #230	; 0xe6
 8002d08:	4897      	ldr	r0, [pc, #604]	; (8002f68 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	f7fd ff32 	bl	8000b72 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8088 	beq.w	8002e2c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <HAL_RCC_OscConfig+0x54>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCC_OscConfig+0x54>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d36:	d003      	beq.n	8002d40 <HAL_RCC_OscConfig+0x54>
 8002d38:	21eb      	movs	r1, #235	; 0xeb
 8002d3a:	488b      	ldr	r0, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	f7fd ff19 	bl	8000b72 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d40:	4b8a      	ldr	r3, [pc, #552]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4c:	4b87      	ldr	r3, [pc, #540]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d58:	4b84      	ldr	r3, [pc, #528]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d64:	d10b      	bne.n	8002d7e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d66:	4b81      	ldr	r3, [pc, #516]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d05b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d157      	bne.n	8002e2a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e2d4      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0xaa>
 8002d88:	4b78      	ldr	r3, [pc, #480]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a77      	ldr	r2, [pc, #476]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e01d      	b.n	8002dd2 <HAL_RCC_OscConfig+0xe6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCC_OscConfig+0xce>
 8002da0:	4b72      	ldr	r3, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a71      	ldr	r2, [pc, #452]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a6e      	ldr	r2, [pc, #440]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCC_OscConfig+0xe6>
 8002dba:	4b6c      	ldr	r3, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6b      	ldr	r2, [pc, #428]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a68      	ldr	r2, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe f893 	bl	8000f04 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de2:	f7fe f88f 	bl	8000f04 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e299      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df4:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0xf6>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe f87f 	bl	8000f04 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0a:	f7fe f87b 	bl	8000f04 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e285      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1c:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x11e>
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d079      	beq.n	8002f2c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_OscConfig+0x166>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d004      	beq.n	8002e52 <HAL_RCC_OscConfig+0x166>
 8002e48:	f240 111d 	movw	r1, #285	; 0x11d
 8002e4c:	4846      	ldr	r0, [pc, #280]	; (8002f68 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	f7fd fe90 	bl	8000b72 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b1f      	cmp	r3, #31
 8002e58:	d904      	bls.n	8002e64 <HAL_RCC_OscConfig+0x178>
 8002e5a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002e5e:	4842      	ldr	r0, [pc, #264]	; (8002f68 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	f7fd fe87 	bl	8000b72 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e64:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e70:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d11c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d116      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e88:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e243      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	492f      	ldr	r1, [pc, #188]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb4:	e03a      	b.n	8002f2c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d020      	beq.n	8002f00 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_RCC_OscConfig+0x284>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f81e 	bl	8000f04 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7fe f81a 	bl	8000f04 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e224      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	491c      	ldr	r1, [pc, #112]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
 8002efe:	e015      	b.n	8002f2c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x284>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fd fffd 	bl	8000f04 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7fd fff9 	bl	8000f04 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e203      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d045      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCC_OscConfig+0x266>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d004      	beq.n	8002f52 <HAL_RCC_OscConfig+0x266>
 8002f48:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002f4c:	4806      	ldr	r0, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	f7fd fe10 	bl	8000b72 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01e      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fd ffd0 	bl	8000f04 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e010      	b.n	8002f8a <HAL_RCC_OscConfig+0x29e>
 8002f68:	0800ee64 	.word	0x0800ee64
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470000 	.word	0x42470000
 8002f74:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fd ffc4 	bl	8000f04 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1ce      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x28c>
 8002f96:	e015      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b5b      	ldr	r3, [pc, #364]	; (8003108 <HAL_RCC_OscConfig+0x41c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fd ffb1 	bl	8000f04 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fd ffad 	bl	8000f04 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1b7      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b52      	ldr	r3, [pc, #328]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80b0 	beq.w	8003132 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x30c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x30c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d004      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x30c>
 8002fee:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002ff2:	4846      	ldr	r0, [pc, #280]	; (800310c <HAL_RCC_OscConfig+0x420>)
 8002ff4:	f7fd fdbd 	bl	8000b72 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff8:	4b42      	ldr	r3, [pc, #264]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10f      	bne.n	8003024 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 800300e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	; 0x40
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCC_OscConfig+0x424>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d118      	bne.n	8003062 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003030:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x424>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a36      	ldr	r2, [pc, #216]	; (8003110 <HAL_RCC_OscConfig+0x424>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303c:	f7fd ff62 	bl	8000f04 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7fd ff5e 	bl	8000f04 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e168      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <HAL_RCC_OscConfig+0x424>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d106      	bne.n	8003078 <HAL_RCC_OscConfig+0x38c>
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a25      	ldr	r2, [pc, #148]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x3c6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x3ae>
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x3c6>
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fd ff23 	bl	8000f04 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fd ff1f 	bl	8000f04 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e127      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_OscConfig+0x418>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ee      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3d6>
 80030e4:	e01c      	b.n	8003120 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fd ff0d 	bl	8000f04 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	e012      	b.n	8003114 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fd ff09 	bl	8000f04 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d909      	bls.n	8003114 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e111      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
 8003104:	40023800 	.word	0x40023800
 8003108:	42470e80 	.word	0x42470e80
 800310c:	0800ee64 	.word	0x0800ee64
 8003110:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	4b86      	ldr	r3, [pc, #536]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e6      	bne.n	80030ee <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003126:	4b82      	ldr	r3, [pc, #520]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a81      	ldr	r2, [pc, #516]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_RCC_OscConfig+0x468>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d008      	beq.n	8003154 <HAL_RCC_OscConfig+0x468>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d004      	beq.n	8003154 <HAL_RCC_OscConfig+0x468>
 800314a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800314e:	4879      	ldr	r0, [pc, #484]	; (8003334 <HAL_RCC_OscConfig+0x648>)
 8003150:	f7fd fd0f 	bl	8000b72 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80e4 	beq.w	8003326 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800315e:	4b74      	ldr	r3, [pc, #464]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b08      	cmp	r3, #8
 8003168:	f000 80a5 	beq.w	80032b6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b02      	cmp	r3, #2
 8003172:	f040 8089 	bne.w	8003288 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_RCC_OscConfig+0x4a6>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003186:	d004      	beq.n	8003192 <HAL_RCC_OscConfig+0x4a6>
 8003188:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800318c:	4869      	ldr	r0, [pc, #420]	; (8003334 <HAL_RCC_OscConfig+0x648>)
 800318e:	f7fd fcf0 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	2b3f      	cmp	r3, #63	; 0x3f
 8003198:	d904      	bls.n	80031a4 <HAL_RCC_OscConfig+0x4b8>
 800319a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800319e:	4865      	ldr	r0, [pc, #404]	; (8003334 <HAL_RCC_OscConfig+0x648>)
 80031a0:	f7fd fce7 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b31      	cmp	r3, #49	; 0x31
 80031aa:	d904      	bls.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80031b4:	d904      	bls.n	80031c0 <HAL_RCC_OscConfig+0x4d4>
 80031b6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80031ba:	485e      	ldr	r0, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x648>)
 80031bc:	f7fd fcd9 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_OscConfig+0x4fe>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00c      	beq.n	80031ea <HAL_RCC_OscConfig+0x4fe>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_OscConfig+0x4fe>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d004      	beq.n	80031ea <HAL_RCC_OscConfig+0x4fe>
 80031e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80031e4:	4853      	ldr	r0, [pc, #332]	; (8003334 <HAL_RCC_OscConfig+0x648>)
 80031e6:	f7fd fcc4 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d903      	bls.n	80031fa <HAL_RCC_OscConfig+0x50e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	d904      	bls.n	8003204 <HAL_RCC_OscConfig+0x518>
 80031fa:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80031fe:	484d      	ldr	r0, [pc, #308]	; (8003334 <HAL_RCC_OscConfig+0x648>)
 8003200:	f7fd fcb7 	bl	8000b72 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_RCC_OscConfig+0x64c>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fd fe7b 	bl	8000f04 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fe77 	bl	8000f04 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e081      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	019b      	lsls	r3, r3, #6
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	4936      	ldr	r1, [pc, #216]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x64c>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fd fe50 	bl	8000f04 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fd fe4c 	bl	8000f04 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e056      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x57c>
 8003286:	e04e      	b.n	8003326 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_OscConfig+0x64c>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fd fe39 	bl	8000f04 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fd fe35 	bl	8000f04 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e03f      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a8:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x5aa>
 80032b4:	e037      	b.n	8003326 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e032      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x644>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d028      	beq.n	8003322 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d121      	bne.n	8003322 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d11a      	bne.n	8003322 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	0800ee64 	.word	0x0800ee64
 8003338:	42470060 	.word	0x42470060

0800333c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e18c      	b.n	800366a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_RCC_ClockConfig+0x24>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d904      	bls.n	800336a <HAL_RCC_ClockConfig+0x2e>
 8003360:	f240 215a 	movw	r1, #602	; 0x25a
 8003364:	4887      	ldr	r0, [pc, #540]	; (8003584 <HAL_RCC_ClockConfig+0x248>)
 8003366:	f7fd fc04 	bl	8000b72 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d031      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d02e      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d02b      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d028      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d025      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d022      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b06      	cmp	r3, #6
 8003392:	d01f      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b07      	cmp	r3, #7
 8003398:	d01c      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d019      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b09      	cmp	r3, #9
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b0a      	cmp	r3, #10
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b0b      	cmp	r3, #11
 80033b0:	d010      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d00d      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b0d      	cmp	r3, #13
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b0e      	cmp	r3, #14
 80033c2:	d007      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	d004      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x98>
 80033ca:	f240 215b 	movw	r1, #603	; 0x25b
 80033ce:	486d      	ldr	r0, [pc, #436]	; (8003584 <HAL_RCC_ClockConfig+0x248>)
 80033d0:	f7fd fbcf 	bl	8000b72 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_RCC_ClockConfig+0x24c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b69      	ldr	r3, [pc, #420]	; (8003588 <HAL_RCC_ClockConfig+0x24c>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_ClockConfig+0x24c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e136      	b.n	800366a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d049      	beq.n	800349c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b5d      	ldr	r3, [pc, #372]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a5c      	ldr	r2, [pc, #368]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b57      	ldr	r3, [pc, #348]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a56      	ldr	r2, [pc, #344]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d024      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b80      	cmp	r3, #128	; 0x80
 8003446:	d020      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b90      	cmp	r3, #144	; 0x90
 800344e:	d01c      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2ba0      	cmp	r3, #160	; 0xa0
 8003456:	d018      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2bb0      	cmp	r3, #176	; 0xb0
 800345e:	d014      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2bc0      	cmp	r3, #192	; 0xc0
 8003466:	d010      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2bd0      	cmp	r3, #208	; 0xd0
 800346e:	d00c      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2be0      	cmp	r3, #224	; 0xe0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2bf0      	cmp	r3, #240	; 0xf0
 800347e:	d004      	beq.n	800348a <HAL_RCC_ClockConfig+0x14e>
 8003480:	f240 217e 	movw	r1, #638	; 0x27e
 8003484:	483f      	ldr	r0, [pc, #252]	; (8003584 <HAL_RCC_ClockConfig+0x248>)
 8003486:	f7fd fb74 	bl	8000b72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348a:	4b40      	ldr	r3, [pc, #256]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	493d      	ldr	r1, [pc, #244]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d059      	beq.n	800355c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x196>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d00c      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x196>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x196>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d004      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x196>
 80034c8:	f240 2185 	movw	r1, #645	; 0x285
 80034cc:	482d      	ldr	r0, [pc, #180]	; (8003584 <HAL_RCC_ClockConfig+0x248>)
 80034ce:	f7fd fb50 	bl	8000b72 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d119      	bne.n	800351a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0bf      	b.n	800366a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0af      	b.n	800366a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0a7      	b.n	800366a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4919      	ldr	r1, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 8003528:	4313      	orrs	r3, r2
 800352a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800352c:	f7fd fcea 	bl	8000f04 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	e00a      	b.n	800354a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7fd fce6 	bl	8000f04 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e08f      	b.n	800366a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_ClockConfig+0x250>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 020c 	and.w	r2, r3, #12
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	429a      	cmp	r2, r3
 800355a:	d1eb      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_RCC_ClockConfig+0x24c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d212      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_RCC_ClockConfig+0x24c>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_ClockConfig+0x24c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d007      	beq.n	8003590 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e072      	b.n	800366a <HAL_RCC_ClockConfig+0x32e>
 8003584:	0800ee64 	.word	0x0800ee64
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d025      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d018      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x29a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d013      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x29a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035b6:	d00e      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x29a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x29a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80035ca:	d004      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x29a>
 80035cc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80035d0:	4828      	ldr	r0, [pc, #160]	; (8003674 <HAL_RCC_ClockConfig+0x338>)
 80035d2:	f7fd face 	bl	8000b72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d6:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_RCC_ClockConfig+0x33c>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	4925      	ldr	r1, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x33c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d026      	beq.n	8003642 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d018      	beq.n	800362e <HAL_RCC_ClockConfig+0x2f2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003604:	d013      	beq.n	800362e <HAL_RCC_ClockConfig+0x2f2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800360e:	d00e      	beq.n	800362e <HAL_RCC_ClockConfig+0x2f2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x2f2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003622:	d004      	beq.n	800362e <HAL_RCC_ClockConfig+0x2f2>
 8003624:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003628:	4812      	ldr	r0, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x338>)
 800362a:	f7fd faa2 	bl	8000b72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_RCC_ClockConfig+0x33c>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	490e      	ldr	r1, [pc, #56]	; (8003678 <HAL_RCC_ClockConfig+0x33c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003642:	f000 f821 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003646:	4602      	mov	r2, r0
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_ClockConfig+0x33c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	490a      	ldr	r1, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x340>)
 8003654:	5ccb      	ldrb	r3, [r1, r3]
 8003656:	fa22 f303 	lsr.w	r3, r2, r3
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x344>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x348>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fb00 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	0800ee64 	.word	0x0800ee64
 8003678:	40023800 	.word	0x40023800
 800367c:	0800f030 	.word	0x0800f030
 8003680:	20000000 	.word	0x20000000
 8003684:	20000004 	.word	0x20000004

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800368c:	b094      	sub	sp, #80	; 0x50
 800368e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
 8003694:	2300      	movs	r3, #0
 8003696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003698:	2300      	movs	r3, #0
 800369a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a0:	4b79      	ldr	r3, [pc, #484]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d00d      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x40>
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	f200 80e1 	bhi.w	8003874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x34>
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ba:	e0db      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b73      	ldr	r3, [pc, #460]	; (800388c <HAL_RCC_GetSysClockFreq+0x204>)
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036c0:	e0db      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c2:	4b73      	ldr	r3, [pc, #460]	; (8003890 <HAL_RCC_GetSysClockFreq+0x208>)
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c6:	e0d8      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d2:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d063      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	2200      	movs	r2, #0
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30
 80036f2:	2300      	movs	r3, #0
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
 80036f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036fa:	4622      	mov	r2, r4
 80036fc:	462b      	mov	r3, r5
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	0159      	lsls	r1, r3, #5
 8003708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800370c:	0150      	lsls	r0, r2, #5
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4621      	mov	r1, r4
 8003714:	1a51      	subs	r1, r2, r1
 8003716:	6139      	str	r1, [r7, #16]
 8003718:	4629      	mov	r1, r5
 800371a:	eb63 0301 	sbc.w	r3, r3, r1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800372c:	4659      	mov	r1, fp
 800372e:	018b      	lsls	r3, r1, #6
 8003730:	4651      	mov	r1, sl
 8003732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003736:	4651      	mov	r1, sl
 8003738:	018a      	lsls	r2, r1, #6
 800373a:	4651      	mov	r1, sl
 800373c:	ebb2 0801 	subs.w	r8, r2, r1
 8003740:	4659      	mov	r1, fp
 8003742:	eb63 0901 	sbc.w	r9, r3, r1
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800375a:	4690      	mov	r8, r2
 800375c:	4699      	mov	r9, r3
 800375e:	4623      	mov	r3, r4
 8003760:	eb18 0303 	adds.w	r3, r8, r3
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	462b      	mov	r3, r5
 8003768:	eb49 0303 	adc.w	r3, r9, r3
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800377a:	4629      	mov	r1, r5
 800377c:	024b      	lsls	r3, r1, #9
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003784:	4621      	mov	r1, r4
 8003786:	024a      	lsls	r2, r1, #9
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378e:	2200      	movs	r2, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003798:	f7fc fdca 	bl	8000330 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	e058      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b38      	ldr	r3, [pc, #224]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	2200      	movs	r2, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	4611      	mov	r1, r2
 80037b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	f04f 0000 	mov.w	r0, #0
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	0159      	lsls	r1, r3, #5
 80037ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d2:	0150      	lsls	r0, r2, #5
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4641      	mov	r1, r8
 80037da:	ebb2 0a01 	subs.w	sl, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f8:	ebb2 040a 	subs.w	r4, r2, sl
 80037fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	00eb      	lsls	r3, r5, #3
 800380a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380e:	00e2      	lsls	r2, r4, #3
 8003810:	4614      	mov	r4, r2
 8003812:	461d      	mov	r5, r3
 8003814:	4643      	mov	r3, r8
 8003816:	18e3      	adds	r3, r4, r3
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	464b      	mov	r3, r9
 800381c:	eb45 0303 	adc.w	r3, r5, r3
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800382e:	4629      	mov	r1, r5
 8003830:	028b      	lsls	r3, r1, #10
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003838:	4621      	mov	r1, r4
 800383a:	028a      	lsls	r2, r1, #10
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003842:	2200      	movs	r2, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	61fa      	str	r2, [r7, #28]
 8003848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384c:	f7fc fd70 	bl	8000330 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800386a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003872:	e002      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetSysClockFreq+0x204>)
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800387c:	4618      	mov	r0, r3
 800387e:	3750      	adds	r7, #80	; 0x50
 8003880:	46bd      	mov	sp, r7
 8003882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	0800f040 	.word	0x0800f040

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d8:	f7ff ffdc 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	0800f040 	.word	0x0800f040

080038fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	220f      	movs	r2, #15
 800390a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_GetClockConfig+0x5c>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	08db      	lsrs	r3, r3, #3
 8003936:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_RCC_GetClockConfig+0x60>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	40023c00 	.word	0x40023c00

08003960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0c5      	b.n	8003afe <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a64      	ldr	r2, [pc, #400]	; (8003b08 <HAL_TIM_Base_Init+0x1a8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d045      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d040      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a60      	ldr	r2, [pc, #384]	; (8003b0c <HAL_TIM_Base_Init+0x1ac>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d03b      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a5e      	ldr	r2, [pc, #376]	; (8003b10 <HAL_TIM_Base_Init+0x1b0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d036      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a5d      	ldr	r2, [pc, #372]	; (8003b14 <HAL_TIM_Base_Init+0x1b4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d031      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a5b      	ldr	r2, [pc, #364]	; (8003b18 <HAL_TIM_Base_Init+0x1b8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02c      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5a      	ldr	r2, [pc, #360]	; (8003b1c <HAL_TIM_Base_Init+0x1bc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d027      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_TIM_Base_Init+0x1c0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a57      	ldr	r2, [pc, #348]	; (8003b24 <HAL_TIM_Base_Init+0x1c4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d01d      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a55      	ldr	r2, [pc, #340]	; (8003b28 <HAL_TIM_Base_Init+0x1c8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a54      	ldr	r2, [pc, #336]	; (8003b2c <HAL_TIM_Base_Init+0x1cc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a52      	ldr	r2, [pc, #328]	; (8003b30 <HAL_TIM_Base_Init+0x1d0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a51      	ldr	r2, [pc, #324]	; (8003b34 <HAL_TIM_Base_Init+0x1d4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a4f      	ldr	r2, [pc, #316]	; (8003b38 <HAL_TIM_Base_Init+0x1d8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIM_Base_Init+0xa8>
 80039fe:	f240 1113 	movw	r1, #275	; 0x113
 8003a02:	484e      	ldr	r0, [pc, #312]	; (8003b3c <HAL_TIM_Base_Init+0x1dc>)
 8003a04:	f7fd f8b5 	bl	8000b72 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d014      	beq.n	8003a3a <HAL_TIM_Base_Init+0xda>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d010      	beq.n	8003a3a <HAL_TIM_Base_Init+0xda>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d00c      	beq.n	8003a3a <HAL_TIM_Base_Init+0xda>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d008      	beq.n	8003a3a <HAL_TIM_Base_Init+0xda>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b60      	cmp	r3, #96	; 0x60
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIM_Base_Init+0xda>
 8003a30:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003a34:	4841      	ldr	r0, [pc, #260]	; (8003b3c <HAL_TIM_Base_Init+0x1dc>)
 8003a36:	f7fd f89c 	bl	8000b72 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00e      	beq.n	8003a60 <HAL_TIM_Base_Init+0x100>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d009      	beq.n	8003a60 <HAL_TIM_Base_Init+0x100>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a54:	d004      	beq.n	8003a60 <HAL_TIM_Base_Init+0x100>
 8003a56:	f240 1115 	movw	r1, #277	; 0x115
 8003a5a:	4838      	ldr	r0, [pc, #224]	; (8003b3c <HAL_TIM_Base_Init+0x1dc>)
 8003a5c:	f7fd f889 	bl	8000b72 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_TIM_Base_Init+0x11a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b80      	cmp	r3, #128	; 0x80
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIM_Base_Init+0x11a>
 8003a70:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003a74:	4831      	ldr	r0, [pc, #196]	; (8003b3c <HAL_TIM_Base_Init+0x1dc>)
 8003a76:	f7fd f87c 	bl	8000b72 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f856 	bl	8003b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 fa4a 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40001000 	.word	0x40001000
 8003b1c:	40001400 	.word	0x40001400
 8003b20:	40010400 	.word	0x40010400
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800
 8003b30:	40001800 	.word	0x40001800
 8003b34:	40001c00 	.word	0x40001c00
 8003b38:	40002000 	.word	0x40002000
 8003b3c:	0800ee9c 	.word	0x0800ee9c

08003b40 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a51      	ldr	r2, [pc, #324]	; (8003ca8 <HAL_TIM_Base_Start_IT+0x154>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d040      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4d      	ldr	r2, [pc, #308]	; (8003cac <HAL_TIM_Base_Start_IT+0x158>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4c      	ldr	r2, [pc, #304]	; (8003cb0 <HAL_TIM_Base_Start_IT+0x15c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a4a      	ldr	r2, [pc, #296]	; (8003cb4 <HAL_TIM_Base_Start_IT+0x160>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_TIM_Base_Start_IT+0x164>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a47      	ldr	r2, [pc, #284]	; (8003cbc <HAL_TIM_Base_Start_IT+0x168>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a46      	ldr	r2, [pc, #280]	; (8003cc0 <HAL_TIM_Base_Start_IT+0x16c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a44      	ldr	r2, [pc, #272]	; (8003cc4 <HAL_TIM_Base_Start_IT+0x170>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a43      	ldr	r2, [pc, #268]	; (8003cc8 <HAL_TIM_Base_Start_IT+0x174>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a41      	ldr	r2, [pc, #260]	; (8003ccc <HAL_TIM_Base_Start_IT+0x178>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <HAL_TIM_Base_Start_IT+0x17c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3e      	ldr	r2, [pc, #248]	; (8003cd4 <HAL_TIM_Base_Start_IT+0x180>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3d      	ldr	r2, [pc, #244]	; (8003cd8 <HAL_TIM_Base_Start_IT+0x184>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIM_Base_Start_IT+0x9e>
 8003be8:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003bec:	483b      	ldr	r0, [pc, #236]	; (8003cdc <HAL_TIM_Base_Start_IT+0x188>)
 8003bee:	f7fc ffc0 	bl	8000b72 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e04e      	b.n	8003ca0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <HAL_TIM_Base_Start_IT+0x154>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0x116>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d01d      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0x116>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <HAL_TIM_Base_Start_IT+0x158>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d018      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0x116>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <HAL_TIM_Base_Start_IT+0x15c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0x116>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_TIM_Base_Start_IT+0x160>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0x116>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_TIM_Base_Start_IT+0x16c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0x116>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_TIM_Base_Start_IT+0x170>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0x116>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_TIM_Base_Start_IT+0x17c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d111      	bne.n	8003c8e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b06      	cmp	r3, #6
 8003c7a:	d010      	beq.n	8003c9e <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8c:	e007      	b.n	8003c9e <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40001000 	.word	0x40001000
 8003cbc:	40001400 	.word	0x40001400
 8003cc0:	40010400 	.word	0x40010400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800
 8003cd0:	40001800 	.word	0x40001800
 8003cd4:	40001c00 	.word	0x40001c00
 8003cd8:	40002000 	.word	0x40002000
 8003cdc:	0800ee9c 	.word	0x0800ee9c

08003ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0202 	mvn.w	r2, #2
 8003d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8ee 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8e0 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8f1 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0204 	mvn.w	r2, #4
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8c4 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8b6 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8c7 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0208 	mvn.w	r2, #8
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2204      	movs	r2, #4
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f89a 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f88c 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f89d 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0210 	mvn.w	r2, #16
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f870 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f862 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f873 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0201 	mvn.w	r2, #1
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fc fe70 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f902 	bl	8004094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f838 	bl	8003f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0220 	mvn.w	r2, #32
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8cc 	bl	8004080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a40      	ldr	r2, [pc, #256]	; (8004054 <TIM_Base_SetConfig+0x114>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d00f      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a3d      	ldr	r2, [pc, #244]	; (8004058 <TIM_Base_SetConfig+0x118>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	; (800405c <TIM_Base_SetConfig+0x11c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <TIM_Base_SetConfig+0x120>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <TIM_Base_SetConfig+0x114>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d027      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <TIM_Base_SetConfig+0x118>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d023      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2b      	ldr	r2, [pc, #172]	; (800405c <TIM_Base_SetConfig+0x11c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01f      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <TIM_Base_SetConfig+0x120>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a29      	ldr	r2, [pc, #164]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d017      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <TIM_Base_SetConfig+0x128>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <TIM_Base_SetConfig+0x12c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a26      	ldr	r2, [pc, #152]	; (8004070 <TIM_Base_SetConfig+0x130>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a25      	ldr	r2, [pc, #148]	; (8004074 <TIM_Base_SetConfig+0x134>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a24      	ldr	r2, [pc, #144]	; (8004078 <TIM_Base_SetConfig+0x138>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <TIM_Base_SetConfig+0x13c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <TIM_Base_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0xf8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	615a      	str	r2, [r3, #20]
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40010400 	.word	0x40010400
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800
 8004074:	40001800 	.word	0x40001800
 8004078:	40001c00 	.word	0x40001c00
 800407c:	40002000 	.word	0x40002000

08004080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0be      	b.n	8004238 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d031      	beq.n	8004126 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a5e      	ldr	r2, [pc, #376]	; (8004240 <HAL_UART_Init+0x198>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_UART_Init+0x4c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a5c      	ldr	r2, [pc, #368]	; (8004244 <HAL_UART_Init+0x19c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_UART_Init+0x4c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5b      	ldr	r2, [pc, #364]	; (8004248 <HAL_UART_Init+0x1a0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_UART_Init+0x4c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a59      	ldr	r2, [pc, #356]	; (800424c <HAL_UART_Init+0x1a4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_UART_Init+0x4c>
 80040ea:	f240 1173 	movw	r1, #371	; 0x173
 80040ee:	4858      	ldr	r0, [pc, #352]	; (8004250 <HAL_UART_Init+0x1a8>)
 80040f0:	f7fc fd3f 	bl	8000b72 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d041      	beq.n	8004180 <HAL_UART_Init+0xd8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	d03c      	beq.n	8004180 <HAL_UART_Init+0xd8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410e:	d037      	beq.n	8004180 <HAL_UART_Init+0xd8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004118:	d032      	beq.n	8004180 <HAL_UART_Init+0xd8>
 800411a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800411e:	484c      	ldr	r0, [pc, #304]	; (8004250 <HAL_UART_Init+0x1a8>)
 8004120:	f7fc fd27 	bl	8000b72 <assert_failed>
 8004124:	e02c      	b.n	8004180 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a45      	ldr	r2, [pc, #276]	; (8004240 <HAL_UART_Init+0x198>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <HAL_UART_Init+0xd8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a43      	ldr	r2, [pc, #268]	; (8004244 <HAL_UART_Init+0x19c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_UART_Init+0xd8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a42      	ldr	r2, [pc, #264]	; (8004248 <HAL_UART_Init+0x1a0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <HAL_UART_Init+0xd8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a42      	ldr	r2, [pc, #264]	; (8004254 <HAL_UART_Init+0x1ac>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_UART_Init+0xd8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a41      	ldr	r2, [pc, #260]	; (8004258 <HAL_UART_Init+0x1b0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_UART_Init+0xd8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a3b      	ldr	r2, [pc, #236]	; (800424c <HAL_UART_Init+0x1a4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_UART_Init+0xd8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3d      	ldr	r2, [pc, #244]	; (800425c <HAL_UART_Init+0x1b4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_UART_Init+0xd8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3b      	ldr	r2, [pc, #236]	; (8004260 <HAL_UART_Init+0x1b8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_UART_Init+0xd8>
 8004176:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800417a:	4835      	ldr	r0, [pc, #212]	; (8004250 <HAL_UART_Init+0x1a8>)
 800417c:	f7fc fcf9 	bl	8000b72 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_UART_Init+0xf4>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004190:	d004      	beq.n	800419c <HAL_UART_Init+0xf4>
 8004192:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004196:	482e      	ldr	r0, [pc, #184]	; (8004250 <HAL_UART_Init+0x1a8>)
 8004198:	f7fc fceb 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_UART_Init+0x110>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ac:	d004      	beq.n	80041b8 <HAL_UART_Init+0x110>
 80041ae:	f240 117b 	movw	r1, #379	; 0x17b
 80041b2:	4827      	ldr	r0, [pc, #156]	; (8004250 <HAL_UART_Init+0x1a8>)
 80041b4:	f7fc fcdd 	bl	8000b72 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fc fd03 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2224      	movs	r2, #36	; 0x24
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f83a 	bl	8004264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800420e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40011000 	.word	0x40011000
 8004244:	40004400 	.word	0x40004400
 8004248:	40004800 	.word	0x40004800
 800424c:	40011400 	.word	0x40011400
 8004250:	0800eed4 	.word	0x0800eed4
 8004254:	40004c00 	.word	0x40004c00
 8004258:	40005000 	.word	0x40005000
 800425c:	40007800 	.word	0x40007800
 8004260:	40007c00 	.word	0x40007c00

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b0c0      	sub	sp, #256	; 0x100
 800426a:	af00      	add	r7, sp, #0
 800426c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4bcf      	ldr	r3, [pc, #828]	; (80045b4 <UART_SetConfig+0x350>)
 8004278:	429a      	cmp	r2, r3
 800427a:	d904      	bls.n	8004286 <UART_SetConfig+0x22>
 800427c:	f640 6161 	movw	r1, #3681	; 0xe61
 8004280:	48cd      	ldr	r0, [pc, #820]	; (80045b8 <UART_SetConfig+0x354>)
 8004282:	f7fc fc76 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <UART_SetConfig+0x42>
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429a:	d004      	beq.n	80042a6 <UART_SetConfig+0x42>
 800429c:	f640 6162 	movw	r1, #3682	; 0xe62
 80042a0:	48c5      	ldr	r0, [pc, #788]	; (80045b8 <UART_SetConfig+0x354>)
 80042a2:	f7fc fc66 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d010      	beq.n	80042d2 <UART_SetConfig+0x6e>
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d00a      	beq.n	80042d2 <UART_SetConfig+0x6e>
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042c6:	d004      	beq.n	80042d2 <UART_SetConfig+0x6e>
 80042c8:	f640 6163 	movw	r1, #3683	; 0xe63
 80042cc:	48ba      	ldr	r0, [pc, #744]	; (80045b8 <UART_SetConfig+0x354>)
 80042ce:	f7fc fc50 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <UART_SetConfig+0x88>
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <UART_SetConfig+0x92>
 80042ec:	f640 6164 	movw	r1, #3684	; 0xe64
 80042f0:	48b1      	ldr	r0, [pc, #708]	; (80045b8 <UART_SetConfig+0x354>)
 80042f2:	f7fc fc3e 	bl	8000b72 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	68d9      	ldr	r1, [r3, #12]
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	ea40 0301 	orr.w	r3, r0, r1
 8004312:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	431a      	orrs	r2, r3
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	431a      	orrs	r2, r3
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004342:	f021 010c 	bic.w	r1, r1, #12
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004350:	430b      	orrs	r3, r1
 8004352:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	6999      	ldr	r1, [r3, #24]
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	ea40 0301 	orr.w	r3, r0, r1
 8004370:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b90      	ldr	r3, [pc, #576]	; (80045bc <UART_SetConfig+0x358>)
 800437a:	429a      	cmp	r2, r3
 800437c:	d005      	beq.n	800438a <UART_SetConfig+0x126>
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b8e      	ldr	r3, [pc, #568]	; (80045c0 <UART_SetConfig+0x35c>)
 8004386:	429a      	cmp	r2, r3
 8004388:	d104      	bne.n	8004394 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800438a:	f7ff faa3 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 800438e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004392:	e003      	b.n	800439c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7ff fa8a 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8004398:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a6:	f040 810f 	bne.w	80045c8 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043b4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043b8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	1891      	adds	r1, r2, r2
 80043c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80043c4:	415b      	adcs	r3, r3
 80043c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043cc:	4621      	mov	r1, r4
 80043ce:	eb12 0801 	adds.w	r8, r2, r1
 80043d2:	4629      	mov	r1, r5
 80043d4:	eb43 0901 	adc.w	r9, r3, r1
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ec:	4690      	mov	r8, r2
 80043ee:	4699      	mov	r9, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	eb18 0303 	adds.w	r3, r8, r3
 80043f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043fa:	462b      	mov	r3, r5
 80043fc:	eb49 0303 	adc.w	r3, r9, r3
 8004400:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004410:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004414:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004418:	460b      	mov	r3, r1
 800441a:	18db      	adds	r3, r3, r3
 800441c:	653b      	str	r3, [r7, #80]	; 0x50
 800441e:	4613      	mov	r3, r2
 8004420:	eb42 0303 	adc.w	r3, r2, r3
 8004424:	657b      	str	r3, [r7, #84]	; 0x54
 8004426:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800442a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800442e:	f7fb ff7f 	bl	8000330 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b63      	ldr	r3, [pc, #396]	; (80045c4 <UART_SetConfig+0x360>)
 8004438:	fba3 2302 	umull	r2, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	011c      	lsls	r4, r3, #4
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800444a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800444e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	64b9      	str	r1, [r7, #72]	; 0x48
 800445a:	415b      	adcs	r3, r3
 800445c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004462:	4641      	mov	r1, r8
 8004464:	eb12 0a01 	adds.w	sl, r2, r1
 8004468:	4649      	mov	r1, r9
 800446a:	eb43 0b01 	adc.w	fp, r3, r1
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800447a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800447e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004482:	4692      	mov	sl, r2
 8004484:	469b      	mov	fp, r3
 8004486:	4643      	mov	r3, r8
 8004488:	eb1a 0303 	adds.w	r3, sl, r3
 800448c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004490:	464b      	mov	r3, r9
 8004492:	eb4b 0303 	adc.w	r3, fp, r3
 8004496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044a6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044ae:	460b      	mov	r3, r1
 80044b0:	18db      	adds	r3, r3, r3
 80044b2:	643b      	str	r3, [r7, #64]	; 0x40
 80044b4:	4613      	mov	r3, r2
 80044b6:	eb42 0303 	adc.w	r3, r2, r3
 80044ba:	647b      	str	r3, [r7, #68]	; 0x44
 80044bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044c0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044c4:	f7fb ff34 	bl	8000330 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4611      	mov	r1, r2
 80044ce:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <UART_SetConfig+0x360>)
 80044d0:	fba3 2301 	umull	r2, r3, r3, r1
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	2264      	movs	r2, #100	; 0x64
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	1acb      	subs	r3, r1, r3
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044e4:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <UART_SetConfig+0x360>)
 80044e6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044f2:	441c      	add	r4, r3
 80044f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044fe:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004502:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004506:	4642      	mov	r2, r8
 8004508:	464b      	mov	r3, r9
 800450a:	1891      	adds	r1, r2, r2
 800450c:	63b9      	str	r1, [r7, #56]	; 0x38
 800450e:	415b      	adcs	r3, r3
 8004510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004512:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004516:	4641      	mov	r1, r8
 8004518:	1851      	adds	r1, r2, r1
 800451a:	6339      	str	r1, [r7, #48]	; 0x30
 800451c:	4649      	mov	r1, r9
 800451e:	414b      	adcs	r3, r1
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800452e:	4659      	mov	r1, fp
 8004530:	00cb      	lsls	r3, r1, #3
 8004532:	4651      	mov	r1, sl
 8004534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004538:	4651      	mov	r1, sl
 800453a:	00ca      	lsls	r2, r1, #3
 800453c:	4610      	mov	r0, r2
 800453e:	4619      	mov	r1, r3
 8004540:	4603      	mov	r3, r0
 8004542:	4642      	mov	r2, r8
 8004544:	189b      	adds	r3, r3, r2
 8004546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800454a:	464b      	mov	r3, r9
 800454c:	460a      	mov	r2, r1
 800454e:	eb42 0303 	adc.w	r3, r2, r3
 8004552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004562:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004566:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800456a:	460b      	mov	r3, r1
 800456c:	18db      	adds	r3, r3, r3
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004570:	4613      	mov	r3, r2
 8004572:	eb42 0303 	adc.w	r3, r2, r3
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800457c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004580:	f7fb fed6 	bl	8000330 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <UART_SetConfig+0x360>)
 800458a:	fba3 1302 	umull	r1, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2164      	movs	r1, #100	; 0x64
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	3332      	adds	r3, #50	; 0x32
 800459c:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <UART_SetConfig+0x360>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	f003 0207 	and.w	r2, r3, #7
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4422      	add	r2, r4
 80045b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045b2:	e108      	b.n	80047c6 <UART_SetConfig+0x562>
 80045b4:	00a037a0 	.word	0x00a037a0
 80045b8:	0800eed4 	.word	0x0800eed4
 80045bc:	40011000 	.word	0x40011000
 80045c0:	40011400 	.word	0x40011400
 80045c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045da:	4642      	mov	r2, r8
 80045dc:	464b      	mov	r3, r9
 80045de:	1891      	adds	r1, r2, r2
 80045e0:	6239      	str	r1, [r7, #32]
 80045e2:	415b      	adcs	r3, r3
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ea:	4641      	mov	r1, r8
 80045ec:	1854      	adds	r4, r2, r1
 80045ee:	4649      	mov	r1, r9
 80045f0:	eb43 0501 	adc.w	r5, r3, r1
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	00eb      	lsls	r3, r5, #3
 80045fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004602:	00e2      	lsls	r2, r4, #3
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	4643      	mov	r3, r8
 800460a:	18e3      	adds	r3, r4, r3
 800460c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004610:	464b      	mov	r3, r9
 8004612:	eb45 0303 	adc.w	r3, r5, r3
 8004616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004626:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004636:	4629      	mov	r1, r5
 8004638:	008b      	lsls	r3, r1, #2
 800463a:	4621      	mov	r1, r4
 800463c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004640:	4621      	mov	r1, r4
 8004642:	008a      	lsls	r2, r1, #2
 8004644:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004648:	f7fb fe72 	bl	8000330 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4b60      	ldr	r3, [pc, #384]	; (80047d4 <UART_SetConfig+0x570>)
 8004652:	fba3 2302 	umull	r2, r3, r3, r2
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	011c      	lsls	r4, r3, #4
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004664:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004668:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	1891      	adds	r1, r2, r2
 8004672:	61b9      	str	r1, [r7, #24]
 8004674:	415b      	adcs	r3, r3
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467c:	4641      	mov	r1, r8
 800467e:	1851      	adds	r1, r2, r1
 8004680:	6139      	str	r1, [r7, #16]
 8004682:	4649      	mov	r1, r9
 8004684:	414b      	adcs	r3, r1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004694:	4659      	mov	r1, fp
 8004696:	00cb      	lsls	r3, r1, #3
 8004698:	4651      	mov	r1, sl
 800469a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469e:	4651      	mov	r1, sl
 80046a0:	00ca      	lsls	r2, r1, #3
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	4642      	mov	r2, r8
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b0:	464b      	mov	r3, r9
 80046b2:	460a      	mov	r2, r1
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046d4:	4649      	mov	r1, r9
 80046d6:	008b      	lsls	r3, r1, #2
 80046d8:	4641      	mov	r1, r8
 80046da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046de:	4641      	mov	r1, r8
 80046e0:	008a      	lsls	r2, r1, #2
 80046e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046e6:	f7fb fe23 	bl	8000330 <__aeabi_uldivmod>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <UART_SetConfig+0x570>)
 80046f0:	fba3 1302 	umull	r1, r3, r3, r2
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	2164      	movs	r1, #100	; 0x64
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	3332      	adds	r3, #50	; 0x32
 8004702:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <UART_SetConfig+0x570>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800470e:	441c      	add	r4, r3
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004714:	2200      	movs	r2, #0
 8004716:	673b      	str	r3, [r7, #112]	; 0x70
 8004718:	677a      	str	r2, [r7, #116]	; 0x74
 800471a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800471e:	4642      	mov	r2, r8
 8004720:	464b      	mov	r3, r9
 8004722:	1891      	adds	r1, r2, r2
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	415b      	adcs	r3, r3
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472e:	4641      	mov	r1, r8
 8004730:	1851      	adds	r1, r2, r1
 8004732:	6039      	str	r1, [r7, #0]
 8004734:	4649      	mov	r1, r9
 8004736:	414b      	adcs	r3, r1
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004746:	4659      	mov	r1, fp
 8004748:	00cb      	lsls	r3, r1, #3
 800474a:	4651      	mov	r1, sl
 800474c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004750:	4651      	mov	r1, sl
 8004752:	00ca      	lsls	r2, r1, #3
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	4603      	mov	r3, r0
 800475a:	4642      	mov	r2, r8
 800475c:	189b      	adds	r3, r3, r2
 800475e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004760:	464b      	mov	r3, r9
 8004762:	460a      	mov	r2, r1
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	663b      	str	r3, [r7, #96]	; 0x60
 8004774:	667a      	str	r2, [r7, #100]	; 0x64
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004782:	4649      	mov	r1, r9
 8004784:	008b      	lsls	r3, r1, #2
 8004786:	4641      	mov	r1, r8
 8004788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478c:	4641      	mov	r1, r8
 800478e:	008a      	lsls	r2, r1, #2
 8004790:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004794:	f7fb fdcc 	bl	8000330 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <UART_SetConfig+0x570>)
 800479e:	fba3 1302 	umull	r1, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	2164      	movs	r1, #100	; 0x64
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	3332      	adds	r3, #50	; 0x32
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <UART_SetConfig+0x570>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	f003 020f 	and.w	r2, r3, #15
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4422      	add	r2, r4
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	bf00      	nop
 80047c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d2:	bf00      	nop
 80047d4:	51eb851f 	.word	0x51eb851f

080047d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d8:	b084      	sub	sp, #16
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	f107 001c 	add.w	r0, r7, #28
 80047e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d122      	bne.n	8004836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d105      	bne.n	800482a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 fbee 	bl	800600c <USB_CoreReset>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
 8004834:	e01a      	b.n	800486c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 fbe2 	bl	800600c <USB_CoreReset>
 8004848:	4603      	mov	r3, r0
 800484a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800484c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
 800485e:	e005      	b.n	800486c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10b      	bne.n	800488a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f043 0206 	orr.w	r2, r3, #6
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800488a:	7bfb      	ldrb	r3, [r7, #15]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004896:	b004      	add	sp, #16
 8004898:	4770      	bx	lr
	...

0800489c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d165      	bne.n	800497c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a41      	ldr	r2, [pc, #260]	; (80049b8 <USB_SetTurnaroundTime+0x11c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d906      	bls.n	80048c6 <USB_SetTurnaroundTime+0x2a>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4a40      	ldr	r2, [pc, #256]	; (80049bc <USB_SetTurnaroundTime+0x120>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d202      	bcs.n	80048c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048c0:	230f      	movs	r3, #15
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e062      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4a3c      	ldr	r2, [pc, #240]	; (80049bc <USB_SetTurnaroundTime+0x120>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d306      	bcc.n	80048dc <USB_SetTurnaroundTime+0x40>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4a3b      	ldr	r2, [pc, #236]	; (80049c0 <USB_SetTurnaroundTime+0x124>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d202      	bcs.n	80048dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048d6:	230e      	movs	r3, #14
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e057      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a38      	ldr	r2, [pc, #224]	; (80049c0 <USB_SetTurnaroundTime+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d306      	bcc.n	80048f2 <USB_SetTurnaroundTime+0x56>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4a37      	ldr	r2, [pc, #220]	; (80049c4 <USB_SetTurnaroundTime+0x128>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d202      	bcs.n	80048f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048ec:	230d      	movs	r3, #13
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e04c      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4a33      	ldr	r2, [pc, #204]	; (80049c4 <USB_SetTurnaroundTime+0x128>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d306      	bcc.n	8004908 <USB_SetTurnaroundTime+0x6c>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4a32      	ldr	r2, [pc, #200]	; (80049c8 <USB_SetTurnaroundTime+0x12c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d802      	bhi.n	8004908 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004902:	230c      	movs	r3, #12
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e041      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <USB_SetTurnaroundTime+0x12c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d906      	bls.n	800491e <USB_SetTurnaroundTime+0x82>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <USB_SetTurnaroundTime+0x130>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d802      	bhi.n	800491e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004918:	230b      	movs	r3, #11
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e036      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <USB_SetTurnaroundTime+0x130>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d906      	bls.n	8004934 <USB_SetTurnaroundTime+0x98>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4a29      	ldr	r2, [pc, #164]	; (80049d0 <USB_SetTurnaroundTime+0x134>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d802      	bhi.n	8004934 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800492e:	230a      	movs	r3, #10
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e02b      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <USB_SetTurnaroundTime+0x134>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d906      	bls.n	800494a <USB_SetTurnaroundTime+0xae>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <USB_SetTurnaroundTime+0x138>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d202      	bcs.n	800494a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004944:	2309      	movs	r3, #9
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e020      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <USB_SetTurnaroundTime+0x138>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d306      	bcc.n	8004960 <USB_SetTurnaroundTime+0xc4>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <USB_SetTurnaroundTime+0x13c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d802      	bhi.n	8004960 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800495a:	2308      	movs	r3, #8
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e015      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <USB_SetTurnaroundTime+0x13c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d906      	bls.n	8004976 <USB_SetTurnaroundTime+0xda>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <USB_SetTurnaroundTime+0x140>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d202      	bcs.n	8004976 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004970:	2307      	movs	r3, #7
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e00a      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004976:	2306      	movs	r3, #6
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e007      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004982:	2309      	movs	r3, #9
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e001      	b.n	800498c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004988:	2309      	movs	r3, #9
 800498a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	00d8acbf 	.word	0x00d8acbf
 80049bc:	00e4e1c0 	.word	0x00e4e1c0
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	01067380 	.word	0x01067380
 80049c8:	011a499f 	.word	0x011a499f
 80049cc:	01312cff 	.word	0x01312cff
 80049d0:	014ca43f 	.word	0x014ca43f
 80049d4:	016e3600 	.word	0x016e3600
 80049d8:	01a6ab1f 	.word	0x01a6ab1f
 80049dc:	01e84800 	.word	0x01e84800

080049e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f043 0201 	orr.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d115      	bne.n	8004a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a52:	2001      	movs	r0, #1
 8004a54:	f7fc fa62 	bl	8000f1c <HAL_Delay>
      ms++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f001 fa45 	bl	8005eee <USB_GetMode>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d01e      	beq.n	8004aa8 <USB_SetCurrentMode+0x84>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b31      	cmp	r3, #49	; 0x31
 8004a6e:	d9f0      	bls.n	8004a52 <USB_SetCurrentMode+0x2e>
 8004a70:	e01a      	b.n	8004aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d115      	bne.n	8004aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a84:	2001      	movs	r0, #1
 8004a86:	f7fc fa49 	bl	8000f1c <HAL_Delay>
      ms++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 fa2c 	bl	8005eee <USB_GetMode>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <USB_SetCurrentMode+0x84>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b31      	cmp	r3, #49	; 0x31
 8004aa0:	d9f0      	bls.n	8004a84 <USB_SetCurrentMode+0x60>
 8004aa2:	e001      	b.n	8004aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e005      	b.n	8004ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b32      	cmp	r3, #50	; 0x32
 8004aac:	d101      	bne.n	8004ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004abc:	b084      	sub	sp, #16
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e009      	b.n	8004af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3340      	adds	r3, #64	; 0x40
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3301      	adds	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b0e      	cmp	r3, #14
 8004af4:	d9f2      	bls.n	8004adc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11c      	bne.n	8004b36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b0a:	f043 0302 	orr.w	r3, r3, #2
 8004b0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
 8004b34:	e00b      	b.n	8004b4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	4619      	mov	r1, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b68:	461a      	mov	r2, r3
 8004b6a:	680b      	ldr	r3, [r1, #0]
 8004b6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d10c      	bne.n	8004b8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f965 	bl	8004e4c <USB_SetDevSpeed>
 8004b82:	e008      	b.n	8004b96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b84:	2101      	movs	r1, #1
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f960 	bl	8004e4c <USB_SetDevSpeed>
 8004b8c:	e003      	b.n	8004b96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b8e:	2103      	movs	r1, #3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f95b 	bl	8004e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b96:	2110      	movs	r1, #16
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f8f3 	bl	8004d84 <USB_FlushTxFifo>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f91f 	bl	8004dec <USB_FlushRxFifo>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	e043      	b.n	8004c6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf8:	d118      	bne.n	8004c2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e013      	b.n	8004c3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	461a      	mov	r2, r3
 8004c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e008      	b.n	8004c3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3301      	adds	r3, #1
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d3b7      	bcc.n	8004be2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e043      	b.n	8004d00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8e:	d118      	bne.n	8004cc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e013      	b.n	8004cd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	e008      	b.n	8004cd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cce:	461a      	mov	r2, r3
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d3b7      	bcc.n	8004c78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f043 0210 	orr.w	r2, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <USB_DevInit+0x2c4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f043 0208 	orr.w	r2, r3, #8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d107      	bne.n	8004d70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d68:	f043 0304 	orr.w	r3, r3, #4
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d7c:	b004      	add	sp, #16
 8004d7e:	4770      	bx	lr
 8004d80:	803c3800 	.word	0x803c3800

08004d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <USB_FlushTxFifo+0x64>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e01b      	b.n	8004ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	daf2      	bge.n	8004d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	019b      	lsls	r3, r3, #6
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <USB_FlushTxFifo+0x64>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e006      	b.n	8004ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d0f0      	beq.n	8004dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	00030d40 	.word	0x00030d40

08004dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <USB_FlushRxFifo+0x5c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e018      	b.n	8004e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	daf2      	bge.n	8004df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2210      	movs	r2, #16
 8004e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <USB_FlushRxFifo+0x5c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e006      	b.n	8004e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d0f0      	beq.n	8004e1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	00030d40 	.word	0x00030d40

08004e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b087      	sub	sp, #28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0306 	and.w	r3, r3, #6
 8004e96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]
 8004ea2:	e00a      	b.n	8004eba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d002      	beq.n	8004eb0 <USB_GetDevSpeed+0x32>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b06      	cmp	r3, #6
 8004eae:	d102      	bne.n	8004eb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	75fb      	strb	r3, [r7, #23]
 8004eb4:	e001      	b.n	8004eba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004eb6:	230f      	movs	r3, #15
 8004eb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d13a      	bne.n	8004f5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	68f9      	ldr	r1, [r7, #12]
 8004efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d155      	bne.n	8004fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	791b      	ldrb	r3, [r3, #4]
 8004f36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	059b      	lsls	r3, r3, #22
 8004f3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f40:	4313      	orrs	r3, r2
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e036      	b.n	8004fc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11a      	bne.n	8004fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	791b      	ldrb	r3, [r3, #4]
 8004fac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d161      	bne.n	80050b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800500a:	d11f      	bne.n	800504c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800502a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800504a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	2101      	movs	r1, #1
 800505e:	fa01 f303 	lsl.w	r3, r1, r3
 8005062:	b29b      	uxth	r3, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800506c:	4013      	ands	r3, r2
 800506e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2101      	movs	r1, #1
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	b29b      	uxth	r3, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005090:	4013      	ands	r3, r2
 8005092:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0159      	lsls	r1, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	440b      	add	r3, r1
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	4619      	mov	r1, r3
 80050b0:	4b35      	ldr	r3, [pc, #212]	; (8005188 <USB_DeactivateEndpoint+0x1b0>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]
 80050b6:	e060      	b.n	800517a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ce:	d11f      	bne.n	8005110 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800510e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	43db      	mvns	r3, r3
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005130:	4013      	ands	r3, r2
 8005132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f303 	lsl.w	r3, r1, r3
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	43db      	mvns	r3, r3
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005154:	4013      	ands	r3, r2
 8005156:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	0159      	lsls	r1, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	440b      	add	r3, r1
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	4619      	mov	r1, r3
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <USB_DeactivateEndpoint+0x1b4>)
 8005176:	4013      	ands	r3, r2
 8005178:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	ec337800 	.word	0xec337800
 800518c:	eff37800 	.word	0xeff37800

08005190 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 815c 	bne.w	800546a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d132      	bne.n	8005220 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005218:	0cdb      	lsrs	r3, r3, #19
 800521a:	04db      	lsls	r3, r3, #19
 800521c:	6113      	str	r3, [r2, #16]
 800521e:	e074      	b.n	800530a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	0cdb      	lsrs	r3, r3, #19
 800523c:	04db      	lsls	r3, r3, #19
 800523e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800525e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	440b      	add	r3, r1
 800527c:	1e59      	subs	r1, r3, #1
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	fbb1 f3f3 	udiv	r3, r1, r3
 8005286:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005288:	4b9d      	ldr	r3, [pc, #628]	; (8005500 <USB_EPStartXfer+0x370>)
 800528a:	400b      	ands	r3, r1
 800528c:	69b9      	ldr	r1, [r7, #24]
 800528e:	0148      	lsls	r0, r1, #5
 8005290:	69f9      	ldr	r1, [r7, #28]
 8005292:	4401      	add	r1, r0
 8005294:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	0148      	lsls	r0, r1, #5
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	4401      	add	r1, r0
 80052ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052be:	4313      	orrs	r3, r2
 80052c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	791b      	ldrb	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d11f      	bne.n	800530a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005308:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d14b      	bne.n	80053a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	461a      	mov	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	791b      	ldrb	r3, [r3, #4]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d128      	bne.n	8005386 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d110      	bne.n	8005366 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e00f      	b.n	8005386 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e133      	b.n	8005610 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	791b      	ldrb	r3, [r3, #4]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d015      	beq.n	80053fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 811b 	beq.w	8005610 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	2101      	movs	r1, #1
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	69f9      	ldr	r1, [r7, #28]
 80053f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f6:	4313      	orrs	r3, r2
 80053f8:	634b      	str	r3, [r1, #52]	; 0x34
 80053fa:	e109      	b.n	8005610 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d110      	bne.n	800542e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e00f      	b.n	800544e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6919      	ldr	r1, [r3, #16]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	781a      	ldrb	r2, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	b298      	uxth	r0, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	4603      	mov	r3, r0
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fade 	bl	8005a24 <USB_WritePacket>
 8005468:	e0d2      	b.n	8005610 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005484:	0cdb      	lsrs	r3, r3, #19
 8005486:	04db      	lsls	r3, r3, #19
 8005488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d126      	bne.n	8005504 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	0148      	lsls	r0, r1, #5
 80054d0:	69f9      	ldr	r1, [r7, #28]
 80054d2:	4401      	add	r1, r0
 80054d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054d8:	4313      	orrs	r3, r2
 80054da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fa:	6113      	str	r3, [r2, #16]
 80054fc:	e03a      	b.n	8005574 <USB_EPStartXfer+0x3e4>
 80054fe:	bf00      	nop
 8005500:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4413      	add	r3, r2
 800550e:	1e5a      	subs	r2, r3, #1
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	8afa      	ldrh	r2, [r7, #22]
 8005520:	fb03 f202 	mul.w	r2, r3, r2
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	8afb      	ldrh	r3, [r7, #22]
 8005538:	04d9      	lsls	r1, r3, #19
 800553a:	4b38      	ldr	r3, [pc, #224]	; (800561c <USB_EPStartXfer+0x48c>)
 800553c:	400b      	ands	r3, r1
 800553e:	69b9      	ldr	r1, [r7, #24]
 8005540:	0148      	lsls	r0, r1, #5
 8005542:	69f9      	ldr	r1, [r7, #28]
 8005544:	4401      	add	r1, r0
 8005546:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800554a:	4313      	orrs	r3, r2
 800554c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005564:	69b9      	ldr	r1, [r7, #24]
 8005566:	0148      	lsls	r0, r1, #5
 8005568:	69f9      	ldr	r1, [r7, #28]
 800556a:	4401      	add	r1, r0
 800556c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005570:	4313      	orrs	r3, r2
 8005572:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d10d      	bne.n	8005596 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	6919      	ldr	r1, [r3, #16]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	460a      	mov	r2, r1
 8005594:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	791b      	ldrb	r3, [r3, #4]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d128      	bne.n	80055f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d110      	bne.n	80055d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e00f      	b.n	80055f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800560e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	1ff80000 	.word	0x1ff80000

08005620 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	f040 80ce 	bne.w	80057de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d132      	bne.n	80056b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800566c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800568c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	0cdb      	lsrs	r3, r3, #19
 80056aa:	04db      	lsls	r3, r3, #19
 80056ac:	6113      	str	r3, [r2, #16]
 80056ae:	e04e      	b.n	800574e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ca:	0cdb      	lsrs	r3, r3, #19
 80056cc:	04db      	lsls	r3, r3, #19
 80056ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	699a      	ldr	r2, [r3, #24]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d903      	bls.n	8005708 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573e:	6939      	ldr	r1, [r7, #16]
 8005740:	0148      	lsls	r0, r1, #5
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	4401      	add	r1, r0
 8005746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800574a:	4313      	orrs	r3, r2
 800574c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d11e      	bne.n	8005792 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	461a      	mov	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e097      	b.n	80058c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8083 	beq.w	80058c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	6979      	ldr	r1, [r7, #20]
 80057d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d8:	4313      	orrs	r3, r2
 80057da:	634b      	str	r3, [r1, #52]	; 0x34
 80057dc:	e071      	b.n	80058c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f8:	0cdb      	lsrs	r3, r3, #19
 80057fa:	04db      	lsls	r3, r3, #19
 80057fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800581c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005820:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005870:	6939      	ldr	r1, [r7, #16]
 8005872:	0148      	lsls	r0, r1, #5
 8005874:	6979      	ldr	r1, [r7, #20]
 8005876:	4401      	add	r1, r0
 8005878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800587c:	4313      	orrs	r3, r2
 800587e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d10d      	bne.n	80058a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6919      	ldr	r1, [r3, #16]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	460a      	mov	r2, r1
 80058a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d14a      	bne.n	8005984 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005906:	f040 8086 	bne.w	8005a16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	7812      	ldrb	r2, [r2, #0]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800592c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005950:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f242 7210 	movw	r2, #10000	; 0x2710
 800595e:	4293      	cmp	r3, r2
 8005960:	d902      	bls.n	8005968 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
          break;
 8005966:	e056      	b.n	8005a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800597c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005980:	d0e7      	beq.n	8005952 <USB_EPStopXfer+0x82>
 8005982:	e048      	b.n	8005a16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599c:	d13b      	bne.n	8005a16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	7812      	ldrb	r2, [r2, #0]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d902      	bls.n	80059fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
          break;
 80059fa:	e00c      	b.n	8005a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a14:	d0e7      	beq.n	80059e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	460b      	mov	r3, r1
 8005a34:	71fb      	strb	r3, [r7, #7]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d123      	bne.n	8005a92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a4a:	88bb      	ldrh	r3, [r7, #4]
 8005a4c:	3303      	adds	r3, #3
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e018      	b.n	8005a8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	031a      	lsls	r2, r3, #12
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a64:	461a      	mov	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	3301      	adds	r3, #1
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d3e2      	bcc.n	8005a58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3724      	adds	r7, #36	; 0x24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b08b      	sub	sp, #44	; 0x2c
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	e014      	b.n	8005af6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	3301      	adds	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	3301      	adds	r3, #1
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	3301      	adds	r3, #1
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3e6      	bcc.n	8005acc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005afe:	8bfb      	ldrh	r3, [r7, #30]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01e      	beq.n	8005b42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f107 0310 	add.w	r3, r7, #16
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	701a      	strb	r2, [r3, #0]
      i++;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	3301      	adds	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b36:	8bfb      	ldrh	r3, [r7, #30]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b3c:	8bfb      	ldrh	r3, [r7, #30]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1ea      	bne.n	8005b18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	372c      	adds	r7, #44	; 0x2c
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d12c      	bne.n	8005bc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	db12      	blt.n	8005ba4 <USB_EPSetStall+0x54>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00f      	beq.n	8005ba4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ba2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e02b      	b.n	8005c1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db12      	blt.n	8005bfe <USB_EPSetStall+0xae>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00f      	beq.n	8005bfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d128      	bne.n	8005c9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	791b      	ldrb	r3, [r3, #4]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d003      	beq.n	8005c78 <USB_EPClearStall+0x4c>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	791b      	ldrb	r3, [r3, #4]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d138      	bne.n	8005cea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e027      	b.n	8005cea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	791b      	ldrb	r3, [r3, #4]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d003      	beq.n	8005cca <USB_EPClearStall+0x9e>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	791b      	ldrb	r3, [r3, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d10f      	bne.n	8005cea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d2c:	68f9      	ldr	r1, [r7, #12]
 8005d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d32:	4313      	orrs	r3, r2
 8005d34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d72:	f023 0302 	bic.w	r3, r3, #2
 8005d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005da0:	f023 0303 	bic.w	r3, r3, #3
 8005da4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005de0:	68fb      	ldr	r3, [r7, #12]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0c1b      	lsrs	r3, r3, #16
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	b29b      	uxth	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e84:	68bb      	ldr	r3, [r7, #8]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b087      	sub	sp, #28
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	01db      	lsls	r3, r3, #7
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4013      	ands	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0301 	and.w	r3, r3, #1
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	333c      	adds	r3, #60	; 0x3c
 8005f66:	3304      	adds	r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4a26      	ldr	r2, [pc, #152]	; (8006008 <USB_EP0_OutStart+0xb8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d90a      	bls.n	8005f8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f84:	d101      	bne.n	8005f8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e037      	b.n	8005ffa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb8:	f043 0318 	orr.w	r3, r3, #24
 8005fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10f      	bne.n	8005ff8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	4f54300a 	.word	0x4f54300a

0800600c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <USB_CoreReset+0x64>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e01b      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	daf2      	bge.n	8006018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a09      	ldr	r2, [pc, #36]	; (8006070 <USB_CoreReset+0x64>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e006      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d0f0      	beq.n	8006042 <USB_CoreReset+0x36>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	00030d40 	.word	0x00030d40

08006074 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006080:	f44f 7008 	mov.w	r0, #544	; 0x220
 8006084:	f002 fc64 	bl	8008950 <USBD_static_malloc>
 8006088:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	32b0      	adds	r2, #176	; 0xb0
 800609a:	2100      	movs	r1, #0
 800609c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0d8      	b.n	8006256 <USBD_CDC_Init+0x1e2>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80060a4:	f44f 7208 	mov.w	r2, #544	; 0x220
 80060a8:	2100      	movs	r1, #0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f008 f99e 	bl	800e3ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	32b0      	adds	r2, #176	; 0xb0
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	32b0      	adds	r2, #176	; 0xb0
 80060ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7c1b      	ldrb	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d138      	bne.n	800614e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060dc:	4b60      	ldr	r3, [pc, #384]	; (8006260 <USBD_CDC_Init+0x1ec>)
 80060de:	7819      	ldrb	r1, [r3, #0]
 80060e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e4:	2202      	movs	r2, #2
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f002 fb0f 	bl	800870a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060ec:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <USBD_CDC_Init+0x1ec>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f003 020f 	and.w	r2, r3, #15
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3324      	adds	r3, #36	; 0x24
 8006102:	2201      	movs	r2, #1
 8006104:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006106:	4b57      	ldr	r3, [pc, #348]	; (8006264 <USBD_CDC_Init+0x1f0>)
 8006108:	7819      	ldrb	r1, [r3, #0]
 800610a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800610e:	2202      	movs	r2, #2
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f002 fafa 	bl	800870a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006116:	4b53      	ldr	r3, [pc, #332]	; (8006264 <USBD_CDC_Init+0x1f0>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800612e:	2201      	movs	r2, #1
 8006130:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006132:	4b4d      	ldr	r3, [pc, #308]	; (8006268 <USBD_CDC_Init+0x1f4>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	f003 020f 	and.w	r2, r3, #15
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	3326      	adds	r3, #38	; 0x26
 8006148:	2210      	movs	r2, #16
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	e035      	b.n	80061ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800614e:	4b44      	ldr	r3, [pc, #272]	; (8006260 <USBD_CDC_Init+0x1ec>)
 8006150:	7819      	ldrb	r1, [r3, #0]
 8006152:	2340      	movs	r3, #64	; 0x40
 8006154:	2202      	movs	r2, #2
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f002 fad7 	bl	800870a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800615c:	4b40      	ldr	r3, [pc, #256]	; (8006260 <USBD_CDC_Init+0x1ec>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f003 020f 	and.w	r2, r3, #15
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	3324      	adds	r3, #36	; 0x24
 8006172:	2201      	movs	r2, #1
 8006174:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006176:	4b3b      	ldr	r3, [pc, #236]	; (8006264 <USBD_CDC_Init+0x1f0>)
 8006178:	7819      	ldrb	r1, [r3, #0]
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	2202      	movs	r2, #2
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f002 fac3 	bl	800870a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006184:	4b37      	ldr	r3, [pc, #220]	; (8006264 <USBD_CDC_Init+0x1f0>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800619c:	2201      	movs	r2, #1
 800619e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061a0:	4b31      	ldr	r3, [pc, #196]	; (8006268 <USBD_CDC_Init+0x1f4>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	3326      	adds	r3, #38	; 0x26
 80061b6:	2210      	movs	r2, #16
 80061b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061ba:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <USBD_CDC_Init+0x1f4>)
 80061bc:	7819      	ldrb	r1, [r3, #0]
 80061be:	2308      	movs	r3, #8
 80061c0:	2203      	movs	r2, #3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f002 faa1 	bl	800870a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <USBD_CDC_Init+0x1f4>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f003 020f 	and.w	r2, r3, #15
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	3324      	adds	r3, #36	; 0x24
 80061de:	2201      	movs	r2, #1
 80061e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	33b0      	adds	r3, #176	; 0xb0
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hcdc->RxState = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  hcdc->TxCallBack = NULL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

  if (hcdc->RxBuffer == NULL)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <USBD_CDC_Init+0x1b0>
  {
    return (uint8_t)USBD_EMEM;
 8006220:	2302      	movs	r3, #2
 8006222:	e018      	b.n	8006256 <USBD_CDC_Init+0x1e2>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7c1b      	ldrb	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <USBD_CDC_Init+0x1ce>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <USBD_CDC_Init+0x1f0>)
 800622e:	7819      	ldrb	r1, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f002 fb54 	bl	80088e8 <USBD_LL_PrepareReceive>
 8006240:	e008      	b.n	8006254 <USBD_CDC_Init+0x1e0>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <USBD_CDC_Init+0x1f0>)
 8006244:	7819      	ldrb	r1, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800624c:	2340      	movs	r3, #64	; 0x40
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f002 fb4a 	bl	80088e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000093 	.word	0x20000093
 8006264:	20000094 	.word	0x20000094
 8006268:	20000095 	.word	0x20000095

0800626c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006278:	4b3a      	ldr	r3, [pc, #232]	; (8006364 <USBD_CDC_DeInit+0xf8>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f002 fa69 	bl	8008756 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006284:	4b37      	ldr	r3, [pc, #220]	; (8006364 <USBD_CDC_DeInit+0xf8>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f003 020f 	and.w	r2, r3, #15
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	2200      	movs	r2, #0
 800629c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800629e:	4b32      	ldr	r3, [pc, #200]	; (8006368 <USBD_CDC_DeInit+0xfc>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f002 fa56 	bl	8008756 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80062aa:	4b2f      	ldr	r3, [pc, #188]	; (8006368 <USBD_CDC_DeInit+0xfc>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062c2:	2200      	movs	r2, #0
 80062c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80062c6:	4b29      	ldr	r3, [pc, #164]	; (800636c <USBD_CDC_DeInit+0x100>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f002 fa42 	bl	8008756 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80062d2:	4b26      	ldr	r3, [pc, #152]	; (800636c <USBD_CDC_DeInit+0x100>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 020f 	and.w	r2, r3, #15
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	3324      	adds	r3, #36	; 0x24
 80062e8:	2200      	movs	r2, #0
 80062ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80062ec:	4b1f      	ldr	r3, [pc, #124]	; (800636c <USBD_CDC_DeInit+0x100>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 020f 	and.w	r2, r3, #15
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	3326      	adds	r3, #38	; 0x26
 8006302:	2200      	movs	r2, #0
 8006304:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	32b0      	adds	r2, #176	; 0xb0
 8006310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01f      	beq.n	8006358 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	33b0      	adds	r3, #176	; 0xb0
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	32b0      	adds	r2, #176	; 0xb0
 8006336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633a:	4618      	mov	r0, r3
 800633c:	f002 fb16 	bl	800896c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	32b0      	adds	r2, #176	; 0xb0
 800634a:	2100      	movs	r1, #0
 800634c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000093 	.word	0x20000093
 8006368:	20000094 	.word	0x20000094
 800636c:	20000095 	.word	0x20000095

08006370 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	32b0      	adds	r2, #176	; 0xb0
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800639c:	2303      	movs	r3, #3
 800639e:	e0bf      	b.n	8006520 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d050      	beq.n	800644e <USBD_CDC_Setup+0xde>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	f040 80af 	bne.w	8006510 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	88db      	ldrh	r3, [r3, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d03a      	beq.n	8006430 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da1b      	bge.n	80063fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	33b0      	adds	r3, #176	; 0xb0
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80063da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	88d2      	ldrh	r2, [r2, #6]
 80063e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	88db      	ldrh	r3, [r3, #6]
 80063e6:	2b07      	cmp	r3, #7
 80063e8:	bf28      	it	cs
 80063ea:	2307      	movcs	r3, #7
 80063ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	89fa      	ldrh	r2, [r7, #14]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fd7b 	bl	8007ef0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80063fa:	e090      	b.n	800651e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	785a      	ldrb	r2, [r3, #1]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	88db      	ldrh	r3, [r3, #6]
 800640a:	2b3f      	cmp	r3, #63	; 0x3f
 800640c:	d803      	bhi.n	8006416 <USBD_CDC_Setup+0xa6>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	88db      	ldrh	r3, [r3, #6]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	e000      	b.n	8006418 <USBD_CDC_Setup+0xa8>
 8006416:	2240      	movs	r2, #64	; 0x40
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800641e:	6939      	ldr	r1, [r7, #16]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006426:	461a      	mov	r2, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fd8d 	bl	8007f48 <USBD_CtlPrepareRx>
      break;
 800642e:	e076      	b.n	800651e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	33b0      	adds	r3, #176	; 0xb0
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	7850      	ldrb	r0, [r2, #1]
 8006446:	2200      	movs	r2, #0
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	4798      	blx	r3
      break;
 800644c:	e067      	b.n	800651e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b0b      	cmp	r3, #11
 8006454:	d851      	bhi.n	80064fa <USBD_CDC_Setup+0x18a>
 8006456:	a201      	add	r2, pc, #4	; (adr r2, 800645c <USBD_CDC_Setup+0xec>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	0800648d 	.word	0x0800648d
 8006460:	08006509 	.word	0x08006509
 8006464:	080064fb 	.word	0x080064fb
 8006468:	080064fb 	.word	0x080064fb
 800646c:	080064fb 	.word	0x080064fb
 8006470:	080064fb 	.word	0x080064fb
 8006474:	080064fb 	.word	0x080064fb
 8006478:	080064fb 	.word	0x080064fb
 800647c:	080064fb 	.word	0x080064fb
 8006480:	080064fb 	.word	0x080064fb
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064e1 	.word	0x080064e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b03      	cmp	r3, #3
 8006496:	d107      	bne.n	80064a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006498:	f107 030a 	add.w	r3, r7, #10
 800649c:	2202      	movs	r2, #2
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 fd25 	bl	8007ef0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064a6:	e032      	b.n	800650e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fcaf 	bl	8007e0e <USBD_CtlError>
            ret = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	75fb      	strb	r3, [r7, #23]
          break;
 80064b4:	e02b      	b.n	800650e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d107      	bne.n	80064d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80064c2:	f107 030d 	add.w	r3, r7, #13
 80064c6:	2201      	movs	r2, #1
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fd10 	bl	8007ef0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d0:	e01d      	b.n	800650e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fc9a 	bl	8007e0e <USBD_CtlError>
            ret = USBD_FAIL;
 80064da:	2303      	movs	r3, #3
 80064dc:	75fb      	strb	r3, [r7, #23]
          break;
 80064de:	e016      	b.n	800650e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d00f      	beq.n	800650c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fc8d 	bl	8007e0e <USBD_CtlError>
            ret = USBD_FAIL;
 80064f4:	2303      	movs	r3, #3
 80064f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064f8:	e008      	b.n	800650c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fc86 	bl	8007e0e <USBD_CtlError>
          ret = USBD_FAIL;
 8006502:	2303      	movs	r3, #3
 8006504:	75fb      	strb	r3, [r7, #23]
          break;
 8006506:	e002      	b.n	800650e <USBD_CDC_Setup+0x19e>
          break;
 8006508:	bf00      	nop
 800650a:	e008      	b.n	800651e <USBD_CDC_Setup+0x1ae>
          break;
 800650c:	bf00      	nop
      }
      break;
 800650e:	e006      	b.n	800651e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fc7b 	bl	8007e0e <USBD_CtlError>
      ret = USBD_FAIL;
 8006518:	2303      	movs	r3, #3
 800651a:	75fb      	strb	r3, [r7, #23]
      break;
 800651c:	bf00      	nop
  }

  return (uint8_t)ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800653a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	32b0      	adds	r2, #176	; 0xb0
 8006546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	e056      	b.n	8006600 <USBD_CDC_DataIn+0xd8>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	32b0      	adds	r2, #176	; 0xb0
 800655c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006560:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	3318      	adds	r3, #24
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02f      	beq.n	80065dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	3318      	adds	r3, #24
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	f003 010f 	and.w	r1, r3, #15
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	460b      	mov	r3, r1
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	440b      	add	r3, r1
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4403      	add	r3, r0
 80065a4:	3348      	adds	r3, #72	; 0x48
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d112      	bne.n	80065dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3318      	adds	r3, #24
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065ce:	78f9      	ldrb	r1, [r7, #3]
 80065d0:	2300      	movs	r3, #0
 80065d2:	2200      	movs	r2, #0
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f002 f966 	bl	80088a6 <USBD_LL_Transmit>
 80065da:	e010      	b.n	80065fe <USBD_CDC_DataIn+0xd6>
  }
  else
  {
    hcdc->TxState = 0U;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    hcdc->TxState = 0U;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if(hcdc->TxCallBack != NULL)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <USBD_CDC_DataIn+0xd6>
    {
    	hcdc->TxCallBack();
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065fc:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	32b0      	adds	r2, #176	; 0xb0
 800661e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006622:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32b0      	adds	r2, #176	; 0xb0
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006636:	2303      	movs	r3, #3
 8006638:	e01a      	b.n	8006670 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f002 f973 	bl	800892a <USBD_LL_GetRxDataSize>
 8006644:	4602      	mov	r2, r0
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	33b0      	adds	r3, #176	; 0xb0
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800666a:	4611      	mov	r1, r2
 800666c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	32b0      	adds	r2, #176	; 0xb0
 800668a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006696:	2303      	movs	r3, #3
 8006698:	e025      	b.n	80066e6 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	33b0      	adds	r3, #176	; 0xb0
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01a      	beq.n	80066e4 <USBD_CDC_EP0_RxReady+0x6c>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066b4:	2bff      	cmp	r3, #255	; 0xff
 80066b6:	d015      	beq.n	80066e4 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	33b0      	adds	r3, #176	; 0xb0
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80066d0:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066d8:	b292      	uxth	r2, r2
 80066da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	22ff      	movs	r2, #255	; 0xff
 80066e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066f8:	2182      	movs	r1, #130	; 0x82
 80066fa:	4818      	ldr	r0, [pc, #96]	; (800675c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066fc:	f000 fd4f 	bl	800719e <USBD_GetEpDesc>
 8006700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006702:	2101      	movs	r1, #1
 8006704:	4815      	ldr	r0, [pc, #84]	; (800675c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006706:	f000 fd4a 	bl	800719e <USBD_GetEpDesc>
 800670a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800670c:	2181      	movs	r1, #129	; 0x81
 800670e:	4813      	ldr	r0, [pc, #76]	; (800675c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006710:	f000 fd45 	bl	800719e <USBD_GetEpDesc>
 8006714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2210      	movs	r2, #16
 8006720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d006      	beq.n	8006736 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2200      	movs	r2, #0
 800672c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006730:	711a      	strb	r2, [r3, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d006      	beq.n	800674a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006744:	711a      	strb	r2, [r3, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2243      	movs	r2, #67	; 0x43
 800674e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006750:	4b02      	ldr	r3, [pc, #8]	; (800675c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000050 	.word	0x20000050

08006760 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006768:	2182      	movs	r1, #130	; 0x82
 800676a:	4818      	ldr	r0, [pc, #96]	; (80067cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800676c:	f000 fd17 	bl	800719e <USBD_GetEpDesc>
 8006770:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006772:	2101      	movs	r1, #1
 8006774:	4815      	ldr	r0, [pc, #84]	; (80067cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006776:	f000 fd12 	bl	800719e <USBD_GetEpDesc>
 800677a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800677c:	2181      	movs	r1, #129	; 0x81
 800677e:	4813      	ldr	r0, [pc, #76]	; (80067cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006780:	f000 fd0d 	bl	800719e <USBD_GetEpDesc>
 8006784:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2210      	movs	r2, #16
 8006790:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d006      	beq.n	80067a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2200      	movs	r2, #0
 800679c:	711a      	strb	r2, [r3, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f042 0202 	orr.w	r2, r2, #2
 80067a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	711a      	strb	r2, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f042 0202 	orr.w	r2, r2, #2
 80067b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2243      	movs	r2, #67	; 0x43
 80067be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000050 	.word	0x20000050

080067d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067d8:	2182      	movs	r1, #130	; 0x82
 80067da:	4818      	ldr	r0, [pc, #96]	; (800683c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067dc:	f000 fcdf 	bl	800719e <USBD_GetEpDesc>
 80067e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067e2:	2101      	movs	r1, #1
 80067e4:	4815      	ldr	r0, [pc, #84]	; (800683c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067e6:	f000 fcda 	bl	800719e <USBD_GetEpDesc>
 80067ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067ec:	2181      	movs	r1, #129	; 0x81
 80067ee:	4813      	ldr	r0, [pc, #76]	; (800683c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067f0:	f000 fcd5 	bl	800719e <USBD_GetEpDesc>
 80067f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2210      	movs	r2, #16
 8006800:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2200      	movs	r2, #0
 800680c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006810:	711a      	strb	r2, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d006      	beq.n	800682a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006824:	711a      	strb	r2, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2243      	movs	r2, #67	; 0x43
 800682e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006830:	4b02      	ldr	r3, [pc, #8]	; (800683c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000050 	.word	0x20000050

08006840 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	220a      	movs	r2, #10
 800684c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	2000000c 	.word	0x2000000c

08006860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	e009      	b.n	8006888 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	33b0      	adds	r3, #176	; 0xb0
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	32b0      	adds	r2, #176	; 0xb0
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e008      	b.n	80068cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	32b0      	adds	r2, #176	; 0xb0
 80068ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e004      	b.n	8006906 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32b0      	adds	r2, #176	; 0xb0
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	32b0      	adds	r2, #176	; 0xb0
 800693a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	e025      	b.n	8006992 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11f      	bne.n	8006990 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2201      	movs	r2, #1
 8006954:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006958:	4b10      	ldr	r3, [pc, #64]	; (800699c <USBD_CDC_TransmitPacket+0x88>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f003 020f 	and.w	r2, r3, #15
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4403      	add	r3, r0
 8006972:	3318      	adds	r3, #24
 8006974:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <USBD_CDC_TransmitPacket+0x88>)
 8006978:	7819      	ldrb	r1, [r3, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 ff8d 	bl	80088a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000093 	.word	0x20000093

080069a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	32b0      	adds	r2, #176	; 0xb0
 80069b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	32b0      	adds	r2, #176	; 0xb0
 80069c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e018      	b.n	8006a00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7c1b      	ldrb	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069d6:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <USBD_CDC_ReceivePacket+0x68>)
 80069d8:	7819      	ldrb	r1, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 ff7f 	bl	80088e8 <USBD_LL_PrepareReceive>
 80069ea:	e008      	b.n	80069fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <USBD_CDC_ReceivePacket+0x68>)
 80069ee:	7819      	ldrb	r1, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069f6:	2340      	movs	r3, #64	; 0x40
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 ff75 	bl	80088e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000094 	.word	0x20000094

08006a0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	4613      	mov	r3, r2
 8006a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e01f      	b.n	8006a64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	79fa      	ldrb	r2, [r7, #7]
 8006a56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f001 fdef 	bl	800863c <USBD_LL_Init>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e025      	b.n	8006ad0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	32ae      	adds	r2, #174	; 0xae
 8006a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00f      	beq.n	8006ac0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32ae      	adds	r2, #174	; 0xae
 8006aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	f107 020e 	add.w	r2, r7, #14
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	4602      	mov	r2, r0
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fdf7 	bl	80086d4 <USBD_LL_Start>
 8006ae6:	4603      	mov	r3, r0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b64:	2303      	movs	r3, #3
 8006b66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 f908 	bl	8007d9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b98:	461a      	mov	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d01a      	beq.n	8006be4 <USBD_LL_SetupStage+0x72>
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d822      	bhi.n	8006bf8 <USBD_LL_SetupStage+0x86>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <USBD_LL_SetupStage+0x4a>
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d00a      	beq.n	8006bd0 <USBD_LL_SetupStage+0x5e>
 8006bba:	e01d      	b.n	8006bf8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fb5f 	bl	8007288 <USBD_StdDevReq>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bce:	e020      	b.n	8006c12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fbc7 	bl	800736c <USBD_StdItfReq>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73fb      	strb	r3, [r7, #15]
      break;
 8006be2:	e016      	b.n	8006c12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fc29 	bl	8007444 <USBD_StdEPReq>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf6:	e00c      	b.n	8006c12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fdc4 	bl	8008794 <USBD_LL_StallEP>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c10:	bf00      	nop
  }

  return ret;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	460b      	mov	r3, r1
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d16e      	bne.n	8006d12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	f040 8098 	bne.w	8006d78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d913      	bls.n	8006c7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	1ad2      	subs	r2, r2, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	bf28      	it	cs
 8006c6e:	4613      	movcs	r3, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 f984 	bl	8007f82 <USBD_CtlContinueRx>
 8006c7a:	e07d      	b.n	8006d78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d014      	beq.n	8006cb4 <USBD_LL_DataOutStage+0x98>
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d81d      	bhi.n	8006cca <USBD_LL_DataOutStage+0xae>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <USBD_LL_DataOutStage+0x7c>
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d003      	beq.n	8006c9e <USBD_LL_DataOutStage+0x82>
 8006c96:	e018      	b.n	8006cca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c9c:	e018      	b.n	8006cd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fa5e 	bl	800716a <USBD_CoreFindIF>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75bb      	strb	r3, [r7, #22]
            break;
 8006cb2:	e00d      	b.n	8006cd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fa60 	bl	8007184 <USBD_CoreFindEP>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	75bb      	strb	r3, [r7, #22]
            break;
 8006cc8:	e002      	b.n	8006cd0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75bb      	strb	r3, [r7, #22]
            break;
 8006cce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006cd0:	7dbb      	ldrb	r3, [r7, #22]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d119      	bne.n	8006d0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d113      	bne.n	8006d0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ce2:	7dba      	ldrb	r2, [r7, #22]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	32ae      	adds	r2, #174	; 0xae
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006cf2:	7dba      	ldrb	r2, [r7, #22]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006cfa:	7dba      	ldrb	r2, [r7, #22]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	32ae      	adds	r2, #174	; 0xae
 8006d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f001 f94a 	bl	8007fa4 <USBD_CtlSendStatus>
 8006d10:	e032      	b.n	8006d78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fa31 	bl	8007184 <USBD_CoreFindEP>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d26:	7dbb      	ldrb	r3, [r7, #22]
 8006d28:	2bff      	cmp	r3, #255	; 0xff
 8006d2a:	d025      	beq.n	8006d78 <USBD_LL_DataOutStage+0x15c>
 8006d2c:	7dbb      	ldrb	r3, [r7, #22]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d122      	bne.n	8006d78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d117      	bne.n	8006d6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d3e:	7dba      	ldrb	r2, [r7, #22]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	32ae      	adds	r2, #174	; 0xae
 8006d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00f      	beq.n	8006d6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d4e:	7dba      	ldrb	r2, [r7, #22]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d56:	7dba      	ldrb	r2, [r7, #22]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	32ae      	adds	r2, #174	; 0xae
 8006d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	7afa      	ldrb	r2, [r7, #11]
 8006d64:	4611      	mov	r1, r2
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	e000      	b.n	8006d7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d16f      	bne.n	8006e76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3314      	adds	r3, #20
 8006d9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d15a      	bne.n	8006e5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d914      	bls.n	8006ddc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f001 f8ac 	bl	8007f26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 fd87 	bl	80088e8 <USBD_LL_PrepareReceive>
 8006dda:	e03f      	b.n	8006e5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d11c      	bne.n	8006e22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d316      	bcc.n	8006e22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d20f      	bcs.n	8006e22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e02:	2200      	movs	r2, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f001 f88d 	bl	8007f26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e14:	2300      	movs	r3, #0
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f001 fd64 	bl	80088e8 <USBD_LL_PrepareReceive>
 8006e20:	e01c      	b.n	8006e5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d10f      	bne.n	8006e4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f001 fc9f 	bl	8008794 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 f8b7 	bl	8007fca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d03a      	beq.n	8006edc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fe42 	bl	8006af0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e74:	e032      	b.n	8006edc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f97f 	bl	8007184 <USBD_CoreFindEP>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	2bff      	cmp	r3, #255	; 0xff
 8006e8e:	d025      	beq.n	8006edc <USBD_LL_DataInStage+0x15a>
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d122      	bne.n	8006edc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d11c      	bne.n	8006edc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ea2:	7dfa      	ldrb	r2, [r7, #23]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	32ae      	adds	r2, #174	; 0xae
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d014      	beq.n	8006edc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006eb2:	7dfa      	ldrb	r2, [r7, #23]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006eba:	7dfa      	ldrb	r2, [r7, #23]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	32ae      	adds	r2, #174	; 0xae
 8006ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	7afa      	ldrb	r2, [r7, #11]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	4798      	blx	r3
 8006ece:	4603      	mov	r3, r0
 8006ed0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006ed2:	7dbb      	ldrb	r3, [r7, #22]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ed8:	7dbb      	ldrb	r3, [r7, #22]
 8006eda:	e000      	b.n	8006ede <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d014      	beq.n	8006f4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00e      	beq.n	8006f4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6852      	ldr	r2, [r2, #4]
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2100      	movs	r1, #0
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fbd9 	bl	800870a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2240      	movs	r2, #64	; 0x40
 8006f64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f68:	2340      	movs	r3, #64	; 0x40
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fbcb 	bl	800870a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2240      	movs	r2, #64	; 0x40
 8006f7e:	621a      	str	r2, [r3, #32]

  return ret;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	78fa      	ldrb	r2, [r7, #3]
 8006f9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d106      	bne.n	8006ff8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b03      	cmp	r3, #3
 8007018:	d110      	bne.n	800703c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	32ae      	adds	r2, #174	; 0xae
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007064:	2303      	movs	r3, #3
 8007066:	e01c      	b.n	80070a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b03      	cmp	r3, #3
 8007072:	d115      	bne.n	80070a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32ae      	adds	r2, #174	; 0xae
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	32ae      	adds	r2, #174	; 0xae
 8007092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	4611      	mov	r1, r2
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	32ae      	adds	r2, #174	; 0xae
 80070c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e01c      	b.n	8007106 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d115      	bne.n	8007104 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	32ae      	adds	r2, #174	; 0xae
 80070e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32ae      	adds	r2, #174	; 0xae
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	78fa      	ldrb	r2, [r7, #3]
 80070fe:	4611      	mov	r1, r2
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00e      	beq.n	8007160 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6852      	ldr	r2, [r2, #4]
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	4611      	mov	r1, r2
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007176:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007190:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b086      	sub	sp, #24
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	885b      	ldrh	r3, [r3, #2]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d920      	bls.n	8007208 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80071ce:	e013      	b.n	80071f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80071d0:	f107 030a 	add.w	r3, r7, #10
 80071d4:	4619      	mov	r1, r3
 80071d6:	6978      	ldr	r0, [r7, #20]
 80071d8:	f000 f81b 	bl	8007212 <USBD_GetNextDesc>
 80071dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d108      	bne.n	80071f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	789b      	ldrb	r3, [r3, #2]
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d008      	beq.n	8007206 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	885b      	ldrh	r3, [r3, #2]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	897b      	ldrh	r3, [r7, #10]
 8007200:	429a      	cmp	r2, r3
 8007202:	d8e5      	bhi.n	80071d0 <USBD_GetEpDesc+0x32>
 8007204:	e000      	b.n	8007208 <USBD_GetEpDesc+0x6a>
          break;
 8007206:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007208:	693b      	ldr	r3, [r7, #16]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	881a      	ldrh	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	4413      	add	r3, r2
 800722c:	b29a      	uxth	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4413      	add	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800723e:	68fb      	ldr	r3, [r7, #12]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	3301      	adds	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800726a:	8a3b      	ldrh	r3, [r7, #16]
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	b21a      	sxth	r2, r3
 8007270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007274:	4313      	orrs	r3, r2
 8007276:	b21b      	sxth	r3, r3
 8007278:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800727a:	89fb      	ldrh	r3, [r7, #14]
}
 800727c:	4618      	mov	r0, r3
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d005      	beq.n	80072ae <USBD_StdDevReq+0x26>
 80072a2:	2b40      	cmp	r3, #64	; 0x40
 80072a4:	d857      	bhi.n	8007356 <USBD_StdDevReq+0xce>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00f      	beq.n	80072ca <USBD_StdDevReq+0x42>
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d153      	bne.n	8007356 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	32ae      	adds	r2, #174	; 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
      break;
 80072c8:	e04a      	b.n	8007360 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	d83b      	bhi.n	800734a <USBD_StdDevReq+0xc2>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <USBD_StdDevReq+0x50>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	0800732d 	.word	0x0800732d
 80072dc:	08007341 	.word	0x08007341
 80072e0:	0800734b 	.word	0x0800734b
 80072e4:	08007337 	.word	0x08007337
 80072e8:	0800734b 	.word	0x0800734b
 80072ec:	0800730b 	.word	0x0800730b
 80072f0:	08007301 	.word	0x08007301
 80072f4:	0800734b 	.word	0x0800734b
 80072f8:	08007323 	.word	0x08007323
 80072fc:	08007315 	.word	0x08007315
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fa3c 	bl	8007780 <USBD_GetDescriptor>
          break;
 8007308:	e024      	b.n	8007354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fba1 	bl	8007a54 <USBD_SetAddress>
          break;
 8007312:	e01f      	b.n	8007354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fbe0 	bl	8007adc <USBD_SetConfig>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]
          break;
 8007320:	e018      	b.n	8007354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fc83 	bl	8007c30 <USBD_GetConfig>
          break;
 800732a:	e013      	b.n	8007354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fcb4 	bl	8007c9c <USBD_GetStatus>
          break;
 8007334:	e00e      	b.n	8007354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fce3 	bl	8007d04 <USBD_SetFeature>
          break;
 800733e:	e009      	b.n	8007354 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fd07 	bl	8007d56 <USBD_ClrFeature>
          break;
 8007348:	e004      	b.n	8007354 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fd5e 	bl	8007e0e <USBD_CtlError>
          break;
 8007352:	bf00      	nop
      }
      break;
 8007354:	e004      	b.n	8007360 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fd58 	bl	8007e0e <USBD_CtlError>
      break;
 800735e:	bf00      	nop
  }

  return ret;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop

0800736c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007382:	2b40      	cmp	r3, #64	; 0x40
 8007384:	d005      	beq.n	8007392 <USBD_StdItfReq+0x26>
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	d852      	bhi.n	8007430 <USBD_StdItfReq+0xc4>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <USBD_StdItfReq+0x26>
 800738e:	2b20      	cmp	r3, #32
 8007390:	d14e      	bne.n	8007430 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007398:	b2db      	uxtb	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	2b02      	cmp	r3, #2
 800739e:	d840      	bhi.n	8007422 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	889b      	ldrh	r3, [r3, #4]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d836      	bhi.n	8007418 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	889b      	ldrh	r3, [r3, #4]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fed9 	bl	800716a <USBD_CoreFindIF>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	2bff      	cmp	r3, #255	; 0xff
 80073c0:	d01d      	beq.n	80073fe <USBD_StdItfReq+0x92>
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d11a      	bne.n	80073fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073c8:	7bba      	ldrb	r2, [r7, #14]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32ae      	adds	r2, #174	; 0xae
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00f      	beq.n	80073f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80073d8:	7bba      	ldrb	r2, [r7, #14]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073e0:	7bba      	ldrb	r2, [r7, #14]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	32ae      	adds	r2, #174	; 0xae
 80073e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073f6:	e004      	b.n	8007402 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073fc:	e001      	b.n	8007402 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073fe:	2303      	movs	r3, #3
 8007400:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	88db      	ldrh	r3, [r3, #6]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d110      	bne.n	800742c <USBD_StdItfReq+0xc0>
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10d      	bne.n	800742c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fdc7 	bl	8007fa4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007416:	e009      	b.n	800742c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fcf7 	bl	8007e0e <USBD_CtlError>
          break;
 8007420:	e004      	b.n	800742c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fcf2 	bl	8007e0e <USBD_CtlError>
          break;
 800742a:	e000      	b.n	800742e <USBD_StdItfReq+0xc2>
          break;
 800742c:	bf00      	nop
      }
      break;
 800742e:	e004      	b.n	800743a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fceb 	bl	8007e0e <USBD_CtlError>
      break;
 8007438:	bf00      	nop
  }

  return ret;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	889b      	ldrh	r3, [r3, #4]
 8007456:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d007      	beq.n	8007474 <USBD_StdEPReq+0x30>
 8007464:	2b40      	cmp	r3, #64	; 0x40
 8007466:	f200 817f 	bhi.w	8007768 <USBD_StdEPReq+0x324>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d02a      	beq.n	80074c4 <USBD_StdEPReq+0x80>
 800746e:	2b20      	cmp	r3, #32
 8007470:	f040 817a 	bne.w	8007768 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fe83 	bl	8007184 <USBD_CoreFindEP>
 800747e:	4603      	mov	r3, r0
 8007480:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007482:	7b7b      	ldrb	r3, [r7, #13]
 8007484:	2bff      	cmp	r3, #255	; 0xff
 8007486:	f000 8174 	beq.w	8007772 <USBD_StdEPReq+0x32e>
 800748a:	7b7b      	ldrb	r3, [r7, #13]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 8170 	bne.w	8007772 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007492:	7b7a      	ldrb	r2, [r7, #13]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800749a:	7b7a      	ldrb	r2, [r7, #13]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	32ae      	adds	r2, #174	; 0xae
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 8163 	beq.w	8007772 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80074ac:	7b7a      	ldrb	r2, [r7, #13]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	32ae      	adds	r2, #174	; 0xae
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074c2:	e156      	b.n	8007772 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d008      	beq.n	80074de <USBD_StdEPReq+0x9a>
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	f300 8145 	bgt.w	800775c <USBD_StdEPReq+0x318>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 809b 	beq.w	800760e <USBD_StdEPReq+0x1ca>
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d03c      	beq.n	8007556 <USBD_StdEPReq+0x112>
 80074dc:	e13e      	b.n	800775c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d002      	beq.n	80074f0 <USBD_StdEPReq+0xac>
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d016      	beq.n	800751c <USBD_StdEPReq+0xd8>
 80074ee:	e02c      	b.n	800754a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <USBD_StdEPReq+0xce>
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b80      	cmp	r3, #128	; 0x80
 80074fa:	d00a      	beq.n	8007512 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 f947 	bl	8008794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 f943 	bl	8008794 <USBD_LL_StallEP>
 800750e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007510:	e020      	b.n	8007554 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc7a 	bl	8007e0e <USBD_CtlError>
              break;
 800751a:	e01b      	b.n	8007554 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	885b      	ldrh	r3, [r3, #2]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10e      	bne.n	8007542 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <USBD_StdEPReq+0xfe>
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b80      	cmp	r3, #128	; 0x80
 800752e:	d008      	beq.n	8007542 <USBD_StdEPReq+0xfe>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	88db      	ldrh	r3, [r3, #6]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 f929 	bl	8008794 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fd2e 	bl	8007fa4 <USBD_CtlSendStatus>

              break;
 8007548:	e004      	b.n	8007554 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fc5e 	bl	8007e0e <USBD_CtlError>
              break;
 8007552:	bf00      	nop
          }
          break;
 8007554:	e107      	b.n	8007766 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d002      	beq.n	8007568 <USBD_StdEPReq+0x124>
 8007562:	2b03      	cmp	r3, #3
 8007564:	d016      	beq.n	8007594 <USBD_StdEPReq+0x150>
 8007566:	e04b      	b.n	8007600 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <USBD_StdEPReq+0x146>
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b80      	cmp	r3, #128	; 0x80
 8007572:	d00a      	beq.n	800758a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 f90b 	bl	8008794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 f907 	bl	8008794 <USBD_LL_StallEP>
 8007586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007588:	e040      	b.n	800760c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fc3e 	bl	8007e0e <USBD_CtlError>
              break;
 8007592:	e03b      	b.n	800760c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	885b      	ldrh	r3, [r3, #2]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d136      	bne.n	800760a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f911 	bl	80087d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fcf7 	bl	8007fa4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fde2 	bl	8007184 <USBD_CoreFindEP>
 80075c0:	4603      	mov	r3, r0
 80075c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075c4:	7b7b      	ldrb	r3, [r7, #13]
 80075c6:	2bff      	cmp	r3, #255	; 0xff
 80075c8:	d01f      	beq.n	800760a <USBD_StdEPReq+0x1c6>
 80075ca:	7b7b      	ldrb	r3, [r7, #13]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d11c      	bne.n	800760a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80075d0:	7b7a      	ldrb	r2, [r7, #13]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80075d8:	7b7a      	ldrb	r2, [r7, #13]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32ae      	adds	r2, #174	; 0xae
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d010      	beq.n	800760a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075e8:	7b7a      	ldrb	r2, [r7, #13]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	32ae      	adds	r2, #174	; 0xae
 80075ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075fe:	e004      	b.n	800760a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fc03 	bl	8007e0e <USBD_CtlError>
              break;
 8007608:	e000      	b.n	800760c <USBD_StdEPReq+0x1c8>
              break;
 800760a:	bf00      	nop
          }
          break;
 800760c:	e0ab      	b.n	8007766 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d002      	beq.n	8007620 <USBD_StdEPReq+0x1dc>
 800761a:	2b03      	cmp	r3, #3
 800761c:	d032      	beq.n	8007684 <USBD_StdEPReq+0x240>
 800761e:	e097      	b.n	8007750 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <USBD_StdEPReq+0x1f2>
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d004      	beq.n	8007636 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fbed 	bl	8007e0e <USBD_CtlError>
                break;
 8007634:	e091      	b.n	800775a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	da0b      	bge.n	8007656 <USBD_StdEPReq+0x212>
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	3310      	adds	r3, #16
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	3304      	adds	r3, #4
 8007654:	e00b      	b.n	800766e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	3304      	adds	r3, #4
 800766e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2202      	movs	r2, #2
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc37 	bl	8007ef0 <USBD_CtlSendData>
              break;
 8007682:	e06a      	b.n	800775a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007688:	2b00      	cmp	r3, #0
 800768a:	da11      	bge.n	80076b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	3324      	adds	r3, #36	; 0x24
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d117      	bne.n	80076d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fbb0 	bl	8007e0e <USBD_CtlError>
                  break;
 80076ae:	e054      	b.n	800775a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fb9d 	bl	8007e0e <USBD_CtlError>
                  break;
 80076d4:	e041      	b.n	800775a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da0b      	bge.n	80076f6 <USBD_StdEPReq+0x2b2>
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	3310      	adds	r3, #16
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	3304      	adds	r3, #4
 80076f4:	e00b      	b.n	800770e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	3304      	adds	r3, #4
 800770e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <USBD_StdEPReq+0x2d8>
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b80      	cmp	r3, #128	; 0x80
 800771a:	d103      	bne.n	8007724 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e00e      	b.n	8007742 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 f871 	bl	8008810 <USBD_LL_IsStallEP>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e002      	b.n	8007742 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2202      	movs	r2, #2
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fbd1 	bl	8007ef0 <USBD_CtlSendData>
              break;
 800774e:	e004      	b.n	800775a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fb5b 	bl	8007e0e <USBD_CtlError>
              break;
 8007758:	bf00      	nop
          }
          break;
 800775a:	e004      	b.n	8007766 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fb55 	bl	8007e0e <USBD_CtlError>
          break;
 8007764:	bf00      	nop
      }
      break;
 8007766:	e005      	b.n	8007774 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fb4f 	bl	8007e0e <USBD_CtlError>
      break;
 8007770:	e000      	b.n	8007774 <USBD_StdEPReq+0x330>
      break;
 8007772:	bf00      	nop
  }

  return ret;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	885b      	ldrh	r3, [r3, #2]
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	2b06      	cmp	r3, #6
 80077a2:	f200 8128 	bhi.w	80079f6 <USBD_GetDescriptor+0x276>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <USBD_GetDescriptor+0x2c>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077c9 	.word	0x080077c9
 80077b0:	080077e1 	.word	0x080077e1
 80077b4:	08007821 	.word	0x08007821
 80077b8:	080079f7 	.word	0x080079f7
 80077bc:	080079f7 	.word	0x080079f7
 80077c0:	08007997 	.word	0x08007997
 80077c4:	080079c3 	.word	0x080079c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	7c12      	ldrb	r2, [r2, #16]
 80077d4:	f107 0108 	add.w	r1, r7, #8
 80077d8:	4610      	mov	r0, r2
 80077da:	4798      	blx	r3
 80077dc:	60f8      	str	r0, [r7, #12]
      break;
 80077de:	e112      	b.n	8007a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7c1b      	ldrb	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10d      	bne.n	8007804 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	f107 0208 	add.w	r2, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	2202      	movs	r2, #2
 8007800:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007802:	e100      	b.n	8007a06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	f107 0208 	add.w	r2, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	2202      	movs	r2, #2
 800781c:	701a      	strb	r2, [r3, #0]
      break;
 800781e:	e0f2      	b.n	8007a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	885b      	ldrh	r3, [r3, #2]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b05      	cmp	r3, #5
 8007828:	f200 80ac 	bhi.w	8007984 <USBD_GetDescriptor+0x204>
 800782c:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBD_GetDescriptor+0xb4>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	0800784d 	.word	0x0800784d
 8007838:	08007881 	.word	0x08007881
 800783c:	080078b5 	.word	0x080078b5
 8007840:	080078e9 	.word	0x080078e9
 8007844:	0800791d 	.word	0x0800791d
 8007848:	08007951 	.word	0x08007951
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	7c12      	ldrb	r2, [r2, #16]
 8007864:	f107 0108 	add.w	r1, r7, #8
 8007868:	4610      	mov	r0, r2
 800786a:	4798      	blx	r3
 800786c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800786e:	e091      	b.n	8007994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 facb 	bl	8007e0e <USBD_CtlError>
            err++;
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	3301      	adds	r3, #1
 800787c:	72fb      	strb	r3, [r7, #11]
          break;
 800787e:	e089      	b.n	8007994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078a2:	e077      	b.n	8007994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fab1 	bl	8007e0e <USBD_CtlError>
            err++;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	3301      	adds	r3, #1
 80078b0:	72fb      	strb	r3, [r7, #11]
          break;
 80078b2:	e06f      	b.n	8007994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	7c12      	ldrb	r2, [r2, #16]
 80078cc:	f107 0108 	add.w	r1, r7, #8
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
 80078d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078d6:	e05d      	b.n	8007994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa97 	bl	8007e0e <USBD_CtlError>
            err++;
 80078e0:	7afb      	ldrb	r3, [r7, #11]
 80078e2:	3301      	adds	r3, #1
 80078e4:	72fb      	strb	r3, [r7, #11]
          break;
 80078e6:	e055      	b.n	8007994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	7c12      	ldrb	r2, [r2, #16]
 8007900:	f107 0108 	add.w	r1, r7, #8
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800790a:	e043      	b.n	8007994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa7d 	bl	8007e0e <USBD_CtlError>
            err++;
 8007914:	7afb      	ldrb	r3, [r7, #11]
 8007916:	3301      	adds	r3, #1
 8007918:	72fb      	strb	r3, [r7, #11]
          break;
 800791a:	e03b      	b.n	8007994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00b      	beq.n	8007940 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	7c12      	ldrb	r2, [r2, #16]
 8007934:	f107 0108 	add.w	r1, r7, #8
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
 800793c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800793e:	e029      	b.n	8007994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa63 	bl	8007e0e <USBD_CtlError>
            err++;
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	3301      	adds	r3, #1
 800794c:	72fb      	strb	r3, [r7, #11]
          break;
 800794e:	e021      	b.n	8007994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7c12      	ldrb	r2, [r2, #16]
 8007968:	f107 0108 	add.w	r1, r7, #8
 800796c:	4610      	mov	r0, r2
 800796e:	4798      	blx	r3
 8007970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007972:	e00f      	b.n	8007994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa49 	bl	8007e0e <USBD_CtlError>
            err++;
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	3301      	adds	r3, #1
 8007980:	72fb      	strb	r3, [r7, #11]
          break;
 8007982:	e007      	b.n	8007994 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fa41 	bl	8007e0e <USBD_CtlError>
          err++;
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	3301      	adds	r3, #1
 8007990:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007992:	bf00      	nop
      }
      break;
 8007994:	e037      	b.n	8007a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7c1b      	ldrb	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	f107 0208 	add.w	r2, r7, #8
 80079aa:	4610      	mov	r0, r2
 80079ac:	4798      	blx	r3
 80079ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079b0:	e029      	b.n	8007a06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fa2a 	bl	8007e0e <USBD_CtlError>
        err++;
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	3301      	adds	r3, #1
 80079be:	72fb      	strb	r3, [r7, #11]
      break;
 80079c0:	e021      	b.n	8007a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7c1b      	ldrb	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10d      	bne.n	80079e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f107 0208 	add.w	r2, r7, #8
 80079d6:	4610      	mov	r0, r2
 80079d8:	4798      	blx	r3
 80079da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3301      	adds	r3, #1
 80079e0:	2207      	movs	r2, #7
 80079e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079e4:	e00f      	b.n	8007a06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa10 	bl	8007e0e <USBD_CtlError>
        err++;
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	3301      	adds	r3, #1
 80079f2:	72fb      	strb	r3, [r7, #11]
      break;
 80079f4:	e007      	b.n	8007a06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa08 	bl	8007e0e <USBD_CtlError>
      err++;
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	3301      	adds	r3, #1
 8007a02:	72fb      	strb	r3, [r7, #11]
      break;
 8007a04:	bf00      	nop
  }

  if (err != 0U)
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d11e      	bne.n	8007a4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	88db      	ldrh	r3, [r3, #6]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d016      	beq.n	8007a42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a14:	893b      	ldrh	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88da      	ldrh	r2, [r3, #6]
 8007a1e:	893b      	ldrh	r3, [r7, #8]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	bf28      	it	cs
 8007a24:	4613      	movcs	r3, r2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a2a:	893b      	ldrh	r3, [r7, #8]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fa5d 	bl	8007ef0 <USBD_CtlSendData>
 8007a36:	e009      	b.n	8007a4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9e7 	bl	8007e0e <USBD_CtlError>
 8007a40:	e004      	b.n	8007a4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 faae 	bl	8007fa4 <USBD_CtlSendStatus>
 8007a48:	e000      	b.n	8007a4c <USBD_GetDescriptor+0x2cc>
    return;
 8007a4a:	bf00      	nop
  }
}
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop

08007a54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	889b      	ldrh	r3, [r3, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d131      	bne.n	8007aca <USBD_SetAddress+0x76>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d12d      	bne.n	8007aca <USBD_SetAddress+0x76>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	2b7f      	cmp	r3, #127	; 0x7f
 8007a74:	d829      	bhi.n	8007aca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d104      	bne.n	8007a98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f9bc 	bl	8007e0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a96:	e01d      	b.n	8007ad4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7bfa      	ldrb	r2, [r7, #15]
 8007a9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fedf 	bl	8008868 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa7a 	bl	8007fa4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abe:	e009      	b.n	8007ad4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac8:	e004      	b.n	8007ad4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f99e 	bl	8007e0e <USBD_CtlError>
  }
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	4b4e      	ldr	r3, [pc, #312]	; (8007c2c <USBD_SetConfig+0x150>)
 8007af2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007af4:	4b4d      	ldr	r3, [pc, #308]	; (8007c2c <USBD_SetConfig+0x150>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d905      	bls.n	8007b08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f985 	bl	8007e0e <USBD_CtlError>
    return USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e08c      	b.n	8007c22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d002      	beq.n	8007b1a <USBD_SetConfig+0x3e>
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d029      	beq.n	8007b6c <USBD_SetConfig+0x90>
 8007b18:	e075      	b.n	8007c06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b1a:	4b44      	ldr	r3, [pc, #272]	; (8007c2c <USBD_SetConfig+0x150>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d020      	beq.n	8007b64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b22:	4b42      	ldr	r3, [pc, #264]	; (8007c2c <USBD_SetConfig+0x150>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b2c:	4b3f      	ldr	r3, [pc, #252]	; (8007c2c <USBD_SetConfig+0x150>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fe ffe7 	bl	8006b06 <USBD_SetClassConfig>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d008      	beq.n	8007b54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f962 	bl	8007e0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b52:	e065      	b.n	8007c20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa25 	bl	8007fa4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b62:	e05d      	b.n	8007c20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fa1d 	bl	8007fa4 <USBD_CtlSendStatus>
      break;
 8007b6a:	e059      	b.n	8007c20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b6c:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <USBD_SetConfig+0x150>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d112      	bne.n	8007b9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b7c:	4b2b      	ldr	r3, [pc, #172]	; (8007c2c <USBD_SetConfig+0x150>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b86:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <USBD_SetConfig+0x150>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fe ffd6 	bl	8006b3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa06 	bl	8007fa4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b98:	e042      	b.n	8007c20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b9a:	4b24      	ldr	r3, [pc, #144]	; (8007c2c <USBD_SetConfig+0x150>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d02a      	beq.n	8007bfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7fe ffc4 	bl	8006b3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bb6:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <USBD_SetConfig+0x150>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bc0:	4b1a      	ldr	r3, [pc, #104]	; (8007c2c <USBD_SetConfig+0x150>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fe ff9d 	bl	8006b06 <USBD_SetClassConfig>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00f      	beq.n	8007bf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f918 	bl	8007e0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fe ffa9 	bl	8006b3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bf4:	e014      	b.n	8007c20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f9d4 	bl	8007fa4 <USBD_CtlSendStatus>
      break;
 8007bfc:	e010      	b.n	8007c20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f9d0 	bl	8007fa4 <USBD_CtlSendStatus>
      break;
 8007c04:	e00c      	b.n	8007c20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f900 	bl	8007e0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c0e:	4b07      	ldr	r3, [pc, #28]	; (8007c2c <USBD_SetConfig+0x150>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7fe ff92 	bl	8006b3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1e:	bf00      	nop
  }

  return ret;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000628 	.word	0x20000628

08007c30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d004      	beq.n	8007c4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8e2 	bl	8007e0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c4a:	e023      	b.n	8007c94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	dc02      	bgt.n	8007c5e <USBD_GetConfig+0x2e>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dc03      	bgt.n	8007c64 <USBD_GetConfig+0x34>
 8007c5c:	e015      	b.n	8007c8a <USBD_GetConfig+0x5a>
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d00b      	beq.n	8007c7a <USBD_GetConfig+0x4a>
 8007c62:	e012      	b.n	8007c8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f93c 	bl	8007ef0 <USBD_CtlSendData>
        break;
 8007c78:	e00c      	b.n	8007c94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f934 	bl	8007ef0 <USBD_CtlSendData>
        break;
 8007c88:	e004      	b.n	8007c94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f8be 	bl	8007e0e <USBD_CtlError>
        break;
 8007c92:	bf00      	nop
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d81e      	bhi.n	8007cf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	88db      	ldrh	r3, [r3, #6]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d004      	beq.n	8007cc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8a5 	bl	8007e0e <USBD_CtlError>
        break;
 8007cc4:	e01a      	b.n	8007cfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f043 0202 	orr.w	r2, r3, #2
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f900 	bl	8007ef0 <USBD_CtlSendData>
      break;
 8007cf0:	e004      	b.n	8007cfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f88a 	bl	8007e0e <USBD_CtlError>
      break;
 8007cfa:	bf00      	nop
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	885b      	ldrh	r3, [r3, #2]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d107      	bne.n	8007d26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f940 	bl	8007fa4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d24:	e013      	b.n	8007d4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d10b      	bne.n	8007d46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	889b      	ldrh	r3, [r3, #4]
 8007d32:	0a1b      	lsrs	r3, r3, #8
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f930 	bl	8007fa4 <USBD_CtlSendStatus>
}
 8007d44:	e003      	b.n	8007d4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f860 	bl	8007e0e <USBD_CtlError>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d80b      	bhi.n	8007d86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	885b      	ldrh	r3, [r3, #2]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d10c      	bne.n	8007d90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f910 	bl	8007fa4 <USBD_CtlSendStatus>
      }
      break;
 8007d84:	e004      	b.n	8007d90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f840 	bl	8007e0e <USBD_CtlError>
      break;
 8007d8e:	e000      	b.n	8007d92 <USBD_ClrFeature+0x3c>
      break;
 8007d90:	bf00      	nop
  }
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fa41 	bl	800724c <SWAPBYTE>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	461a      	mov	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fa34 	bl	800724c <SWAPBYTE>
 8007de4:	4603      	mov	r3, r0
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fa27 	bl	800724c <SWAPBYTE>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	461a      	mov	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	80da      	strh	r2, [r3, #6]
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e18:	2180      	movs	r1, #128	; 0x80
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fcba 	bl	8008794 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fcb6 	bl	8008794 <USBD_LL_StallEP>
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d036      	beq.n	8007eb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e4a:	6938      	ldr	r0, [r7, #16]
 8007e4c:	f000 f836 	bl	8007ebc <USBD_GetLen>
 8007e50:	4603      	mov	r3, r0
 8007e52:	3301      	adds	r3, #1
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	4413      	add	r3, r2
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4413      	add	r3, r2
 8007e76:	2203      	movs	r2, #3
 8007e78:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e80:	e013      	b.n	8007eaa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	4413      	add	r3, r2
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	3301      	adds	r3, #1
 8007e92:	613b      	str	r3, [r7, #16]
    idx++;
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	3301      	adds	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e7      	bne.n	8007e82 <USBD_GetString+0x52>
 8007eb2:	e000      	b.n	8007eb6 <USBD_GetString+0x86>
    return;
 8007eb4:	bf00      	nop
  }
}
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ecc:	e005      	b.n	8007eda <USBD_GetLen+0x1e>
  {
    len++;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f5      	bne.n	8007ece <USBD_GetLen+0x12>
  }

  return len;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fcc5 	bl	80088a6 <USBD_LL_Transmit>

  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	2100      	movs	r1, #0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fcb4 	bl	80088a6 <USBD_LL_Transmit>

  return USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2203      	movs	r2, #3
 8007f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	2100      	movs	r1, #0
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fcb8 	bl	80088e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	2100      	movs	r1, #0
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fca7 	bl	80088e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2100      	movs	r1, #0
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fc73 	bl	80088a6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2205      	movs	r2, #5
 8007fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2100      	movs	r1, #0
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc81 	bl	80088e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4912      	ldr	r1, [pc, #72]	; (8008040 <MX_USB_DEVICE_Init+0x50>)
 8007ff8:	4812      	ldr	r0, [pc, #72]	; (8008044 <MX_USB_DEVICE_Init+0x54>)
 8007ffa:	f7fe fd07 	bl	8006a0c <USBD_Init>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008004:	f7f8 fdb0 	bl	8000b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008008:	490f      	ldr	r1, [pc, #60]	; (8008048 <MX_USB_DEVICE_Init+0x58>)
 800800a:	480e      	ldr	r0, [pc, #56]	; (8008044 <MX_USB_DEVICE_Init+0x54>)
 800800c:	f7fe fd2e 	bl	8006a6c <USBD_RegisterClass>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008016:	f7f8 fda7 	bl	8000b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800801a:	490c      	ldr	r1, [pc, #48]	; (800804c <MX_USB_DEVICE_Init+0x5c>)
 800801c:	4809      	ldr	r0, [pc, #36]	; (8008044 <MX_USB_DEVICE_Init+0x54>)
 800801e:	f7fe fc1f 	bl	8006860 <USBD_CDC_RegisterInterface>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008028:	f7f8 fd9e 	bl	8000b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800802c:	4805      	ldr	r0, [pc, #20]	; (8008044 <MX_USB_DEVICE_Init+0x54>)
 800802e:	f7fe fd53 	bl	8006ad8 <USBD_Start>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008038:	f7f8 fd96 	bl	8000b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800803c:	bf00      	nop
 800803e:	bd80      	pop	{r7, pc}
 8008040:	200000ac 	.word	0x200000ac
 8008044:	2000062c 	.word	0x2000062c
 8008048:	20000018 	.word	0x20000018
 800804c:	20000098 	.word	0x20000098

08008050 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008054:	2200      	movs	r2, #0
 8008056:	4905      	ldr	r1, [pc, #20]	; (800806c <CDC_Init_FS+0x1c>)
 8008058:	4805      	ldr	r0, [pc, #20]	; (8008070 <CDC_Init_FS+0x20>)
 800805a:	f7fe fc1b 	bl	8006894 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800805e:	4905      	ldr	r1, [pc, #20]	; (8008074 <CDC_Init_FS+0x24>)
 8008060:	4803      	ldr	r0, [pc, #12]	; (8008070 <CDC_Init_FS+0x20>)
 8008062:	f7fe fc39 	bl	80068d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008066:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008068:	4618      	mov	r0, r3
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20001108 	.word	0x20001108
 8008070:	2000062c 	.word	0x2000062c
 8008074:	20000908 	.word	0x20000908

08008078 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800807c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800807e:	4618      	mov	r0, r3
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
 8008094:	4613      	mov	r3, r2
 8008096:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b23      	cmp	r3, #35	; 0x23
 800809c:	d84a      	bhi.n	8008134 <CDC_Control_FS+0xac>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <CDC_Control_FS+0x1c>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	08008135 	.word	0x08008135
 80080a8:	08008135 	.word	0x08008135
 80080ac:	08008135 	.word	0x08008135
 80080b0:	08008135 	.word	0x08008135
 80080b4:	08008135 	.word	0x08008135
 80080b8:	08008135 	.word	0x08008135
 80080bc:	08008135 	.word	0x08008135
 80080c0:	08008135 	.word	0x08008135
 80080c4:	08008135 	.word	0x08008135
 80080c8:	08008135 	.word	0x08008135
 80080cc:	08008135 	.word	0x08008135
 80080d0:	08008135 	.word	0x08008135
 80080d4:	08008135 	.word	0x08008135
 80080d8:	08008135 	.word	0x08008135
 80080dc:	08008135 	.word	0x08008135
 80080e0:	08008135 	.word	0x08008135
 80080e4:	08008135 	.word	0x08008135
 80080e8:	08008135 	.word	0x08008135
 80080ec:	08008135 	.word	0x08008135
 80080f0:	08008135 	.word	0x08008135
 80080f4:	08008135 	.word	0x08008135
 80080f8:	08008135 	.word	0x08008135
 80080fc:	08008135 	.word	0x08008135
 8008100:	08008135 	.word	0x08008135
 8008104:	08008135 	.word	0x08008135
 8008108:	08008135 	.word	0x08008135
 800810c:	08008135 	.word	0x08008135
 8008110:	08008135 	.word	0x08008135
 8008114:	08008135 	.word	0x08008135
 8008118:	08008135 	.word	0x08008135
 800811c:	08008135 	.word	0x08008135
 8008120:	08008135 	.word	0x08008135
 8008124:	08008135 	.word	0x08008135
 8008128:	08008135 	.word	0x08008135
 800812c:	08008135 	.word	0x08008135
 8008130:	08008135 	.word	0x08008135
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008134:	bf00      	nop
  }

  return (USBD_OK);
 8008136:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	4805      	ldr	r0, [pc, #20]	; (8008168 <CDC_Receive_FS+0x24>)
 8008152:	f7fe fbc1 	bl	80068d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008156:	4804      	ldr	r0, [pc, #16]	; (8008168 <CDC_Receive_FS+0x24>)
 8008158:	f7fe fc22 	bl	80069a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800815c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	2000062c 	.word	0x2000062c

0800816c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800817e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008182:	4618      	mov	r0, r3
 8008184:	371c      	adds	r7, #28
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2212      	movs	r2, #18
 80081a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081a2:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	200000c8 	.word	0x200000c8

080081b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	6039      	str	r1, [r7, #0]
 80081be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2204      	movs	r2, #4
 80081c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	200000dc 	.word	0x200000dc

080081d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	6039      	str	r1, [r7, #0]
 80081e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d105      	bne.n	80081f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4907      	ldr	r1, [pc, #28]	; (800820c <USBD_FS_ProductStrDescriptor+0x34>)
 80081ee:	4808      	ldr	r0, [pc, #32]	; (8008210 <USBD_FS_ProductStrDescriptor+0x38>)
 80081f0:	f7ff fe1e 	bl	8007e30 <USBD_GetString>
 80081f4:	e004      	b.n	8008200 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4904      	ldr	r1, [pc, #16]	; (800820c <USBD_FS_ProductStrDescriptor+0x34>)
 80081fa:	4805      	ldr	r0, [pc, #20]	; (8008210 <USBD_FS_ProductStrDescriptor+0x38>)
 80081fc:	f7ff fe18 	bl	8007e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20001908 	.word	0x20001908
 8008210:	0800ef10 	.word	0x0800ef10

08008214 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	6039      	str	r1, [r7, #0]
 800821e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	4904      	ldr	r1, [pc, #16]	; (8008234 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008224:	4804      	ldr	r0, [pc, #16]	; (8008238 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008226:	f7ff fe03 	bl	8007e30 <USBD_GetString>
  return USBD_StrDesc;
 800822a:	4b02      	ldr	r3, [pc, #8]	; (8008234 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20001908 	.word	0x20001908
 8008238:	0800ef28 	.word	0x0800ef28

0800823c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	221a      	movs	r2, #26
 800824c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800824e:	f000 f843 	bl	80082d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008252:	4b02      	ldr	r3, [pc, #8]	; (800825c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200000e0 	.word	0x200000e0

08008260 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d105      	bne.n	800827e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4907      	ldr	r1, [pc, #28]	; (8008294 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008276:	4808      	ldr	r0, [pc, #32]	; (8008298 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008278:	f7ff fdda 	bl	8007e30 <USBD_GetString>
 800827c:	e004      	b.n	8008288 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	4904      	ldr	r1, [pc, #16]	; (8008294 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008282:	4805      	ldr	r0, [pc, #20]	; (8008298 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008284:	f7ff fdd4 	bl	8007e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20001908 	.word	0x20001908
 8008298:	0800ef3c 	.word	0x0800ef3c

0800829c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d105      	bne.n	80082ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	4907      	ldr	r1, [pc, #28]	; (80082d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082b2:	4808      	ldr	r0, [pc, #32]	; (80082d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082b4:	f7ff fdbc 	bl	8007e30 <USBD_GetString>
 80082b8:	e004      	b.n	80082c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	4904      	ldr	r1, [pc, #16]	; (80082d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082be:	4805      	ldr	r0, [pc, #20]	; (80082d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082c0:	f7ff fdb6 	bl	8007e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c4:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20001908 	.word	0x20001908
 80082d4:	0800ef48 	.word	0x0800ef48

080082d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082de:	4b0f      	ldr	r3, [pc, #60]	; (800831c <Get_SerialNum+0x44>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082e4:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <Get_SerialNum+0x48>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082ea:	4b0e      	ldr	r3, [pc, #56]	; (8008324 <Get_SerialNum+0x4c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4413      	add	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082fe:	2208      	movs	r2, #8
 8008300:	4909      	ldr	r1, [pc, #36]	; (8008328 <Get_SerialNum+0x50>)
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 f814 	bl	8008330 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008308:	2204      	movs	r2, #4
 800830a:	4908      	ldr	r1, [pc, #32]	; (800832c <Get_SerialNum+0x54>)
 800830c:	68b8      	ldr	r0, [r7, #8]
 800830e:	f000 f80f 	bl	8008330 <IntToUnicode>
  }
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	1fff7a10 	.word	0x1fff7a10
 8008320:	1fff7a14 	.word	0x1fff7a14
 8008324:	1fff7a18 	.word	0x1fff7a18
 8008328:	200000e2 	.word	0x200000e2
 800832c:	200000f2 	.word	0x200000f2

08008330 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
 8008346:	e027      	b.n	8008398 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	0f1b      	lsrs	r3, r3, #28
 800834c:	2b09      	cmp	r3, #9
 800834e:	d80b      	bhi.n	8008368 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	0f1b      	lsrs	r3, r3, #28
 8008354:	b2da      	uxtb	r2, r3
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	4619      	mov	r1, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	440b      	add	r3, r1
 8008360:	3230      	adds	r2, #48	; 0x30
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e00a      	b.n	800837e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	0f1b      	lsrs	r3, r3, #28
 800836c:	b2da      	uxtb	r2, r3
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	4619      	mov	r1, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	440b      	add	r3, r1
 8008378:	3237      	adds	r2, #55	; 0x37
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	011b      	lsls	r3, r3, #4
 8008382:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	3301      	adds	r3, #1
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	4413      	add	r3, r2
 800838e:	2200      	movs	r2, #0
 8008390:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	3301      	adds	r3, #1
 8008396:	75fb      	strb	r3, [r7, #23]
 8008398:	7dfa      	ldrb	r2, [r7, #23]
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	429a      	cmp	r2, r3
 800839e:	d3d3      	bcc.n	8008348 <IntToUnicode+0x18>
  }
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b8:	f107 0314 	add.w	r3, r7, #20
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	609a      	str	r2, [r3, #8]
 80083c4:	60da      	str	r2, [r3, #12]
 80083c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083d0:	d13a      	bne.n	8008448 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d2:	2300      	movs	r3, #0
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	4a1d      	ldr	r2, [pc, #116]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 80083dc:	f043 0301 	orr.w	r3, r3, #1
 80083e0:	6313      	str	r3, [r2, #48]	; 0x30
 80083e2:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80083ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80083f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083f4:	2302      	movs	r3, #2
 80083f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083fc:	2303      	movs	r3, #3
 80083fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008400:	230a      	movs	r3, #10
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	4619      	mov	r1, r3
 800840a:	4812      	ldr	r0, [pc, #72]	; (8008454 <HAL_PCD_MspInit+0xa4>)
 800840c:	f7f8 febc 	bl	8001188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 8008412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008414:	4a0e      	ldr	r2, [pc, #56]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 8008416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841a:	6353      	str	r3, [r2, #52]	; 0x34
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 8008422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008424:	4a0a      	ldr	r2, [pc, #40]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 8008426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800842a:	6453      	str	r3, [r2, #68]	; 0x44
 800842c:	4b08      	ldr	r3, [pc, #32]	; (8008450 <HAL_PCD_MspInit+0xa0>)
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008438:	2200      	movs	r2, #0
 800843a:	2100      	movs	r1, #0
 800843c:	2043      	movs	r0, #67	; 0x43
 800843e:	f7f8 fe5f 	bl	8001100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008442:	2043      	movs	r0, #67	; 0x43
 8008444:	f7f8 fe88 	bl	8001158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008448:	bf00      	nop
 800844a:	3728      	adds	r7, #40	; 0x28
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40023800 	.word	0x40023800
 8008454:	40020000 	.word	0x40020000

08008458 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fe fb7f 	bl	8006b72 <USBD_LL_SetupStage>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	4613      	mov	r3, r2
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	4619      	mov	r1, r3
 80084a6:	f7fe fbb9 	bl	8006c1c <USBD_LL_DataOutStage>
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	334c      	adds	r3, #76	; 0x4c
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	4619      	mov	r1, r3
 80084da:	f7fe fc52 	bl	8006d82 <USBD_LL_DataInStage>
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fd86 	bl	8007006 <USBD_LL_SOF>
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800850a:	2301      	movs	r3, #1
 800850c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
 800851a:	e008      	b.n	800852e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d102      	bne.n	800852a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
 8008528:	e001      	b.n	800852e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800852a:	f7f8 fb1d 	bl	8000b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008534:	7bfa      	ldrb	r2, [r7, #15]
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fd26 	bl	8006f8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fcce 	bl	8006ee6 <USBD_LL_Reset>
}
 800854a:	bf00      	nop
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fd21 	bl	8006faa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008588:	4b04      	ldr	r3, [pc, #16]	; (800859c <HAL_PCD_SuspendCallback+0x48>)
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	4a03      	ldr	r2, [pc, #12]	; (800859c <HAL_PCD_SuspendCallback+0x48>)
 800858e:	f043 0306 	orr.w	r3, r3, #6
 8008592:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	e000ed00 	.word	0xe000ed00

080085a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fd11 	bl	8006fd6 <USBD_LL_Resume>
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fd69 	bl	80070aa <USBD_LL_IsoOUTIncomplete>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fd25 	bl	8007046 <USBD_LL_IsoINIncomplete>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fd7b 	bl	800710e <USBD_LL_DevConnected>
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe fd78 	bl	8007124 <USBD_LL_DevDisconnected>
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d13c      	bne.n	80086c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800864c:	4a20      	ldr	r2, [pc, #128]	; (80086d0 <USBD_LL_Init+0x94>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1e      	ldr	r2, [pc, #120]	; (80086d0 <USBD_LL_Init+0x94>)
 8008658:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800865c:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <USBD_LL_Init+0x94>)
 800865e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008662:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008664:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <USBD_LL_Init+0x94>)
 8008666:	2204      	movs	r2, #4
 8008668:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800866a:	4b19      	ldr	r3, [pc, #100]	; (80086d0 <USBD_LL_Init+0x94>)
 800866c:	2202      	movs	r2, #2
 800866e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008670:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <USBD_LL_Init+0x94>)
 8008672:	2200      	movs	r2, #0
 8008674:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <USBD_LL_Init+0x94>)
 8008678:	2202      	movs	r2, #2
 800867a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800867c:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <USBD_LL_Init+0x94>)
 800867e:	2200      	movs	r2, #0
 8008680:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008682:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <USBD_LL_Init+0x94>)
 8008684:	2200      	movs	r2, #0
 8008686:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008688:	4b11      	ldr	r3, [pc, #68]	; (80086d0 <USBD_LL_Init+0x94>)
 800868a:	2200      	movs	r2, #0
 800868c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800868e:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <USBD_LL_Init+0x94>)
 8008690:	2200      	movs	r2, #0
 8008692:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008694:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <USBD_LL_Init+0x94>)
 8008696:	2200      	movs	r2, #0
 8008698:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800869a:	480d      	ldr	r0, [pc, #52]	; (80086d0 <USBD_LL_Init+0x94>)
 800869c:	f7f9 f896 	bl	80017cc <HAL_PCD_Init>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086a6:	f7f8 fa5f 	bl	8000b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	4808      	ldr	r0, [pc, #32]	; (80086d0 <USBD_LL_Init+0x94>)
 80086ae:	f7fa fb00 	bl	8002cb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086b2:	2240      	movs	r2, #64	; 0x40
 80086b4:	2100      	movs	r1, #0
 80086b6:	4806      	ldr	r0, [pc, #24]	; (80086d0 <USBD_LL_Init+0x94>)
 80086b8:	f7fa fab4 	bl	8002c24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80086bc:	2280      	movs	r2, #128	; 0x80
 80086be:	2101      	movs	r1, #1
 80086c0:	4803      	ldr	r0, [pc, #12]	; (80086d0 <USBD_LL_Init+0x94>)
 80086c2:	f7fa faaf 	bl	8002c24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20001b08 	.word	0x20001b08

080086d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7f9 f99e 	bl	8001a2c <HAL_PCD_Start>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f942 	bl	8008980 <USBD_Get_USB_Status>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008700:	7bbb      	ldrb	r3, [r7, #14]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	4608      	mov	r0, r1
 8008714:	4611      	mov	r1, r2
 8008716:	461a      	mov	r2, r3
 8008718:	4603      	mov	r3, r0
 800871a:	70fb      	strb	r3, [r7, #3]
 800871c:	460b      	mov	r3, r1
 800871e:	70bb      	strb	r3, [r7, #2]
 8008720:	4613      	mov	r3, r2
 8008722:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008732:	78bb      	ldrb	r3, [r7, #2]
 8008734:	883a      	ldrh	r2, [r7, #0]
 8008736:	78f9      	ldrb	r1, [r7, #3]
 8008738:	f7f9 fe6f 	bl	800241a <HAL_PCD_EP_Open>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f91c 	bl	8008980 <USBD_Get_USB_Status>
 8008748:	4603      	mov	r3, r0
 800874a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874c:	7bbb      	ldrb	r3, [r7, #14]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f7f9 feb8 	bl	80024ea <HAL_PCD_EP_Close>
 800877a:	4603      	mov	r3, r0
 800877c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f8fd 	bl	8008980 <USBD_Get_USB_Status>
 8008786:	4603      	mov	r3, r0
 8008788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800878a:	7bbb      	ldrb	r3, [r7, #14]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f9 ff90 	bl	80026d8 <HAL_PCD_EP_SetStall>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f8de 	bl	8008980 <USBD_Get_USB_Status>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f9 ffd5 	bl	80027a0 <HAL_PCD_EP_ClrStall>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 f8bf 	bl	8008980 <USBD_Get_USB_Status>
 8008802:	4603      	mov	r3, r0
 8008804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008806:	7bbb      	ldrb	r3, [r7, #14]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008822:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008828:	2b00      	cmp	r3, #0
 800882a:	da0b      	bge.n	8008844 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008832:	68f9      	ldr	r1, [r7, #12]
 8008834:	4613      	mov	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	333e      	adds	r3, #62	; 0x3e
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	e00b      	b.n	800885c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	4613      	mov	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800885a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	4611      	mov	r1, r2
 8008886:	4618      	mov	r0, r3
 8008888:	f7f9 fda2 	bl	80023d0 <HAL_PCD_SetAddress>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 f874 	bl	8008980 <USBD_Get_USB_Status>
 8008898:	4603      	mov	r3, r0
 800889a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889c:	7bbb      	ldrb	r3, [r7, #14]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
 80088b2:	460b      	mov	r3, r1
 80088b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80088c4:	7af9      	ldrb	r1, [r7, #11]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	f7f9 febb 	bl	8002644 <HAL_PCD_EP_Transmit>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f853 	bl	8008980 <USBD_Get_USB_Status>
 80088da:	4603      	mov	r3, r0
 80088dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088de:	7dbb      	ldrb	r3, [r7, #22]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	460b      	mov	r3, r1
 80088f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008906:	7af9      	ldrb	r1, [r7, #11]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	f7f9 fe37 	bl	800257e <HAL_PCD_EP_Receive>
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f832 	bl	8008980 <USBD_Get_USB_Status>
 800891c:	4603      	mov	r3, r0
 800891e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008920:	7dbb      	ldrb	r3, [r7, #22]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7f9 fe67 	bl	8002614 <HAL_PCD_EP_GetRxCount>
 8008946:	4603      	mov	r3, r0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008958:	4b03      	ldr	r3, [pc, #12]	; (8008968 <USBD_static_malloc+0x18>)
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	20002014 	.word	0x20002014

0800896c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]

}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d817      	bhi.n	80089c4 <USBD_Get_USB_Status+0x44>
 8008994:	a201      	add	r2, pc, #4	; (adr r2, 800899c <USBD_Get_USB_Status+0x1c>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089ad 	.word	0x080089ad
 80089a0:	080089b3 	.word	0x080089b3
 80089a4:	080089b9 	.word	0x080089b9
 80089a8:	080089bf 	.word	0x080089bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
    break;
 80089b0:	e00b      	b.n	80089ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089b2:	2303      	movs	r3, #3
 80089b4:	73fb      	strb	r3, [r7, #15]
    break;
 80089b6:	e008      	b.n	80089ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
    break;
 80089bc:	e005      	b.n	80089ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089be:	2303      	movs	r3, #3
 80089c0:	73fb      	strb	r3, [r7, #15]
    break;
 80089c2:	e002      	b.n	80089ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089c4:	2303      	movs	r3, #3
 80089c6:	73fb      	strb	r3, [r7, #15]
    break;
 80089c8:	bf00      	nop
  }
  return usb_status;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f103 0208 	add.w	r2, r3, #8
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f04f 32ff 	mov.w	r2, #4294967295
 80089f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f103 0208 	add.w	r2, r3, #8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f103 0208 	add.w	r2, r3, #8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601a      	str	r2, [r3, #0]
}
 8008a6e:	bf00      	nop
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a90:	d103      	bne.n	8008a9a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e00c      	b.n	8008ab4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e002      	b.n	8008aa8 <vListInsert+0x2e>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d2f6      	bcs.n	8008aa2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	601a      	str	r2, [r3, #0]
}
 8008ae0:	bf00      	nop
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6892      	ldr	r2, [r2, #8]
 8008b02:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	6852      	ldr	r2, [r2, #4]
 8008b0c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d103      	bne.n	8008b20 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	1e5a      	subs	r2, r3, #1
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8008b6a:	f003 f9dd 	bl	800bf28 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b76:	68f9      	ldr	r1, [r7, #12]
 8008b78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b7a:	fb01 f303 	mul.w	r3, r1, r3
 8008b7e:	441a      	add	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	68f9      	ldr	r1, [r7, #12]
 8008b9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	22ff      	movs	r2, #255	; 0xff
 8008bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	22ff      	movs	r2, #255	; 0xff
 8008bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00f      	beq.n	8008be8 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3310      	adds	r3, #16
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 fe33 	bl	800a838 <xTaskRemoveFromEventList>
 8008bd2:	e009      	b.n	8008be8 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3310      	adds	r3, #16
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fefd 	bl	80089d8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3324      	adds	r3, #36	; 0x24
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fef8 	bl	80089d8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008be8:	f003 f9ce 	bl	800bf88 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008bec:	2301      	movs	r3, #1
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b08c      	sub	sp, #48	; 0x30
 8008bfa:	af02      	add	r7, sp, #8
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	4613      	mov	r3, r2
 8008c02:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10a      	bne.n	8008c20 <xQueueGenericCreate+0x2a>
        __asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	61bb      	str	r3, [r7, #24]
    }
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	fb02 f303 	mul.w	r3, r2, r3
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d006      	beq.n	8008c3e <xQueueGenericCreate+0x48>
 8008c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d101      	bne.n	8008c42 <xQueueGenericCreate+0x4c>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericCreate+0x4e>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xQueueGenericCreate+0x68>
        __asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	617b      	str	r3, [r7, #20]
    }
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8008c64:	d90a      	bls.n	8008c7c <xQueueGenericCreate+0x86>
        __asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	613b      	str	r3, [r7, #16]
    }
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	3350      	adds	r3, #80	; 0x50
 8008c80:	4618      	mov	r0, r3
 8008c82:	f003 fa7b 	bl	800c17c <pvPortMalloc>
 8008c86:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00d      	beq.n	8008caa <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	3350      	adds	r3, #80	; 0x50
 8008c96:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c98:	79fa      	ldrb	r2, [r7, #7]
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f805 	bl	8008cb4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008caa:	6a3b      	ldr	r3, [r7, #32]
    }
 8008cac:	4618      	mov	r0, r3
 8008cae:	3728      	adds	r7, #40	; 0x28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d103      	bne.n	8008cd0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	e002      	b.n	8008cd6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	69b8      	ldr	r0, [r7, #24]
 8008ce6:	f7ff ff2b 	bl	8008b40 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8008cf2:	78fb      	ldrb	r3, [r7, #3]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	2073      	movs	r0, #115	; 0x73
 8008cfa:	f004 fa5f 	bl	800d1bc <SEGGER_SYSVIEW_RecordU32x3>
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00e      	beq.n	8008d32 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d26:	2300      	movs	r3, #0
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f81d 	bl	8008d6c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b086      	sub	sp, #24
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	4603      	mov	r3, r0
 8008d42:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d44:	2301      	movs	r3, #1
 8008d46:	617b      	str	r3, [r7, #20]
 8008d48:	2300      	movs	r3, #0
 8008d4a:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6939      	ldr	r1, [r7, #16]
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f7ff ff4f 	bl	8008bf6 <xQueueGenericCreate>
 8008d58:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7ff ffd3 	bl	8008d06 <prvInitialiseMutex>

        return xNewQueue;
 8008d60:	68fb      	ldr	r3, [r7, #12]
    }
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b090      	sub	sp, #64	; 0x40
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <xQueueGenericSend+0x32>
        __asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d103      	bne.n	8008dac <xQueueGenericSend+0x40>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <xQueueGenericSend+0x44>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <xQueueGenericSend+0x46>
 8008db0:	2300      	movs	r3, #0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10a      	bne.n	8008dcc <xQueueGenericSend+0x60>
        __asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d103      	bne.n	8008dda <xQueueGenericSend+0x6e>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <xQueueGenericSend+0x72>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueGenericSend+0x74>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xQueueGenericSend+0x8e>
        __asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	623b      	str	r3, [r7, #32]
    }
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dfa:	f001 feed 	bl	800abd8 <xTaskGetSchedulerState>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <xQueueGenericSend+0x9e>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <xQueueGenericSend+0xa2>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e000      	b.n	8008e10 <xQueueGenericSend+0xa4>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <xQueueGenericSend+0xbe>
        __asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	61fb      	str	r3, [r7, #28]
    }
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008e2a:	f003 f87d 	bl	800bf28 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d302      	bcc.n	8008e40 <xQueueGenericSend+0xd4>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d11f      	bne.n	8008e80 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	4618      	mov	r0, r3
 8008e44:	f004 fff4 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	460b      	mov	r3, r1
 8008e52:	4601      	mov	r1, r0
 8008e54:	205a      	movs	r0, #90	; 0x5a
 8008e56:	f004 fa27 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e60:	f000 fb9e 	bl	80095a0 <prvCopyDataToQueue>
 8008e64:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d004      	beq.n	8008e78 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	3324      	adds	r3, #36	; 0x24
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 fce0 	bl	800a838 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008e78:	f003 f886 	bl	800bf88 <vPortExitCritical>
                return pdPASS;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e07d      	b.n	8008f7c <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d110      	bne.n	8008ea8 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008e86:	f003 f87f 	bl	800bf88 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f004 ffcf 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4601      	mov	r1, r0
 8008e9e:	205a      	movs	r0, #90	; 0x5a
 8008ea0:	f004 fa02 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	e069      	b.n	8008f7c <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008eae:	f107 0314 	add.w	r3, r7, #20
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 fd4c 	bl	800a950 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008ebc:	f003 f864 	bl	800bf88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008ec0:	f001 faa2 	bl	800a408 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008ec4:	f003 f830 	bl	800bf28 <vPortEnterCritical>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed4:	d103      	bne.n	8008ede <xQueueGenericSend+0x172>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee4:	b25b      	sxtb	r3, r3
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eea:	d103      	bne.n	8008ef4 <xQueueGenericSend+0x188>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ef4:	f003 f848 	bl	800bf88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ef8:	1d3a      	adds	r2, r7, #4
 8008efa:	f107 0314 	add.w	r3, r7, #20
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fd3b 	bl	800a97c <xTaskCheckForTimeOut>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d124      	bne.n	8008f56 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f0e:	f000 fc3f 	bl	8009790 <prvIsQueueFull>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d018      	beq.n	8008f4a <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	3310      	adds	r3, #16
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 fc37 	bl	800a794 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f28:	f000 fbca 	bl	80096c0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008f2c:	f001 fa7a 	bl	800a424 <xTaskResumeAll>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f47f af79 	bne.w	8008e2a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8008f38:	4b12      	ldr	r3, [pc, #72]	; (8008f84 <xQueueGenericSend+0x218>)
 8008f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	e76f      	b.n	8008e2a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f4c:	f000 fbb8 	bl	80096c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008f50:	f001 fa68 	bl	800a424 <xTaskResumeAll>
 8008f54:	e769      	b.n	8008e2a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f58:	f000 fbb2 	bl	80096c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008f5c:	f001 fa62 	bl	800a424 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	4618      	mov	r0, r3
 8008f64:	f004 ff64 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	460b      	mov	r3, r1
 8008f72:	4601      	mov	r1, r0
 8008f74:	205a      	movs	r0, #90	; 0x5a
 8008f76:	f004 f997 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008f7a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3738      	adds	r7, #56	; 0x38
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b090      	sub	sp, #64	; 0x40
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <xQueueGenericSendFromISR+0x3c>
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <xQueueGenericSendFromISR+0x40>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <xQueueGenericSendFromISR+0x42>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d103      	bne.n	8008ff2 <xQueueGenericSendFromISR+0x6a>
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <xQueueGenericSendFromISR+0x6e>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <xQueueGenericSendFromISR+0x70>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	623b      	str	r3, [r7, #32]
    }
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009012:	f003 f873 	bl	800c0fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009016:	f3ef 8211 	mrs	r2, BASEPRI
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	61fa      	str	r2, [r7, #28]
 800902c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800902e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009030:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903a:	429a      	cmp	r2, r3
 800903c:	d302      	bcc.n	8009044 <xQueueGenericSendFromISR+0xbc>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d148      	bne.n	80090d6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800904a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	4618      	mov	r0, r3
 8009058:	f004 feea 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 800905c:	4601      	mov	r1, r0
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	461a      	mov	r2, r3
 8009062:	2060      	movs	r0, #96	; 0x60
 8009064:	f004 f850 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800906e:	f000 fa97 	bl	80095a0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009072:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907a:	d112      	bne.n	80090a2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d025      	beq.n	80090d0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	4618      	mov	r0, r3
 800908a:	f001 fbd5 	bl	800a838 <xTaskRemoveFromEventList>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01d      	beq.n	80090d0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d01a      	beq.n	80090d0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	e016      	b.n	80090d0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80090a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80090a6:	2b7f      	cmp	r3, #127	; 0x7f
 80090a8:	d10a      	bne.n	80090c0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	617b      	str	r3, [r7, #20]
    }
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090c4:	3301      	adds	r3, #1
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	b25a      	sxtb	r2, r3
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80090d0:	2301      	movs	r3, #1
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80090d4:	e00b      	b.n	80090ee <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80090d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d8:	4618      	mov	r0, r3
 80090da:	f004 fea9 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80090de:	4601      	mov	r1, r0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	461a      	mov	r2, r3
 80090e4:	2060      	movs	r0, #96	; 0x60
 80090e6:	f004 f80f 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80090f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80090fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3740      	adds	r7, #64	; 0x40
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009104:	b590      	push	{r4, r7, lr}
 8009106:	b08f      	sub	sp, #60	; 0x3c
 8009108:	af02      	add	r7, sp, #8
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009110:	2300      	movs	r3, #0
 8009112:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <xQueueReceive+0x30>
        __asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	623b      	str	r3, [r7, #32]
    }
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <xQueueReceive+0x3e>
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <xQueueReceive+0x42>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <xQueueReceive+0x44>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10a      	bne.n	8009162 <xQueueReceive+0x5e>
        __asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	61fb      	str	r3, [r7, #28]
    }
 800915e:	bf00      	nop
 8009160:	e7fe      	b.n	8009160 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009162:	f001 fd39 	bl	800abd8 <xTaskGetSchedulerState>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <xQueueReceive+0x6e>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <xQueueReceive+0x72>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <xQueueReceive+0x74>
 8009176:	2300      	movs	r3, #0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <xQueueReceive+0x8e>
        __asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	61bb      	str	r3, [r7, #24]
    }
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009192:	f002 fec9 	bl	800bf28 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d024      	beq.n	80091ec <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a6:	f000 fa65 	bl	8009674 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	4618      	mov	r0, r3
 80091ae:	f004 fe3f 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80091b2:	4604      	mov	r4, r0
 80091b4:	2000      	movs	r0, #0
 80091b6:	f004 fe3b 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80091ba:	4602      	mov	r2, r0
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2101      	movs	r1, #1
 80091c0:	9100      	str	r1, [sp, #0]
 80091c2:	4621      	mov	r1, r4
 80091c4:	205c      	movs	r0, #92	; 0x5c
 80091c6:	f004 f86f 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	1e5a      	subs	r2, r3, #1
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d004      	beq.n	80091e4 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	3310      	adds	r3, #16
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 fb2a 	bl	800a838 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80091e4:	f002 fed0 	bl	800bf88 <vPortExitCritical>
                return pdPASS;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e08a      	b.n	8009302 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d113      	bne.n	800921a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80091f2:	f002 fec9 	bl	800bf88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	4618      	mov	r0, r3
 80091fa:	f004 fe19 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80091fe:	4604      	mov	r4, r0
 8009200:	2000      	movs	r0, #0
 8009202:	f004 fe15 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 8009206:	4602      	mov	r2, r0
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2101      	movs	r1, #1
 800920c:	9100      	str	r1, [sp, #0]
 800920e:	4621      	mov	r1, r4
 8009210:	205c      	movs	r0, #92	; 0x5c
 8009212:	f004 f849 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009216:	2300      	movs	r3, #0
 8009218:	e073      	b.n	8009302 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009220:	f107 0310 	add.w	r3, r7, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fb93 	bl	800a950 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800922a:	2301      	movs	r3, #1
 800922c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800922e:	f002 feab 	bl	800bf88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009232:	f001 f8e9 	bl	800a408 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009236:	f002 fe77 	bl	800bf28 <vPortEnterCritical>
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009240:	b25b      	sxtb	r3, r3
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d103      	bne.n	8009250 <xQueueReceive+0x14c>
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009256:	b25b      	sxtb	r3, r3
 8009258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925c:	d103      	bne.n	8009266 <xQueueReceive+0x162>
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009266:	f002 fe8f 	bl	800bf88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800926a:	1d3a      	adds	r2, r7, #4
 800926c:	f107 0310 	add.w	r3, r7, #16
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f001 fb82 	bl	800a97c <xTaskCheckForTimeOut>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d124      	bne.n	80092c8 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800927e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009280:	f000 fa70 	bl	8009764 <prvIsQueueEmpty>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	3324      	adds	r3, #36	; 0x24
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f001 fa7e 	bl	800a794 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800929a:	f000 fa11 	bl	80096c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800929e:	f001 f8c1 	bl	800a424 <xTaskResumeAll>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f47f af74 	bne.w	8009192 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80092aa:	4b18      	ldr	r3, [pc, #96]	; (800930c <xQueueReceive+0x208>)
 80092ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	e76a      	b.n	8009192 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80092bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092be:	f000 f9ff 	bl	80096c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80092c2:	f001 f8af 	bl	800a424 <xTaskResumeAll>
 80092c6:	e764      	b.n	8009192 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80092c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ca:	f000 f9f9 	bl	80096c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80092ce:	f001 f8a9 	bl	800a424 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d4:	f000 fa46 	bl	8009764 <prvIsQueueEmpty>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f43f af59 	beq.w	8009192 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	4618      	mov	r0, r3
 80092e4:	f004 fda4 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80092e8:	4604      	mov	r4, r0
 80092ea:	2000      	movs	r0, #0
 80092ec:	f004 fda0 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80092f0:	4602      	mov	r2, r0
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2101      	movs	r1, #1
 80092f6:	9100      	str	r1, [sp, #0]
 80092f8:	4621      	mov	r1, r4
 80092fa:	205c      	movs	r0, #92	; 0x5c
 80092fc:	f003 ffd4 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009300:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009302:	4618      	mov	r0, r3
 8009304:	3734      	adds	r7, #52	; 0x34
 8009306:	46bd      	mov	sp, r7
 8009308:	bd90      	pop	{r4, r7, pc}
 800930a:	bf00      	nop
 800930c:	e000ed04 	.word	0xe000ed04

08009310 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009310:	b590      	push	{r4, r7, lr}
 8009312:	b091      	sub	sp, #68	; 0x44
 8009314:	af02      	add	r7, sp, #8
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	623b      	str	r3, [r7, #32]
    }
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	61fb      	str	r3, [r7, #28]
    }
 800935c:	bf00      	nop
 800935e:	e7fe      	b.n	800935e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009360:	f001 fc3a 	bl	800abd8 <xTaskGetSchedulerState>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <xQueueSemaphoreTake+0x60>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <xQueueSemaphoreTake+0x64>
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <xQueueSemaphoreTake+0x66>
 8009374:	2300      	movs	r3, #0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	61bb      	str	r3, [r7, #24]
    }
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009390:	f002 fdca 	bl	800bf28 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	2b00      	cmp	r3, #0
 800939e:	d029      	beq.n	80093f4 <xQueueSemaphoreTake+0xe4>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	4618      	mov	r0, r3
 80093a4:	f004 fd44 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80093a8:	4604      	mov	r4, r0
 80093aa:	2000      	movs	r0, #0
 80093ac:	f004 fd40 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80093b0:	4602      	mov	r2, r0
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2101      	movs	r1, #1
 80093b6:	9100      	str	r1, [sp, #0]
 80093b8:	4621      	mov	r1, r4
 80093ba:	205c      	movs	r0, #92	; 0x5c
 80093bc:	f003 ff74 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	1e5a      	subs	r2, r3, #1
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80093d0:	f001 fdb2 	bl	800af38 <pvTaskIncrementMutexHeldCount>
 80093d4:	4602      	mov	r2, r0
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <xQueueSemaphoreTake+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	3310      	adds	r3, #16
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 fa26 	bl	800a838 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80093ec:	f002 fdcc 	bl	800bf88 <vPortExitCritical>
                return pdPASS;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e0b7      	b.n	8009564 <xQueueSemaphoreTake+0x254>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d121      	bne.n	800943e <xQueueSemaphoreTake+0x12e>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <xQueueSemaphoreTake+0x106>
        __asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	617b      	str	r3, [r7, #20]
    }
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xQueueSemaphoreTake+0x104>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009416:	f002 fdb7 	bl	800bf88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	4618      	mov	r0, r3
 800941e:	f004 fd07 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 8009422:	4604      	mov	r4, r0
 8009424:	2000      	movs	r0, #0
 8009426:	f004 fd03 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 800942a:	4602      	mov	r2, r0
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2101      	movs	r1, #1
 8009430:	9100      	str	r1, [sp, #0]
 8009432:	4621      	mov	r1, r4
 8009434:	205c      	movs	r0, #92	; 0x5c
 8009436:	f003 ff37 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800943a:	2300      	movs	r3, #0
 800943c:	e092      	b.n	8009564 <xQueueSemaphoreTake+0x254>
                }
                else if( xEntryTimeSet == pdFALSE )
 800943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009440:	2b00      	cmp	r3, #0
 8009442:	d106      	bne.n	8009452 <xQueueSemaphoreTake+0x142>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009444:	f107 030c 	add.w	r3, r7, #12
 8009448:	4618      	mov	r0, r3
 800944a:	f001 fa81 	bl	800a950 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800944e:	2301      	movs	r3, #1
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009452:	f002 fd99 	bl	800bf88 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009456:	f000 ffd7 	bl	800a408 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800945a:	f002 fd65 	bl	800bf28 <vPortEnterCritical>
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009464:	b25b      	sxtb	r3, r3
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d103      	bne.n	8009474 <xQueueSemaphoreTake+0x164>
 800946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800947a:	b25b      	sxtb	r3, r3
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009480:	d103      	bne.n	800948a <xQueueSemaphoreTake+0x17a>
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800948a:	f002 fd7d 	bl	800bf88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800948e:	463a      	mov	r2, r7
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fa70 	bl	800a97c <xTaskCheckForTimeOut>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d132      	bne.n	8009508 <xQueueSemaphoreTake+0x1f8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094a4:	f000 f95e 	bl	8009764 <prvIsQueueEmpty>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d026      	beq.n	80094fc <xQueueSemaphoreTake+0x1ec>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <xQueueSemaphoreTake+0x1ba>
                        {
                            taskENTER_CRITICAL();
 80094b6:	f002 fd37 	bl	800bf28 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 fba8 	bl	800ac14 <xTaskPriorityInherit>
 80094c4:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80094c6:	f002 fd5f 	bl	800bf88 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	3324      	adds	r3, #36	; 0x24
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 f95e 	bl	800a794 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80094d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094da:	f000 f8f1 	bl	80096c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80094de:	f000 ffa1 	bl	800a424 <xTaskResumeAll>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f47f af53 	bne.w	8009390 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80094ea:	4b20      	ldr	r3, [pc, #128]	; (800956c <xQueueSemaphoreTake+0x25c>)
 80094ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	e749      	b.n	8009390 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80094fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094fe:	f000 f8df 	bl	80096c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009502:	f000 ff8f 	bl	800a424 <xTaskResumeAll>
 8009506:	e743      	b.n	8009390 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800950a:	f000 f8d9 	bl	80096c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800950e:	f000 ff89 	bl	800a424 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009514:	f000 f926 	bl	8009764 <prvIsQueueEmpty>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	f43f af38 	beq.w	8009390 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00d      	beq.n	8009542 <xQueueSemaphoreTake+0x232>
                        {
                            taskENTER_CRITICAL();
 8009526:	f002 fcff 	bl	800bf28 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800952a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800952c:	f000 f820 	bl	8009570 <prvGetDisinheritPriorityAfterTimeout>
 8009530:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009538:	4618      	mov	r0, r3
 800953a:	f001 fc65 	bl	800ae08 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800953e:	f002 fd23 	bl	800bf88 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	4618      	mov	r0, r3
 8009546:	f004 fc73 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 800954a:	4604      	mov	r4, r0
 800954c:	2000      	movs	r0, #0
 800954e:	f004 fc6f 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 8009552:	4602      	mov	r2, r0
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2101      	movs	r1, #1
 8009558:	9100      	str	r1, [sp, #0]
 800955a:	4621      	mov	r1, r4
 800955c:	205c      	movs	r0, #92	; 0x5c
 800955e:	f003 fea3 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009562:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009564:	4618      	mov	r0, r3
 8009566:	373c      	adds	r7, #60	; 0x3c
 8009568:	46bd      	mov	sp, r7
 800956a:	bd90      	pop	{r4, r7, pc}
 800956c:	e000ed04 	.word	0xe000ed04

08009570 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	d006      	beq.n	800958e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f1c3 0305 	rsb	r3, r3, #5
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e001      	b.n	8009592 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009592:	68fb      	ldr	r3, [r7, #12]
    }
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10d      	bne.n	80095da <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d14d      	bne.n	8009662 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 fb9c 	bl	800ad08 <xTaskPriorityDisinherit>
 80095d0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	609a      	str	r2, [r3, #8]
 80095d8:	e043      	b.n	8009662 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d119      	bne.n	8009614 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6858      	ldr	r0, [r3, #4]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e8:	461a      	mov	r2, r3
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	f004 fef0 	bl	800e3d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f8:	441a      	add	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	429a      	cmp	r2, r3
 8009608:	d32b      	bcc.n	8009662 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	e026      	b.n	8009662 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	68d8      	ldr	r0, [r3, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961c:	461a      	mov	r2, r3
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	f004 fed6 	bl	800e3d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	425b      	negs	r3, r3
 800962e:	441a      	add	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d207      	bcs.n	8009650 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009648:	425b      	negs	r3, r3
 800964a:	441a      	add	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d105      	bne.n	8009662 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	3b01      	subs	r3, #1
 8009660:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800966a:	697b      	ldr	r3, [r7, #20]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	d018      	beq.n	80096b8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	441a      	add	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	d303      	bcc.n	80096a8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68d9      	ldr	r1, [r3, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b0:	461a      	mov	r2, r3
 80096b2:	6838      	ldr	r0, [r7, #0]
 80096b4:	f004 fe8c 	bl	800e3d0 <memcpy>
    }
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80096c8:	f002 fc2e 	bl	800bf28 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096d4:	e011      	b.n	80096fa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d012      	beq.n	8009704 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3324      	adds	r3, #36	; 0x24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f001 f8a8 	bl	800a838 <xTaskRemoveFromEventList>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80096ee:	f001 f9ab 	bl	800aa48 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dce9      	bgt.n	80096d6 <prvUnlockQueue+0x16>
 8009702:	e000      	b.n	8009706 <prvUnlockQueue+0x46>
                        break;
 8009704:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	22ff      	movs	r2, #255	; 0xff
 800970a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800970e:	f002 fc3b 	bl	800bf88 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009712:	f002 fc09 	bl	800bf28 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800971c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800971e:	e011      	b.n	8009744 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d012      	beq.n	800974e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3310      	adds	r3, #16
 800972c:	4618      	mov	r0, r3
 800972e:	f001 f883 	bl	800a838 <xTaskRemoveFromEventList>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009738:	f001 f986 	bl	800aa48 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	3b01      	subs	r3, #1
 8009740:	b2db      	uxtb	r3, r3
 8009742:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009748:	2b00      	cmp	r3, #0
 800974a:	dce9      	bgt.n	8009720 <prvUnlockQueue+0x60>
 800974c:	e000      	b.n	8009750 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800974e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	22ff      	movs	r2, #255	; 0xff
 8009754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8009758:	f002 fc16 	bl	800bf88 <vPortExitCritical>
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800976c:	f002 fbdc 	bl	800bf28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009778:	2301      	movs	r3, #1
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	e001      	b.n	8009782 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009782:	f002 fc01 	bl	800bf88 <vPortExitCritical>

    return xReturn;
 8009786:	68fb      	ldr	r3, [r7, #12]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009798:	f002 fbc6 	bl	800bf28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d102      	bne.n	80097ae <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	e001      	b.n	80097b2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80097b2:	f002 fbe9 	bl	800bf88 <vPortExitCritical>

    return xReturn;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097ca:	2300      	movs	r3, #0
 80097cc:	60fb      	str	r3, [r7, #12]
 80097ce:	e01e      	b.n	800980e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097d0:	4a13      	ldr	r2, [pc, #76]	; (8009820 <vQueueAddToRegistry+0x60>)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d115      	bne.n	8009808 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097dc:	4910      	ldr	r1, [pc, #64]	; (8009820 <vQueueAddToRegistry+0x60>)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80097e6:	4a0e      	ldr	r2, [pc, #56]	; (8009820 <vQueueAddToRegistry+0x60>)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	4413      	add	r3, r2
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f004 fb1b 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 80097fa:	4601      	mov	r1, r0
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	2071      	movs	r0, #113	; 0x71
 8009802:	f003 fc81 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8009806:	e006      	b.n	8009816 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b07      	cmp	r3, #7
 8009812:	d9dd      	bls.n	80097d0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20002238 	.word	0x20002238

08009824 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009834:	f002 fb78 	bl	800bf28 <vPortEnterCritical>
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800983e:	b25b      	sxtb	r3, r3
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009844:	d103      	bne.n	800984e <vQueueWaitForMessageRestricted+0x2a>
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009854:	b25b      	sxtb	r3, r3
 8009856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985a:	d103      	bne.n	8009864 <vQueueWaitForMessageRestricted+0x40>
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009864:	f002 fb90 	bl	800bf88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	3324      	adds	r3, #36	; 0x24
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	68b9      	ldr	r1, [r7, #8]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 ffaf 	bl	800a7dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800987e:	6978      	ldr	r0, [r7, #20]
 8009880:	f7ff ff1e 	bl	80096c0 <prvUnlockQueue>
    }
 8009884:	bf00      	nop
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <xStreamBufferGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xIsMessageBuffer )
    {
 800988c:	b580      	push	{r7, lr}
 800988e:	b08c      	sub	sp, #48	; 0x30
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xIsMessageBuffer == pdTRUE )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d110      	bne.n	80098c0 <xStreamBufferGenericCreate+0x34>
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800989e:	2301      	movs	r3, #1
 80098a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d81b      	bhi.n	80098e2 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	61fb      	str	r3, [r7, #28]
    }
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <xStreamBufferGenericCreate+0x32>
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > 0 );
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	61bb      	str	r3, [r7, #24]
    }
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <xStreamBufferGenericCreate+0x54>
        }

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d90a      	bls.n	8009900 <xStreamBufferGenericCreate+0x74>
        __asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	617b      	str	r3, [r7, #20]
    }
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <xStreamBufferGenericCreate+0x72>

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <xStreamBufferGenericCreate+0x7e>
        {
            xTriggerLevelBytes = ( size_t ) 1;
 8009906:	2301      	movs	r3, #1
 8009908:	60bb      	str	r3, [r7, #8]
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8009910:	d809      	bhi.n	8009926 <xStreamBufferGenericCreate+0x9a>
        {
            xBufferSizeBytes++;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3301      	adds	r3, #1
 8009916:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	3324      	adds	r3, #36	; 0x24
 800991c:	4618      	mov	r0, r3
 800991e:	f002 fc2d 	bl	800c17c <pvPortMalloc>
 8009922:	6278      	str	r0, [r7, #36]	; 0x24
 8009924:	e001      	b.n	800992a <xStreamBufferGenericCreate+0x9e>
        }
        else
        {
            pucAllocatedMemory = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
        }
        

        if( pucAllocatedMemory != NULL )
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	d011      	beq.n	8009954 <xStreamBufferGenericCreate+0xc8>
        {
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009942:	f000 fb3f 	bl	8009fc4 <prvInitialiseNewStreamBuffer>
                                          pucAllocatedMemory + sizeof( StreamBuffer_t ), /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
                                          xBufferSizeBytes,
                                          xTriggerLevelBytes,
                                          ucFlags );

            traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994a:	4619      	mov	r1, r3
 800994c:	2089      	movs	r0, #137	; 0x89
 800994e:	f003 fbdb 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
 8009952:	e005      	b.n	8009960 <xStreamBufferGenericCreate+0xd4>
        }
        else
        {
            traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	4619      	mov	r1, r3
 800995a:	2089      	movs	r0, #137	; 0x89
 800995c:	f003 fbd4 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
        }

        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8009962:	4618      	mov	r0, r3
 8009964:	3728      	adds	r7, #40	; 0x28
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <xStreamBufferSpacesAvailable>:
    return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800996a:	b480      	push	{r7}
 800996c:	b087      	sub	sp, #28
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	613b      	str	r3, [r7, #16]
    size_t xSpace;

    configASSERT( pxStreamBuffer );
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xStreamBufferSpacesAvailable+0x28>
        __asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60fb      	str	r3, [r7, #12]
    }
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xStreamBufferSpacesAvailable+0x26>

    xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	689a      	ldr	r2, [r3, #8]
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4413      	add	r3, r2
 800999c:	617b      	str	r3, [r7, #20]
    xSpace -= pxStreamBuffer->xHead;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	617b      	str	r3, [r7, #20]
    xSpace -= ( size_t ) 1;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]

    if( xSpace >= pxStreamBuffer->xLength )
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d304      	bcc.n	80099c2 <xStreamBufferSpacesAvailable+0x58>
    {
        xSpace -= pxStreamBuffer->xLength;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	617b      	str	r3, [r7, #20]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xSpace;
 80099c2:	697b      	ldr	r3, [r7, #20]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b092      	sub	sp, #72	; 0x48
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	637b      	str	r3, [r7, #52]	; 0x34
    size_t xReturn, xSpace = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t xRequiredSpace = xDataLengthBytes;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 80099ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pvTxData );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xStreamBufferSend+0x3e>
        __asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xStreamBufferSend+0x3c>
    configASSERT( pxStreamBuffer );
 8009a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xStreamBufferSend+0x5a>
        __asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xStreamBufferSend+0x58>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2c:	7f1b      	ldrb	r3, [r3, #28]
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d018      	beq.n	8009a68 <xStreamBufferSend+0x98>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	3304      	adds	r3, #4
 8009a3a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8009a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d80a      	bhi.n	8009a5a <xStreamBufferSend+0x8a>
        __asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	623b      	str	r3, [r7, #32]
    }
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xStreamBufferSend+0x88>

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 8009a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d908      	bls.n	8009a74 <xStreamBufferSend+0xa4>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	603b      	str	r3, [r7, #0]
 8009a66:	e005      	b.n	8009a74 <xStreamBufferSend+0xa4>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 8009a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d901      	bls.n	8009a74 <xStreamBufferSend+0xa4>
        {
            xRequiredSpace = xMaxReportedSpace;
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d041      	beq.n	8009afe <xStreamBufferSend+0x12e>
    {
        vTaskSetTimeOutState( &xTimeOut );
 8009a7a:	f107 0314 	add.w	r3, r7, #20
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 ff40 	bl	800a904 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 8009a84:	f002 fa50 	bl	800bf28 <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009a88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a8a:	f7ff ff6e 	bl	800996a <xStreamBufferSpacesAvailable>
 8009a8e:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( xSpace < xRequiredSpace )
 8009a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d218      	bcs.n	8009aca <xStreamBufferSend+0xfa>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 8009a98:	2100      	movs	r1, #0
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	f001 fd4e 	bl	800b53c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <xStreamBufferSend+0xee>
        __asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	61fb      	str	r3, [r7, #28]
    }
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <xStreamBufferSend+0xec>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009abe:	f001 f87b 	bl	800abb8 <xTaskGetCurrentTaskHandle>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac6:	615a      	str	r2, [r3, #20]
 8009ac8:	e002      	b.n	8009ad0 <xStreamBufferSend+0x100>
                }
                else
                {
                    taskEXIT_CRITICAL();
 8009aca:	f002 fa5d 	bl	800bf88 <vPortExitCritical>
                    break;
 8009ace:	e016      	b.n	8009afe <xStreamBufferSend+0x12e>
                }
            }
            taskEXIT_CRITICAL();
 8009ad0:	f002 fa5a 	bl	800bf88 <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	2200      	movs	r2, #0
 8009adc:	2100      	movs	r1, #0
 8009ade:	2000      	movs	r0, #0
 8009ae0:	f001 faac 	bl	800b03c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8009aea:	463a      	mov	r2, r7
 8009aec:	f107 0314 	add.w	r3, r7, #20
 8009af0:	4611      	mov	r1, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 ff42 	bl	800a97c <xTaskCheckForTimeOut>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0c2      	beq.n	8009a84 <xStreamBufferSend+0xb4>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 8009afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d103      	bne.n	8009b0c <xStreamBufferSend+0x13c>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009b04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b06:	f7ff ff30 	bl	800996a <xStreamBufferSpacesAvailable>
 8009b0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	68b9      	ldr	r1, [r7, #8]
 8009b16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b18:	f000 f832 	bl	8009b80 <prvWriteMessageToBuffer>
 8009b1c:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xReturn > ( size_t ) 0 )
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d022      	beq.n	8009b6a <xStreamBufferSend+0x19a>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b28:	4619      	mov	r1, r3
 8009b2a:	208c      	movs	r0, #140	; 0x8c
 8009b2c:	f003 faec 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009b30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b32:	f000 fa27 	bl	8009f84 <prvBytesInBuffer>
 8009b36:	4602      	mov	r2, r0
 8009b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d31a      	bcc.n	8009b76 <xStreamBufferSend+0x1a6>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8009b40:	f000 fc62 	bl	800a408 <vTaskSuspendAll>
 8009b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <xStreamBufferSend+0x194>
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	6918      	ldr	r0, [r3, #16]
 8009b50:	2300      	movs	r3, #0
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	2300      	movs	r3, #0
 8009b56:	2200      	movs	r2, #0
 8009b58:	2100      	movs	r1, #0
 8009b5a:	f001 faf7 	bl	800b14c <xTaskGenericNotify>
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b60:	2200      	movs	r2, #0
 8009b62:	611a      	str	r2, [r3, #16]
 8009b64:	f000 fc5e 	bl	800a424 <xTaskResumeAll>
 8009b68:	e005      	b.n	8009b76 <xStreamBufferSend+0x1a6>
        }
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4619      	mov	r1, r3
 8009b70:	208c      	movs	r0, #140	; 0x8c
 8009b72:	f003 fac9 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
    }

    return xReturn;
 8009b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3740      	adds	r7, #64	; 0x40
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
    BaseType_t xShouldWrite;
    size_t xReturn;

    if( xSpace == ( size_t ) 0 )
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <prvWriteMessageToBuffer+0x1a>
    {
        /* Doesn't matter if this is a stream buffer or a message buffer, there
         * is no space to write. */
        xShouldWrite = pdFALSE;
 8009b94:	2300      	movs	r3, #0
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	e01d      	b.n	8009bd6 <prvWriteMessageToBuffer+0x56>
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	7f1b      	ldrb	r3, [r3, #28]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d108      	bne.n	8009bb8 <prvWriteMessageToBuffer+0x38>
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Write as many bytes as
         * possible. */
        xShouldWrite = pdTRUE;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	617b      	str	r3, [r7, #20]
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bf28      	it	cs
 8009bb2:	4613      	movcs	r3, r2
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	e00e      	b.n	8009bd6 <prvWriteMessageToBuffer+0x56>
    }
    else if( xSpace >= xRequiredSpace )
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d308      	bcc.n	8009bd2 <prvWriteMessageToBuffer+0x52>
    {
        /* This is a message buffer, as opposed to a stream buffer, and there
         * is enough space to write both the message length and the message itself
         * into the buffer.  Start by writing the length of the data, the data
         * itself will be written later in this function. */
        xShouldWrite = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
        ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009bc4:	1d3b      	adds	r3, r7, #4
 8009bc6:	2204      	movs	r2, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f8ee 	bl	8009dac <prvWriteBytesToBuffer>
 8009bd0:	e001      	b.n	8009bd6 <prvWriteMessageToBuffer+0x56>
    }
    else
    {
        /* There is space available, but not enough space. */
        xShouldWrite = pdFALSE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	617b      	str	r3, [r7, #20]
    }

    if( xShouldWrite != pdFALSE )
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d007      	beq.n	8009bec <prvWriteMessageToBuffer+0x6c>
    {
        /* Writes the data itself. */
        xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	461a      	mov	r2, r3
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 f8e2 	bl	8009dac <prvWriteBytesToBuffer>
 8009be8:	6138      	str	r0, [r7, #16]
 8009bea:	e001      	b.n	8009bf0 <prvWriteMessageToBuffer+0x70>
    }
    else
    {
        xReturn = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]
    }

    return xReturn;
 8009bf0:	693b      	ldr	r3, [r7, #16]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b08e      	sub	sp, #56	; 0x38
 8009bfe:	af02      	add	r7, sp, #8
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	607a      	str	r2, [r7, #4]
 8009c06:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <xStreamBufferReceive+0x32>
        __asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	61fb      	str	r3, [r7, #28]
    }
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10a      	bne.n	8009c48 <xStreamBufferReceive+0x4e>
        __asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	61bb      	str	r3, [r7, #24]
    }
 8009c44:	bf00      	nop
 8009c46:	e7fe      	b.n	8009c46 <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	7f1b      	ldrb	r3, [r3, #28]
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009c54:	2304      	movs	r3, #4
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24
 8009c58:	e001      	b.n	8009c5e <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d037      	beq.n	8009cd4 <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 8009c64:	f002 f960 	bl	800bf28 <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009c68:	6a38      	ldr	r0, [r7, #32]
 8009c6a:	f000 f98b 	bl	8009f84 <prvBytesInBuffer>
 8009c6e:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d817      	bhi.n	8009ca8 <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 8009c78:	2100      	movs	r1, #0
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	f001 fc5e 	bl	800b53c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00a      	beq.n	8009c9e <xStreamBufferReceive+0xa4>
        __asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	617b      	str	r3, [r7, #20]
    }
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009c9e:	f000 ff8b 	bl	800abb8 <xTaskGetCurrentTaskHandle>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009ca8:	f002 f96e 	bl	800bf88 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d813      	bhi.n	8009cdc <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	f001 f9bc 	bl	800b03c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009cca:	6a38      	ldr	r0, [r7, #32]
 8009ccc:	f000 f95a 	bl	8009f84 <prvBytesInBuffer>
 8009cd0:	62b8      	str	r0, [r7, #40]	; 0x28
 8009cd2:	e003      	b.n	8009cdc <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009cd4:	6a38      	ldr	r0, [r7, #32]
 8009cd6:	f000 f955 	bl	8009f84 <prvBytesInBuffer>
 8009cda:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8009cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d926      	bls.n	8009d32 <xStreamBufferReceive+0x138>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	6a38      	ldr	r0, [r7, #32]
 8009cf0:	f000 f82a 	bl	8009d48 <prvReadMessageFromBuffer>
 8009cf4:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8009cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d020      	beq.n	8009d3e <xStreamBufferReceive+0x144>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d00:	4619      	mov	r1, r3
 8009d02:	208e      	movs	r0, #142	; 0x8e
 8009d04:	f003 fa00 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 8009d08:	f000 fb7e 	bl	800a408 <vTaskSuspendAll>
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <xStreamBufferReceive+0x132>
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	6958      	ldr	r0, [r3, #20]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2100      	movs	r1, #0
 8009d22:	f001 fa13 	bl	800b14c <xTaskGenericNotify>
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	615a      	str	r2, [r3, #20]
 8009d2c:	f000 fb7a 	bl	800a424 <xTaskResumeAll>
 8009d30:	e005      	b.n	8009d3e <xStreamBufferReceive+0x144>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	4619      	mov	r1, r3
 8009d38:	208e      	movs	r0, #142	; 0x8e
 8009d3a:	f003 f9e5 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3730      	adds	r7, #48	; 0x30
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable,
                                        size_t xBytesToStoreMessageLength )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d019      	beq.n	8009d90 <prvReadMessageFromBuffer+0x48>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	61bb      	str	r3, [r7, #24]
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8009d62:	f107 0110 	add.w	r1, r7, #16
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f890 	bl	8009e90 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	61fb      	str	r3, [r7, #28]

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	603b      	str	r3, [r7, #0]

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d907      	bls.n	8009d94 <prvReadMessageFromBuffer+0x4c>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	601a      	str	r2, [r3, #0]
            xNextMessageLength = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]
 8009d8e:	e001      	b.n	8009d94 <prvReadMessageFromBuffer+0x4c>
    }
    else
    {
        /* A stream of bytes is being received (as opposed to a discrete
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	61fb      	str	r3, [r7, #28]
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f878 	bl	8009e90 <prvReadBytesFromBuffer>
 8009da0:	6178      	str	r0, [r7, #20]

    return xReceivedLength;
 8009da2:	697b      	ldr	r3, [r7, #20]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08a      	sub	sp, #40	; 0x28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <prvWriteBytesToBuffer+0x28>
        __asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	61fb      	str	r3, [r7, #28]
    }
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <prvWriteBytesToBuffer+0x26>

    xNextHead = pxStreamBuffer->xHead;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	4293      	cmp	r3, r2
 8009de6:	bf28      	it	cs
 8009de8:	4613      	movcs	r3, r2
 8009dea:	623b      	str	r3, [r7, #32]

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8009dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d90a      	bls.n	8009e10 <prvWriteBytesToBuffer+0x64>
        __asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	61bb      	str	r3, [r7, #24]
    }
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <prvWriteBytesToBuffer+0x62>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	4413      	add	r3, r2
 8009e18:	6a3a      	ldr	r2, [r7, #32]
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f004 fad7 	bl	800e3d0 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d91c      	bls.n	8009e64 <prvWriteBytesToBuffer+0xb8>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	1ad2      	subs	r2, r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d90a      	bls.n	8009e4e <prvWriteBytesToBuffer+0xa2>
        __asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	617b      	str	r3, [r7, #20]
    }
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <prvWriteBytesToBuffer+0xa0>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6998      	ldr	r0, [r3, #24]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	18d1      	adds	r1, r2, r3
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f004 fab6 	bl	800e3d0 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
 8009e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24

    if( xNextHead >= pxStreamBuffer->xLength )
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d304      	bcc.n	8009e80 <prvWriteBytesToBuffer+0xd4>
    {
        xNextHead -= pxStreamBuffer->xLength;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	627b      	str	r3, [r7, #36]	; 0x24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e84:	605a      	str	r2, [r3, #4]

    return xCount;
 8009e86:	687b      	ldr	r3, [r7, #4]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3728      	adds	r7, #40	; 0x28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bf28      	it	cs
 8009ea6:	4613      	movcs	r3, r2
 8009ea8:	623b      	str	r3, [r7, #32]

    if( xCount > ( size_t ) 0 )
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d064      	beq.n	8009f7a <prvReadBytesFromBuffer+0xea>
    {
        xNextTail = pxStreamBuffer->xTail;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	6a3a      	ldr	r2, [r7, #32]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	bf28      	it	cs
 8009ec4:	4613      	movcs	r3, r2
 8009ec6:	61fb      	str	r3, [r7, #28]

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d90a      	bls.n	8009ee6 <prvReadBytesFromBuffer+0x56>
        __asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	61bb      	str	r3, [r7, #24]
    }
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <prvReadBytesFromBuffer+0x54>
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	441a      	add	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d90a      	bls.n	8009f0a <prvReadBytesFromBuffer+0x7a>
        __asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	617b      	str	r3, [r7, #20]
    }
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <prvReadBytesFromBuffer+0x78>
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	4413      	add	r3, r2
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	4619      	mov	r1, r3
 8009f16:	68b8      	ldr	r0, [r7, #8]
 8009f18:	f004 fa5a 	bl	800e3d0 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
 8009f1c:	6a3a      	ldr	r2, [r7, #32]
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d919      	bls.n	8009f58 <prvReadBytesFromBuffer+0xc8>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
 8009f24:	6a3a      	ldr	r2, [r7, #32]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d90a      	bls.n	8009f42 <prvReadBytesFromBuffer+0xb2>
        __asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	613b      	str	r3, [r7, #16]
    }
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <prvReadBytesFromBuffer+0xb0>
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	18d0      	adds	r0, r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6999      	ldr	r1, [r3, #24]
 8009f4c:	6a3a      	ldr	r2, [r7, #32]
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	f004 fa3c 	bl	800e3d0 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
 8009f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	627b      	str	r3, [r7, #36]	; 0x24

        if( xNextTail >= pxStreamBuffer->xLength )
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d304      	bcc.n	8009f74 <prvReadBytesFromBuffer+0xe4>
        {
            xNextTail -= pxStreamBuffer->xLength;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
        }

        pxStreamBuffer->xTail = xNextTail;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f78:	601a      	str	r2, [r3, #0]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3728      	adds	r7, #40	; 0x28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	60fb      	str	r3, [r7, #12]

    if( xCount >= pxStreamBuffer->xLength )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d304      	bcc.n	8009fb6 <prvBytesInBuffer+0x32>
    {
        xCount -= pxStreamBuffer->xLength;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
    #if ( configASSERT_DEFINED == 1 )
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
 8009fd2:	2355      	movs	r3, #85	; 0x55
 8009fd4:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	6979      	ldr	r1, [r7, #20]
 8009fda:	68b8      	ldr	r0, [r7, #8]
 8009fdc:	f004 fa06 	bl	800e3ec <memset>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d00a      	beq.n	8009ffe <prvInitialiseNewStreamBuffer+0x3a>
        __asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	613b      	str	r3, [r7, #16]
    }
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <prvInitialiseNewStreamBuffer+0x38>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009ffe:	2224      	movs	r2, #36	; 0x24
 800a000:	2100      	movs	r1, #0
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f004 f9f2 	bl	800e3ec <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a020:	771a      	strb	r2, [r3, #28]
}
 800a022:	bf00      	nop
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b08c      	sub	sp, #48	; 0x30
 800a02e:	af04      	add	r7, sp, #16
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	4613      	mov	r3, r2
 800a038:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4618      	mov	r0, r3
 800a040:	f002 f89c 	bl	800c17c <pvPortMalloc>
 800a044:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a04c:	2058      	movs	r0, #88	; 0x58
 800a04e:	f002 f895 	bl	800c17c <pvPortMalloc>
 800a052:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	631a      	str	r2, [r3, #48]	; 0x30
 800a060:	e005      	b.n	800a06e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a062:	6978      	ldr	r0, [r7, #20]
 800a064:	f002 f96a 	bl	800c33c <vPortFree>
 800a068:	e001      	b.n	800a06e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d013      	beq.n	800a09c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a074:	88fa      	ldrh	r2, [r7, #6]
 800a076:	2300      	movs	r3, #0
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	9302      	str	r3, [sp, #8]
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68b9      	ldr	r1, [r7, #8]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f80e 	bl	800a0ac <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a090:	69f8      	ldr	r0, [r7, #28]
 800a092:	f000 f8a1 	bl	800a1d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a096:	2301      	movs	r3, #1
 800a098:	61bb      	str	r3, [r7, #24]
 800a09a:	e002      	b.n	800a0a2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
    }
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	21a5      	movs	r1, #165	; 0xa5
 800a0c6:	f004 f991 	bl	800e3ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	f023 0307 	bic.w	r3, r3, #7
 800a0e2:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <prvInitialiseNewTask+0x58>
        __asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	617b      	str	r3, [r7, #20]
    }
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01f      	beq.n	800a14a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a10a:	2300      	movs	r3, #0
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	e012      	b.n	800a136 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	7819      	ldrb	r1, [r3, #0]
 800a118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	4413      	add	r3, r2
 800a11e:	3334      	adds	r3, #52	; 0x34
 800a120:	460a      	mov	r2, r1
 800a122:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	4413      	add	r3, r2
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d006      	beq.n	800a13e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	3301      	adds	r3, #1
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	2b09      	cmp	r3, #9
 800a13a:	d9e9      	bls.n	800a110 <prvInitialiseNewTask+0x64>
 800a13c:	e000      	b.n	800a140 <prvInitialiseNewTask+0x94>
            {
                break;
 800a13e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	2200      	movs	r2, #0
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a148:	e003      	b.n	800a152 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	2b04      	cmp	r3, #4
 800a156:	d901      	bls.n	800a15c <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a158:	2304      	movs	r3, #4
 800a15a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a160:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a166:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	2200      	movs	r2, #0
 800a16c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	3304      	adds	r3, #4
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe fc50 	bl	8008a18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	3318      	adds	r3, #24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fc4b 	bl	8008a18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a186:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	f1c3 0205 	rsb	r2, r3, #5
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a196:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	3350      	adds	r3, #80	; 0x50
 800a19c:	2204      	movs	r2, #4
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f004 f923 	bl	800e3ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a8:	3354      	adds	r3, #84	; 0x54
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f004 f91c 	bl	800e3ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	68f9      	ldr	r1, [r7, #12]
 800a1b8:	69b8      	ldr	r0, [r7, #24]
 800a1ba:	f001 fd83 	bl	800bcc4 <pxPortInitialiseStack>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a1d0:	bf00      	nop
 800a1d2:	3720      	adds	r7, #32
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a1d8:	b5b0      	push	{r4, r5, r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a1e0:	f001 fea2 	bl	800bf28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a1e4:	4b35      	ldr	r3, [pc, #212]	; (800a2bc <prvAddNewTaskToReadyList+0xe4>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	4a34      	ldr	r2, [pc, #208]	; (800a2bc <prvAddNewTaskToReadyList+0xe4>)
 800a1ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a1ee:	4b34      	ldr	r3, [pc, #208]	; (800a2c0 <prvAddNewTaskToReadyList+0xe8>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d109      	bne.n	800a20a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a1f6:	4a32      	ldr	r2, [pc, #200]	; (800a2c0 <prvAddNewTaskToReadyList+0xe8>)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1fc:	4b2f      	ldr	r3, [pc, #188]	; (800a2bc <prvAddNewTaskToReadyList+0xe4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d110      	bne.n	800a226 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a204:	f000 fc3e 	bl	800aa84 <prvInitialiseTaskLists>
 800a208:	e00d      	b.n	800a226 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a20a:	4b2e      	ldr	r3, [pc, #184]	; (800a2c4 <prvAddNewTaskToReadyList+0xec>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d109      	bne.n	800a226 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a212:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <prvAddNewTaskToReadyList+0xe8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d802      	bhi.n	800a226 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a220:	4a27      	ldr	r2, [pc, #156]	; (800a2c0 <prvAddNewTaskToReadyList+0xe8>)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a226:	4b28      	ldr	r3, [pc, #160]	; (800a2c8 <prvAddNewTaskToReadyList+0xf0>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	4a26      	ldr	r2, [pc, #152]	; (800a2c8 <prvAddNewTaskToReadyList+0xf0>)
 800a22e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a230:	4b25      	ldr	r3, [pc, #148]	; (800a2c8 <prvAddNewTaskToReadyList+0xf0>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d016      	beq.n	800a26c <prvAddNewTaskToReadyList+0x94>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4618      	mov	r0, r3
 800a242:	f003 fccf 	bl	800dbe4 <SEGGER_SYSVIEW_OnTaskCreate>
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a256:	461d      	mov	r5, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	461c      	mov	r4, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	1ae3      	subs	r3, r4, r3
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	462b      	mov	r3, r5
 800a268:	f003 ffee 	bl	800e248 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4618      	mov	r0, r3
 800a270:	f003 fd3c 	bl	800dcec <SEGGER_SYSVIEW_OnTaskStartReady>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	2201      	movs	r2, #1
 800a27a:	409a      	lsls	r2, r3
 800a27c:	4b13      	ldr	r3, [pc, #76]	; (800a2cc <prvAddNewTaskToReadyList+0xf4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4313      	orrs	r3, r2
 800a282:	4a12      	ldr	r2, [pc, #72]	; (800a2cc <prvAddNewTaskToReadyList+0xf4>)
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4a0f      	ldr	r2, [pc, #60]	; (800a2d0 <prvAddNewTaskToReadyList+0xf8>)
 800a294:	441a      	add	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7fe fbc8 	bl	8008a32 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a2a2:	f001 fe71 	bl	800bf88 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <prvAddNewTaskToReadyList+0xec>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2ae:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <prvAddNewTaskToReadyList+0xe8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20002350 	.word	0x20002350
 800a2c0:	20002278 	.word	0x20002278
 800a2c4:	2000235c 	.word	0x2000235c
 800a2c8:	2000236c 	.word	0x2000236c
 800a2cc:	20002358 	.word	0x20002358
 800a2d0:	2000227c 	.word	0x2000227c

0800a2d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d01b      	beq.n	800a31e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <vTaskDelay+0x68>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00a      	beq.n	800a304 <vTaskDelay+0x30>
        __asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	60bb      	str	r3, [r7, #8]
    }
 800a300:	bf00      	nop
 800a302:	e7fe      	b.n	800a302 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800a304:	f000 f880 	bl	800a408 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	2023      	movs	r0, #35	; 0x23
 800a30c:	f002 fec0 	bl	800d090 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a310:	2100      	movs	r1, #0
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 f94c 	bl	800b5b0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800a318:	f000 f884 	bl	800a424 <xTaskResumeAll>
 800a31c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d107      	bne.n	800a334 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <vTaskDelay+0x6c>)
 800a326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20002378 	.word	0x20002378
 800a340:	e000ed04 	.word	0xe000ed04

0800a344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800a34a:	4b27      	ldr	r3, [pc, #156]	; (800a3e8 <vTaskStartScheduler+0xa4>)
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	2300      	movs	r3, #0
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	2300      	movs	r3, #0
 800a354:	2282      	movs	r2, #130	; 0x82
 800a356:	4925      	ldr	r1, [pc, #148]	; (800a3ec <vTaskStartScheduler+0xa8>)
 800a358:	4825      	ldr	r0, [pc, #148]	; (800a3f0 <vTaskStartScheduler+0xac>)
 800a35a:	f7ff fe66 	bl	800a02a <xTaskCreate>
 800a35e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d102      	bne.n	800a36c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800a366:	f001 f99b 	bl	800b6a0 <xTimerCreateTimerTask>
 800a36a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d124      	bne.n	800a3bc <vTaskStartScheduler+0x78>
        __asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	60bb      	str	r3, [r7, #8]
    }
 800a384:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a386:	4b1b      	ldr	r3, [pc, #108]	; (800a3f4 <vTaskStartScheduler+0xb0>)
 800a388:	f04f 32ff 	mov.w	r2, #4294967295
 800a38c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a38e:	4b1a      	ldr	r3, [pc, #104]	; (800a3f8 <vTaskStartScheduler+0xb4>)
 800a390:	2201      	movs	r2, #1
 800a392:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a394:	4b19      	ldr	r3, [pc, #100]	; (800a3fc <vTaskStartScheduler+0xb8>)
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a39a:	4b19      	ldr	r3, [pc, #100]	; (800a400 <vTaskStartScheduler+0xbc>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <vTaskStartScheduler+0xa4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d102      	bne.n	800a3ac <vTaskStartScheduler+0x68>
 800a3a6:	f003 fc01 	bl	800dbac <SEGGER_SYSVIEW_OnIdle>
 800a3aa:	e004      	b.n	800a3b6 <vTaskStartScheduler+0x72>
 800a3ac:	4b14      	ldr	r3, [pc, #80]	; (800a400 <vTaskStartScheduler+0xbc>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f003 fc59 	bl	800dc68 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a3b6:	f001 fd15 	bl	800bde4 <xPortStartScheduler>
 800a3ba:	e00e      	b.n	800a3da <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d10a      	bne.n	800a3da <vTaskStartScheduler+0x96>
        __asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	607b      	str	r3, [r7, #4]
    }
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a3da:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <vTaskStartScheduler+0xc0>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20002374 	.word	0x20002374
 800a3ec:	0800ef58 	.word	0x0800ef58
 800a3f0:	0800aa61 	.word	0x0800aa61
 800a3f4:	20002370 	.word	0x20002370
 800a3f8:	2000235c 	.word	0x2000235c
 800a3fc:	20002354 	.word	0x20002354
 800a400:	20002278 	.word	0x20002278
 800a404:	200000fc 	.word	0x200000fc

0800a408 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <vTaskSuspendAll+0x18>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	4a03      	ldr	r2, [pc, #12]	; (800a420 <vTaskSuspendAll+0x18>)
 800a414:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a416:	bf00      	nop
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20002378 	.word	0x20002378

0800a424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a42e:	2300      	movs	r3, #0
 800a430:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a432:	4b3d      	ldr	r3, [pc, #244]	; (800a528 <xTaskResumeAll+0x104>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10a      	bne.n	800a450 <xTaskResumeAll+0x2c>
        __asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	603b      	str	r3, [r7, #0]
    }
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a450:	f001 fd6a 	bl	800bf28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a454:	4b34      	ldr	r3, [pc, #208]	; (800a528 <xTaskResumeAll+0x104>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3b01      	subs	r3, #1
 800a45a:	4a33      	ldr	r2, [pc, #204]	; (800a528 <xTaskResumeAll+0x104>)
 800a45c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a45e:	4b32      	ldr	r3, [pc, #200]	; (800a528 <xTaskResumeAll+0x104>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d159      	bne.n	800a51a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a466:	4b31      	ldr	r3, [pc, #196]	; (800a52c <xTaskResumeAll+0x108>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d055      	beq.n	800a51a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a46e:	e032      	b.n	800a4d6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a470:	4b2f      	ldr	r3, [pc, #188]	; (800a530 <xTaskResumeAll+0x10c>)
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3318      	adds	r3, #24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe fb35 	bl	8008aec <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3304      	adds	r3, #4
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fb30 	bl	8008aec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4618      	mov	r0, r3
 800a490:	f003 fc2c 	bl	800dcec <SEGGER_SYSVIEW_OnTaskStartReady>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	2201      	movs	r2, #1
 800a49a:	409a      	lsls	r2, r3
 800a49c:	4b25      	ldr	r3, [pc, #148]	; (800a534 <xTaskResumeAll+0x110>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	4a24      	ldr	r2, [pc, #144]	; (800a534 <xTaskResumeAll+0x110>)
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4a21      	ldr	r2, [pc, #132]	; (800a538 <xTaskResumeAll+0x114>)
 800a4b4:	441a      	add	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f7fe fab8 	bl	8008a32 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	; (800a53c <xTaskResumeAll+0x118>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d302      	bcc.n	800a4d6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800a4d0:	4b1b      	ldr	r3, [pc, #108]	; (800a540 <xTaskResumeAll+0x11c>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4d6:	4b16      	ldr	r3, [pc, #88]	; (800a530 <xTaskResumeAll+0x10c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1c8      	bne.n	800a470 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a4e4:	f000 fb4c 	bl	800ab80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4e8:	4b16      	ldr	r3, [pc, #88]	; (800a544 <xTaskResumeAll+0x120>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d010      	beq.n	800a516 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a4f4:	f000 f84a 	bl	800a58c <xTaskIncrementTick>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800a4fe:	4b10      	ldr	r3, [pc, #64]	; (800a540 <xTaskResumeAll+0x11c>)
 800a500:	2201      	movs	r2, #1
 800a502:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	3b01      	subs	r3, #1
 800a508:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1f1      	bne.n	800a4f4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800a510:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <xTaskResumeAll+0x120>)
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <xTaskResumeAll+0x11c>)
 800a518:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a51a:	f001 fd35 	bl	800bf88 <vPortExitCritical>

    return xAlreadyYielded;
 800a51e:	687b      	ldr	r3, [r7, #4]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20002378 	.word	0x20002378
 800a52c:	20002350 	.word	0x20002350
 800a530:	20002310 	.word	0x20002310
 800a534:	20002358 	.word	0x20002358
 800a538:	2000227c 	.word	0x2000227c
 800a53c:	20002278 	.word	0x20002278
 800a540:	20002364 	.word	0x20002364
 800a544:	20002360 	.word	0x20002360

0800a548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <xTaskGetTickCount+0x1c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a554:	687b      	ldr	r3, [r7, #4]
}
 800a556:	4618      	mov	r0, r3
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	20002354 	.word	0x20002354

0800a568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a56e:	f001 fdc5 	bl	800c0fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a572:	2300      	movs	r3, #0
 800a574:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a576:	4b04      	ldr	r3, [pc, #16]	; (800a588 <xTaskGetTickCountFromISR+0x20>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a57c:	683b      	ldr	r3, [r7, #0]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20002354 	.word	0x20002354

0800a58c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a592:	2300      	movs	r3, #0
 800a594:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a596:	4b41      	ldr	r3, [pc, #260]	; (800a69c <xTaskIncrementTick+0x110>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d173      	bne.n	800a686 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a59e:	4b40      	ldr	r3, [pc, #256]	; (800a6a0 <xTaskIncrementTick+0x114>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a5a6:	4a3e      	ldr	r2, [pc, #248]	; (800a6a0 <xTaskIncrementTick+0x114>)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d120      	bne.n	800a5f4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800a5b2:	4b3c      	ldr	r3, [pc, #240]	; (800a6a4 <xTaskIncrementTick+0x118>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00a      	beq.n	800a5d2 <xTaskIncrementTick+0x46>
        __asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	603b      	str	r3, [r7, #0]
    }
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <xTaskIncrementTick+0x44>
 800a5d2:	4b34      	ldr	r3, [pc, #208]	; (800a6a4 <xTaskIncrementTick+0x118>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	4b33      	ldr	r3, [pc, #204]	; (800a6a8 <xTaskIncrementTick+0x11c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a31      	ldr	r2, [pc, #196]	; (800a6a4 <xTaskIncrementTick+0x118>)
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	4a31      	ldr	r2, [pc, #196]	; (800a6a8 <xTaskIncrementTick+0x11c>)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	4b31      	ldr	r3, [pc, #196]	; (800a6ac <xTaskIncrementTick+0x120>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	4a2f      	ldr	r2, [pc, #188]	; (800a6ac <xTaskIncrementTick+0x120>)
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	f000 fac6 	bl	800ab80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a5f4:	4b2e      	ldr	r3, [pc, #184]	; (800a6b0 <xTaskIncrementTick+0x124>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d348      	bcc.n	800a690 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5fe:	4b29      	ldr	r3, [pc, #164]	; (800a6a4 <xTaskIncrementTick+0x118>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	4b29      	ldr	r3, [pc, #164]	; (800a6b0 <xTaskIncrementTick+0x124>)
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295
 800a60e:	601a      	str	r2, [r3, #0]
                    break;
 800a610:	e03e      	b.n	800a690 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a612:	4b24      	ldr	r3, [pc, #144]	; (800a6a4 <xTaskIncrementTick+0x118>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	429a      	cmp	r2, r3
 800a628:	d203      	bcs.n	800a632 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a62a:	4a21      	ldr	r2, [pc, #132]	; (800a6b0 <xTaskIncrementTick+0x124>)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a630:	e02e      	b.n	800a690 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	3304      	adds	r3, #4
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fa58 	bl	8008aec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	3318      	adds	r3, #24
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fa4f 	bl	8008aec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	4618      	mov	r0, r3
 800a652:	f003 fb4b 	bl	800dcec <SEGGER_SYSVIEW_OnTaskStartReady>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65a:	2201      	movs	r2, #1
 800a65c:	409a      	lsls	r2, r3
 800a65e:	4b15      	ldr	r3, [pc, #84]	; (800a6b4 <xTaskIncrementTick+0x128>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4313      	orrs	r3, r2
 800a664:	4a13      	ldr	r2, [pc, #76]	; (800a6b4 <xTaskIncrementTick+0x128>)
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4a10      	ldr	r2, [pc, #64]	; (800a6b8 <xTaskIncrementTick+0x12c>)
 800a676:	441a      	add	r2, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4619      	mov	r1, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	f7fe f9d7 	bl	8008a32 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a684:	e7bb      	b.n	800a5fe <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <xTaskIncrementTick+0x130>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3301      	adds	r3, #1
 800a68c:	4a0b      	ldr	r2, [pc, #44]	; (800a6bc <xTaskIncrementTick+0x130>)
 800a68e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a690:	697b      	ldr	r3, [r7, #20]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20002378 	.word	0x20002378
 800a6a0:	20002354 	.word	0x20002354
 800a6a4:	20002308 	.word	0x20002308
 800a6a8:	2000230c 	.word	0x2000230c
 800a6ac:	20002368 	.word	0x20002368
 800a6b0:	20002370 	.word	0x20002370
 800a6b4:	20002358 	.word	0x20002358
 800a6b8:	2000227c 	.word	0x2000227c
 800a6bc:	20002360 	.word	0x20002360

0800a6c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6c6:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <vTaskSwitchContext+0xbc>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a6ce:	4b2c      	ldr	r3, [pc, #176]	; (800a780 <vTaskSwitchContext+0xc0>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a6d4:	e04d      	b.n	800a772 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800a6d6:	4b2a      	ldr	r3, [pc, #168]	; (800a780 <vTaskSwitchContext+0xc0>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6dc:	4b29      	ldr	r3, [pc, #164]	; (800a784 <vTaskSwitchContext+0xc4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	fab3 f383 	clz	r3, r3
 800a6e8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	f1c3 031f 	rsb	r3, r3, #31
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	4925      	ldr	r1, [pc, #148]	; (800a788 <vTaskSwitchContext+0xc8>)
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <vTaskSwitchContext+0x5c>
        __asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	607b      	str	r3, [r7, #4]
    }
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <vTaskSwitchContext+0x5a>
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4a18      	ldr	r2, [pc, #96]	; (800a788 <vTaskSwitchContext+0xc8>)
 800a728:	4413      	add	r3, r2
 800a72a:	613b      	str	r3, [r7, #16]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	605a      	str	r2, [r3, #4]
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	3308      	adds	r3, #8
 800a73e:	429a      	cmp	r2, r3
 800a740:	d104      	bne.n	800a74c <vTaskSwitchContext+0x8c>
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	605a      	str	r2, [r3, #4]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	4a0e      	ldr	r2, [pc, #56]	; (800a78c <vTaskSwitchContext+0xcc>)
 800a754:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a756:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <vTaskSwitchContext+0xcc>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4b0d      	ldr	r3, [pc, #52]	; (800a790 <vTaskSwitchContext+0xd0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d102      	bne.n	800a768 <vTaskSwitchContext+0xa8>
 800a762:	f003 fa23 	bl	800dbac <SEGGER_SYSVIEW_OnIdle>
}
 800a766:	e004      	b.n	800a772 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800a768:	4b08      	ldr	r3, [pc, #32]	; (800a78c <vTaskSwitchContext+0xcc>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f003 fa7b 	bl	800dc68 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a772:	bf00      	nop
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20002378 	.word	0x20002378
 800a780:	20002364 	.word	0x20002364
 800a784:	20002358 	.word	0x20002358
 800a788:	2000227c 	.word	0x2000227c
 800a78c:	20002278 	.word	0x20002278
 800a790:	20002374 	.word	0x20002374

0800a794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10a      	bne.n	800a7ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	60fb      	str	r3, [r7, #12]
    }
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <vTaskPlaceOnEventList+0x44>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3318      	adds	r3, #24
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7fe f959 	bl	8008a7a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	6838      	ldr	r0, [r7, #0]
 800a7cc:	f000 fef0 	bl	800b5b0 <prvAddCurrentTaskToDelayedList>
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20002278 	.word	0x20002278

0800a7dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	617b      	str	r3, [r7, #20]
    }
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a804:	4b0b      	ldr	r3, [pc, #44]	; (800a834 <vTaskPlaceOnEventListRestricted+0x58>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3318      	adds	r3, #24
 800a80a:	4619      	mov	r1, r3
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7fe f910 	bl	8008a32 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800a818:	f04f 33ff 	mov.w	r3, #4294967295
 800a81c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a81e:	2024      	movs	r0, #36	; 0x24
 800a820:	f002 fc18 	bl	800d054 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	68b8      	ldr	r0, [r7, #8]
 800a828:	f000 fec2 	bl	800b5b0 <prvAddCurrentTaskToDelayedList>
    }
 800a82c:	bf00      	nop
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20002278 	.word	0x20002278

0800a838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	60fb      	str	r3, [r7, #12]
    }
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	3318      	adds	r3, #24
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe f93f 	bl	8008aec <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a86e:	4b1f      	ldr	r3, [pc, #124]	; (800a8ec <xTaskRemoveFromEventList+0xb4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d120      	bne.n	800a8b8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	3304      	adds	r3, #4
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe f936 	bl	8008aec <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	4618      	mov	r0, r3
 800a884:	f003 fa32 	bl	800dcec <SEGGER_SYSVIEW_OnTaskStartReady>
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	2201      	movs	r2, #1
 800a88e:	409a      	lsls	r2, r3
 800a890:	4b17      	ldr	r3, [pc, #92]	; (800a8f0 <xTaskRemoveFromEventList+0xb8>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4313      	orrs	r3, r2
 800a896:	4a16      	ldr	r2, [pc, #88]	; (800a8f0 <xTaskRemoveFromEventList+0xb8>)
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4a13      	ldr	r2, [pc, #76]	; (800a8f4 <xTaskRemoveFromEventList+0xbc>)
 800a8a8:	441a      	add	r2, r3
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7fe f8be 	bl	8008a32 <vListInsertEnd>
 800a8b6:	e005      	b.n	800a8c4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3318      	adds	r3, #24
 800a8bc:	4619      	mov	r1, r3
 800a8be:	480e      	ldr	r0, [pc, #56]	; (800a8f8 <xTaskRemoveFromEventList+0xc0>)
 800a8c0:	f7fe f8b7 	bl	8008a32 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <xTaskRemoveFromEventList+0xc4>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d905      	bls.n	800a8de <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <xTaskRemoveFromEventList+0xc8>)
 800a8d8:	2201      	movs	r2, #1
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	e001      	b.n	800a8e2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a8e2:	697b      	ldr	r3, [r7, #20]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20002378 	.word	0x20002378
 800a8f0:	20002358 	.word	0x20002358
 800a8f4:	2000227c 	.word	0x2000227c
 800a8f8:	20002310 	.word	0x20002310
 800a8fc:	20002278 	.word	0x20002278
 800a900:	20002364 	.word	0x20002364

0800a904 <vTaskSetTimeOutState>:
    }
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10a      	bne.n	800a928 <vTaskSetTimeOutState+0x24>
        __asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	60fb      	str	r3, [r7, #12]
    }
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 800a928:	f001 fafe 	bl	800bf28 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a92c:	4b06      	ldr	r3, [pc, #24]	; (800a948 <vTaskSetTimeOutState+0x44>)
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 800a934:	4b05      	ldr	r3, [pc, #20]	; (800a94c <vTaskSetTimeOutState+0x48>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 800a93c:	f001 fb24 	bl	800bf88 <vPortExitCritical>
}
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	20002368 	.word	0x20002368
 800a94c:	20002354 	.word	0x20002354

0800a950 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a958:	4b06      	ldr	r3, [pc, #24]	; (800a974 <vTaskInternalSetTimeOutState+0x24>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a960:	4b05      	ldr	r3, [pc, #20]	; (800a978 <vTaskInternalSetTimeOutState+0x28>)
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	605a      	str	r2, [r3, #4]
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	20002368 	.word	0x20002368
 800a978:	20002354 	.word	0x20002354

0800a97c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	613b      	str	r3, [r7, #16]
    }
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	60fb      	str	r3, [r7, #12]
    }
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800a9be:	f001 fab3 	bl	800bf28 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a9c2:	4b1f      	ldr	r3, [pc, #124]	; (800aa40 <xTaskCheckForTimeOut+0xc4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d102      	bne.n	800a9e2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e026      	b.n	800aa30 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	4b17      	ldr	r3, [pc, #92]	; (800aa44 <xTaskCheckForTimeOut+0xc8>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d00a      	beq.n	800aa04 <xTaskCheckForTimeOut+0x88>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d305      	bcc.n	800aa04 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	e015      	b.n	800aa30 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d20b      	bcs.n	800aa26 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	1ad2      	subs	r2, r2, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff ff98 	bl	800a950 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61fb      	str	r3, [r7, #28]
 800aa24:	e004      	b.n	800aa30 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800aa30:	f001 faaa 	bl	800bf88 <vPortExitCritical>

    return xReturn;
 800aa34:	69fb      	ldr	r3, [r7, #28]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20002354 	.word	0x20002354
 800aa44:	20002368 	.word	0x20002368

0800aa48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800aa4c:	4b03      	ldr	r3, [pc, #12]	; (800aa5c <vTaskMissedYield+0x14>)
 800aa4e:	2201      	movs	r2, #1
 800aa50:	601a      	str	r2, [r3, #0]
}
 800aa52:	bf00      	nop
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	20002364 	.word	0x20002364

0800aa60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800aa68:	f000 f84c 	bl	800ab04 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800aa6c:	4b04      	ldr	r3, [pc, #16]	; (800aa80 <prvIdleTask+0x20>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800aa7c:	e7f4      	b.n	800aa68 <prvIdleTask+0x8>
 800aa7e:	bf00      	nop
 800aa80:	e000ed04 	.word	0xe000ed04

0800aa84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	607b      	str	r3, [r7, #4]
 800aa8e:	e00c      	b.n	800aaaa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4a12      	ldr	r2, [pc, #72]	; (800aae4 <prvInitialiseTaskLists+0x60>)
 800aa9c:	4413      	add	r3, r2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fd ff9a 	bl	80089d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	607b      	str	r3, [r7, #4]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d9ef      	bls.n	800aa90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800aab0:	480d      	ldr	r0, [pc, #52]	; (800aae8 <prvInitialiseTaskLists+0x64>)
 800aab2:	f7fd ff91 	bl	80089d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800aab6:	480d      	ldr	r0, [pc, #52]	; (800aaec <prvInitialiseTaskLists+0x68>)
 800aab8:	f7fd ff8e 	bl	80089d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800aabc:	480c      	ldr	r0, [pc, #48]	; (800aaf0 <prvInitialiseTaskLists+0x6c>)
 800aabe:	f7fd ff8b 	bl	80089d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800aac2:	480c      	ldr	r0, [pc, #48]	; (800aaf4 <prvInitialiseTaskLists+0x70>)
 800aac4:	f7fd ff88 	bl	80089d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800aac8:	480b      	ldr	r0, [pc, #44]	; (800aaf8 <prvInitialiseTaskLists+0x74>)
 800aaca:	f7fd ff85 	bl	80089d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800aace:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <prvInitialiseTaskLists+0x78>)
 800aad0:	4a05      	ldr	r2, [pc, #20]	; (800aae8 <prvInitialiseTaskLists+0x64>)
 800aad2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aad4:	4b0a      	ldr	r3, [pc, #40]	; (800ab00 <prvInitialiseTaskLists+0x7c>)
 800aad6:	4a05      	ldr	r2, [pc, #20]	; (800aaec <prvInitialiseTaskLists+0x68>)
 800aad8:	601a      	str	r2, [r3, #0]
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	2000227c 	.word	0x2000227c
 800aae8:	200022e0 	.word	0x200022e0
 800aaec:	200022f4 	.word	0x200022f4
 800aaf0:	20002310 	.word	0x20002310
 800aaf4:	20002324 	.word	0x20002324
 800aaf8:	2000233c 	.word	0x2000233c
 800aafc:	20002308 	.word	0x20002308
 800ab00:	2000230c 	.word	0x2000230c

0800ab04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab0a:	e019      	b.n	800ab40 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800ab0c:	f001 fa0c 	bl	800bf28 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab10:	4b10      	ldr	r3, [pc, #64]	; (800ab54 <prvCheckTasksWaitingTermination+0x50>)
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fd ffe5 	bl	8008aec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800ab22:	4b0d      	ldr	r3, [pc, #52]	; (800ab58 <prvCheckTasksWaitingTermination+0x54>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	4a0b      	ldr	r2, [pc, #44]	; (800ab58 <prvCheckTasksWaitingTermination+0x54>)
 800ab2a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800ab2c:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <prvCheckTasksWaitingTermination+0x58>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	4a0a      	ldr	r2, [pc, #40]	; (800ab5c <prvCheckTasksWaitingTermination+0x58>)
 800ab34:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800ab36:	f001 fa27 	bl	800bf88 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f810 	bl	800ab60 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab40:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <prvCheckTasksWaitingTermination+0x58>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e1      	bne.n	800ab0c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800ab48:	bf00      	nop
 800ab4a:	bf00      	nop
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	20002324 	.word	0x20002324
 800ab58:	20002350 	.word	0x20002350
 800ab5c:	20002338 	.word	0x20002338

0800ab60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 fbe5 	bl	800c33c <vPortFree>
                vPortFree( pxTCB );
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 fbe2 	bl	800c33c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab84:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <prvResetNextTaskUnblockTime+0x30>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d104      	bne.n	800ab98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ab8e:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <prvResetNextTaskUnblockTime+0x34>)
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295
 800ab94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ab96:	e005      	b.n	800aba4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab98:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <prvResetNextTaskUnblockTime+0x30>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a04      	ldr	r2, [pc, #16]	; (800abb4 <prvResetNextTaskUnblockTime+0x34>)
 800aba2:	6013      	str	r3, [r2, #0]
}
 800aba4:	bf00      	nop
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	20002308 	.word	0x20002308
 800abb4:	20002370 	.word	0x20002370

0800abb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800abbe:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <xTaskGetCurrentTaskHandle+0x1c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	607b      	str	r3, [r7, #4]

        return xReturn;
 800abc4:	687b      	ldr	r3, [r7, #4]
    }
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	20002278 	.word	0x20002278

0800abd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800abde:	4b0b      	ldr	r3, [pc, #44]	; (800ac0c <xTaskGetSchedulerState+0x34>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800abe6:	2301      	movs	r3, #1
 800abe8:	607b      	str	r3, [r7, #4]
 800abea:	e008      	b.n	800abfe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abec:	4b08      	ldr	r3, [pc, #32]	; (800ac10 <xTaskGetSchedulerState+0x38>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800abf4:	2302      	movs	r3, #2
 800abf6:	607b      	str	r3, [r7, #4]
 800abf8:	e001      	b.n	800abfe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800abfa:	2300      	movs	r3, #0
 800abfc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800abfe:	687b      	ldr	r3, [r7, #4]
    }
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	2000235c 	.word	0x2000235c
 800ac10:	20002378 	.word	0x20002378

0800ac14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d063      	beq.n	800acf2 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	4b33      	ldr	r3, [pc, #204]	; (800acfc <xTaskPriorityInherit+0xe8>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d253      	bcs.n	800ace0 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	db06      	blt.n	800ac4e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac40:	4b2e      	ldr	r3, [pc, #184]	; (800acfc <xTaskPriorityInherit+0xe8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac46:	f1c3 0205 	rsb	r2, r3, #5
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6959      	ldr	r1, [r3, #20]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4a28      	ldr	r2, [pc, #160]	; (800ad00 <xTaskPriorityInherit+0xec>)
 800ac60:	4413      	add	r3, r2
 800ac62:	4299      	cmp	r1, r3
 800ac64:	d12f      	bne.n	800acc6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fd ff3e 	bl	8008aec <uxListRemove>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	43da      	mvns	r2, r3
 800ac82:	4b20      	ldr	r3, [pc, #128]	; (800ad04 <xTaskPriorityInherit+0xf0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4013      	ands	r3, r2
 800ac88:	4a1e      	ldr	r2, [pc, #120]	; (800ad04 <xTaskPriorityInherit+0xf0>)
 800ac8a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <xTaskPriorityInherit+0xe8>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	409a      	lsls	r2, r3
 800ac9e:	4b19      	ldr	r3, [pc, #100]	; (800ad04 <xTaskPriorityInherit+0xf0>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	4a17      	ldr	r2, [pc, #92]	; (800ad04 <xTaskPriorityInherit+0xf0>)
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4a12      	ldr	r2, [pc, #72]	; (800ad00 <xTaskPriorityInherit+0xec>)
 800acb6:	441a      	add	r2, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7fd feb7 	bl	8008a32 <vListInsertEnd>
 800acc4:	e004      	b.n	800acd0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800acc6:	4b0d      	ldr	r3, [pc, #52]	; (800acfc <xTaskPriorityInherit+0xe8>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4619      	mov	r1, r3
 800acd4:	2049      	movs	r0, #73	; 0x49
 800acd6:	f002 f9db 	bl	800d090 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800acda:	2301      	movs	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	e008      	b.n	800acf2 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ace4:	4b05      	ldr	r3, [pc, #20]	; (800acfc <xTaskPriorityInherit+0xe8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	429a      	cmp	r2, r3
 800acec:	d201      	bcs.n	800acf2 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800acee:	2301      	movs	r3, #1
 800acf0:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800acf2:	68fb      	ldr	r3, [r7, #12]
    }
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	20002278 	.word	0x20002278
 800ad00:	2000227c 	.word	0x2000227c
 800ad04:	20002358 	.word	0x20002358

0800ad08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d068      	beq.n	800adf0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800ad1e:	4b37      	ldr	r3, [pc, #220]	; (800adfc <xTaskPriorityDisinherit+0xf4>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d00a      	beq.n	800ad3e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	60fb      	str	r3, [r7, #12]
    }
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10a      	bne.n	800ad5c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800ad46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	60bb      	str	r3, [r7, #8]
    }
 800ad58:	bf00      	nop
 800ad5a:	e7fe      	b.n	800ad5a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad60:	1e5a      	subs	r2, r3, #1
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d03e      	beq.n	800adf0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d13a      	bne.n	800adf0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fd feb4 	bl	8008aec <uxListRemove>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8e:	2201      	movs	r2, #1
 800ad90:	fa02 f303 	lsl.w	r3, r2, r3
 800ad94:	43da      	mvns	r2, r3
 800ad96:	4b1a      	ldr	r3, [pc, #104]	; (800ae00 <xTaskPriorityDisinherit+0xf8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	4a18      	ldr	r2, [pc, #96]	; (800ae00 <xTaskPriorityDisinherit+0xf8>)
 800ad9e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4619      	mov	r1, r3
 800ada4:	204a      	movs	r0, #74	; 0x4a
 800ada6:	f002 f973 	bl	800d090 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	f1c3 0205 	rsb	r2, r3, #5
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	2201      	movs	r2, #1
 800adc4:	409a      	lsls	r2, r3
 800adc6:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <xTaskPriorityDisinherit+0xf8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4313      	orrs	r3, r2
 800adcc:	4a0c      	ldr	r2, [pc, #48]	; (800ae00 <xTaskPriorityDisinherit+0xf8>)
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4a09      	ldr	r2, [pc, #36]	; (800ae04 <xTaskPriorityDisinherit+0xfc>)
 800adde:	441a      	add	r2, r3
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3304      	adds	r3, #4
 800ade4:	4619      	mov	r1, r3
 800ade6:	4610      	mov	r0, r2
 800ade8:	f7fd fe23 	bl	8008a32 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800adec:	2301      	movs	r3, #1
 800adee:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800adf0:	697b      	ldr	r3, [r7, #20]
    }
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20002278 	.word	0x20002278
 800ae00:	20002358 	.word	0x20002358
 800ae04:	2000227c 	.word	0x2000227c

0800ae08 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ae16:	2301      	movs	r3, #1
 800ae18:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 8081 	beq.w	800af24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10a      	bne.n	800ae40 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	60fb      	str	r3, [r7, #12]
    }
 800ae3c:	bf00      	nop
 800ae3e:	e7fe      	b.n	800ae3e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d902      	bls.n	800ae50 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	61fb      	str	r3, [r7, #28]
 800ae4e:	e002      	b.n	800ae56 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae54:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d061      	beq.n	800af24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d15c      	bne.n	800af24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800ae6a:	4b30      	ldr	r3, [pc, #192]	; (800af2c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69ba      	ldr	r2, [r7, #24]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d10a      	bne.n	800ae8a <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	60bb      	str	r3, [r7, #8]
    }
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	204a      	movs	r0, #74	; 0x4a
 800ae90:	f002 f8fe 	bl	800d090 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae98:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	69fa      	ldr	r2, [r7, #28]
 800ae9e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	db04      	blt.n	800aeb2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	f1c3 0205 	rsb	r2, r3, #5
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	6959      	ldr	r1, [r3, #20]
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4a1b      	ldr	r2, [pc, #108]	; (800af30 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800aec2:	4413      	add	r3, r2
 800aec4:	4299      	cmp	r1, r3
 800aec6:	d12d      	bne.n	800af24 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fd fe0d 	bl	8008aec <uxListRemove>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	2201      	movs	r2, #1
 800aede:	fa02 f303 	lsl.w	r3, r2, r3
 800aee2:	43da      	mvns	r2, r3
 800aee4:	4b13      	ldr	r3, [pc, #76]	; (800af34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4013      	ands	r3, r2
 800aeea:	4a12      	ldr	r2, [pc, #72]	; (800af34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aeec:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f002 fefb 	bl	800dcec <SEGGER_SYSVIEW_OnTaskStartReady>
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	2201      	movs	r2, #1
 800aefc:	409a      	lsls	r2, r3
 800aefe:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4313      	orrs	r3, r2
 800af04:	4a0b      	ldr	r2, [pc, #44]	; (800af34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4a06      	ldr	r2, [pc, #24]	; (800af30 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800af16:	441a      	add	r2, r3
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	4610      	mov	r0, r2
 800af20:	f7fd fd87 	bl	8008a32 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800af24:	bf00      	nop
 800af26:	3720      	adds	r7, #32
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20002278 	.word	0x20002278
 800af30:	2000227c 	.word	0x2000227c
 800af34:	20002358 	.word	0x20002358

0800af38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800af3c:	4b07      	ldr	r3, [pc, #28]	; (800af5c <pvTaskIncrementMutexHeldCount+0x24>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800af44:	4b05      	ldr	r3, [pc, #20]	; (800af5c <pvTaskIncrementMutexHeldCount+0x24>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af4a:	3201      	adds	r2, #1
 800af4c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800af4e:	4b03      	ldr	r3, [pc, #12]	; (800af5c <pvTaskIncrementMutexHeldCount+0x24>)
 800af50:	681b      	ldr	r3, [r3, #0]
    }
 800af52:	4618      	mov	r0, r3
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20002278 	.word	0x20002278

0800af60 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00a      	beq.n	800af88 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	613b      	str	r3, [r7, #16]
    }
 800af84:	bf00      	nop
 800af86:	e7fe      	b.n	800af86 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 800af88:	f000 ffce 	bl	800bf28 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800af8c:	4b29      	ldr	r3, [pc, #164]	; (800b034 <ulTaskGenericNotifyTake+0xd4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	3214      	adds	r2, #20
 800af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d115      	bne.n	800afc8 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800af9c:	4b25      	ldr	r3, [pc, #148]	; (800b034 <ulTaskGenericNotifyTake+0xd4>)
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4413      	add	r3, r2
 800afa4:	3354      	adds	r3, #84	; 0x54
 800afa6:	2201      	movs	r2, #1
 800afa8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afb0:	2101      	movs	r1, #1
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fafc 	bl	800b5b0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800afb8:	4b1f      	ldr	r3, [pc, #124]	; (800b038 <ulTaskGenericNotifyTake+0xd8>)
 800afba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800afc8:	f000 ffde 	bl	800bf88 <vPortExitCritical>

        taskENTER_CRITICAL();
 800afcc:	f000 ffac 	bl	800bf28 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE(  );
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	4619      	mov	r1, r3
 800afd6:	2042      	movs	r0, #66	; 0x42
 800afd8:	f002 f896 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800afdc:	4b15      	ldr	r3, [pc, #84]	; (800b034 <ulTaskGenericNotifyTake+0xd4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	3214      	adds	r2, #20
 800afe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe8:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d012      	beq.n	800b016 <ulTaskGenericNotifyTake+0xb6>
            {
                if( xClearCountOnExit != pdFALSE )
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <ulTaskGenericNotifyTake+0xa6>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800aff6:	4b0f      	ldr	r3, [pc, #60]	; (800b034 <ulTaskGenericNotifyTake+0xd4>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	3214      	adds	r2, #20
 800affe:	2100      	movs	r1, #0
 800b000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b004:	e007      	b.n	800b016 <ulTaskGenericNotifyTake+0xb6>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <ulTaskGenericNotifyTake+0xd4>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	1e51      	subs	r1, r2, #1
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	3214      	adds	r2, #20
 800b012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800b016:	4b07      	ldr	r3, [pc, #28]	; (800b034 <ulTaskGenericNotifyTake+0xd4>)
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4413      	add	r3, r2
 800b01e:	3354      	adds	r3, #84	; 0x54
 800b020:	2200      	movs	r2, #0
 800b022:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800b024:	f000 ffb0 	bl	800bf88 <vPortExitCritical>

        return ulReturn;
 800b028:	697b      	ldr	r3, [r7, #20]
    }
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20002278 	.word	0x20002278
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af02      	add	r7, sp, #8
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00a      	beq.n	800b066 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	613b      	str	r3, [r7, #16]
    }
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800b066:	f000 ff5f 	bl	800bf28 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800b06a:	4b36      	ldr	r3, [pc, #216]	; (800b144 <xTaskGenericNotifyWait+0x108>)
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4413      	add	r3, r2
 800b072:	3354      	adds	r3, #84	; 0x54
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d022      	beq.n	800b0c2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800b07c:	4b31      	ldr	r3, [pc, #196]	; (800b144 <xTaskGenericNotifyWait+0x108>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	3214      	adds	r2, #20
 800b084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	43d2      	mvns	r2, r2
 800b08c:	4011      	ands	r1, r2
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	3214      	adds	r2, #20
 800b092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800b096:	4b2b      	ldr	r3, [pc, #172]	; (800b144 <xTaskGenericNotifyWait+0x108>)
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	3354      	adds	r3, #84	; 0x54
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00b      	beq.n	800b0c2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	6a38      	ldr	r0, [r7, #32]
 800b0ae:	f000 fa7f 	bl	800b5b0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800b0b2:	4b25      	ldr	r3, [pc, #148]	; (800b148 <xTaskGenericNotifyWait+0x10c>)
 800b0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b0c2:	f000 ff61 	bl	800bf88 <vPortExitCritical>

        taskENTER_CRITICAL();
 800b0c6:	f000 ff2f 	bl	800bf28 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	2040      	movs	r0, #64	; 0x40
 800b0d8:	f002 f8e6 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d007      	beq.n	800b0f2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800b0e2:	4b18      	ldr	r3, [pc, #96]	; (800b144 <xTaskGenericNotifyWait+0x108>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	3214      	adds	r2, #20
 800b0ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800b0f2:	4b14      	ldr	r3, [pc, #80]	; (800b144 <xTaskGenericNotifyWait+0x108>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3354      	adds	r3, #84	; 0x54
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b02      	cmp	r3, #2
 800b102:	d002      	beq.n	800b10a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800b104:	2300      	movs	r3, #0
 800b106:	617b      	str	r3, [r7, #20]
 800b108:	e00e      	b.n	800b128 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800b10a:	4b0e      	ldr	r3, [pc, #56]	; (800b144 <xTaskGenericNotifyWait+0x108>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	3214      	adds	r2, #20
 800b112:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	43d2      	mvns	r2, r2
 800b11a:	4011      	ands	r1, r2
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	3214      	adds	r2, #20
 800b120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800b124:	2301      	movs	r3, #1
 800b126:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800b128:	4b06      	ldr	r3, [pc, #24]	; (800b144 <xTaskGenericNotifyWait+0x108>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4413      	add	r3, r2
 800b130:	3354      	adds	r3, #84	; 0x54
 800b132:	2200      	movs	r2, #0
 800b134:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800b136:	f000 ff27 	bl	800bf88 <vPortExitCritical>

        return xReturn;
 800b13a:	697b      	ldr	r3, [r7, #20]
    }
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	20002278 	.word	0x20002278
 800b148:	e000ed04 	.word	0xe000ed04

0800b14c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08e      	sub	sp, #56	; 0x38
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
 800b158:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800b15a:	2301      	movs	r3, #1
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00a      	beq.n	800b17a <xTaskGenericNotify+0x2e>
        __asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	623b      	str	r3, [r7, #32]
    }
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <xTaskGenericNotify+0x4a>
        __asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	61fb      	str	r3, [r7, #28]
    }
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800b19a:	f000 fec5 	bl	800bf28 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d006      	beq.n	800b1b2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	3214      	adds	r2, #20
 800b1aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800b1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	3354      	adds	r3, #84	; 0x54
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800b1c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	3354      	adds	r3, #84	; 0x54
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d83b      	bhi.n	800b24a <xTaskGenericNotify+0xfe>
 800b1d2:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <xTaskGenericNotify+0x8c>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b269 	.word	0x0800b269
 800b1dc:	0800b1ed 	.word	0x0800b1ed
 800b1e0:	0800b209 	.word	0x0800b209
 800b1e4:	0800b221 	.word	0x0800b221
 800b1e8:	0800b22f 	.word	0x0800b22f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	3214      	adds	r2, #20
 800b1f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	ea42 0103 	orr.w	r1, r2, r3
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	3214      	adds	r2, #20
 800b202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b206:	e032      	b.n	800b26e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	3214      	adds	r2, #20
 800b20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b212:	1c59      	adds	r1, r3, #1
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	3214      	adds	r2, #20
 800b21a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b21e:	e026      	b.n	800b26e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	3214      	adds	r2, #20
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b22c:	e01f      	b.n	800b26e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b232:	2b02      	cmp	r3, #2
 800b234:	d006      	beq.n	800b244 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	3214      	adds	r2, #20
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800b242:	e014      	b.n	800b26e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800b244:	2300      	movs	r3, #0
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800b248:	e011      	b.n	800b26e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800b24a:	4b2d      	ldr	r3, [pc, #180]	; (800b300 <xTaskGenericNotify+0x1b4>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00c      	beq.n	800b26c <xTaskGenericNotify+0x120>
        __asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	61bb      	str	r3, [r7, #24]
    }
 800b264:	bf00      	nop
 800b266:	e7fe      	b.n	800b266 <xTaskGenericNotify+0x11a>
                    break;
 800b268:	bf00      	nop
 800b26a:	e000      	b.n	800b26e <xTaskGenericNotify+0x122>

                    break;
 800b26c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800b26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b270:	4618      	mov	r0, r3
 800b272:	f002 fddd 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 800b276:	4601      	mov	r1, r0
 800b278:	78fa      	ldrb	r2, [r7, #3]
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	4613      	mov	r3, r2
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	203e      	movs	r0, #62	; 0x3e
 800b284:	f002 f810 	bl	800d2a8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d130      	bne.n	800b2f2 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	3304      	adds	r3, #4
 800b294:	4618      	mov	r0, r3
 800b296:	f7fd fc29 	bl	8008aec <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800b29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29c:	4618      	mov	r0, r3
 800b29e:	f002 fd25 	bl	800dcec <SEGGER_SYSVIEW_OnTaskStartReady>
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	409a      	lsls	r2, r3
 800b2aa:	4b16      	ldr	r3, [pc, #88]	; (800b304 <xTaskGenericNotify+0x1b8>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	4a14      	ldr	r2, [pc, #80]	; (800b304 <xTaskGenericNotify+0x1b8>)
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4a11      	ldr	r2, [pc, #68]	; (800b308 <xTaskGenericNotify+0x1bc>)
 800b2c2:	441a      	add	r2, r3
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f7fd fbb1 	bl	8008a32 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <xTaskGenericNotify+0x1a2>
        __asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	617b      	str	r3, [r7, #20]
    }
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2ee:	4b07      	ldr	r3, [pc, #28]	; (800b30c <xTaskGenericNotify+0x1c0>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b2f2:	f000 fe49 	bl	800bf88 <vPortExitCritical>

        return xReturn;
 800b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3730      	adds	r7, #48	; 0x30
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20002354 	.word	0x20002354
 800b304:	20002358 	.word	0x20002358
 800b308:	2000227c 	.word	0x2000227c
 800b30c:	20002278 	.word	0x20002278

0800b310 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800b310:	b580      	push	{r7, lr}
 800b312:	b092      	sub	sp, #72	; 0x48
 800b314:	af02      	add	r7, sp, #8
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
 800b31c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800b31e:	2301      	movs	r3, #1
 800b320:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00a      	beq.n	800b35a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b35a:	f000 fecf 	bl	800c0fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800b362:	f3ef 8211 	mrs	r2, BASEPRI
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	627a      	str	r2, [r7, #36]	; 0x24
 800b378:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800b37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b380:	2b00      	cmp	r3, #0
 800b382:	d006      	beq.n	800b392 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	3214      	adds	r2, #20
 800b38a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b390:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800b392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	4413      	add	r3, r2
 800b398:	3354      	adds	r3, #84	; 0x54
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800b3a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	3354      	adds	r3, #84	; 0x54
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800b3ac:	78fb      	ldrb	r3, [r7, #3]
 800b3ae:	2b04      	cmp	r3, #4
 800b3b0:	d83b      	bhi.n	800b42a <xTaskGenericNotifyFromISR+0x11a>
 800b3b2:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <xTaskGenericNotifyFromISR+0xa8>)
 800b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b8:	0800b449 	.word	0x0800b449
 800b3bc:	0800b3cd 	.word	0x0800b3cd
 800b3c0:	0800b3e9 	.word	0x0800b3e9
 800b3c4:	0800b401 	.word	0x0800b401
 800b3c8:	0800b40f 	.word	0x0800b40f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	3214      	adds	r2, #20
 800b3d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	ea42 0103 	orr.w	r1, r2, r3
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	3214      	adds	r2, #20
 800b3e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b3e6:	e032      	b.n	800b44e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	3214      	adds	r2, #20
 800b3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f2:	1c59      	adds	r1, r3, #1
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	3214      	adds	r2, #20
 800b3fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b3fe:	e026      	b.n	800b44e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	3214      	adds	r2, #20
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b40c:	e01f      	b.n	800b44e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b40e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b412:	2b02      	cmp	r3, #2
 800b414:	d006      	beq.n	800b424 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	3214      	adds	r2, #20
 800b41c:	6879      	ldr	r1, [r7, #4]
 800b41e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800b422:	e014      	b.n	800b44e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800b424:	2300      	movs	r3, #0
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800b428:	e011      	b.n	800b44e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800b42a:	4b3d      	ldr	r3, [pc, #244]	; (800b520 <xTaskGenericNotifyFromISR+0x210>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00c      	beq.n	800b44c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800b432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	61fb      	str	r3, [r7, #28]
    }
 800b444:	bf00      	nop
 800b446:	e7fe      	b.n	800b446 <xTaskGenericNotifyFromISR+0x136>
                    break;
 800b448:	bf00      	nop
 800b44a:	e000      	b.n	800b44e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800b44c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800b44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b450:	4618      	mov	r0, r3
 800b452:	f002 fced 	bl	800de30 <SEGGER_SYSVIEW_ShrinkId>
 800b456:	78f9      	ldrb	r1, [r7, #3]
 800b458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b45a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b45c:	9201      	str	r2, [sp, #4]
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	460b      	mov	r3, r1
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	4601      	mov	r1, r0
 800b466:	203f      	movs	r0, #63	; 0x3f
 800b468:	f001 ffb0 	bl	800d3cc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b46c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b470:	2b01      	cmp	r3, #1
 800b472:	d149      	bne.n	800b508 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	61bb      	str	r3, [r7, #24]
    }
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <xTaskGenericNotifyFromISR+0x214>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d120      	bne.n	800b4dc <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	3304      	adds	r3, #4
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fd fb24 	bl	8008aec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f002 fc20 	bl	800dcec <SEGGER_SYSVIEW_OnTaskStartReady>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	409a      	lsls	r2, r3
 800b4b4:	4b1c      	ldr	r3, [pc, #112]	; (800b528 <xTaskGenericNotifyFromISR+0x218>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	4a1b      	ldr	r2, [pc, #108]	; (800b528 <xTaskGenericNotifyFromISR+0x218>)
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4a18      	ldr	r2, [pc, #96]	; (800b52c <xTaskGenericNotifyFromISR+0x21c>)
 800b4cc:	441a      	add	r2, r3
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7fd faac 	bl	8008a32 <vListInsertEnd>
 800b4da:	e005      	b.n	800b4e8 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	3318      	adds	r3, #24
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4813      	ldr	r0, [pc, #76]	; (800b530 <xTaskGenericNotifyFromISR+0x220>)
 800b4e4:	f7fd faa5 	bl	8008a32 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ec:	4b11      	ldr	r3, [pc, #68]	; (800b534 <xTaskGenericNotifyFromISR+0x224>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d908      	bls.n	800b508 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800b4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800b4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fe:	2201      	movs	r2, #1
 800b500:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800b502:	4b0d      	ldr	r3, [pc, #52]	; (800b538 <xTaskGenericNotifyFromISR+0x228>)
 800b504:	2201      	movs	r2, #1
 800b506:	601a      	str	r2, [r3, #0]
 800b508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f383 8811 	msr	BASEPRI, r3
    }
 800b512:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800b514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800b516:	4618      	mov	r0, r3
 800b518:	3740      	adds	r7, #64	; 0x40
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20002354 	.word	0x20002354
 800b524:	20002378 	.word	0x20002378
 800b528:	20002358 	.word	0x20002358
 800b52c:	2000227c 	.word	0x2000227c
 800b530:	20002310 	.word	0x20002310
 800b534:	20002278 	.word	0x20002278
 800b538:	20002364 	.word	0x20002364

0800b53c <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00a      	beq.n	800b562 <xTaskGenericNotifyStateClear+0x26>
        __asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	60fb      	str	r3, [r7, #12]
    }
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <xTaskGenericNotifyStateClear+0x32>
 800b568:	4b10      	ldr	r3, [pc, #64]	; (800b5ac <xTaskGenericNotifyStateClear+0x70>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	e000      	b.n	800b570 <xTaskGenericNotifyStateClear+0x34>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	613b      	str	r3, [r7, #16]

        taskENTER_CRITICAL();
 800b572:	f000 fcd9 	bl	800bf28 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	4413      	add	r3, r2
 800b57c:	3354      	adds	r3, #84	; 0x54
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b02      	cmp	r3, #2
 800b584:	d108      	bne.n	800b598 <xTaskGenericNotifyStateClear+0x5c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	4413      	add	r3, r2
 800b58c:	3354      	adds	r3, #84	; 0x54
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 800b592:	2301      	movs	r3, #1
 800b594:	617b      	str	r3, [r7, #20]
 800b596:	e001      	b.n	800b59c <xTaskGenericNotifyStateClear+0x60>
            }
            else
            {
                xReturn = pdFAIL;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 800b59c:	f000 fcf4 	bl	800bf88 <vPortExitCritical>

        return xReturn;
 800b5a0:	697b      	ldr	r3, [r7, #20]
    }
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20002278 	.word	0x20002278

0800b5b0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b5ba:	4b32      	ldr	r3, [pc, #200]	; (800b684 <prvAddCurrentTaskToDelayedList+0xd4>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5c0:	4b31      	ldr	r3, [pc, #196]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fd fa90 	bl	8008aec <uxListRemove>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b5d2:	4b2d      	ldr	r3, [pc, #180]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	2201      	movs	r2, #1
 800b5da:	fa02 f303 	lsl.w	r3, r2, r3
 800b5de:	43da      	mvns	r2, r3
 800b5e0:	4b2a      	ldr	r3, [pc, #168]	; (800b68c <prvAddCurrentTaskToDelayedList+0xdc>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	4a29      	ldr	r2, [pc, #164]	; (800b68c <prvAddCurrentTaskToDelayedList+0xdc>)
 800b5e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f0:	d110      	bne.n	800b614 <prvAddCurrentTaskToDelayedList+0x64>
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00d      	beq.n	800b614 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800b5f8:	4b23      	ldr	r3, [pc, #140]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	211b      	movs	r1, #27
 800b5fe:	4618      	mov	r0, r3
 800b600:	f002 fbb6 	bl	800dd70 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b604:	4b20      	ldr	r3, [pc, #128]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3304      	adds	r3, #4
 800b60a:	4619      	mov	r1, r3
 800b60c:	4820      	ldr	r0, [pc, #128]	; (800b690 <prvAddCurrentTaskToDelayedList+0xe0>)
 800b60e:	f7fd fa10 	bl	8008a32 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b612:	e032      	b.n	800b67a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4413      	add	r3, r2
 800b61a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b61c:	4b1a      	ldr	r3, [pc, #104]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d20f      	bcs.n	800b64c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b62c:	4b16      	ldr	r3, [pc, #88]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2104      	movs	r1, #4
 800b632:	4618      	mov	r0, r3
 800b634:	f002 fb9c 	bl	800dd70 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b638:	4b16      	ldr	r3, [pc, #88]	; (800b694 <prvAddCurrentTaskToDelayedList+0xe4>)
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	4b12      	ldr	r3, [pc, #72]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3304      	adds	r3, #4
 800b642:	4619      	mov	r1, r3
 800b644:	4610      	mov	r0, r2
 800b646:	f7fd fa18 	bl	8008a7a <vListInsert>
}
 800b64a:	e016      	b.n	800b67a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800b64c:	4b0e      	ldr	r3, [pc, #56]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2104      	movs	r1, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f002 fb8c 	bl	800dd70 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b658:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <prvAddCurrentTaskToDelayedList+0xe8>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3304      	adds	r3, #4
 800b662:	4619      	mov	r1, r3
 800b664:	4610      	mov	r0, r2
 800b666:	f7fd fa08 	bl	8008a7a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b66a:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <prvAddCurrentTaskToDelayedList+0xec>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	429a      	cmp	r2, r3
 800b672:	d202      	bcs.n	800b67a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800b674:	4a09      	ldr	r2, [pc, #36]	; (800b69c <prvAddCurrentTaskToDelayedList+0xec>)
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	6013      	str	r3, [r2, #0]
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20002354 	.word	0x20002354
 800b688:	20002278 	.word	0x20002278
 800b68c:	20002358 	.word	0x20002358
 800b690:	2000233c 	.word	0x2000233c
 800b694:	2000230c 	.word	0x2000230c
 800b698:	20002308 	.word	0x20002308
 800b69c:	20002370 	.word	0x20002370

0800b6a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b6aa:	f000 fad5 	bl	800bc58 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b6ae:	4b11      	ldr	r3, [pc, #68]	; (800b6f4 <xTimerCreateTimerTask+0x54>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00b      	beq.n	800b6ce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b6b6:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <xTimerCreateTimerTask+0x58>)
 800b6b8:	9301      	str	r3, [sp, #4]
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b6c4:	490d      	ldr	r1, [pc, #52]	; (800b6fc <xTimerCreateTimerTask+0x5c>)
 800b6c6:	480e      	ldr	r0, [pc, #56]	; (800b700 <xTimerCreateTimerTask+0x60>)
 800b6c8:	f7fe fcaf 	bl	800a02a <xTaskCreate>
 800b6cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	603b      	str	r3, [r7, #0]
    }
 800b6e6:	bf00      	nop
 800b6e8:	e7fe      	b.n	800b6e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800b6ea:	687b      	ldr	r3, [r7, #4]
    }
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	200023ac 	.word	0x200023ac
 800b6f8:	200023b0 	.word	0x200023b0
 800b6fc:	0800ef60 	.word	0x0800ef60
 800b700:	0800b839 	.word	0x0800b839

0800b704 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b704:	b580      	push	{r7, lr}
 800b706:	b08a      	sub	sp, #40	; 0x28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b712:	2300      	movs	r3, #0
 800b714:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10a      	bne.n	800b732 <xTimerGenericCommand+0x2e>
        __asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b720:	f383 8811 	msr	BASEPRI, r3
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	623b      	str	r3, [r7, #32]
    }
 800b72e:	bf00      	nop
 800b730:	e7fe      	b.n	800b730 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b732:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <xTimerGenericCommand+0x98>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d02a      	beq.n	800b790 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b05      	cmp	r3, #5
 800b74a:	dc18      	bgt.n	800b77e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b74c:	f7ff fa44 	bl	800abd8 <xTaskGetSchedulerState>
 800b750:	4603      	mov	r3, r0
 800b752:	2b02      	cmp	r3, #2
 800b754:	d109      	bne.n	800b76a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b756:	4b11      	ldr	r3, [pc, #68]	; (800b79c <xTimerGenericCommand+0x98>)
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f107 0114 	add.w	r1, r7, #20
 800b75e:	2300      	movs	r3, #0
 800b760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b762:	f7fd fb03 	bl	8008d6c <xQueueGenericSend>
 800b766:	6278      	str	r0, [r7, #36]	; 0x24
 800b768:	e012      	b.n	800b790 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b76a:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <xTimerGenericCommand+0x98>)
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f107 0114 	add.w	r1, r7, #20
 800b772:	2300      	movs	r3, #0
 800b774:	2200      	movs	r2, #0
 800b776:	f7fd faf9 	bl	8008d6c <xQueueGenericSend>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24
 800b77c:	e008      	b.n	800b790 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b77e:	4b07      	ldr	r3, [pc, #28]	; (800b79c <xTimerGenericCommand+0x98>)
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f107 0114 	add.w	r1, r7, #20
 800b786:	2300      	movs	r3, #0
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	f7fd fbfd 	bl	8008f88 <xQueueGenericSendFromISR>
 800b78e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b792:	4618      	mov	r0, r3
 800b794:	3728      	adds	r7, #40	; 0x28
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	200023ac 	.word	0x200023ac

0800b7a0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7aa:	4b22      	ldr	r3, [pc, #136]	; (800b834 <prvProcessExpiredTimer+0x94>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fd f997 	bl	8008aec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7c4:	f003 0304 	and.w	r3, r3, #4
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d022      	beq.n	800b812 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	699a      	ldr	r2, [r3, #24]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	18d1      	adds	r1, r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	6978      	ldr	r0, [r7, #20]
 800b7da:	f000 f8d1 	bl	800b980 <prvInsertTimerInActiveList>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d01f      	beq.n	800b824 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	6978      	ldr	r0, [r7, #20]
 800b7f0:	f7ff ff88 	bl	800b704 <xTimerGenericCommand>
 800b7f4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d113      	bne.n	800b824 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	60fb      	str	r3, [r7, #12]
    }
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b818:	f023 0301 	bic.w	r3, r3, #1
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	6978      	ldr	r0, [r7, #20]
 800b82a:	4798      	blx	r3
    }
 800b82c:	bf00      	nop
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	200023a4 	.word	0x200023a4

0800b838 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b840:	f107 0308 	add.w	r3, r7, #8
 800b844:	4618      	mov	r0, r3
 800b846:	f000 f857 	bl	800b8f8 <prvGetNextExpireTime>
 800b84a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	4619      	mov	r1, r3
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 f803 	bl	800b85c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b856:	f000 f8d5 	bl	800ba04 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b85a:	e7f1      	b.n	800b840 <prvTimerTask+0x8>

0800b85c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b866:	f7fe fdcf 	bl	800a408 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b86a:	f107 0308 	add.w	r3, r7, #8
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 f866 	bl	800b940 <prvSampleTimeNow>
 800b874:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d130      	bne.n	800b8de <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <prvProcessTimerOrBlockTask+0x3c>
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	429a      	cmp	r2, r3
 800b888:	d806      	bhi.n	800b898 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b88a:	f7fe fdcb 	bl	800a424 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b88e:	68f9      	ldr	r1, [r7, #12]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff ff85 	bl	800b7a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b896:	e024      	b.n	800b8e2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d008      	beq.n	800b8b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <prvProcessTimerOrBlockTask+0x90>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <prvProcessTimerOrBlockTask+0x50>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e000      	b.n	800b8ae <prvProcessTimerOrBlockTask+0x52>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8b0:	4b0f      	ldr	r3, [pc, #60]	; (800b8f0 <prvProcessTimerOrBlockTask+0x94>)
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	f7fd ffb1 	bl	8009824 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b8c2:	f7fe fdaf 	bl	800a424 <xTaskResumeAll>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <prvProcessTimerOrBlockTask+0x98>)
 800b8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	f3bf 8f6f 	isb	sy
    }
 800b8dc:	e001      	b.n	800b8e2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b8de:	f7fe fda1 	bl	800a424 <xTaskResumeAll>
    }
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	200023a8 	.word	0x200023a8
 800b8f0:	200023ac 	.word	0x200023ac
 800b8f4:	e000ed04 	.word	0xe000ed04

0800b8f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b900:	4b0e      	ldr	r3, [pc, #56]	; (800b93c <prvGetNextExpireTime+0x44>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <prvGetNextExpireTime+0x16>
 800b90a:	2201      	movs	r2, #1
 800b90c:	e000      	b.n	800b910 <prvGetNextExpireTime+0x18>
 800b90e:	2200      	movs	r2, #0
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d105      	bne.n	800b928 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b91c:	4b07      	ldr	r3, [pc, #28]	; (800b93c <prvGetNextExpireTime+0x44>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	e001      	b.n	800b92c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b928:	2300      	movs	r3, #0
 800b92a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b92c:	68fb      	ldr	r3, [r7, #12]
    }
 800b92e:	4618      	mov	r0, r3
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	200023a4 	.word	0x200023a4

0800b940 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b948:	f7fe fdfe 	bl	800a548 <xTaskGetTickCount>
 800b94c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b94e:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <prvSampleTimeNow+0x3c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	429a      	cmp	r2, r3
 800b956:	d205      	bcs.n	800b964 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b958:	f000 f91a 	bl	800bb90 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	e002      	b.n	800b96a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b96a:	4a04      	ldr	r2, [pc, #16]	; (800b97c <prvSampleTimeNow+0x3c>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b970:	68fb      	ldr	r3, [r7, #12]
    }
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	200023b4 	.word	0x200023b4

0800b980 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d812      	bhi.n	800b9cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d302      	bcc.n	800b9ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	e01b      	b.n	800b9f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9ba:	4b10      	ldr	r3, [pc, #64]	; (800b9fc <prvInsertTimerInActiveList+0x7c>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	f7fd f858 	bl	8008a7a <vListInsert>
 800b9ca:	e012      	b.n	800b9f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d206      	bcs.n	800b9e2 <prvInsertTimerInActiveList+0x62>
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d302      	bcc.n	800b9e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	e007      	b.n	800b9f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <prvInsertTimerInActiveList+0x80>)
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	f7fd f844 	bl	8008a7a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b9f2:	697b      	ldr	r3, [r7, #20]
    }
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200023a8 	.word	0x200023a8
 800ba00:	200023a4 	.word	0x200023a4

0800ba04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b08c      	sub	sp, #48	; 0x30
 800ba08:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba0a:	e0ae      	b.n	800bb6a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f2c0 80aa 	blt.w	800bb68 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d004      	beq.n	800ba2a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	3304      	adds	r3, #4
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fd f861 	bl	8008aec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba2a:	1d3b      	adds	r3, r7, #4
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff ff87 	bl	800b940 <prvSampleTimeNow>
 800ba32:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b09      	cmp	r3, #9
 800ba38:	f200 8097 	bhi.w	800bb6a <prvProcessReceivedCommands+0x166>
 800ba3c:	a201      	add	r2, pc, #4	; (adr r2, 800ba44 <prvProcessReceivedCommands+0x40>)
 800ba3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba42:	bf00      	nop
 800ba44:	0800ba6d 	.word	0x0800ba6d
 800ba48:	0800ba6d 	.word	0x0800ba6d
 800ba4c:	0800ba6d 	.word	0x0800ba6d
 800ba50:	0800bae1 	.word	0x0800bae1
 800ba54:	0800baf5 	.word	0x0800baf5
 800ba58:	0800bb3f 	.word	0x0800bb3f
 800ba5c:	0800ba6d 	.word	0x0800ba6d
 800ba60:	0800ba6d 	.word	0x0800ba6d
 800ba64:	0800bae1 	.word	0x0800bae1
 800ba68:	0800baf5 	.word	0x0800baf5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba72:	f043 0301 	orr.w	r3, r3, #1
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	18d1      	adds	r1, r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6a3a      	ldr	r2, [r7, #32]
 800ba8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba8c:	f7ff ff78 	bl	800b980 <prvInsertTimerInActiveList>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d069      	beq.n	800bb6a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba9c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d05e      	beq.n	800bb6a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	441a      	add	r2, r3
 800bab4:	2300      	movs	r3, #0
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	2300      	movs	r3, #0
 800baba:	2100      	movs	r1, #0
 800babc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800babe:	f7ff fe21 	bl	800b704 <xTimerGenericCommand>
 800bac2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d14f      	bne.n	800bb6a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	61bb      	str	r3, [r7, #24]
    }
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bae6:	f023 0301 	bic.w	r3, r3, #1
 800baea:	b2da      	uxtb	r2, r3
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800baf2:	e03a      	b.n	800bb6a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bafa:	f043 0301 	orr.w	r3, r3, #1
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <prvProcessReceivedCommands+0x126>
        __asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	617b      	str	r3, [r7, #20]
    }
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	699a      	ldr	r2, [r3, #24]
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	18d1      	adds	r1, r2, r3
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	6a3a      	ldr	r2, [r7, #32]
 800bb36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb38:	f7ff ff22 	bl	800b980 <prvInsertTimerInActiveList>
                        break;
 800bb3c:	e015      	b.n	800bb6a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb44:	f003 0302 	and.w	r3, r3, #2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d103      	bne.n	800bb54 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800bb4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb4e:	f000 fbf5 	bl	800c33c <vPortFree>
 800bb52:	e00a      	b.n	800bb6a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb5a:	f023 0301 	bic.w	r3, r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800bb66:	e000      	b.n	800bb6a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800bb68:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb6a:	4b08      	ldr	r3, [pc, #32]	; (800bb8c <prvProcessReceivedCommands+0x188>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f107 0108 	add.w	r1, r7, #8
 800bb72:	2200      	movs	r2, #0
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fd fac5 	bl	8009104 <xQueueReceive>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f47f af45 	bne.w	800ba0c <prvProcessReceivedCommands+0x8>
        }
    }
 800bb82:	bf00      	nop
 800bb84:	bf00      	nop
 800bb86:	3728      	adds	r7, #40	; 0x28
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	200023ac 	.word	0x200023ac

0800bb90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb96:	e048      	b.n	800bc2a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb98:	4b2d      	ldr	r3, [pc, #180]	; (800bc50 <prvSwitchTimerLists+0xc0>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bba2:	4b2b      	ldr	r3, [pc, #172]	; (800bc50 <prvSwitchTimerLists+0xc0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fc ff9b 	bl	8008aec <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d02e      	beq.n	800bc2a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d90e      	bls.n	800bbfc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbea:	4b19      	ldr	r3, [pc, #100]	; (800bc50 <prvSwitchTimerLists+0xc0>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	f7fc ff40 	bl	8008a7a <vListInsert>
 800bbfa:	e016      	b.n	800bc2a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	2300      	movs	r3, #0
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	2100      	movs	r1, #0
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f7ff fd7c 	bl	800b704 <xTimerGenericCommand>
 800bc0c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <prvSwitchTimerLists+0x9a>
        __asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	603b      	str	r3, [r7, #0]
    }
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc2a:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <prvSwitchTimerLists+0xc0>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1b1      	bne.n	800bb98 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800bc34:	4b06      	ldr	r3, [pc, #24]	; (800bc50 <prvSwitchTimerLists+0xc0>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800bc3a:	4b06      	ldr	r3, [pc, #24]	; (800bc54 <prvSwitchTimerLists+0xc4>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a04      	ldr	r2, [pc, #16]	; (800bc50 <prvSwitchTimerLists+0xc0>)
 800bc40:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800bc42:	4a04      	ldr	r2, [pc, #16]	; (800bc54 <prvSwitchTimerLists+0xc4>)
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	6013      	str	r3, [r2, #0]
    }
 800bc48:	bf00      	nop
 800bc4a:	3718      	adds	r7, #24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	200023a4 	.word	0x200023a4
 800bc54:	200023a8 	.word	0x200023a8

0800bc58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800bc5c:	f000 f964 	bl	800bf28 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800bc60:	4b12      	ldr	r3, [pc, #72]	; (800bcac <prvCheckForValidListAndQueue+0x54>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d11d      	bne.n	800bca4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800bc68:	4811      	ldr	r0, [pc, #68]	; (800bcb0 <prvCheckForValidListAndQueue+0x58>)
 800bc6a:	f7fc feb5 	bl	80089d8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800bc6e:	4811      	ldr	r0, [pc, #68]	; (800bcb4 <prvCheckForValidListAndQueue+0x5c>)
 800bc70:	f7fc feb2 	bl	80089d8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800bc74:	4b10      	ldr	r3, [pc, #64]	; (800bcb8 <prvCheckForValidListAndQueue+0x60>)
 800bc76:	4a0e      	ldr	r2, [pc, #56]	; (800bcb0 <prvCheckForValidListAndQueue+0x58>)
 800bc78:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800bc7a:	4b10      	ldr	r3, [pc, #64]	; (800bcbc <prvCheckForValidListAndQueue+0x64>)
 800bc7c:	4a0d      	ldr	r2, [pc, #52]	; (800bcb4 <prvCheckForValidListAndQueue+0x5c>)
 800bc7e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800bc80:	2200      	movs	r2, #0
 800bc82:	210c      	movs	r1, #12
 800bc84:	200a      	movs	r0, #10
 800bc86:	f7fc ffb6 	bl	8008bf6 <xQueueGenericCreate>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	4a07      	ldr	r2, [pc, #28]	; (800bcac <prvCheckForValidListAndQueue+0x54>)
 800bc8e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800bc90:	4b06      	ldr	r3, [pc, #24]	; (800bcac <prvCheckForValidListAndQueue+0x54>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d005      	beq.n	800bca4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc98:	4b04      	ldr	r3, [pc, #16]	; (800bcac <prvCheckForValidListAndQueue+0x54>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4908      	ldr	r1, [pc, #32]	; (800bcc0 <prvCheckForValidListAndQueue+0x68>)
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fd fd8e 	bl	80097c0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800bca4:	f000 f970 	bl	800bf88 <vPortExitCritical>
    }
 800bca8:	bf00      	nop
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	200023ac 	.word	0x200023ac
 800bcb0:	2000237c 	.word	0x2000237c
 800bcb4:	20002390 	.word	0x20002390
 800bcb8:	200023a4 	.word	0x200023a4
 800bcbc:	200023a8 	.word	0x200023a8
 800bcc0:	0800ef68 	.word	0x0800ef68

0800bcc4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3b04      	subs	r3, #4
 800bcd4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bcdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3b04      	subs	r3, #4
 800bce2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f023 0201 	bic.w	r2, r3, #1
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3b04      	subs	r3, #4
 800bcf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800bcf4:	4a0c      	ldr	r2, [pc, #48]	; (800bd28 <pxPortInitialiseStack+0x64>)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3b14      	subs	r3, #20
 800bcfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3b04      	subs	r3, #4
 800bd0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f06f 0202 	mvn.w	r2, #2
 800bd12:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3b20      	subs	r3, #32
 800bd18:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	0800bd2d 	.word	0x0800bd2d

0800bd2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800bd36:	4b12      	ldr	r3, [pc, #72]	; (800bd80 <prvTaskExitError+0x54>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3e:	d00a      	beq.n	800bd56 <prvTaskExitError+0x2a>
        __asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	60fb      	str	r3, [r7, #12]
    }
 800bd52:	bf00      	nop
 800bd54:	e7fe      	b.n	800bd54 <prvTaskExitError+0x28>
        __asm volatile
 800bd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5a:	f383 8811 	msr	BASEPRI, r3
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	60bb      	str	r3, [r7, #8]
    }
 800bd68:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800bd6a:	bf00      	nop
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0fc      	beq.n	800bd6c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	20000100 	.word	0x20000100
	...

0800bd90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800bd90:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <pxCurrentTCBConst2>)
 800bd92:	6819      	ldr	r1, [r3, #0]
 800bd94:	6808      	ldr	r0, [r1, #0]
 800bd96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9a:	f380 8809 	msr	PSP, r0
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f04f 0000 	mov.w	r0, #0
 800bda6:	f380 8811 	msr	BASEPRI, r0
 800bdaa:	4770      	bx	lr
 800bdac:	f3af 8000 	nop.w

0800bdb0 <pxCurrentTCBConst2>:
 800bdb0:	20002278 	.word	0x20002278
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop

0800bdb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800bdb8:	4808      	ldr	r0, [pc, #32]	; (800bddc <prvPortStartFirstTask+0x24>)
 800bdba:	6800      	ldr	r0, [r0, #0]
 800bdbc:	6800      	ldr	r0, [r0, #0]
 800bdbe:	f380 8808 	msr	MSP, r0
 800bdc2:	f04f 0000 	mov.w	r0, #0
 800bdc6:	f380 8814 	msr	CONTROL, r0
 800bdca:	b662      	cpsie	i
 800bdcc:	b661      	cpsie	f
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	df00      	svc	0
 800bdd8:	bf00      	nop
 800bdda:	0000      	.short	0x0000
 800bddc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800bde0:	bf00      	nop
 800bde2:	bf00      	nop

0800bde4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bdea:	4b46      	ldr	r3, [pc, #280]	; (800bf04 <xPortStartScheduler+0x120>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a46      	ldr	r2, [pc, #280]	; (800bf08 <xPortStartScheduler+0x124>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d10a      	bne.n	800be0a <xPortStartScheduler+0x26>
        __asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	613b      	str	r3, [r7, #16]
    }
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be0a:	4b3e      	ldr	r3, [pc, #248]	; (800bf04 <xPortStartScheduler+0x120>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a3f      	ldr	r2, [pc, #252]	; (800bf0c <xPortStartScheduler+0x128>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d10a      	bne.n	800be2a <xPortStartScheduler+0x46>
        __asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	60fb      	str	r3, [r7, #12]
    }
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be2a:	4b39      	ldr	r3, [pc, #228]	; (800bf10 <xPortStartScheduler+0x12c>)
 800be2c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	b2db      	uxtb	r3, r3
 800be34:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	22ff      	movs	r2, #255	; 0xff
 800be3a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	b2db      	uxtb	r3, r3
 800be48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	4b31      	ldr	r3, [pc, #196]	; (800bf14 <xPortStartScheduler+0x130>)
 800be50:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be52:	4b31      	ldr	r3, [pc, #196]	; (800bf18 <xPortStartScheduler+0x134>)
 800be54:	2207      	movs	r2, #7
 800be56:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be58:	e009      	b.n	800be6e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800be5a:	4b2f      	ldr	r3, [pc, #188]	; (800bf18 <xPortStartScheduler+0x134>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	3b01      	subs	r3, #1
 800be60:	4a2d      	ldr	r2, [pc, #180]	; (800bf18 <xPortStartScheduler+0x134>)
 800be62:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be64:	78fb      	ldrb	r3, [r7, #3]
 800be66:	b2db      	uxtb	r3, r3
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be6e:	78fb      	ldrb	r3, [r7, #3]
 800be70:	b2db      	uxtb	r3, r3
 800be72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be76:	2b80      	cmp	r3, #128	; 0x80
 800be78:	d0ef      	beq.n	800be5a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be7a:	4b27      	ldr	r3, [pc, #156]	; (800bf18 <xPortStartScheduler+0x134>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f1c3 0307 	rsb	r3, r3, #7
 800be82:	2b04      	cmp	r3, #4
 800be84:	d00a      	beq.n	800be9c <xPortStartScheduler+0xb8>
        __asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	60bb      	str	r3, [r7, #8]
    }
 800be98:	bf00      	nop
 800be9a:	e7fe      	b.n	800be9a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be9c:	4b1e      	ldr	r3, [pc, #120]	; (800bf18 <xPortStartScheduler+0x134>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	021b      	lsls	r3, r3, #8
 800bea2:	4a1d      	ldr	r2, [pc, #116]	; (800bf18 <xPortStartScheduler+0x134>)
 800bea4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bea6:	4b1c      	ldr	r3, [pc, #112]	; (800bf18 <xPortStartScheduler+0x134>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beae:	4a1a      	ldr	r2, [pc, #104]	; (800bf18 <xPortStartScheduler+0x134>)
 800beb0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800beba:	4b18      	ldr	r3, [pc, #96]	; (800bf1c <xPortStartScheduler+0x138>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a17      	ldr	r2, [pc, #92]	; (800bf1c <xPortStartScheduler+0x138>)
 800bec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bec4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800bec6:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <xPortStartScheduler+0x138>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a14      	ldr	r2, [pc, #80]	; (800bf1c <xPortStartScheduler+0x138>)
 800becc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bed0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800bed2:	f000 f8e3 	bl	800c09c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800bed6:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <xPortStartScheduler+0x13c>)
 800bed8:	2200      	movs	r2, #0
 800beda:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800bedc:	f000 f902 	bl	800c0e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bee0:	4b10      	ldr	r3, [pc, #64]	; (800bf24 <xPortStartScheduler+0x140>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a0f      	ldr	r2, [pc, #60]	; (800bf24 <xPortStartScheduler+0x140>)
 800bee6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800beea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800beec:	f7ff ff64 	bl	800bdb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800bef0:	f7fe fbe6 	bl	800a6c0 <vTaskSwitchContext>
    prvTaskExitError();
 800bef4:	f7ff ff1a 	bl	800bd2c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	e000ed00 	.word	0xe000ed00
 800bf08:	410fc271 	.word	0x410fc271
 800bf0c:	410fc270 	.word	0x410fc270
 800bf10:	e000e400 	.word	0xe000e400
 800bf14:	200023b8 	.word	0x200023b8
 800bf18:	200023bc 	.word	0x200023bc
 800bf1c:	e000ed20 	.word	0xe000ed20
 800bf20:	20000100 	.word	0x20000100
 800bf24:	e000ef34 	.word	0xe000ef34

0800bf28 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
        __asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	607b      	str	r3, [r7, #4]
    }
 800bf40:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800bf42:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <vPortEnterCritical+0x58>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3301      	adds	r3, #1
 800bf48:	4a0d      	ldr	r2, [pc, #52]	; (800bf80 <vPortEnterCritical+0x58>)
 800bf4a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800bf4c:	4b0c      	ldr	r3, [pc, #48]	; (800bf80 <vPortEnterCritical+0x58>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d10f      	bne.n	800bf74 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf54:	4b0b      	ldr	r3, [pc, #44]	; (800bf84 <vPortEnterCritical+0x5c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00a      	beq.n	800bf74 <vPortEnterCritical+0x4c>
        __asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	603b      	str	r3, [r7, #0]
    }
 800bf70:	bf00      	nop
 800bf72:	e7fe      	b.n	800bf72 <vPortEnterCritical+0x4a>
    }
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	20000100 	.word	0x20000100
 800bf84:	e000ed04 	.word	0xe000ed04

0800bf88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800bf8e:	4b12      	ldr	r3, [pc, #72]	; (800bfd8 <vPortExitCritical+0x50>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10a      	bne.n	800bfac <vPortExitCritical+0x24>
        __asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	607b      	str	r3, [r7, #4]
    }
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <vPortExitCritical+0x50>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	4a09      	ldr	r2, [pc, #36]	; (800bfd8 <vPortExitCritical+0x50>)
 800bfb4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800bfb6:	4b08      	ldr	r3, [pc, #32]	; (800bfd8 <vPortExitCritical+0x50>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d105      	bne.n	800bfca <vPortExitCritical+0x42>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	603b      	str	r3, [r7, #0]
        __asm volatile
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	f383 8811 	msr	BASEPRI, r3
    }
 800bfc8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800bfca:	bf00      	nop
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	20000100 	.word	0x20000100
 800bfdc:	00000000 	.word	0x00000000

0800bfe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800bfe0:	f3ef 8009 	mrs	r0, PSP
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	4b15      	ldr	r3, [pc, #84]	; (800c040 <pxCurrentTCBConst>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	f01e 0f10 	tst.w	lr, #16
 800bff0:	bf08      	it	eq
 800bff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffa:	6010      	str	r0, [r2, #0]
 800bffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c004:	f380 8811 	msr	BASEPRI, r0
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f7fe fb56 	bl	800a6c0 <vTaskSwitchContext>
 800c014:	f04f 0000 	mov.w	r0, #0
 800c018:	f380 8811 	msr	BASEPRI, r0
 800c01c:	bc09      	pop	{r0, r3}
 800c01e:	6819      	ldr	r1, [r3, #0]
 800c020:	6808      	ldr	r0, [r1, #0]
 800c022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c026:	f01e 0f10 	tst.w	lr, #16
 800c02a:	bf08      	it	eq
 800c02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c030:	f380 8809 	msr	PSP, r0
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	f3af 8000 	nop.w

0800c040 <pxCurrentTCBConst>:
 800c040:	20002278 	.word	0x20002278
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop

0800c048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
        __asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	607b      	str	r3, [r7, #4]
    }
 800c060:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800c062:	f001 fd29 	bl	800dab8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800c066:	f7fe fa91 	bl	800a58c <xTaskIncrementTick>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d006      	beq.n	800c07e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800c070:	f001 fd80 	bl	800db74 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c074:	4b08      	ldr	r3, [pc, #32]	; (800c098 <SysTick_Handler+0x50>)
 800c076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	e001      	b.n	800c082 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800c07e:	f001 fd5d 	bl	800db3c <SEGGER_SYSVIEW_RecordExitISR>
 800c082:	2300      	movs	r3, #0
 800c084:	603b      	str	r3, [r7, #0]
        __asm volatile
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	f383 8811 	msr	BASEPRI, r3
    }
 800c08c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800c08e:	bf00      	nop
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	e000ed04 	.word	0xe000ed04

0800c09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0a0:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <vPortSetupTimerInterrupt+0x34>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0a6:	4b0b      	ldr	r3, [pc, #44]	; (800c0d4 <vPortSetupTimerInterrupt+0x38>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0ac:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <vPortSetupTimerInterrupt+0x3c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a0a      	ldr	r2, [pc, #40]	; (800c0dc <vPortSetupTimerInterrupt+0x40>)
 800c0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b6:	099b      	lsrs	r3, r3, #6
 800c0b8:	4a09      	ldr	r2, [pc, #36]	; (800c0e0 <vPortSetupTimerInterrupt+0x44>)
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0be:	4b04      	ldr	r3, [pc, #16]	; (800c0d0 <vPortSetupTimerInterrupt+0x34>)
 800c0c0:	2207      	movs	r2, #7
 800c0c2:	601a      	str	r2, [r3, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	e000e010 	.word	0xe000e010
 800c0d4:	e000e018 	.word	0xe000e018
 800c0d8:	20000000 	.word	0x20000000
 800c0dc:	10624dd3 	.word	0x10624dd3
 800c0e0:	e000e014 	.word	0xe000e014

0800c0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800c0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c0f4 <vPortEnableVFP+0x10>
 800c0e8:	6801      	ldr	r1, [r0, #0]
 800c0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c0ee:	6001      	str	r1, [r0, #0]
 800c0f0:	4770      	bx	lr
 800c0f2:	0000      	.short	0x0000
 800c0f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop

0800c0fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800c102:	f3ef 8305 	mrs	r3, IPSR
 800c106:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b0f      	cmp	r3, #15
 800c10c:	d914      	bls.n	800c138 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c10e:	4a17      	ldr	r2, [pc, #92]	; (800c16c <vPortValidateInterruptPriority+0x70>)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4413      	add	r3, r2
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c118:	4b15      	ldr	r3, [pc, #84]	; (800c170 <vPortValidateInterruptPriority+0x74>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	7afa      	ldrb	r2, [r7, #11]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d20a      	bcs.n	800c138 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	607b      	str	r3, [r7, #4]
    }
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c138:	4b0e      	ldr	r3, [pc, #56]	; (800c174 <vPortValidateInterruptPriority+0x78>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c140:	4b0d      	ldr	r3, [pc, #52]	; (800c178 <vPortValidateInterruptPriority+0x7c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d90a      	bls.n	800c15e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	603b      	str	r3, [r7, #0]
    }
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <vPortValidateInterruptPriority+0x60>
    }
 800c15e:	bf00      	nop
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	e000e3f0 	.word	0xe000e3f0
 800c170:	200023b8 	.word	0x200023b8
 800c174:	e000ed0c 	.word	0xe000ed0c
 800c178:	200023bc 	.word	0x200023bc

0800c17c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08a      	sub	sp, #40	; 0x28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800c184:	2300      	movs	r3, #0
 800c186:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800c188:	f7fe f93e 	bl	800a408 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800c18c:	4b65      	ldr	r3, [pc, #404]	; (800c324 <pvPortMalloc+0x1a8>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800c194:	f000 f934 	bl	800c400 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c198:	4b63      	ldr	r3, [pc, #396]	; (800c328 <pvPortMalloc+0x1ac>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4013      	ands	r3, r2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 80a7 	bne.w	800c2f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d02d      	beq.n	800c208 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d227      	bcs.n	800c208 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800c1b8:	2208      	movs	r2, #8
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4413      	add	r3, r2
 800c1be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f003 0307 	and.w	r3, r3, #7
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d021      	beq.n	800c20e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f023 0307 	bic.w	r3, r3, #7
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d214      	bcs.n	800c202 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f023 0307 	bic.w	r3, r3, #7
 800c1de:	3308      	adds	r3, #8
 800c1e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d010      	beq.n	800c20e <pvPortMalloc+0x92>
        __asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	617b      	str	r3, [r7, #20]
    }
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c206:	e002      	b.n	800c20e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	607b      	str	r3, [r7, #4]
 800c20c:	e000      	b.n	800c210 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c20e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d06e      	beq.n	800c2f4 <pvPortMalloc+0x178>
 800c216:	4b45      	ldr	r3, [pc, #276]	; (800c32c <pvPortMalloc+0x1b0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d869      	bhi.n	800c2f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800c220:	4b43      	ldr	r3, [pc, #268]	; (800c330 <pvPortMalloc+0x1b4>)
 800c222:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800c224:	4b42      	ldr	r3, [pc, #264]	; (800c330 <pvPortMalloc+0x1b4>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c22a:	e004      	b.n	800c236 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d903      	bls.n	800c248 <pvPortMalloc+0xcc>
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1f1      	bne.n	800c22c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800c248:	4b36      	ldr	r3, [pc, #216]	; (800c324 <pvPortMalloc+0x1a8>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c24e:	429a      	cmp	r2, r3
 800c250:	d050      	beq.n	800c2f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2208      	movs	r2, #8
 800c258:	4413      	add	r3, r2
 800c25a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	1ad2      	subs	r2, r2, r3
 800c26c:	2308      	movs	r3, #8
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	429a      	cmp	r2, r3
 800c272:	d91f      	bls.n	800c2b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4413      	add	r3, r2
 800c27a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	f003 0307 	and.w	r3, r3, #7
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <pvPortMalloc+0x120>
        __asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	613b      	str	r3, [r7, #16]
    }
 800c298:	bf00      	nop
 800c29a:	e7fe      	b.n	800c29a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	1ad2      	subs	r2, r2, r3
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2ae:	69b8      	ldr	r0, [r7, #24]
 800c2b0:	f000 f908 	bl	800c4c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2b4:	4b1d      	ldr	r3, [pc, #116]	; (800c32c <pvPortMalloc+0x1b0>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	4a1b      	ldr	r2, [pc, #108]	; (800c32c <pvPortMalloc+0x1b0>)
 800c2c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2c2:	4b1a      	ldr	r3, [pc, #104]	; (800c32c <pvPortMalloc+0x1b0>)
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	4b1b      	ldr	r3, [pc, #108]	; (800c334 <pvPortMalloc+0x1b8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d203      	bcs.n	800c2d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2ce:	4b17      	ldr	r3, [pc, #92]	; (800c32c <pvPortMalloc+0x1b0>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a18      	ldr	r2, [pc, #96]	; (800c334 <pvPortMalloc+0x1b8>)
 800c2d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	4b13      	ldr	r3, [pc, #76]	; (800c328 <pvPortMalloc+0x1ac>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800c2ea:	4b13      	ldr	r3, [pc, #76]	; (800c338 <pvPortMalloc+0x1bc>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	4a11      	ldr	r2, [pc, #68]	; (800c338 <pvPortMalloc+0x1bc>)
 800c2f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800c2f4:	f7fe f896 	bl	800a424 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00a      	beq.n	800c318 <pvPortMalloc+0x19c>
        __asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	60fb      	str	r3, [r7, #12]
    }
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <pvPortMalloc+0x19a>
    return pvReturn;
 800c318:	69fb      	ldr	r3, [r7, #28]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3728      	adds	r7, #40	; 0x28
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	20014fc8 	.word	0x20014fc8
 800c328:	20014fdc 	.word	0x20014fdc
 800c32c:	20014fcc 	.word	0x20014fcc
 800c330:	20014fc0 	.word	0x20014fc0
 800c334:	20014fd0 	.word	0x20014fd0
 800c338:	20014fd4 	.word	0x20014fd4

0800c33c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d04d      	beq.n	800c3ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800c34e:	2308      	movs	r3, #8
 800c350:	425b      	negs	r3, r3
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	4413      	add	r3, r2
 800c356:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	4b24      	ldr	r3, [pc, #144]	; (800c3f4 <vPortFree+0xb8>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4013      	ands	r3, r2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d10a      	bne.n	800c380 <vPortFree+0x44>
        __asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	60fb      	str	r3, [r7, #12]
    }
 800c37c:	bf00      	nop
 800c37e:	e7fe      	b.n	800c37e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00a      	beq.n	800c39e <vPortFree+0x62>
        __asm volatile
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	60bb      	str	r3, [r7, #8]
    }
 800c39a:	bf00      	nop
 800c39c:	e7fe      	b.n	800c39c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	685a      	ldr	r2, [r3, #4]
 800c3a2:	4b14      	ldr	r3, [pc, #80]	; (800c3f4 <vPortFree+0xb8>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d01e      	beq.n	800c3ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d11a      	bne.n	800c3ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <vPortFree+0xb8>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	43db      	mvns	r3, r3
 800c3be:	401a      	ands	r2, r3
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800c3c4:	f7fe f820 	bl	800a408 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <vPortFree+0xbc>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	4a09      	ldr	r2, [pc, #36]	; (800c3f8 <vPortFree+0xbc>)
 800c3d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3d6:	6938      	ldr	r0, [r7, #16]
 800c3d8:	f000 f874 	bl	800c4c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800c3dc:	4b07      	ldr	r3, [pc, #28]	; (800c3fc <vPortFree+0xc0>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	4a06      	ldr	r2, [pc, #24]	; (800c3fc <vPortFree+0xc0>)
 800c3e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800c3e6:	f7fe f81d 	bl	800a424 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800c3ea:	bf00      	nop
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20014fdc 	.word	0x20014fdc
 800c3f8:	20014fcc 	.word	0x20014fcc
 800c3fc:	20014fd8 	.word	0x20014fd8

0800c400 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c406:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800c40a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800c40c:	4b27      	ldr	r3, [pc, #156]	; (800c4ac <prvHeapInit+0xac>)
 800c40e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f003 0307 	and.w	r3, r3, #7
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00c      	beq.n	800c434 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3307      	adds	r3, #7
 800c41e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0307 	bic.w	r3, r3, #7
 800c426:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	4a1f      	ldr	r2, [pc, #124]	; (800c4ac <prvHeapInit+0xac>)
 800c430:	4413      	add	r3, r2
 800c432:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c438:	4a1d      	ldr	r2, [pc, #116]	; (800c4b0 <prvHeapInit+0xb0>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800c43e:	4b1c      	ldr	r3, [pc, #112]	; (800c4b0 <prvHeapInit+0xb0>)
 800c440:	2200      	movs	r2, #0
 800c442:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	4413      	add	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800c44c:	2208      	movs	r2, #8
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	1a9b      	subs	r3, r3, r2
 800c452:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f023 0307 	bic.w	r3, r3, #7
 800c45a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4a15      	ldr	r2, [pc, #84]	; (800c4b4 <prvHeapInit+0xb4>)
 800c460:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800c462:	4b14      	ldr	r3, [pc, #80]	; (800c4b4 <prvHeapInit+0xb4>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2200      	movs	r2, #0
 800c468:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800c46a:	4b12      	ldr	r3, [pc, #72]	; (800c4b4 <prvHeapInit+0xb4>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	1ad2      	subs	r2, r2, r3
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c480:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <prvHeapInit+0xb4>)
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	4a0a      	ldr	r2, [pc, #40]	; (800c4b8 <prvHeapInit+0xb8>)
 800c48e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	4a09      	ldr	r2, [pc, #36]	; (800c4bc <prvHeapInit+0xbc>)
 800c496:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c498:	4b09      	ldr	r3, [pc, #36]	; (800c4c0 <prvHeapInit+0xc0>)
 800c49a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c49e:	601a      	str	r2, [r3, #0]
}
 800c4a0:	bf00      	nop
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	200023c0 	.word	0x200023c0
 800c4b0:	20014fc0 	.word	0x20014fc0
 800c4b4:	20014fc8 	.word	0x20014fc8
 800c4b8:	20014fd0 	.word	0x20014fd0
 800c4bc:	20014fcc 	.word	0x20014fcc
 800c4c0:	20014fdc 	.word	0x20014fdc

0800c4c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4cc:	4b28      	ldr	r3, [pc, #160]	; (800c570 <prvInsertBlockIntoFreeList+0xac>)
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	e002      	b.n	800c4d8 <prvInsertBlockIntoFreeList+0x14>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d8f7      	bhi.n	800c4d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d108      	bne.n	800c506 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	441a      	add	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	441a      	add	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d118      	bne.n	800c54c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	4b15      	ldr	r3, [pc, #84]	; (800c574 <prvInsertBlockIntoFreeList+0xb0>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d00d      	beq.n	800c542 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	441a      	add	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	e008      	b.n	800c554 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c542:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <prvInsertBlockIntoFreeList+0xb0>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	e003      	b.n	800c554 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d002      	beq.n	800c562 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c562:	bf00      	nop
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	20014fc0 	.word	0x20014fc0
 800c574:	20014fc8 	.word	0x20014fc8

0800c578 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800c57e:	4b26      	ldr	r3, [pc, #152]	; (800c618 <_DoInit+0xa0>)
 800c580:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800c582:	22a8      	movs	r2, #168	; 0xa8
 800c584:	2100      	movs	r1, #0
 800c586:	6838      	ldr	r0, [r7, #0]
 800c588:	f001 ff30 	bl	800e3ec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2203      	movs	r2, #3
 800c590:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2203      	movs	r2, #3
 800c596:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	4a20      	ldr	r2, [pc, #128]	; (800c61c <_DoInit+0xa4>)
 800c59c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	4a1f      	ldr	r2, [pc, #124]	; (800c620 <_DoInit+0xa8>)
 800c5a2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5aa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	4a16      	ldr	r2, [pc, #88]	; (800c61c <_DoInit+0xa4>)
 800c5c2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	4a17      	ldr	r2, [pc, #92]	; (800c624 <_DoInit+0xac>)
 800c5c8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2210      	movs	r2, #16
 800c5ce:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800c5e2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	607b      	str	r3, [r7, #4]
 800c5ea:	e00c      	b.n	800c606 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f1c3 030f 	rsb	r3, r3, #15
 800c5f2:	4a0d      	ldr	r2, [pc, #52]	; (800c628 <_DoInit+0xb0>)
 800c5f4:	5cd1      	ldrb	r1, [r2, r3]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	460a      	mov	r2, r1
 800c5fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	3301      	adds	r3, #1
 800c604:	607b      	str	r3, [r7, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b0f      	cmp	r3, #15
 800c60a:	d9ef      	bls.n	800c5ec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800c60c:	f3bf 8f5f 	dmb	sy
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	20014fe0 	.word	0x20014fe0
 800c61c:	0800ef70 	.word	0x0800ef70
 800c620:	20015088 	.word	0x20015088
 800c624:	20015488 	.word	0x20015488
 800c628:	0800f048 	.word	0x0800f048

0800c62c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08c      	sub	sp, #48	; 0x30
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c638:	4b3e      	ldr	r3, [pc, #248]	; (800c734 <SEGGER_RTT_ReadNoLock+0x108>)
 800c63a:	623b      	str	r3, [r7, #32]
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <SEGGER_RTT_ReadNoLock+0x1e>
 800c646:	f7ff ff97 	bl	800c578 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	4613      	mov	r3, r2
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	4413      	add	r3, r2
 800c652:	00db      	lsls	r3, r3, #3
 800c654:	3360      	adds	r3, #96	; 0x60
 800c656:	4a37      	ldr	r2, [pc, #220]	; (800c734 <SEGGER_RTT_ReadNoLock+0x108>)
 800c658:	4413      	add	r3, r2
 800c65a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c66c:	2300      	movs	r3, #0
 800c66e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	429a      	cmp	r2, r3
 800c676:	d92b      	bls.n	800c6d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	689a      	ldr	r2, [r3, #8]
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4293      	cmp	r3, r2
 800c688:	bf28      	it	cs
 800c68a:	4613      	movcs	r3, r2
 800c68c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	4413      	add	r3, r2
 800c696:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	6939      	ldr	r1, [r7, #16]
 800c69c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c69e:	f001 fe97 	bl	800e3d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800c6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	4413      	add	r3, r2
 800c6c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d101      	bne.n	800c6d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	bf28      	it	cs
 800c6e0:	4613      	movcs	r3, r2
 800c6e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d019      	beq.n	800c71e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	4413      	add	r3, r2
 800c6f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	6939      	ldr	r1, [r7, #16]
 800c6f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6fa:	f001 fe69 	bl	800e3d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800c6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	4413      	add	r3, r2
 800c704:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	4413      	add	r3, r2
 800c70c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	4413      	add	r3, r2
 800c71c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800c71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c728:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3730      	adds	r7, #48	; 0x30
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20014fe0 	.word	0x20014fe0

0800c738 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
 800c744:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c746:	4b3d      	ldr	r3, [pc, #244]	; (800c83c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c748:	61bb      	str	r3, [r7, #24]
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d101      	bne.n	800c758 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c754:	f7ff ff10 	bl	800c578 <_DoInit>
  SEGGER_RTT_LOCK();
 800c758:	f3ef 8311 	mrs	r3, BASEPRI
 800c75c:	f04f 0120 	mov.w	r1, #32
 800c760:	f381 8811 	msr	BASEPRI, r1
 800c764:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c766:	4b35      	ldr	r3, [pc, #212]	; (800c83c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c768:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c76e:	6939      	ldr	r1, [r7, #16]
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	4613      	mov	r3, r2
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	4413      	add	r3, r2
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	440b      	add	r3, r1
 800c77e:	3304      	adds	r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	3301      	adds	r3, #1
 800c78a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	69fa      	ldr	r2, [r7, #28]
 800c792:	429a      	cmp	r2, r3
 800c794:	dbeb      	blt.n	800c76e <SEGGER_RTT_AllocUpBuffer+0x36>
 800c796:	e000      	b.n	800c79a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c798:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	69fa      	ldr	r2, [r7, #28]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	da3f      	bge.n	800c824 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c7a4:	6939      	ldr	r1, [r7, #16]
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	1c5a      	adds	r2, r3, #1
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	440b      	add	r3, r1
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c7b8:	6939      	ldr	r1, [r7, #16]
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	4613      	mov	r3, r2
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	4413      	add	r3, r2
 800c7c4:	00db      	lsls	r3, r3, #3
 800c7c6:	440b      	add	r3, r1
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c7ce:	6939      	ldr	r1, [r7, #16]
 800c7d0:	69fa      	ldr	r2, [r7, #28]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	4413      	add	r3, r2
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	440b      	add	r3, r1
 800c7dc:	3320      	adds	r3, #32
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c7e2:	6939      	ldr	r1, [r7, #16]
 800c7e4:	69fa      	ldr	r2, [r7, #28]
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	4413      	add	r3, r2
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	440b      	add	r3, r1
 800c7f0:	3328      	adds	r3, #40	; 0x28
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c7f6:	6939      	ldr	r1, [r7, #16]
 800c7f8:	69fa      	ldr	r2, [r7, #28]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	4413      	add	r3, r2
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	440b      	add	r3, r1
 800c804:	3324      	adds	r3, #36	; 0x24
 800c806:	2200      	movs	r2, #0
 800c808:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c80a:	6939      	ldr	r1, [r7, #16]
 800c80c:	69fa      	ldr	r2, [r7, #28]
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	332c      	adds	r3, #44	; 0x2c
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c81e:	f3bf 8f5f 	dmb	sy
 800c822:	e002      	b.n	800c82a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c824:	f04f 33ff 	mov.w	r3, #4294967295
 800c828:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c830:	69fb      	ldr	r3, [r7, #28]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20014fe0 	.word	0x20014fe0

0800c840 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c840:	b580      	push	{r7, lr}
 800c842:	b08a      	sub	sp, #40	; 0x28
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
 800c84c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800c84e:	4b21      	ldr	r3, [pc, #132]	; (800c8d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c850:	623b      	str	r3, [r7, #32]
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c85c:	f7ff fe8c 	bl	800c578 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c860:	4b1c      	ldr	r3, [pc, #112]	; (800c8d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c862:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2b02      	cmp	r3, #2
 800c868:	d82c      	bhi.n	800c8c4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800c86a:	f3ef 8311 	mrs	r3, BASEPRI
 800c86e:	f04f 0120 	mov.w	r1, #32
 800c872:	f381 8811 	msr	BASEPRI, r1
 800c876:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	3360      	adds	r3, #96	; 0x60
 800c884:	69fa      	ldr	r2, [r7, #28]
 800c886:	4413      	add	r3, r2
 800c888:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00e      	beq.n	800c8ae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8b2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c8b4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c8c2:	e002      	b.n	800c8ca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800c8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3728      	adds	r7, #40	; 0x28
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	20014fe0 	.word	0x20014fe0

0800c8d8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00f      	beq.n	800c90e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800c8ee:	e002      	b.n	800c8f6 <_EncodeStr+0x1e>
      Len++;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1f6      	bne.n	800c8f0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	429a      	cmp	r2, r3
 800c908:	d901      	bls.n	800c90e <_EncodeStr+0x36>
      Len = Limit;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	2bfe      	cmp	r3, #254	; 0xfe
 800c912:	d806      	bhi.n	800c922 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	60fa      	str	r2, [r7, #12]
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	701a      	strb	r2, [r3, #0]
 800c920:	e011      	b.n	800c946 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	60fa      	str	r2, [r7, #12]
 800c928:	22ff      	movs	r2, #255	; 0xff
 800c92a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	60fa      	str	r2, [r7, #12]
 800c932:	693a      	ldr	r2, [r7, #16]
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	0a19      	lsrs	r1, r3, #8
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	1c5a      	adds	r2, r3, #1
 800c940:	60fa      	str	r2, [r7, #12]
 800c942:	b2ca      	uxtb	r2, r1
 800c944:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c94a:	e00a      	b.n	800c962 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	1c53      	adds	r3, r2, #1
 800c950:	60bb      	str	r3, [r7, #8]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	1c59      	adds	r1, r3, #1
 800c956:	60f9      	str	r1, [r7, #12]
 800c958:	7812      	ldrb	r2, [r2, #0]
 800c95a:	701a      	strb	r2, [r3, #0]
    n++;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	3301      	adds	r3, #1
 800c960:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	429a      	cmp	r2, r3
 800c968:	d3f0      	bcc.n	800c94c <_EncodeStr+0x74>
  }
  return pPayload;
 800c96a:	68fb      	ldr	r3, [r7, #12]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	371c      	adds	r7, #28
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3307      	adds	r3, #7
}
 800c984:	4618      	mov	r0, r3
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c996:	4b35      	ldr	r3, [pc, #212]	; (800ca6c <_HandleIncomingPacket+0xdc>)
 800c998:	7e1b      	ldrb	r3, [r3, #24]
 800c99a:	4618      	mov	r0, r3
 800c99c:	1cfb      	adds	r3, r7, #3
 800c99e:	2201      	movs	r2, #1
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f7ff fe43 	bl	800c62c <SEGGER_RTT_ReadNoLock>
 800c9a6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d052      	beq.n	800ca54 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800c9ae:	78fb      	ldrb	r3, [r7, #3]
 800c9b0:	2b80      	cmp	r3, #128	; 0x80
 800c9b2:	d031      	beq.n	800ca18 <_HandleIncomingPacket+0x88>
 800c9b4:	2b80      	cmp	r3, #128	; 0x80
 800c9b6:	dc40      	bgt.n	800ca3a <_HandleIncomingPacket+0xaa>
 800c9b8:	2b07      	cmp	r3, #7
 800c9ba:	dc15      	bgt.n	800c9e8 <_HandleIncomingPacket+0x58>
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	dd3c      	ble.n	800ca3a <_HandleIncomingPacket+0xaa>
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	2b06      	cmp	r3, #6
 800c9c4:	d839      	bhi.n	800ca3a <_HandleIncomingPacket+0xaa>
 800c9c6:	a201      	add	r2, pc, #4	; (adr r2, 800c9cc <_HandleIncomingPacket+0x3c>)
 800c9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9cc:	0800c9ef 	.word	0x0800c9ef
 800c9d0:	0800c9f5 	.word	0x0800c9f5
 800c9d4:	0800c9fb 	.word	0x0800c9fb
 800c9d8:	0800ca01 	.word	0x0800ca01
 800c9dc:	0800ca07 	.word	0x0800ca07
 800c9e0:	0800ca0d 	.word	0x0800ca0d
 800c9e4:	0800ca13 	.word	0x0800ca13
 800c9e8:	2b7f      	cmp	r3, #127	; 0x7f
 800c9ea:	d035      	beq.n	800ca58 <_HandleIncomingPacket+0xc8>
 800c9ec:	e025      	b.n	800ca3a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c9ee:	f000 fd9b 	bl	800d528 <SEGGER_SYSVIEW_Start>
      break;
 800c9f2:	e036      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c9f4:	f000 fe52 	bl	800d69c <SEGGER_SYSVIEW_Stop>
      break;
 800c9f8:	e033      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c9fa:	f001 f82b 	bl	800da54 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c9fe:	e030      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800ca00:	f000 fff0 	bl	800d9e4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800ca04:	e02d      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800ca06:	f000 fe6f 	bl	800d6e8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800ca0a:	e02a      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800ca0c:	f001 fabe 	bl	800df8c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800ca10:	e027      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800ca12:	f001 fa9d 	bl	800df50 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800ca16:	e024      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ca18:	4b14      	ldr	r3, [pc, #80]	; (800ca6c <_HandleIncomingPacket+0xdc>)
 800ca1a:	7e1b      	ldrb	r3, [r3, #24]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	1cfb      	adds	r3, r7, #3
 800ca20:	2201      	movs	r2, #1
 800ca22:	4619      	mov	r1, r3
 800ca24:	f7ff fe02 	bl	800c62c <SEGGER_RTT_ReadNoLock>
 800ca28:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d015      	beq.n	800ca5c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800ca30:	78fb      	ldrb	r3, [r7, #3]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 fa0c 	bl	800de50 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800ca38:	e010      	b.n	800ca5c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800ca3a:	78fb      	ldrb	r3, [r7, #3]
 800ca3c:	b25b      	sxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da0e      	bge.n	800ca60 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ca42:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <_HandleIncomingPacket+0xdc>)
 800ca44:	7e1b      	ldrb	r3, [r3, #24]
 800ca46:	4618      	mov	r0, r3
 800ca48:	1cfb      	adds	r3, r7, #3
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f7ff fded 	bl	800c62c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800ca52:	e005      	b.n	800ca60 <_HandleIncomingPacket+0xd0>
    }
  }
 800ca54:	bf00      	nop
 800ca56:	e004      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
      break;
 800ca58:	bf00      	nop
 800ca5a:	e002      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
      break;
 800ca5c:	bf00      	nop
 800ca5e:	e000      	b.n	800ca62 <_HandleIncomingPacket+0xd2>
      break;
 800ca60:	bf00      	nop
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	200164a0 	.word	0x200164a0

0800ca70 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b08c      	sub	sp, #48	; 0x30
 800ca74:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800ca76:	2301      	movs	r3, #1
 800ca78:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800ca7a:	1d3b      	adds	r3, r7, #4
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca84:	4b31      	ldr	r3, [pc, #196]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800ca86:	695b      	ldr	r3, [r3, #20]
 800ca88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca8a:	e00b      	b.n	800caa4 <_TrySendOverflowPacket+0x34>
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	1c59      	adds	r1, r3, #1
 800ca94:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ca96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca9a:	b2d2      	uxtb	r2, r2
 800ca9c:	701a      	strb	r2, [r3, #0]
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	09db      	lsrs	r3, r3, #7
 800caa2:	62bb      	str	r3, [r7, #40]	; 0x28
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	2b7f      	cmp	r3, #127	; 0x7f
 800caa8:	d8f0      	bhi.n	800ca8c <_TrySendOverflowPacket+0x1c>
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab2:	b2d2      	uxtb	r2, r2
 800cab4:	701a      	strb	r2, [r3, #0]
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800caba:	4b25      	ldr	r3, [pc, #148]	; (800cb50 <_TrySendOverflowPacket+0xe0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800cac0:	4b22      	ldr	r3, [pc, #136]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	69ba      	ldr	r2, [r7, #24]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	623b      	str	r3, [r7, #32]
 800cad2:	e00b      	b.n	800caec <_TrySendOverflowPacket+0x7c>
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	1c59      	adds	r1, r3, #1
 800cadc:	6279      	str	r1, [r7, #36]	; 0x24
 800cade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cae2:	b2d2      	uxtb	r2, r2
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	09db      	lsrs	r3, r3, #7
 800caea:	623b      	str	r3, [r7, #32]
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	2b7f      	cmp	r3, #127	; 0x7f
 800caf0:	d8f0      	bhi.n	800cad4 <_TrySendOverflowPacket+0x64>
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1c5a      	adds	r2, r3, #1
 800caf6:	627a      	str	r2, [r7, #36]	; 0x24
 800caf8:	6a3a      	ldr	r2, [r7, #32]
 800cafa:	b2d2      	uxtb	r2, r2
 800cafc:	701a      	strb	r2, [r3, #0]
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800cb02:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800cb04:	785b      	ldrb	r3, [r3, #1]
 800cb06:	4618      	mov	r0, r3
 800cb08:	1d3b      	adds	r3, r7, #4
 800cb0a:	69fa      	ldr	r2, [r7, #28]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	461a      	mov	r2, r3
 800cb10:	1d3b      	adds	r3, r7, #4
 800cb12:	4619      	mov	r1, r3
 800cb14:	f7f3 fb6c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d009      	beq.n	800cb36 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800cb22:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800cb28:	4b08      	ldr	r3, [pc, #32]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	4b06      	ldr	r3, [pc, #24]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800cb32:	701a      	strb	r2, [r3, #0]
 800cb34:	e004      	b.n	800cb40 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800cb36:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	4a03      	ldr	r2, [pc, #12]	; (800cb4c <_TrySendOverflowPacket+0xdc>)
 800cb3e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800cb40:	693b      	ldr	r3, [r7, #16]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3730      	adds	r7, #48	; 0x30
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	200164a0 	.word	0x200164a0
 800cb50:	e0001004 	.word	0xe0001004

0800cb54 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08a      	sub	sp, #40	; 0x28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800cb60:	4b98      	ldr	r3, [pc, #608]	; (800cdc4 <_SendPacket+0x270>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d010      	beq.n	800cb8a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800cb68:	4b96      	ldr	r3, [pc, #600]	; (800cdc4 <_SendPacket+0x270>)
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 812d 	beq.w	800cdcc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800cb72:	4b94      	ldr	r3, [pc, #592]	; (800cdc4 <_SendPacket+0x270>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d109      	bne.n	800cb8e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800cb7a:	f7ff ff79 	bl	800ca70 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800cb7e:	4b91      	ldr	r3, [pc, #580]	; (800cdc4 <_SendPacket+0x270>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	f040 8124 	bne.w	800cdd0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800cb88:	e001      	b.n	800cb8e <_SendPacket+0x3a>
    goto Send;
 800cb8a:	bf00      	nop
 800cb8c:	e000      	b.n	800cb90 <_SendPacket+0x3c>
Send:
 800cb8e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b1f      	cmp	r3, #31
 800cb94:	d809      	bhi.n	800cbaa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800cb96:	4b8b      	ldr	r3, [pc, #556]	; (800cdc4 <_SendPacket+0x270>)
 800cb98:	69da      	ldr	r2, [r3, #28]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f040 8115 	bne.w	800cdd4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b17      	cmp	r3, #23
 800cbae:	d807      	bhi.n	800cbc0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	701a      	strb	r2, [r3, #0]
 800cbbe:	e0c4      	b.n	800cd4a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	2b7f      	cmp	r3, #127	; 0x7f
 800cbcc:	d912      	bls.n	800cbf4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	09da      	lsrs	r2, r3, #7
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	b2d2      	uxtb	r2, r2
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	3a01      	subs	r2, #1
 800cbe6:	60fa      	str	r2, [r7, #12]
 800cbe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbec:	b2da      	uxtb	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	e006      	b.n	800cc02 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	b2da      	uxtb	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b7e      	cmp	r3, #126	; 0x7e
 800cc06:	d807      	bhi.n	800cc18 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	701a      	strb	r2, [r3, #0]
 800cc16:	e098      	b.n	800cd4a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc1e:	d212      	bcs.n	800cc46 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	09da      	lsrs	r2, r3, #7
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	b2d2      	uxtb	r2, r2
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	3a01      	subs	r2, #1
 800cc38:	60fa      	str	r2, [r7, #12]
 800cc3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	701a      	strb	r2, [r3, #0]
 800cc44:	e081      	b.n	800cd4a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc4c:	d21d      	bcs.n	800cc8a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	0b9a      	lsrs	r2, r3, #14
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	60fb      	str	r3, [r7, #12]
 800cc58:	b2d2      	uxtb	r2, r2
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	09db      	lsrs	r3, r3, #7
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	3a01      	subs	r2, #1
 800cc68:	60fa      	str	r2, [r7, #12]
 800cc6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	3a01      	subs	r2, #1
 800cc7c:	60fa      	str	r2, [r7, #12]
 800cc7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	701a      	strb	r2, [r3, #0]
 800cc88:	e05f      	b.n	800cd4a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc90:	d228      	bcs.n	800cce4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	0d5a      	lsrs	r2, r3, #21
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	b2d2      	uxtb	r2, r2
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	0b9b      	lsrs	r3, r3, #14
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	3a01      	subs	r2, #1
 800ccac:	60fa      	str	r2, [r7, #12]
 800ccae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	09db      	lsrs	r3, r3, #7
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	3a01      	subs	r2, #1
 800ccc2:	60fa      	str	r2, [r7, #12]
 800ccc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	3a01      	subs	r2, #1
 800ccd6:	60fa      	str	r2, [r7, #12]
 800ccd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	701a      	strb	r2, [r3, #0]
 800cce2:	e032      	b.n	800cd4a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	0f1a      	lsrs	r2, r3, #28
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	b2d2      	uxtb	r2, r2
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	0d5b      	lsrs	r3, r3, #21
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	3a01      	subs	r2, #1
 800ccfe:	60fa      	str	r2, [r7, #12]
 800cd00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	0b9b      	lsrs	r3, r3, #14
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	3a01      	subs	r2, #1
 800cd14:	60fa      	str	r2, [r7, #12]
 800cd16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	09db      	lsrs	r3, r3, #7
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	3a01      	subs	r2, #1
 800cd2a:	60fa      	str	r2, [r7, #12]
 800cd2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	3a01      	subs	r2, #1
 800cd3e:	60fa      	str	r2, [r7, #12]
 800cd40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800cd4a:	4b1f      	ldr	r3, [pc, #124]	; (800cdc8 <_SendPacket+0x274>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800cd50:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <_SendPacket+0x270>)
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	623b      	str	r3, [r7, #32]
 800cd62:	e00b      	b.n	800cd7c <_SendPacket+0x228>
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	1c59      	adds	r1, r3, #1
 800cd6c:	6279      	str	r1, [r7, #36]	; 0x24
 800cd6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	701a      	strb	r2, [r3, #0]
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	09db      	lsrs	r3, r3, #7
 800cd7a:	623b      	str	r3, [r7, #32]
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	2b7f      	cmp	r3, #127	; 0x7f
 800cd80:	d8f0      	bhi.n	800cd64 <_SendPacket+0x210>
 800cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	627a      	str	r2, [r7, #36]	; 0x24
 800cd88:	6a3a      	ldr	r2, [r7, #32]
 800cd8a:	b2d2      	uxtb	r2, r2
 800cd8c:	701a      	strb	r2, [r3, #0]
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800cd92:	4b0c      	ldr	r3, [pc, #48]	; (800cdc4 <_SendPacket+0x270>)
 800cd94:	785b      	ldrb	r3, [r3, #1]
 800cd96:	4618      	mov	r0, r3
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	461a      	mov	r2, r3
 800cda0:	68f9      	ldr	r1, [r7, #12]
 800cda2:	f7f3 fa25 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800cda6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800cdae:	4a05      	ldr	r2, [pc, #20]	; (800cdc4 <_SendPacket+0x270>)
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	60d3      	str	r3, [r2, #12]
 800cdb4:	e00f      	b.n	800cdd6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800cdb6:	4b03      	ldr	r3, [pc, #12]	; (800cdc4 <_SendPacket+0x270>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	b2da      	uxtb	r2, r3
 800cdbe:	4b01      	ldr	r3, [pc, #4]	; (800cdc4 <_SendPacket+0x270>)
 800cdc0:	701a      	strb	r2, [r3, #0]
 800cdc2:	e008      	b.n	800cdd6 <_SendPacket+0x282>
 800cdc4:	200164a0 	.word	0x200164a0
 800cdc8:	e0001004 	.word	0xe0001004
    goto SendDone;
 800cdcc:	bf00      	nop
 800cdce:	e002      	b.n	800cdd6 <_SendPacket+0x282>
      goto SendDone;
 800cdd0:	bf00      	nop
 800cdd2:	e000      	b.n	800cdd6 <_SendPacket+0x282>
      goto SendDone;
 800cdd4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800cdd6:	4b14      	ldr	r3, [pc, #80]	; (800ce28 <_SendPacket+0x2d4>)
 800cdd8:	7e1b      	ldrb	r3, [r3, #24]
 800cdda:	4619      	mov	r1, r3
 800cddc:	4a13      	ldr	r2, [pc, #76]	; (800ce2c <_SendPacket+0x2d8>)
 800cdde:	460b      	mov	r3, r1
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	440b      	add	r3, r1
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	4413      	add	r3, r2
 800cde8:	336c      	adds	r3, #108	; 0x6c
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <_SendPacket+0x2d4>)
 800cdee:	7e1b      	ldrb	r3, [r3, #24]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	490e      	ldr	r1, [pc, #56]	; (800ce2c <_SendPacket+0x2d8>)
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4403      	add	r3, r0
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3370      	adds	r3, #112	; 0x70
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d00b      	beq.n	800ce1e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800ce06:	4b08      	ldr	r3, [pc, #32]	; (800ce28 <_SendPacket+0x2d4>)
 800ce08:	789b      	ldrb	r3, [r3, #2]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d107      	bne.n	800ce1e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800ce0e:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <_SendPacket+0x2d4>)
 800ce10:	2201      	movs	r2, #1
 800ce12:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800ce14:	f7ff fdbc 	bl	800c990 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800ce18:	4b03      	ldr	r3, [pc, #12]	; (800ce28 <_SendPacket+0x2d4>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800ce1e:	bf00      	nop
 800ce20:	3728      	adds	r7, #40	; 0x28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	200164a0 	.word	0x200164a0
 800ce2c:	20014fe0 	.word	0x20014fe0

0800ce30 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b0a2      	sub	sp, #136	; 0x88
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800ce46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800ce52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d01d      	beq.n	800ce96 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800ce5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce5e:	2b25      	cmp	r3, #37	; 0x25
 800ce60:	d1f1      	bne.n	800ce46 <_VPrintHost+0x16>
      c = *p;
 800ce62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	1d19      	adds	r1, r3, #4
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	6011      	str	r1, [r2, #0]
 800ce74:	6819      	ldr	r1, [r3, #0]
 800ce76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce80:	460a      	mov	r2, r1
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	3388      	adds	r3, #136	; 0x88
 800ce86:	443b      	add	r3, r7
 800ce88:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800ce8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce90:	2b10      	cmp	r3, #16
 800ce92:	d002      	beq.n	800ce9a <_VPrintHost+0x6a>
    c = *p++;
 800ce94:	e7d7      	b.n	800ce46 <_VPrintHost+0x16>
      break;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <_VPrintHost+0x6c>
        break;
 800ce9a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800ce9c:	f3ef 8311 	mrs	r3, BASEPRI
 800cea0:	f04f 0120 	mov.w	r1, #32
 800cea4:	f381 8811 	msr	BASEPRI, r1
 800cea8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ceaa:	483f      	ldr	r0, [pc, #252]	; (800cfa8 <_VPrintHost+0x178>)
 800ceac:	f7ff fd64 	bl	800c978 <_PreparePacket>
 800ceb0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ceb2:	2280      	movs	r2, #128	; 0x80
 800ceb4:	68f9      	ldr	r1, [r7, #12]
 800ceb6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ceb8:	f7ff fd0e 	bl	800c8d8 <_EncodeStr>
 800cebc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800cebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cec0:	677b      	str	r3, [r7, #116]	; 0x74
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	673b      	str	r3, [r7, #112]	; 0x70
 800cec6:	e00b      	b.n	800cee0 <_VPrintHost+0xb0>
 800cec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cece:	1c59      	adds	r1, r3, #1
 800ced0:	6779      	str	r1, [r7, #116]	; 0x74
 800ced2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ced6:	b2d2      	uxtb	r2, r2
 800ced8:	701a      	strb	r2, [r3, #0]
 800ceda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cedc:	09db      	lsrs	r3, r3, #7
 800cede:	673b      	str	r3, [r7, #112]	; 0x70
 800cee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cee2:	2b7f      	cmp	r3, #127	; 0x7f
 800cee4:	d8f0      	bhi.n	800cec8 <_VPrintHost+0x98>
 800cee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	677a      	str	r2, [r7, #116]	; 0x74
 800ceec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	701a      	strb	r2, [r3, #0]
 800cef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cef4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800cef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cefa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cefe:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf00:	e00b      	b.n	800cf1a <_VPrintHost+0xea>
 800cf02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf08:	1c59      	adds	r1, r3, #1
 800cf0a:	66f9      	str	r1, [r7, #108]	; 0x6c
 800cf0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf10:	b2d2      	uxtb	r2, r2
 800cf12:	701a      	strb	r2, [r3, #0]
 800cf14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf16:	09db      	lsrs	r3, r3, #7
 800cf18:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf1c:	2b7f      	cmp	r3, #127	; 0x7f
 800cf1e:	d8f0      	bhi.n	800cf02 <_VPrintHost+0xd2>
 800cf20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf22:	1c5a      	adds	r2, r3, #1
 800cf24:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf28:	b2d2      	uxtb	r2, r2
 800cf2a:	701a      	strb	r2, [r3, #0]
 800cf2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf2e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800cf30:	f107 0314 	add.w	r3, r7, #20
 800cf34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800cf38:	e022      	b.n	800cf80 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800cf3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf3c:	667b      	str	r3, [r7, #100]	; 0x64
 800cf3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	663b      	str	r3, [r7, #96]	; 0x60
 800cf46:	e00b      	b.n	800cf60 <_VPrintHost+0x130>
 800cf48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf4e:	1c59      	adds	r1, r3, #1
 800cf50:	6679      	str	r1, [r7, #100]	; 0x64
 800cf52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	701a      	strb	r2, [r3, #0]
 800cf5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf5c:	09db      	lsrs	r3, r3, #7
 800cf5e:	663b      	str	r3, [r7, #96]	; 0x60
 800cf60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf62:	2b7f      	cmp	r3, #127	; 0x7f
 800cf64:	d8f0      	bhi.n	800cf48 <_VPrintHost+0x118>
 800cf66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	667a      	str	r2, [r7, #100]	; 0x64
 800cf6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf6e:	b2d2      	uxtb	r2, r2
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf74:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800cf76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf7a:	3304      	adds	r3, #4
 800cf7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800cf80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf84:	1e5a      	subs	r2, r3, #1
 800cf86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1d5      	bne.n	800cf3a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800cf8e:	221a      	movs	r2, #26
 800cf90:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cf92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cf94:	f7ff fdde 	bl	800cb54 <_SendPacket>
    RECORD_END();
 800cf98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf9a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3788      	adds	r7, #136	; 0x88
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	200164d0 	.word	0x200164d0

0800cfac <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cfba:	2300      	movs	r3, #0
 800cfbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cfc0:	4917      	ldr	r1, [pc, #92]	; (800d020 <SEGGER_SYSVIEW_Init+0x74>)
 800cfc2:	4818      	ldr	r0, [pc, #96]	; (800d024 <SEGGER_SYSVIEW_Init+0x78>)
 800cfc4:	f7ff fbb8 	bl	800c738 <SEGGER_RTT_AllocUpBuffer>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	4b16      	ldr	r3, [pc, #88]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800cfce:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800cfd0:	4b15      	ldr	r3, [pc, #84]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800cfd2:	785a      	ldrb	r2, [r3, #1]
 800cfd4:	4b14      	ldr	r3, [pc, #80]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800cfd6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cfd8:	4b13      	ldr	r3, [pc, #76]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800cfda:	7e1b      	ldrb	r3, [r3, #24]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	2300      	movs	r3, #0
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	2308      	movs	r3, #8
 800cfe4:	4a11      	ldr	r2, [pc, #68]	; (800d02c <SEGGER_SYSVIEW_Init+0x80>)
 800cfe6:	490f      	ldr	r1, [pc, #60]	; (800d024 <SEGGER_SYSVIEW_Init+0x78>)
 800cfe8:	f7ff fc2a 	bl	800c840 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800cfec:	4b0e      	ldr	r3, [pc, #56]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800cff2:	4b0f      	ldr	r3, [pc, #60]	; (800d030 <SEGGER_SYSVIEW_Init+0x84>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a0c      	ldr	r2, [pc, #48]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800cff8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800cffa:	4a0b      	ldr	r2, [pc, #44]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800d000:	4a09      	ldr	r2, [pc, #36]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800d006:	4a08      	ldr	r2, [pc, #32]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800d00c:	4a06      	ldr	r2, [pc, #24]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800d012:	4b05      	ldr	r3, [pc, #20]	; (800d028 <SEGGER_SYSVIEW_Init+0x7c>)
 800d014:	2200      	movs	r2, #0
 800d016:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800d018:	bf00      	nop
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20015498 	.word	0x20015498
 800d024:	0800ef7c 	.word	0x0800ef7c
 800d028:	200164a0 	.word	0x200164a0
 800d02c:	20016498 	.word	0x20016498
 800d030:	e0001004 	.word	0xe0001004

0800d034 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800d03c:	4a04      	ldr	r2, [pc, #16]	; (800d050 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6113      	str	r3, [r2, #16]
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	200164a0 	.word	0x200164a0

0800d054 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d05c:	f3ef 8311 	mrs	r3, BASEPRI
 800d060:	f04f 0120 	mov.w	r1, #32
 800d064:	f381 8811 	msr	BASEPRI, r1
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	4808      	ldr	r0, [pc, #32]	; (800d08c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800d06c:	f7ff fc84 	bl	800c978 <_PreparePacket>
 800d070:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	68b9      	ldr	r1, [r7, #8]
 800d076:	68b8      	ldr	r0, [r7, #8]
 800d078:	f7ff fd6c 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f383 8811 	msr	BASEPRI, r3
}
 800d082:	bf00      	nop
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	200164d0 	.word	0x200164d0

0800d090 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d09a:	f3ef 8311 	mrs	r3, BASEPRI
 800d09e:	f04f 0120 	mov.w	r1, #32
 800d0a2:	f381 8811 	msr	BASEPRI, r1
 800d0a6:	617b      	str	r3, [r7, #20]
 800d0a8:	4816      	ldr	r0, [pc, #88]	; (800d104 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800d0aa:	f7ff fc65 	bl	800c978 <_PreparePacket>
 800d0ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	61bb      	str	r3, [r7, #24]
 800d0bc:	e00b      	b.n	800d0d6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	61f9      	str	r1, [r7, #28]
 800d0c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d0cc:	b2d2      	uxtb	r2, r2
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	09db      	lsrs	r3, r3, #7
 800d0d4:	61bb      	str	r3, [r7, #24]
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	2b7f      	cmp	r3, #127	; 0x7f
 800d0da:	d8f0      	bhi.n	800d0be <SEGGER_SYSVIEW_RecordU32+0x2e>
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	61fa      	str	r2, [r7, #28]
 800d0e2:	69ba      	ldr	r2, [r7, #24]
 800d0e4:	b2d2      	uxtb	r2, r2
 800d0e6:	701a      	strb	r2, [r3, #0]
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	68f9      	ldr	r1, [r7, #12]
 800d0f0:	6938      	ldr	r0, [r7, #16]
 800d0f2:	f7ff fd2f 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	f383 8811 	msr	BASEPRI, r3
}
 800d0fc:	bf00      	nop
 800d0fe:	3720      	adds	r7, #32
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200164d0 	.word	0x200164d0

0800d108 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08c      	sub	sp, #48	; 0x30
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d114:	f3ef 8311 	mrs	r3, BASEPRI
 800d118:	f04f 0120 	mov.w	r1, #32
 800d11c:	f381 8811 	msr	BASEPRI, r1
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	4825      	ldr	r0, [pc, #148]	; (800d1b8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800d124:	f7ff fc28 	bl	800c978 <_PreparePacket>
 800d128:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	62bb      	str	r3, [r7, #40]	; 0x28
 800d136:	e00b      	b.n	800d150 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	1c59      	adds	r1, r3, #1
 800d140:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d146:	b2d2      	uxtb	r2, r2
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14c:	09db      	lsrs	r3, r3, #7
 800d14e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	2b7f      	cmp	r3, #127	; 0x7f
 800d154:	d8f0      	bhi.n	800d138 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d15e:	b2d2      	uxtb	r2, r2
 800d160:	701a      	strb	r2, [r3, #0]
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	627b      	str	r3, [r7, #36]	; 0x24
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	623b      	str	r3, [r7, #32]
 800d16e:	e00b      	b.n	800d188 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	b2da      	uxtb	r2, r3
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	1c59      	adds	r1, r3, #1
 800d178:	6279      	str	r1, [r7, #36]	; 0x24
 800d17a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d17e:	b2d2      	uxtb	r2, r2
 800d180:	701a      	strb	r2, [r3, #0]
 800d182:	6a3b      	ldr	r3, [r7, #32]
 800d184:	09db      	lsrs	r3, r3, #7
 800d186:	623b      	str	r3, [r7, #32]
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	2b7f      	cmp	r3, #127	; 0x7f
 800d18c:	d8f0      	bhi.n	800d170 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	627a      	str	r2, [r7, #36]	; 0x24
 800d194:	6a3a      	ldr	r2, [r7, #32]
 800d196:	b2d2      	uxtb	r2, r2
 800d198:	701a      	strb	r2, [r3, #0]
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	6979      	ldr	r1, [r7, #20]
 800d1a2:	69b8      	ldr	r0, [r7, #24]
 800d1a4:	f7ff fcd6 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	f383 8811 	msr	BASEPRI, r3
}
 800d1ae:	bf00      	nop
 800d1b0:	3730      	adds	r7, #48	; 0x30
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	200164d0 	.word	0x200164d0

0800d1bc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b08e      	sub	sp, #56	; 0x38
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800d1ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d1ce:	f04f 0120 	mov.w	r1, #32
 800d1d2:	f381 8811 	msr	BASEPRI, r1
 800d1d6:	61fb      	str	r3, [r7, #28]
 800d1d8:	4832      	ldr	r0, [pc, #200]	; (800d2a4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800d1da:	f7ff fbcd 	bl	800c978 <_PreparePacket>
 800d1de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	633b      	str	r3, [r7, #48]	; 0x30
 800d1ec:	e00b      	b.n	800d206 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f4:	1c59      	adds	r1, r3, #1
 800d1f6:	6379      	str	r1, [r7, #52]	; 0x34
 800d1f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1fc:	b2d2      	uxtb	r2, r2
 800d1fe:	701a      	strb	r2, [r3, #0]
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	09db      	lsrs	r3, r3, #7
 800d204:	633b      	str	r3, [r7, #48]	; 0x30
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	2b7f      	cmp	r3, #127	; 0x7f
 800d20a:	d8f0      	bhi.n	800d1ee <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800d20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	637a      	str	r2, [r7, #52]	; 0x34
 800d212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d214:	b2d2      	uxtb	r2, r2
 800d216:	701a      	strb	r2, [r3, #0]
 800d218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d21a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	62bb      	str	r3, [r7, #40]	; 0x28
 800d224:	e00b      	b.n	800d23e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22c:	1c59      	adds	r1, r3, #1
 800d22e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d234:	b2d2      	uxtb	r2, r2
 800d236:	701a      	strb	r2, [r3, #0]
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	09db      	lsrs	r3, r3, #7
 800d23c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	2b7f      	cmp	r3, #127	; 0x7f
 800d242:	d8f0      	bhi.n	800d226 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	1c5a      	adds	r2, r3, #1
 800d248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d24c:	b2d2      	uxtb	r2, r2
 800d24e:	701a      	strb	r2, [r3, #0]
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	623b      	str	r3, [r7, #32]
 800d25c:	e00b      	b.n	800d276 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	b2da      	uxtb	r2, r3
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	1c59      	adds	r1, r3, #1
 800d266:	6279      	str	r1, [r7, #36]	; 0x24
 800d268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d26c:	b2d2      	uxtb	r2, r2
 800d26e:	701a      	strb	r2, [r3, #0]
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	09db      	lsrs	r3, r3, #7
 800d274:	623b      	str	r3, [r7, #32]
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	2b7f      	cmp	r3, #127	; 0x7f
 800d27a:	d8f0      	bhi.n	800d25e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	627a      	str	r2, [r7, #36]	; 0x24
 800d282:	6a3a      	ldr	r2, [r7, #32]
 800d284:	b2d2      	uxtb	r2, r2
 800d286:	701a      	strb	r2, [r3, #0]
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	6979      	ldr	r1, [r7, #20]
 800d290:	69b8      	ldr	r0, [r7, #24]
 800d292:	f7ff fc5f 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	f383 8811 	msr	BASEPRI, r3
}
 800d29c:	bf00      	nop
 800d29e:	3738      	adds	r7, #56	; 0x38
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	200164d0 	.word	0x200164d0

0800d2a8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b090      	sub	sp, #64	; 0x40
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d2b6:	f3ef 8311 	mrs	r3, BASEPRI
 800d2ba:	f04f 0120 	mov.w	r1, #32
 800d2be:	f381 8811 	msr	BASEPRI, r1
 800d2c2:	61fb      	str	r3, [r7, #28]
 800d2c4:	4840      	ldr	r0, [pc, #256]	; (800d3c8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800d2c6:	f7ff fb57 	bl	800c978 <_PreparePacket>
 800d2ca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2d8:	e00b      	b.n	800d2f2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800d2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e0:	1c59      	adds	r1, r3, #1
 800d2e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d2e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d2e8:	b2d2      	uxtb	r2, r2
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ee:	09db      	lsrs	r3, r3, #7
 800d2f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	2b7f      	cmp	r3, #127	; 0x7f
 800d2f6:	d8f0      	bhi.n	800d2da <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fa:	1c5a      	adds	r2, r3, #1
 800d2fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d300:	b2d2      	uxtb	r2, r2
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d306:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	637b      	str	r3, [r7, #52]	; 0x34
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	633b      	str	r3, [r7, #48]	; 0x30
 800d310:	e00b      	b.n	800d32a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	b2da      	uxtb	r2, r3
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	1c59      	adds	r1, r3, #1
 800d31a:	6379      	str	r1, [r7, #52]	; 0x34
 800d31c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d320:	b2d2      	uxtb	r2, r2
 800d322:	701a      	strb	r2, [r3, #0]
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	09db      	lsrs	r3, r3, #7
 800d328:	633b      	str	r3, [r7, #48]	; 0x30
 800d32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32c:	2b7f      	cmp	r3, #127	; 0x7f
 800d32e:	d8f0      	bhi.n	800d312 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800d330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	637a      	str	r2, [r7, #52]	; 0x34
 800d336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	701a      	strb	r2, [r3, #0]
 800d33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	62bb      	str	r3, [r7, #40]	; 0x28
 800d348:	e00b      	b.n	800d362 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	1c59      	adds	r1, r3, #1
 800d352:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d358:	b2d2      	uxtb	r2, r2
 800d35a:	701a      	strb	r2, [r3, #0]
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	09db      	lsrs	r3, r3, #7
 800d360:	62bb      	str	r3, [r7, #40]	; 0x28
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	2b7f      	cmp	r3, #127	; 0x7f
 800d366:	d8f0      	bhi.n	800d34a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d370:	b2d2      	uxtb	r2, r2
 800d372:	701a      	strb	r2, [r3, #0]
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	627b      	str	r3, [r7, #36]	; 0x24
 800d37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37e:	623b      	str	r3, [r7, #32]
 800d380:	e00b      	b.n	800d39a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	b2da      	uxtb	r2, r3
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	1c59      	adds	r1, r3, #1
 800d38a:	6279      	str	r1, [r7, #36]	; 0x24
 800d38c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d390:	b2d2      	uxtb	r2, r2
 800d392:	701a      	strb	r2, [r3, #0]
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	09db      	lsrs	r3, r3, #7
 800d398:	623b      	str	r3, [r7, #32]
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	2b7f      	cmp	r3, #127	; 0x7f
 800d39e:	d8f0      	bhi.n	800d382 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	1c5a      	adds	r2, r3, #1
 800d3a4:	627a      	str	r2, [r7, #36]	; 0x24
 800d3a6:	6a3a      	ldr	r2, [r7, #32]
 800d3a8:	b2d2      	uxtb	r2, r2
 800d3aa:	701a      	strb	r2, [r3, #0]
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	6979      	ldr	r1, [r7, #20]
 800d3b4:	69b8      	ldr	r0, [r7, #24]
 800d3b6:	f7ff fbcd 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	f383 8811 	msr	BASEPRI, r3
}
 800d3c0:	bf00      	nop
 800d3c2:	3740      	adds	r7, #64	; 0x40
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	200164d0 	.word	0x200164d0

0800d3cc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b092      	sub	sp, #72	; 0x48
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
 800d3d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800d3da:	f3ef 8311 	mrs	r3, BASEPRI
 800d3de:	f04f 0120 	mov.w	r1, #32
 800d3e2:	f381 8811 	msr	BASEPRI, r1
 800d3e6:	61fb      	str	r3, [r7, #28]
 800d3e8:	484e      	ldr	r0, [pc, #312]	; (800d524 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800d3ea:	f7ff fac5 	bl	800c978 <_PreparePacket>
 800d3ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	643b      	str	r3, [r7, #64]	; 0x40
 800d3fc:	e00b      	b.n	800d416 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800d3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d400:	b2da      	uxtb	r2, r3
 800d402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d404:	1c59      	adds	r1, r3, #1
 800d406:	6479      	str	r1, [r7, #68]	; 0x44
 800d408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d40c:	b2d2      	uxtb	r2, r2
 800d40e:	701a      	strb	r2, [r3, #0]
 800d410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d412:	09db      	lsrs	r3, r3, #7
 800d414:	643b      	str	r3, [r7, #64]	; 0x40
 800d416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d418:	2b7f      	cmp	r3, #127	; 0x7f
 800d41a:	d8f0      	bhi.n	800d3fe <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800d41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d41e:	1c5a      	adds	r2, r3, #1
 800d420:	647a      	str	r2, [r7, #68]	; 0x44
 800d422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d424:	b2d2      	uxtb	r2, r2
 800d426:	701a      	strb	r2, [r3, #0]
 800d428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	63bb      	str	r3, [r7, #56]	; 0x38
 800d434:	e00b      	b.n	800d44e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800d436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43c:	1c59      	adds	r1, r3, #1
 800d43e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d444:	b2d2      	uxtb	r2, r2
 800d446:	701a      	strb	r2, [r3, #0]
 800d448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44a:	09db      	lsrs	r3, r3, #7
 800d44c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d450:	2b7f      	cmp	r3, #127	; 0x7f
 800d452:	d8f0      	bhi.n	800d436 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800d454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d45a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d462:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	637b      	str	r3, [r7, #52]	; 0x34
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	633b      	str	r3, [r7, #48]	; 0x30
 800d46c:	e00b      	b.n	800d486 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	b2da      	uxtb	r2, r3
 800d472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d474:	1c59      	adds	r1, r3, #1
 800d476:	6379      	str	r1, [r7, #52]	; 0x34
 800d478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d47c:	b2d2      	uxtb	r2, r2
 800d47e:	701a      	strb	r2, [r3, #0]
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	09db      	lsrs	r3, r3, #7
 800d484:	633b      	str	r3, [r7, #48]	; 0x30
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	2b7f      	cmp	r3, #127	; 0x7f
 800d48a:	d8f0      	bhi.n	800d46e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800d48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	637a      	str	r2, [r7, #52]	; 0x34
 800d492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d494:	b2d2      	uxtb	r2, r2
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4a4:	e00b      	b.n	800d4be <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	b2da      	uxtb	r2, r3
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	1c59      	adds	r1, r3, #1
 800d4ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d4b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4b4:	b2d2      	uxtb	r2, r2
 800d4b6:	701a      	strb	r2, [r3, #0]
 800d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ba:	09db      	lsrs	r3, r3, #7
 800d4bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d4c2:	d8f0      	bhi.n	800d4a6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4da:	623b      	str	r3, [r7, #32]
 800d4dc:	e00b      	b.n	800d4f6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e4:	1c59      	adds	r1, r3, #1
 800d4e6:	6279      	str	r1, [r7, #36]	; 0x24
 800d4e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4ec:	b2d2      	uxtb	r2, r2
 800d4ee:	701a      	strb	r2, [r3, #0]
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	09db      	lsrs	r3, r3, #7
 800d4f4:	623b      	str	r3, [r7, #32]
 800d4f6:	6a3b      	ldr	r3, [r7, #32]
 800d4f8:	2b7f      	cmp	r3, #127	; 0x7f
 800d4fa:	d8f0      	bhi.n	800d4de <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	627a      	str	r2, [r7, #36]	; 0x24
 800d502:	6a3a      	ldr	r2, [r7, #32]
 800d504:	b2d2      	uxtb	r2, r2
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	6979      	ldr	r1, [r7, #20]
 800d510:	69b8      	ldr	r0, [r7, #24]
 800d512:	f7ff fb1f 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	f383 8811 	msr	BASEPRI, r3
}
 800d51c:	bf00      	nop
 800d51e:	3748      	adds	r7, #72	; 0x48
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	200164d0 	.word	0x200164d0

0800d528 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08c      	sub	sp, #48	; 0x30
 800d52c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800d52e:	4b58      	ldr	r3, [pc, #352]	; (800d690 <SEGGER_SYSVIEW_Start+0x168>)
 800d530:	2201      	movs	r2, #1
 800d532:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800d534:	f3ef 8311 	mrs	r3, BASEPRI
 800d538:	f04f 0120 	mov.w	r1, #32
 800d53c:	f381 8811 	msr	BASEPRI, r1
 800d540:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800d542:	4b53      	ldr	r3, [pc, #332]	; (800d690 <SEGGER_SYSVIEW_Start+0x168>)
 800d544:	785b      	ldrb	r3, [r3, #1]
 800d546:	220a      	movs	r2, #10
 800d548:	4952      	ldr	r1, [pc, #328]	; (800d694 <SEGGER_SYSVIEW_Start+0x16c>)
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7f2 fe50 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800d556:	200a      	movs	r0, #10
 800d558:	f7ff fd7c 	bl	800d054 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d55c:	f3ef 8311 	mrs	r3, BASEPRI
 800d560:	f04f 0120 	mov.w	r1, #32
 800d564:	f381 8811 	msr	BASEPRI, r1
 800d568:	60bb      	str	r3, [r7, #8]
 800d56a:	484b      	ldr	r0, [pc, #300]	; (800d698 <SEGGER_SYSVIEW_Start+0x170>)
 800d56c:	f7ff fa04 	bl	800c978 <_PreparePacket>
 800d570:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d57a:	4b45      	ldr	r3, [pc, #276]	; (800d690 <SEGGER_SYSVIEW_Start+0x168>)
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d580:	e00b      	b.n	800d59a <SEGGER_SYSVIEW_Start+0x72>
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	b2da      	uxtb	r2, r3
 800d586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d588:	1c59      	adds	r1, r3, #1
 800d58a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d58c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d590:	b2d2      	uxtb	r2, r2
 800d592:	701a      	strb	r2, [r3, #0]
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	09db      	lsrs	r3, r3, #7
 800d598:	62bb      	str	r3, [r7, #40]	; 0x28
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	2b7f      	cmp	r3, #127	; 0x7f
 800d59e:	d8f0      	bhi.n	800d582 <SEGGER_SYSVIEW_Start+0x5a>
 800d5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a2:	1c5a      	adds	r2, r3, #1
 800d5a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a8:	b2d2      	uxtb	r2, r2
 800d5aa:	701a      	strb	r2, [r3, #0]
 800d5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d5b4:	4b36      	ldr	r3, [pc, #216]	; (800d690 <SEGGER_SYSVIEW_Start+0x168>)
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	623b      	str	r3, [r7, #32]
 800d5ba:	e00b      	b.n	800d5d4 <SEGGER_SYSVIEW_Start+0xac>
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	1c59      	adds	r1, r3, #1
 800d5c4:	6279      	str	r1, [r7, #36]	; 0x24
 800d5c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d5ca:	b2d2      	uxtb	r2, r2
 800d5cc:	701a      	strb	r2, [r3, #0]
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	09db      	lsrs	r3, r3, #7
 800d5d2:	623b      	str	r3, [r7, #32]
 800d5d4:	6a3b      	ldr	r3, [r7, #32]
 800d5d6:	2b7f      	cmp	r3, #127	; 0x7f
 800d5d8:	d8f0      	bhi.n	800d5bc <SEGGER_SYSVIEW_Start+0x94>
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	1c5a      	adds	r2, r3, #1
 800d5de:	627a      	str	r2, [r7, #36]	; 0x24
 800d5e0:	6a3a      	ldr	r2, [r7, #32]
 800d5e2:	b2d2      	uxtb	r2, r2
 800d5e4:	701a      	strb	r2, [r3, #0]
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	61fb      	str	r3, [r7, #28]
 800d5ee:	4b28      	ldr	r3, [pc, #160]	; (800d690 <SEGGER_SYSVIEW_Start+0x168>)
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	61bb      	str	r3, [r7, #24]
 800d5f4:	e00b      	b.n	800d60e <SEGGER_SYSVIEW_Start+0xe6>
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	1c59      	adds	r1, r3, #1
 800d5fe:	61f9      	str	r1, [r7, #28]
 800d600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d604:	b2d2      	uxtb	r2, r2
 800d606:	701a      	strb	r2, [r3, #0]
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	09db      	lsrs	r3, r3, #7
 800d60c:	61bb      	str	r3, [r7, #24]
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	2b7f      	cmp	r3, #127	; 0x7f
 800d612:	d8f0      	bhi.n	800d5f6 <SEGGER_SYSVIEW_Start+0xce>
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	1c5a      	adds	r2, r3, #1
 800d618:	61fa      	str	r2, [r7, #28]
 800d61a:	69ba      	ldr	r2, [r7, #24]
 800d61c:	b2d2      	uxtb	r2, r2
 800d61e:	701a      	strb	r2, [r3, #0]
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	617b      	str	r3, [r7, #20]
 800d628:	2300      	movs	r3, #0
 800d62a:	613b      	str	r3, [r7, #16]
 800d62c:	e00b      	b.n	800d646 <SEGGER_SYSVIEW_Start+0x11e>
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	b2da      	uxtb	r2, r3
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	1c59      	adds	r1, r3, #1
 800d636:	6179      	str	r1, [r7, #20]
 800d638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d63c:	b2d2      	uxtb	r2, r2
 800d63e:	701a      	strb	r2, [r3, #0]
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	09db      	lsrs	r3, r3, #7
 800d644:	613b      	str	r3, [r7, #16]
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	2b7f      	cmp	r3, #127	; 0x7f
 800d64a:	d8f0      	bhi.n	800d62e <SEGGER_SYSVIEW_Start+0x106>
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	617a      	str	r2, [r7, #20]
 800d652:	693a      	ldr	r2, [r7, #16]
 800d654:	b2d2      	uxtb	r2, r2
 800d656:	701a      	strb	r2, [r3, #0]
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d65c:	2218      	movs	r2, #24
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff fa77 	bl	800cb54 <_SendPacket>
      RECORD_END();
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d66c:	4b08      	ldr	r3, [pc, #32]	; (800d690 <SEGGER_SYSVIEW_Start+0x168>)
 800d66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d670:	2b00      	cmp	r3, #0
 800d672:	d002      	beq.n	800d67a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800d674:	4b06      	ldr	r3, [pc, #24]	; (800d690 <SEGGER_SYSVIEW_Start+0x168>)
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800d67a:	f000 f9eb 	bl	800da54 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800d67e:	f000 f9b1 	bl	800d9e4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800d682:	f000 fc83 	bl	800df8c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800d686:	bf00      	nop
 800d688:	3730      	adds	r7, #48	; 0x30
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	200164a0 	.word	0x200164a0
 800d694:	0800f05c 	.word	0x0800f05c
 800d698:	200164d0 	.word	0x200164d0

0800d69c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d6a2:	f3ef 8311 	mrs	r3, BASEPRI
 800d6a6:	f04f 0120 	mov.w	r1, #32
 800d6aa:	f381 8811 	msr	BASEPRI, r1
 800d6ae:	607b      	str	r3, [r7, #4]
 800d6b0:	480b      	ldr	r0, [pc, #44]	; (800d6e0 <SEGGER_SYSVIEW_Stop+0x44>)
 800d6b2:	f7ff f961 	bl	800c978 <_PreparePacket>
 800d6b6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800d6b8:	4b0a      	ldr	r3, [pc, #40]	; (800d6e4 <SEGGER_SYSVIEW_Stop+0x48>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d007      	beq.n	800d6d0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800d6c0:	220b      	movs	r2, #11
 800d6c2:	6839      	ldr	r1, [r7, #0]
 800d6c4:	6838      	ldr	r0, [r7, #0]
 800d6c6:	f7ff fa45 	bl	800cb54 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800d6ca:	4b06      	ldr	r3, [pc, #24]	; (800d6e4 <SEGGER_SYSVIEW_Stop+0x48>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f383 8811 	msr	BASEPRI, r3
}
 800d6d6:	bf00      	nop
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	200164d0 	.word	0x200164d0
 800d6e4:	200164a0 	.word	0x200164a0

0800d6e8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08c      	sub	sp, #48	; 0x30
 800d6ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d6ee:	f3ef 8311 	mrs	r3, BASEPRI
 800d6f2:	f04f 0120 	mov.w	r1, #32
 800d6f6:	f381 8811 	msr	BASEPRI, r1
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	4845      	ldr	r0, [pc, #276]	; (800d814 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800d6fe:	f7ff f93b 	bl	800c978 <_PreparePacket>
 800d702:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d70c:	4b42      	ldr	r3, [pc, #264]	; (800d818 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	62bb      	str	r3, [r7, #40]	; 0x28
 800d712:	e00b      	b.n	800d72c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	b2da      	uxtb	r2, r3
 800d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71a:	1c59      	adds	r1, r3, #1
 800d71c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d71e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	701a      	strb	r2, [r3, #0]
 800d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d728:	09db      	lsrs	r3, r3, #7
 800d72a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	2b7f      	cmp	r3, #127	; 0x7f
 800d730:	d8f0      	bhi.n	800d714 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800d732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d73a:	b2d2      	uxtb	r2, r2
 800d73c:	701a      	strb	r2, [r3, #0]
 800d73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d740:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	627b      	str	r3, [r7, #36]	; 0x24
 800d746:	4b34      	ldr	r3, [pc, #208]	; (800d818 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	623b      	str	r3, [r7, #32]
 800d74c:	e00b      	b.n	800d766 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	b2da      	uxtb	r2, r3
 800d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d754:	1c59      	adds	r1, r3, #1
 800d756:	6279      	str	r1, [r7, #36]	; 0x24
 800d758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d75c:	b2d2      	uxtb	r2, r2
 800d75e:	701a      	strb	r2, [r3, #0]
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	09db      	lsrs	r3, r3, #7
 800d764:	623b      	str	r3, [r7, #32]
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	2b7f      	cmp	r3, #127	; 0x7f
 800d76a:	d8f0      	bhi.n	800d74e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	627a      	str	r2, [r7, #36]	; 0x24
 800d772:	6a3a      	ldr	r2, [r7, #32]
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	701a      	strb	r2, [r3, #0]
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	61fb      	str	r3, [r7, #28]
 800d780:	4b25      	ldr	r3, [pc, #148]	; (800d818 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d782:	691b      	ldr	r3, [r3, #16]
 800d784:	61bb      	str	r3, [r7, #24]
 800d786:	e00b      	b.n	800d7a0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	1c59      	adds	r1, r3, #1
 800d790:	61f9      	str	r1, [r7, #28]
 800d792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d796:	b2d2      	uxtb	r2, r2
 800d798:	701a      	strb	r2, [r3, #0]
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	09db      	lsrs	r3, r3, #7
 800d79e:	61bb      	str	r3, [r7, #24]
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	2b7f      	cmp	r3, #127	; 0x7f
 800d7a4:	d8f0      	bhi.n	800d788 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	1c5a      	adds	r2, r3, #1
 800d7aa:	61fa      	str	r2, [r7, #28]
 800d7ac:	69ba      	ldr	r2, [r7, #24]
 800d7ae:	b2d2      	uxtb	r2, r2
 800d7b0:	701a      	strb	r2, [r3, #0]
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	617b      	str	r3, [r7, #20]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	613b      	str	r3, [r7, #16]
 800d7be:	e00b      	b.n	800d7d8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	1c59      	adds	r1, r3, #1
 800d7c8:	6179      	str	r1, [r7, #20]
 800d7ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d7ce:	b2d2      	uxtb	r2, r2
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	09db      	lsrs	r3, r3, #7
 800d7d6:	613b      	str	r3, [r7, #16]
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	2b7f      	cmp	r3, #127	; 0x7f
 800d7dc:	d8f0      	bhi.n	800d7c0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	617a      	str	r2, [r7, #20]
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	b2d2      	uxtb	r2, r2
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d7ee:	2218      	movs	r2, #24
 800d7f0:	6879      	ldr	r1, [r7, #4]
 800d7f2:	68b8      	ldr	r0, [r7, #8]
 800d7f4:	f7ff f9ae 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d7fe:	4b06      	ldr	r3, [pc, #24]	; (800d818 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d806:	4b04      	ldr	r3, [pc, #16]	; (800d818 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80a:	4798      	blx	r3
  }
}
 800d80c:	bf00      	nop
 800d80e:	3730      	adds	r7, #48	; 0x30
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	200164d0 	.word	0x200164d0
 800d818:	200164a0 	.word	0x200164a0

0800d81c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b092      	sub	sp, #72	; 0x48
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d824:	f3ef 8311 	mrs	r3, BASEPRI
 800d828:	f04f 0120 	mov.w	r1, #32
 800d82c:	f381 8811 	msr	BASEPRI, r1
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	486a      	ldr	r0, [pc, #424]	; (800d9dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d834:	f7ff f8a0 	bl	800c978 <_PreparePacket>
 800d838:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	647b      	str	r3, [r7, #68]	; 0x44
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	4b66      	ldr	r3, [pc, #408]	; (800d9e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	643b      	str	r3, [r7, #64]	; 0x40
 800d84e:	e00b      	b.n	800d868 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d852:	b2da      	uxtb	r2, r3
 800d854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d856:	1c59      	adds	r1, r3, #1
 800d858:	6479      	str	r1, [r7, #68]	; 0x44
 800d85a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d85e:	b2d2      	uxtb	r2, r2
 800d860:	701a      	strb	r2, [r3, #0]
 800d862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d864:	09db      	lsrs	r3, r3, #7
 800d866:	643b      	str	r3, [r7, #64]	; 0x40
 800d868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d86a:	2b7f      	cmp	r3, #127	; 0x7f
 800d86c:	d8f0      	bhi.n	800d850 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	647a      	str	r2, [r7, #68]	; 0x44
 800d874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	701a      	strb	r2, [r3, #0]
 800d87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d87c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	63bb      	str	r3, [r7, #56]	; 0x38
 800d888:	e00b      	b.n	800d8a2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d890:	1c59      	adds	r1, r3, #1
 800d892:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d898:	b2d2      	uxtb	r2, r2
 800d89a:	701a      	strb	r2, [r3, #0]
 800d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89e:	09db      	lsrs	r3, r3, #7
 800d8a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a4:	2b7f      	cmp	r3, #127	; 0x7f
 800d8a6:	d8f0      	bhi.n	800d88a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8aa:	1c5a      	adds	r2, r3, #1
 800d8ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d8ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8b0:	b2d2      	uxtb	r2, r2
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	2220      	movs	r2, #32
 800d8be:	4619      	mov	r1, r3
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7ff f809 	bl	800c8d8 <_EncodeStr>
 800d8c6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d8c8:	2209      	movs	r2, #9
 800d8ca:	68f9      	ldr	r1, [r7, #12]
 800d8cc:	6938      	ldr	r0, [r7, #16]
 800d8ce:	f7ff f941 	bl	800cb54 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4b40      	ldr	r3, [pc, #256]	; (800d9e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	633b      	str	r3, [r7, #48]	; 0x30
 800d8e6:	e00b      	b.n	800d900 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ee:	1c59      	adds	r1, r3, #1
 800d8f0:	6379      	str	r1, [r7, #52]	; 0x34
 800d8f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d8f6:	b2d2      	uxtb	r2, r2
 800d8f8:	701a      	strb	r2, [r3, #0]
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	09db      	lsrs	r3, r3, #7
 800d8fe:	633b      	str	r3, [r7, #48]	; 0x30
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	2b7f      	cmp	r3, #127	; 0x7f
 800d904:	d8f0      	bhi.n	800d8e8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d908:	1c5a      	adds	r2, r3, #1
 800d90a:	637a      	str	r2, [r7, #52]	; 0x34
 800d90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d90e:	b2d2      	uxtb	r2, r2
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d914:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d920:	e00b      	b.n	800d93a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	b2da      	uxtb	r2, r3
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	1c59      	adds	r1, r3, #1
 800d92a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d92c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d930:	b2d2      	uxtb	r2, r2
 800d932:	701a      	strb	r2, [r3, #0]
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	09db      	lsrs	r3, r3, #7
 800d938:	62bb      	str	r3, [r7, #40]	; 0x28
 800d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93c:	2b7f      	cmp	r3, #127	; 0x7f
 800d93e:	d8f0      	bhi.n	800d922 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	1c5a      	adds	r2, r3, #1
 800d944:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d948:	b2d2      	uxtb	r2, r2
 800d94a:	701a      	strb	r2, [r3, #0]
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	623b      	str	r3, [r7, #32]
 800d95a:	e00b      	b.n	800d974 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d95c:	6a3b      	ldr	r3, [r7, #32]
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	1c59      	adds	r1, r3, #1
 800d964:	6279      	str	r1, [r7, #36]	; 0x24
 800d966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	701a      	strb	r2, [r3, #0]
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	09db      	lsrs	r3, r3, #7
 800d972:	623b      	str	r3, [r7, #32]
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	2b7f      	cmp	r3, #127	; 0x7f
 800d978:	d8f0      	bhi.n	800d95c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	627a      	str	r2, [r7, #36]	; 0x24
 800d980:	6a3a      	ldr	r2, [r7, #32]
 800d982:	b2d2      	uxtb	r2, r2
 800d984:	701a      	strb	r2, [r3, #0]
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	61fb      	str	r3, [r7, #28]
 800d98e:	2300      	movs	r3, #0
 800d990:	61bb      	str	r3, [r7, #24]
 800d992:	e00b      	b.n	800d9ac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	b2da      	uxtb	r2, r3
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	1c59      	adds	r1, r3, #1
 800d99c:	61f9      	str	r1, [r7, #28]
 800d99e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d9a2:	b2d2      	uxtb	r2, r2
 800d9a4:	701a      	strb	r2, [r3, #0]
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	09db      	lsrs	r3, r3, #7
 800d9aa:	61bb      	str	r3, [r7, #24]
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	2b7f      	cmp	r3, #127	; 0x7f
 800d9b0:	d8f0      	bhi.n	800d994 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	1c5a      	adds	r2, r3, #1
 800d9b6:	61fa      	str	r2, [r7, #28]
 800d9b8:	69ba      	ldr	r2, [r7, #24]
 800d9ba:	b2d2      	uxtb	r2, r2
 800d9bc:	701a      	strb	r2, [r3, #0]
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d9c2:	2215      	movs	r2, #21
 800d9c4:	68f9      	ldr	r1, [r7, #12]
 800d9c6:	6938      	ldr	r0, [r7, #16]
 800d9c8:	f7ff f8c4 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f383 8811 	msr	BASEPRI, r3
}
 800d9d2:	bf00      	nop
 800d9d4:	3748      	adds	r7, #72	; 0x48
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	200164d0 	.word	0x200164d0
 800d9e0:	200164a0 	.word	0x200164a0

0800d9e4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d9e8:	4b07      	ldr	r3, [pc, #28]	; (800da08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d9ea:	6a1b      	ldr	r3, [r3, #32]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d008      	beq.n	800da02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d9f0:	4b05      	ldr	r3, [pc, #20]	; (800da08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d9f2:	6a1b      	ldr	r3, [r3, #32]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d9fa:	4b03      	ldr	r3, [pc, #12]	; (800da08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	4798      	blx	r3
  }
}
 800da02:	bf00      	nop
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	200164a0 	.word	0x200164a0

0800da0c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800da14:	f3ef 8311 	mrs	r3, BASEPRI
 800da18:	f04f 0120 	mov.w	r1, #32
 800da1c:	f381 8811 	msr	BASEPRI, r1
 800da20:	617b      	str	r3, [r7, #20]
 800da22:	480b      	ldr	r0, [pc, #44]	; (800da50 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800da24:	f7fe ffa8 	bl	800c978 <_PreparePacket>
 800da28:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800da2a:	2280      	movs	r2, #128	; 0x80
 800da2c:	6879      	ldr	r1, [r7, #4]
 800da2e:	6938      	ldr	r0, [r7, #16]
 800da30:	f7fe ff52 	bl	800c8d8 <_EncodeStr>
 800da34:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800da36:	220e      	movs	r2, #14
 800da38:	68f9      	ldr	r1, [r7, #12]
 800da3a:	6938      	ldr	r0, [r7, #16]
 800da3c:	f7ff f88a 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	f383 8811 	msr	BASEPRI, r3
}
 800da46:	bf00      	nop
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	200164d0 	.word	0x200164d0

0800da54 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800da54:	b590      	push	{r4, r7, lr}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800da5a:	4b15      	ldr	r3, [pc, #84]	; (800dab0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d01a      	beq.n	800da98 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800da62:	4b13      	ldr	r3, [pc, #76]	; (800dab0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800da64:	6a1b      	ldr	r3, [r3, #32]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d015      	beq.n	800da98 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800da6c:	4b10      	ldr	r3, [pc, #64]	; (800dab0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800da6e:	6a1b      	ldr	r3, [r3, #32]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4798      	blx	r3
 800da74:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800da78:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800da7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da7e:	f04f 0200 	mov.w	r2, #0
 800da82:	f04f 0300 	mov.w	r3, #0
 800da86:	000a      	movs	r2, r1
 800da88:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800da8a:	4613      	mov	r3, r2
 800da8c:	461a      	mov	r2, r3
 800da8e:	4621      	mov	r1, r4
 800da90:	200d      	movs	r0, #13
 800da92:	f7ff fb39 	bl	800d108 <SEGGER_SYSVIEW_RecordU32x2>
 800da96:	e006      	b.n	800daa6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800da98:	4b06      	ldr	r3, [pc, #24]	; (800dab4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4619      	mov	r1, r3
 800da9e:	200c      	movs	r0, #12
 800daa0:	f7ff faf6 	bl	800d090 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd90      	pop	{r4, r7, pc}
 800daae:	bf00      	nop
 800dab0:	200164a0 	.word	0x200164a0
 800dab4:	e0001004 	.word	0xe0001004

0800dab8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800dabe:	f3ef 8311 	mrs	r3, BASEPRI
 800dac2:	f04f 0120 	mov.w	r1, #32
 800dac6:	f381 8811 	msr	BASEPRI, r1
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	4819      	ldr	r0, [pc, #100]	; (800db34 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800dace:	f7fe ff53 	bl	800c978 <_PreparePacket>
 800dad2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800dad8:	4b17      	ldr	r3, [pc, #92]	; (800db38 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dae0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	617b      	str	r3, [r7, #20]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	613b      	str	r3, [r7, #16]
 800daea:	e00b      	b.n	800db04 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	1c59      	adds	r1, r3, #1
 800daf4:	6179      	str	r1, [r7, #20]
 800daf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dafa:	b2d2      	uxtb	r2, r2
 800dafc:	701a      	strb	r2, [r3, #0]
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	09db      	lsrs	r3, r3, #7
 800db02:	613b      	str	r3, [r7, #16]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	2b7f      	cmp	r3, #127	; 0x7f
 800db08:	d8f0      	bhi.n	800daec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	1c5a      	adds	r2, r3, #1
 800db0e:	617a      	str	r2, [r7, #20]
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	b2d2      	uxtb	r2, r2
 800db14:	701a      	strb	r2, [r3, #0]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800db1a:	2202      	movs	r2, #2
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	68b8      	ldr	r0, [r7, #8]
 800db20:	f7ff f818 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f383 8811 	msr	BASEPRI, r3
}
 800db2a:	bf00      	nop
 800db2c:	3718      	adds	r7, #24
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200164d0 	.word	0x200164d0
 800db38:	e000ed04 	.word	0xe000ed04

0800db3c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800db42:	f3ef 8311 	mrs	r3, BASEPRI
 800db46:	f04f 0120 	mov.w	r1, #32
 800db4a:	f381 8811 	msr	BASEPRI, r1
 800db4e:	607b      	str	r3, [r7, #4]
 800db50:	4807      	ldr	r0, [pc, #28]	; (800db70 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800db52:	f7fe ff11 	bl	800c978 <_PreparePacket>
 800db56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800db58:	2203      	movs	r2, #3
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6838      	ldr	r0, [r7, #0]
 800db5e:	f7fe fff9 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f383 8811 	msr	BASEPRI, r3
}
 800db68:	bf00      	nop
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	200164d0 	.word	0x200164d0

0800db74 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800db7a:	f3ef 8311 	mrs	r3, BASEPRI
 800db7e:	f04f 0120 	mov.w	r1, #32
 800db82:	f381 8811 	msr	BASEPRI, r1
 800db86:	607b      	str	r3, [r7, #4]
 800db88:	4807      	ldr	r0, [pc, #28]	; (800dba8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800db8a:	f7fe fef5 	bl	800c978 <_PreparePacket>
 800db8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800db90:	2212      	movs	r2, #18
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6838      	ldr	r0, [r7, #0]
 800db96:	f7fe ffdd 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f383 8811 	msr	BASEPRI, r3
}
 800dba0:	bf00      	nop
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	200164d0 	.word	0x200164d0

0800dbac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800dbb2:	f3ef 8311 	mrs	r3, BASEPRI
 800dbb6:	f04f 0120 	mov.w	r1, #32
 800dbba:	f381 8811 	msr	BASEPRI, r1
 800dbbe:	607b      	str	r3, [r7, #4]
 800dbc0:	4807      	ldr	r0, [pc, #28]	; (800dbe0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800dbc2:	f7fe fed9 	bl	800c978 <_PreparePacket>
 800dbc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800dbc8:	2211      	movs	r2, #17
 800dbca:	6839      	ldr	r1, [r7, #0]
 800dbcc:	6838      	ldr	r0, [r7, #0]
 800dbce:	f7fe ffc1 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f383 8811 	msr	BASEPRI, r3
}
 800dbd8:	bf00      	nop
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	200164d0 	.word	0x200164d0

0800dbe4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800dbec:	f3ef 8311 	mrs	r3, BASEPRI
 800dbf0:	f04f 0120 	mov.w	r1, #32
 800dbf4:	f381 8811 	msr	BASEPRI, r1
 800dbf8:	617b      	str	r3, [r7, #20]
 800dbfa:	4819      	ldr	r0, [pc, #100]	; (800dc60 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800dbfc:	f7fe febc 	bl	800c978 <_PreparePacket>
 800dc00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800dc06:	4b17      	ldr	r3, [pc, #92]	; (800dc64 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	61fb      	str	r3, [r7, #28]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	61bb      	str	r3, [r7, #24]
 800dc18:	e00b      	b.n	800dc32 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	1c59      	adds	r1, r3, #1
 800dc22:	61f9      	str	r1, [r7, #28]
 800dc24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dc28:	b2d2      	uxtb	r2, r2
 800dc2a:	701a      	strb	r2, [r3, #0]
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	09db      	lsrs	r3, r3, #7
 800dc30:	61bb      	str	r3, [r7, #24]
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	2b7f      	cmp	r3, #127	; 0x7f
 800dc36:	d8f0      	bhi.n	800dc1a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	1c5a      	adds	r2, r3, #1
 800dc3c:	61fa      	str	r2, [r7, #28]
 800dc3e:	69ba      	ldr	r2, [r7, #24]
 800dc40:	b2d2      	uxtb	r2, r2
 800dc42:	701a      	strb	r2, [r3, #0]
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800dc48:	2208      	movs	r2, #8
 800dc4a:	68f9      	ldr	r1, [r7, #12]
 800dc4c:	6938      	ldr	r0, [r7, #16]
 800dc4e:	f7fe ff81 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	f383 8811 	msr	BASEPRI, r3
}
 800dc58:	bf00      	nop
 800dc5a:	3720      	adds	r7, #32
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	200164d0 	.word	0x200164d0
 800dc64:	200164a0 	.word	0x200164a0

0800dc68 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800dc70:	f3ef 8311 	mrs	r3, BASEPRI
 800dc74:	f04f 0120 	mov.w	r1, #32
 800dc78:	f381 8811 	msr	BASEPRI, r1
 800dc7c:	617b      	str	r3, [r7, #20]
 800dc7e:	4819      	ldr	r0, [pc, #100]	; (800dce4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800dc80:	f7fe fe7a 	bl	800c978 <_PreparePacket>
 800dc84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800dc8a:	4b17      	ldr	r3, [pc, #92]	; (800dce8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	61fb      	str	r3, [r7, #28]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	61bb      	str	r3, [r7, #24]
 800dc9c:	e00b      	b.n	800dcb6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	1c59      	adds	r1, r3, #1
 800dca6:	61f9      	str	r1, [r7, #28]
 800dca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dcac:	b2d2      	uxtb	r2, r2
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	09db      	lsrs	r3, r3, #7
 800dcb4:	61bb      	str	r3, [r7, #24]
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	2b7f      	cmp	r3, #127	; 0x7f
 800dcba:	d8f0      	bhi.n	800dc9e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	61fa      	str	r2, [r7, #28]
 800dcc2:	69ba      	ldr	r2, [r7, #24]
 800dcc4:	b2d2      	uxtb	r2, r2
 800dcc6:	701a      	strb	r2, [r3, #0]
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800dccc:	2204      	movs	r2, #4
 800dcce:	68f9      	ldr	r1, [r7, #12]
 800dcd0:	6938      	ldr	r0, [r7, #16]
 800dcd2:	f7fe ff3f 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f383 8811 	msr	BASEPRI, r3
}
 800dcdc:	bf00      	nop
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	200164d0 	.word	0x200164d0
 800dce8:	200164a0 	.word	0x200164a0

0800dcec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b088      	sub	sp, #32
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800dcf4:	f3ef 8311 	mrs	r3, BASEPRI
 800dcf8:	f04f 0120 	mov.w	r1, #32
 800dcfc:	f381 8811 	msr	BASEPRI, r1
 800dd00:	617b      	str	r3, [r7, #20]
 800dd02:	4819      	ldr	r0, [pc, #100]	; (800dd68 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800dd04:	f7fe fe38 	bl	800c978 <_PreparePacket>
 800dd08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800dd0e:	4b17      	ldr	r3, [pc, #92]	; (800dd6c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	61fb      	str	r3, [r7, #28]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	61bb      	str	r3, [r7, #24]
 800dd20:	e00b      	b.n	800dd3a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	1c59      	adds	r1, r3, #1
 800dd2a:	61f9      	str	r1, [r7, #28]
 800dd2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dd30:	b2d2      	uxtb	r2, r2
 800dd32:	701a      	strb	r2, [r3, #0]
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	09db      	lsrs	r3, r3, #7
 800dd38:	61bb      	str	r3, [r7, #24]
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	2b7f      	cmp	r3, #127	; 0x7f
 800dd3e:	d8f0      	bhi.n	800dd22 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	61fa      	str	r2, [r7, #28]
 800dd46:	69ba      	ldr	r2, [r7, #24]
 800dd48:	b2d2      	uxtb	r2, r2
 800dd4a:	701a      	strb	r2, [r3, #0]
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800dd50:	2206      	movs	r2, #6
 800dd52:	68f9      	ldr	r1, [r7, #12]
 800dd54:	6938      	ldr	r0, [r7, #16]
 800dd56:	f7fe fefd 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	f383 8811 	msr	BASEPRI, r3
}
 800dd60:	bf00      	nop
 800dd62:	3720      	adds	r7, #32
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	200164d0 	.word	0x200164d0
 800dd6c:	200164a0 	.word	0x200164a0

0800dd70 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b08a      	sub	sp, #40	; 0x28
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800dd7a:	f3ef 8311 	mrs	r3, BASEPRI
 800dd7e:	f04f 0120 	mov.w	r1, #32
 800dd82:	f381 8811 	msr	BASEPRI, r1
 800dd86:	617b      	str	r3, [r7, #20]
 800dd88:	4827      	ldr	r0, [pc, #156]	; (800de28 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800dd8a:	f7fe fdf5 	bl	800c978 <_PreparePacket>
 800dd8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800dd94:	4b25      	ldr	r3, [pc, #148]	; (800de2c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800dd96:	691b      	ldr	r3, [r3, #16]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	627b      	str	r3, [r7, #36]	; 0x24
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	623b      	str	r3, [r7, #32]
 800dda6:	e00b      	b.n	800ddc0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	1c59      	adds	r1, r3, #1
 800ddb0:	6279      	str	r1, [r7, #36]	; 0x24
 800ddb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ddb6:	b2d2      	uxtb	r2, r2
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	6a3b      	ldr	r3, [r7, #32]
 800ddbc:	09db      	lsrs	r3, r3, #7
 800ddbe:	623b      	str	r3, [r7, #32]
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	2b7f      	cmp	r3, #127	; 0x7f
 800ddc4:	d8f0      	bhi.n	800dda8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	627a      	str	r2, [r7, #36]	; 0x24
 800ddcc:	6a3a      	ldr	r2, [r7, #32]
 800ddce:	b2d2      	uxtb	r2, r2
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	61fb      	str	r3, [r7, #28]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	61bb      	str	r3, [r7, #24]
 800ddde:	e00b      	b.n	800ddf8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	1c59      	adds	r1, r3, #1
 800dde8:	61f9      	str	r1, [r7, #28]
 800ddea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ddee:	b2d2      	uxtb	r2, r2
 800ddf0:	701a      	strb	r2, [r3, #0]
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	09db      	lsrs	r3, r3, #7
 800ddf6:	61bb      	str	r3, [r7, #24]
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	2b7f      	cmp	r3, #127	; 0x7f
 800ddfc:	d8f0      	bhi.n	800dde0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	1c5a      	adds	r2, r3, #1
 800de02:	61fa      	str	r2, [r7, #28]
 800de04:	69ba      	ldr	r2, [r7, #24]
 800de06:	b2d2      	uxtb	r2, r2
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800de0e:	2207      	movs	r2, #7
 800de10:	68f9      	ldr	r1, [r7, #12]
 800de12:	6938      	ldr	r0, [r7, #16]
 800de14:	f7fe fe9e 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	f383 8811 	msr	BASEPRI, r3
}
 800de1e:	bf00      	nop
 800de20:	3728      	adds	r7, #40	; 0x28
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	200164d0 	.word	0x200164d0
 800de2c:	200164a0 	.word	0x200164a0

0800de30 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800de38:	4b04      	ldr	r3, [pc, #16]	; (800de4c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	1ad3      	subs	r3, r2, r3
}
 800de40:	4618      	mov	r0, r3
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	200164a0 	.word	0x200164a0

0800de50 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800de50:	b580      	push	{r7, lr}
 800de52:	b08c      	sub	sp, #48	; 0x30
 800de54:	af00      	add	r7, sp, #0
 800de56:	4603      	mov	r3, r0
 800de58:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800de5a:	4b3b      	ldr	r3, [pc, #236]	; (800df48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d06d      	beq.n	800df3e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800de62:	4b39      	ldr	r3, [pc, #228]	; (800df48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800de68:	2300      	movs	r3, #0
 800de6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800de6c:	e008      	b.n	800de80 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	2b00      	cmp	r3, #0
 800de78:	d007      	beq.n	800de8a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7c:	3301      	adds	r3, #1
 800de7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de80:	79fb      	ldrb	r3, [r7, #7]
 800de82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de84:	429a      	cmp	r2, r3
 800de86:	d3f2      	bcc.n	800de6e <SEGGER_SYSVIEW_SendModule+0x1e>
 800de88:	e000      	b.n	800de8c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800de8a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d055      	beq.n	800df3e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800de92:	f3ef 8311 	mrs	r3, BASEPRI
 800de96:	f04f 0120 	mov.w	r1, #32
 800de9a:	f381 8811 	msr	BASEPRI, r1
 800de9e:	617b      	str	r3, [r7, #20]
 800dea0:	482a      	ldr	r0, [pc, #168]	; (800df4c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800dea2:	f7fe fd69 	bl	800c978 <_PreparePacket>
 800dea6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	627b      	str	r3, [r7, #36]	; 0x24
 800deb0:	79fb      	ldrb	r3, [r7, #7]
 800deb2:	623b      	str	r3, [r7, #32]
 800deb4:	e00b      	b.n	800dece <SEGGER_SYSVIEW_SendModule+0x7e>
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	1c59      	adds	r1, r3, #1
 800debe:	6279      	str	r1, [r7, #36]	; 0x24
 800dec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dec4:	b2d2      	uxtb	r2, r2
 800dec6:	701a      	strb	r2, [r3, #0]
 800dec8:	6a3b      	ldr	r3, [r7, #32]
 800deca:	09db      	lsrs	r3, r3, #7
 800decc:	623b      	str	r3, [r7, #32]
 800dece:	6a3b      	ldr	r3, [r7, #32]
 800ded0:	2b7f      	cmp	r3, #127	; 0x7f
 800ded2:	d8f0      	bhi.n	800deb6 <SEGGER_SYSVIEW_SendModule+0x66>
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	627a      	str	r2, [r7, #36]	; 0x24
 800deda:	6a3a      	ldr	r2, [r7, #32]
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	61fb      	str	r3, [r7, #28]
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	61bb      	str	r3, [r7, #24]
 800deee:	e00b      	b.n	800df08 <SEGGER_SYSVIEW_SendModule+0xb8>
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	b2da      	uxtb	r2, r3
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	1c59      	adds	r1, r3, #1
 800def8:	61f9      	str	r1, [r7, #28]
 800defa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800defe:	b2d2      	uxtb	r2, r2
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	09db      	lsrs	r3, r3, #7
 800df06:	61bb      	str	r3, [r7, #24]
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	2b7f      	cmp	r3, #127	; 0x7f
 800df0c:	d8f0      	bhi.n	800def0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	1c5a      	adds	r2, r3, #1
 800df12:	61fa      	str	r2, [r7, #28]
 800df14:	69ba      	ldr	r2, [r7, #24]
 800df16:	b2d2      	uxtb	r2, r2
 800df18:	701a      	strb	r2, [r3, #0]
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2280      	movs	r2, #128	; 0x80
 800df24:	4619      	mov	r1, r3
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f7fe fcd6 	bl	800c8d8 <_EncodeStr>
 800df2c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800df2e:	2216      	movs	r2, #22
 800df30:	68f9      	ldr	r1, [r7, #12]
 800df32:	6938      	ldr	r0, [r7, #16]
 800df34:	f7fe fe0e 	bl	800cb54 <_SendPacket>
      RECORD_END();
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800df3e:	bf00      	nop
 800df40:	3730      	adds	r7, #48	; 0x30
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	200164c8 	.word	0x200164c8
 800df4c:	200164d0 	.word	0x200164d0

0800df50 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800df56:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00f      	beq.n	800df7e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800df5e:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1f2      	bne.n	800df64 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800df7e:	bf00      	nop
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	200164c8 	.word	0x200164c8

0800df8c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800df92:	f3ef 8311 	mrs	r3, BASEPRI
 800df96:	f04f 0120 	mov.w	r1, #32
 800df9a:	f381 8811 	msr	BASEPRI, r1
 800df9e:	60fb      	str	r3, [r7, #12]
 800dfa0:	4817      	ldr	r0, [pc, #92]	; (800e000 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800dfa2:	f7fe fce9 	bl	800c978 <_PreparePacket>
 800dfa6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	4b14      	ldr	r3, [pc, #80]	; (800e004 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	613b      	str	r3, [r7, #16]
 800dfb6:	e00b      	b.n	800dfd0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	1c59      	adds	r1, r3, #1
 800dfc0:	6179      	str	r1, [r7, #20]
 800dfc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dfc6:	b2d2      	uxtb	r2, r2
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	09db      	lsrs	r3, r3, #7
 800dfce:	613b      	str	r3, [r7, #16]
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	2b7f      	cmp	r3, #127	; 0x7f
 800dfd4:	d8f0      	bhi.n	800dfb8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	617a      	str	r2, [r7, #20]
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	b2d2      	uxtb	r2, r2
 800dfe0:	701a      	strb	r2, [r3, #0]
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800dfe6:	221b      	movs	r2, #27
 800dfe8:	6879      	ldr	r1, [r7, #4]
 800dfea:	68b8      	ldr	r0, [r7, #8]
 800dfec:	f7fe fdb2 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f383 8811 	msr	BASEPRI, r3
}
 800dff6:	bf00      	nop
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	200164d0 	.word	0x200164d0
 800e004:	200164cc 	.word	0x200164cc

0800e008 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800e008:	b40f      	push	{r0, r1, r2, r3}
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b082      	sub	sp, #8
 800e00e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800e010:	f107 0314 	add.w	r3, r7, #20
 800e014:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800e016:	1d3b      	adds	r3, r7, #4
 800e018:	461a      	mov	r2, r3
 800e01a:	2100      	movs	r1, #0
 800e01c:	6938      	ldr	r0, [r7, #16]
 800e01e:	f7fe ff07 	bl	800ce30 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800e022:	bf00      	nop
 800e024:	3708      	adds	r7, #8
 800e026:	46bd      	mov	sp, r7
 800e028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e02c:	b004      	add	sp, #16
 800e02e:	4770      	bx	lr

0800e030 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800e030:	b580      	push	{r7, lr}
 800e032:	b08a      	sub	sp, #40	; 0x28
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e038:	f3ef 8311 	mrs	r3, BASEPRI
 800e03c:	f04f 0120 	mov.w	r1, #32
 800e040:	f381 8811 	msr	BASEPRI, r1
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	4827      	ldr	r0, [pc, #156]	; (800e0e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800e048:	f7fe fc96 	bl	800c978 <_PreparePacket>
 800e04c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e04e:	2280      	movs	r2, #128	; 0x80
 800e050:	6879      	ldr	r1, [r7, #4]
 800e052:	6938      	ldr	r0, [r7, #16]
 800e054:	f7fe fc40 	bl	800c8d8 <_EncodeStr>
 800e058:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	627b      	str	r3, [r7, #36]	; 0x24
 800e05e:	2301      	movs	r3, #1
 800e060:	623b      	str	r3, [r7, #32]
 800e062:	e00b      	b.n	800e07c <SEGGER_SYSVIEW_Warn+0x4c>
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	b2da      	uxtb	r2, r3
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	1c59      	adds	r1, r3, #1
 800e06c:	6279      	str	r1, [r7, #36]	; 0x24
 800e06e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e072:	b2d2      	uxtb	r2, r2
 800e074:	701a      	strb	r2, [r3, #0]
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	09db      	lsrs	r3, r3, #7
 800e07a:	623b      	str	r3, [r7, #32]
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	2b7f      	cmp	r3, #127	; 0x7f
 800e080:	d8f0      	bhi.n	800e064 <SEGGER_SYSVIEW_Warn+0x34>
 800e082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e084:	1c5a      	adds	r2, r3, #1
 800e086:	627a      	str	r2, [r7, #36]	; 0x24
 800e088:	6a3a      	ldr	r2, [r7, #32]
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	701a      	strb	r2, [r3, #0]
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	61fb      	str	r3, [r7, #28]
 800e096:	2300      	movs	r3, #0
 800e098:	61bb      	str	r3, [r7, #24]
 800e09a:	e00b      	b.n	800e0b4 <SEGGER_SYSVIEW_Warn+0x84>
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	1c59      	adds	r1, r3, #1
 800e0a4:	61f9      	str	r1, [r7, #28]
 800e0a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e0aa:	b2d2      	uxtb	r2, r2
 800e0ac:	701a      	strb	r2, [r3, #0]
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	09db      	lsrs	r3, r3, #7
 800e0b2:	61bb      	str	r3, [r7, #24]
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	2b7f      	cmp	r3, #127	; 0x7f
 800e0b8:	d8f0      	bhi.n	800e09c <SEGGER_SYSVIEW_Warn+0x6c>
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	1c5a      	adds	r2, r3, #1
 800e0be:	61fa      	str	r2, [r7, #28]
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	b2d2      	uxtb	r2, r2
 800e0c4:	701a      	strb	r2, [r3, #0]
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e0ca:	221a      	movs	r2, #26
 800e0cc:	68f9      	ldr	r1, [r7, #12]
 800e0ce:	6938      	ldr	r0, [r7, #16]
 800e0d0:	f7fe fd40 	bl	800cb54 <_SendPacket>
  RECORD_END();
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	f383 8811 	msr	BASEPRI, r3
}
 800e0da:	bf00      	nop
 800e0dc:	3728      	adds	r7, #40	; 0x28
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	200164d0 	.word	0x200164d0

0800e0e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800e0ec:	4803      	ldr	r0, [pc, #12]	; (800e0fc <_cbSendSystemDesc+0x14>)
 800e0ee:	f7ff fc8d 	bl	800da0c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800e0f2:	4803      	ldr	r0, [pc, #12]	; (800e100 <_cbSendSystemDesc+0x18>)
 800e0f4:	f7ff fc8a 	bl	800da0c <SEGGER_SYSVIEW_SendSysDesc>
}
 800e0f8:	bf00      	nop
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	0800ef84 	.word	0x0800ef84
 800e100:	0800efc8 	.word	0x0800efc8

0800e104 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800e108:	4b06      	ldr	r3, [pc, #24]	; (800e124 <SEGGER_SYSVIEW_Conf+0x20>)
 800e10a:	6818      	ldr	r0, [r3, #0]
 800e10c:	4b05      	ldr	r3, [pc, #20]	; (800e124 <SEGGER_SYSVIEW_Conf+0x20>)
 800e10e:	6819      	ldr	r1, [r3, #0]
 800e110:	4b05      	ldr	r3, [pc, #20]	; (800e128 <SEGGER_SYSVIEW_Conf+0x24>)
 800e112:	4a06      	ldr	r2, [pc, #24]	; (800e12c <SEGGER_SYSVIEW_Conf+0x28>)
 800e114:	f7fe ff4a 	bl	800cfac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800e118:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800e11c:	f7fe ff8a 	bl	800d034 <SEGGER_SYSVIEW_SetRAMBase>
}
 800e120:	bf00      	nop
 800e122:	bd80      	pop	{r7, pc}
 800e124:	20000000 	.word	0x20000000
 800e128:	0800e0e9 	.word	0x0800e0e9
 800e12c:	0800f068 	.word	0x0800f068

0800e130 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800e130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e132:	b085      	sub	sp, #20
 800e134:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800e136:	2300      	movs	r3, #0
 800e138:	607b      	str	r3, [r7, #4]
 800e13a:	e033      	b.n	800e1a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800e13c:	491e      	ldr	r1, [pc, #120]	; (800e1b8 <_cbSendTaskList+0x88>)
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	4613      	mov	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	440b      	add	r3, r1
 800e14a:	6818      	ldr	r0, [r3, #0]
 800e14c:	491a      	ldr	r1, [pc, #104]	; (800e1b8 <_cbSendTaskList+0x88>)
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	4613      	mov	r3, r2
 800e152:	009b      	lsls	r3, r3, #2
 800e154:	4413      	add	r3, r2
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	440b      	add	r3, r1
 800e15a:	3304      	adds	r3, #4
 800e15c:	6819      	ldr	r1, [r3, #0]
 800e15e:	4c16      	ldr	r4, [pc, #88]	; (800e1b8 <_cbSendTaskList+0x88>)
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	4613      	mov	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4423      	add	r3, r4
 800e16c:	3308      	adds	r3, #8
 800e16e:	681c      	ldr	r4, [r3, #0]
 800e170:	4d11      	ldr	r5, [pc, #68]	; (800e1b8 <_cbSendTaskList+0x88>)
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	4613      	mov	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	442b      	add	r3, r5
 800e17e:	330c      	adds	r3, #12
 800e180:	681d      	ldr	r5, [r3, #0]
 800e182:	4e0d      	ldr	r6, [pc, #52]	; (800e1b8 <_cbSendTaskList+0x88>)
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4433      	add	r3, r6
 800e190:	3310      	adds	r3, #16
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	9300      	str	r3, [sp, #0]
 800e196:	462b      	mov	r3, r5
 800e198:	4622      	mov	r2, r4
 800e19a:	f000 f8bd 	bl	800e318 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	607b      	str	r3, [r7, #4]
 800e1a4:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <_cbSendTaskList+0x8c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d3c6      	bcc.n	800e13c <_cbSendTaskList+0xc>
  }
}
 800e1ae:	bf00      	nop
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b8:	200165b4 	.word	0x200165b4
 800e1bc:	20016654 	.word	0x20016654

0800e1c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800e1c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800e1c8:	f7fc f9ce 	bl	800a568 <xTaskGetTickCountFromISR>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	469a      	mov	sl, r3
 800e1d2:	4693      	mov	fp, r2
 800e1d4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800e1d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	f04f 0a00 	mov.w	sl, #0
 800e1e4:	f04f 0b00 	mov.w	fp, #0
 800e1e8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800e1ec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800e1f0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800e1f4:	4652      	mov	r2, sl
 800e1f6:	465b      	mov	r3, fp
 800e1f8:	1a14      	subs	r4, r2, r0
 800e1fa:	eb63 0501 	sbc.w	r5, r3, r1
 800e1fe:	f04f 0200 	mov.w	r2, #0
 800e202:	f04f 0300 	mov.w	r3, #0
 800e206:	00ab      	lsls	r3, r5, #2
 800e208:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e20c:	00a2      	lsls	r2, r4, #2
 800e20e:	4614      	mov	r4, r2
 800e210:	461d      	mov	r5, r3
 800e212:	eb14 0800 	adds.w	r8, r4, r0
 800e216:	eb45 0901 	adc.w	r9, r5, r1
 800e21a:	f04f 0200 	mov.w	r2, #0
 800e21e:	f04f 0300 	mov.w	r3, #0
 800e222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e22a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e22e:	4690      	mov	r8, r2
 800e230:	4699      	mov	r9, r3
 800e232:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800e236:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e23a:	4610      	mov	r0, r2
 800e23c:	4619      	mov	r1, r3
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800e248 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af02      	add	r7, sp, #8
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800e256:	2205      	movs	r2, #5
 800e258:	492b      	ldr	r1, [pc, #172]	; (800e308 <SYSVIEW_AddTask+0xc0>)
 800e25a:	68b8      	ldr	r0, [r7, #8]
 800e25c:	f000 f8a8 	bl	800e3b0 <memcmp>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d04b      	beq.n	800e2fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800e266:	4b29      	ldr	r3, [pc, #164]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b07      	cmp	r3, #7
 800e26c:	d903      	bls.n	800e276 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800e26e:	4828      	ldr	r0, [pc, #160]	; (800e310 <SYSVIEW_AddTask+0xc8>)
 800e270:	f7ff fede 	bl	800e030 <SEGGER_SYSVIEW_Warn>
    return;
 800e274:	e044      	b.n	800e300 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800e276:	4b25      	ldr	r3, [pc, #148]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	4926      	ldr	r1, [pc, #152]	; (800e314 <SYSVIEW_AddTask+0xcc>)
 800e27c:	4613      	mov	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	440b      	add	r3, r1
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800e28a:	4b20      	ldr	r3, [pc, #128]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	4921      	ldr	r1, [pc, #132]	; (800e314 <SYSVIEW_AddTask+0xcc>)
 800e290:	4613      	mov	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4413      	add	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	440b      	add	r3, r1
 800e29a:	3304      	adds	r3, #4
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800e2a0:	4b1a      	ldr	r3, [pc, #104]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	491b      	ldr	r1, [pc, #108]	; (800e314 <SYSVIEW_AddTask+0xcc>)
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	440b      	add	r3, r1
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800e2b6:	4b15      	ldr	r3, [pc, #84]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	4916      	ldr	r1, [pc, #88]	; (800e314 <SYSVIEW_AddTask+0xcc>)
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	440b      	add	r3, r1
 800e2c6:	330c      	adds	r3, #12
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800e2cc:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	4910      	ldr	r1, [pc, #64]	; (800e314 <SYSVIEW_AddTask+0xcc>)
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	440b      	add	r3, r1
 800e2dc:	3310      	adds	r3, #16
 800e2de:	69ba      	ldr	r2, [r7, #24]
 800e2e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800e2e2:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	4a08      	ldr	r2, [pc, #32]	; (800e30c <SYSVIEW_AddTask+0xc4>)
 800e2ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	68b9      	ldr	r1, [r7, #8]
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f000 f80e 	bl	800e318 <SYSVIEW_SendTaskInfo>
 800e2fc:	e000      	b.n	800e300 <SYSVIEW_AddTask+0xb8>
    return;
 800e2fe:	bf00      	nop

}
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	0800efd8 	.word	0x0800efd8
 800e30c:	20016654 	.word	0x20016654
 800e310:	0800efe0 	.word	0x0800efe0
 800e314:	200165b4 	.word	0x200165b4

0800e318 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08a      	sub	sp, #40	; 0x28
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800e326:	f107 0314 	add.w	r3, r7, #20
 800e32a:	2214      	movs	r2, #20
 800e32c:	2100      	movs	r1, #0
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 f85c 	bl	800e3ec <memset>
  TaskInfo.TaskID     = TaskID;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800e344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e346:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800e348:	f107 0314 	add.w	r3, r7, #20
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff fa65 	bl	800d81c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800e352:	bf00      	nop
 800e354:	3728      	adds	r7, #40	; 0x28
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
	...

0800e35c <__errno>:
 800e35c:	4b01      	ldr	r3, [pc, #4]	; (800e364 <__errno+0x8>)
 800e35e:	6818      	ldr	r0, [r3, #0]
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	20000104 	.word	0x20000104

0800e368 <__libc_init_array>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4d0d      	ldr	r5, [pc, #52]	; (800e3a0 <__libc_init_array+0x38>)
 800e36c:	4c0d      	ldr	r4, [pc, #52]	; (800e3a4 <__libc_init_array+0x3c>)
 800e36e:	1b64      	subs	r4, r4, r5
 800e370:	10a4      	asrs	r4, r4, #2
 800e372:	2600      	movs	r6, #0
 800e374:	42a6      	cmp	r6, r4
 800e376:	d109      	bne.n	800e38c <__libc_init_array+0x24>
 800e378:	4d0b      	ldr	r5, [pc, #44]	; (800e3a8 <__libc_init_array+0x40>)
 800e37a:	4c0c      	ldr	r4, [pc, #48]	; (800e3ac <__libc_init_array+0x44>)
 800e37c:	f000 fcb2 	bl	800ece4 <_init>
 800e380:	1b64      	subs	r4, r4, r5
 800e382:	10a4      	asrs	r4, r4, #2
 800e384:	2600      	movs	r6, #0
 800e386:	42a6      	cmp	r6, r4
 800e388:	d105      	bne.n	800e396 <__libc_init_array+0x2e>
 800e38a:	bd70      	pop	{r4, r5, r6, pc}
 800e38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e390:	4798      	blx	r3
 800e392:	3601      	adds	r6, #1
 800e394:	e7ee      	b.n	800e374 <__libc_init_array+0xc>
 800e396:	f855 3b04 	ldr.w	r3, [r5], #4
 800e39a:	4798      	blx	r3
 800e39c:	3601      	adds	r6, #1
 800e39e:	e7f2      	b.n	800e386 <__libc_init_array+0x1e>
 800e3a0:	0800f0ac 	.word	0x0800f0ac
 800e3a4:	0800f0ac 	.word	0x0800f0ac
 800e3a8:	0800f0ac 	.word	0x0800f0ac
 800e3ac:	0800f0b0 	.word	0x0800f0b0

0800e3b0 <memcmp>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	3901      	subs	r1, #1
 800e3b4:	4402      	add	r2, r0
 800e3b6:	4290      	cmp	r0, r2
 800e3b8:	d101      	bne.n	800e3be <memcmp+0xe>
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	e005      	b.n	800e3ca <memcmp+0x1a>
 800e3be:	7803      	ldrb	r3, [r0, #0]
 800e3c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e3c4:	42a3      	cmp	r3, r4
 800e3c6:	d001      	beq.n	800e3cc <memcmp+0x1c>
 800e3c8:	1b18      	subs	r0, r3, r4
 800e3ca:	bd10      	pop	{r4, pc}
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	e7f2      	b.n	800e3b6 <memcmp+0x6>

0800e3d0 <memcpy>:
 800e3d0:	440a      	add	r2, r1
 800e3d2:	4291      	cmp	r1, r2
 800e3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3d8:	d100      	bne.n	800e3dc <memcpy+0xc>
 800e3da:	4770      	bx	lr
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3e6:	4291      	cmp	r1, r2
 800e3e8:	d1f9      	bne.n	800e3de <memcpy+0xe>
 800e3ea:	bd10      	pop	{r4, pc}

0800e3ec <memset>:
 800e3ec:	4402      	add	r2, r0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d100      	bne.n	800e3f6 <memset+0xa>
 800e3f4:	4770      	bx	lr
 800e3f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e3fa:	e7f9      	b.n	800e3f0 <memset+0x4>

0800e3fc <sniprintf>:
 800e3fc:	b40c      	push	{r2, r3}
 800e3fe:	b530      	push	{r4, r5, lr}
 800e400:	4b17      	ldr	r3, [pc, #92]	; (800e460 <sniprintf+0x64>)
 800e402:	1e0c      	subs	r4, r1, #0
 800e404:	681d      	ldr	r5, [r3, #0]
 800e406:	b09d      	sub	sp, #116	; 0x74
 800e408:	da08      	bge.n	800e41c <sniprintf+0x20>
 800e40a:	238b      	movs	r3, #139	; 0x8b
 800e40c:	602b      	str	r3, [r5, #0]
 800e40e:	f04f 30ff 	mov.w	r0, #4294967295
 800e412:	b01d      	add	sp, #116	; 0x74
 800e414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e418:	b002      	add	sp, #8
 800e41a:	4770      	bx	lr
 800e41c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e420:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e424:	bf14      	ite	ne
 800e426:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e42a:	4623      	moveq	r3, r4
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	9307      	str	r3, [sp, #28]
 800e430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e434:	9002      	str	r0, [sp, #8]
 800e436:	9006      	str	r0, [sp, #24]
 800e438:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e43c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e43e:	ab21      	add	r3, sp, #132	; 0x84
 800e440:	a902      	add	r1, sp, #8
 800e442:	4628      	mov	r0, r5
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	f000 f869 	bl	800e51c <_svfiprintf_r>
 800e44a:	1c43      	adds	r3, r0, #1
 800e44c:	bfbc      	itt	lt
 800e44e:	238b      	movlt	r3, #139	; 0x8b
 800e450:	602b      	strlt	r3, [r5, #0]
 800e452:	2c00      	cmp	r4, #0
 800e454:	d0dd      	beq.n	800e412 <sniprintf+0x16>
 800e456:	9b02      	ldr	r3, [sp, #8]
 800e458:	2200      	movs	r2, #0
 800e45a:	701a      	strb	r2, [r3, #0]
 800e45c:	e7d9      	b.n	800e412 <sniprintf+0x16>
 800e45e:	bf00      	nop
 800e460:	20000104 	.word	0x20000104

0800e464 <__ssputs_r>:
 800e464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e468:	688e      	ldr	r6, [r1, #8]
 800e46a:	429e      	cmp	r6, r3
 800e46c:	4682      	mov	sl, r0
 800e46e:	460c      	mov	r4, r1
 800e470:	4690      	mov	r8, r2
 800e472:	461f      	mov	r7, r3
 800e474:	d838      	bhi.n	800e4e8 <__ssputs_r+0x84>
 800e476:	898a      	ldrh	r2, [r1, #12]
 800e478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e47c:	d032      	beq.n	800e4e4 <__ssputs_r+0x80>
 800e47e:	6825      	ldr	r5, [r4, #0]
 800e480:	6909      	ldr	r1, [r1, #16]
 800e482:	eba5 0901 	sub.w	r9, r5, r1
 800e486:	6965      	ldr	r5, [r4, #20]
 800e488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e48c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e490:	3301      	adds	r3, #1
 800e492:	444b      	add	r3, r9
 800e494:	106d      	asrs	r5, r5, #1
 800e496:	429d      	cmp	r5, r3
 800e498:	bf38      	it	cc
 800e49a:	461d      	movcc	r5, r3
 800e49c:	0553      	lsls	r3, r2, #21
 800e49e:	d531      	bpl.n	800e504 <__ssputs_r+0xa0>
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	f000 fb55 	bl	800eb50 <_malloc_r>
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	b950      	cbnz	r0, 800e4c0 <__ssputs_r+0x5c>
 800e4aa:	230c      	movs	r3, #12
 800e4ac:	f8ca 3000 	str.w	r3, [sl]
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b6:	81a3      	strh	r3, [r4, #12]
 800e4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c0:	6921      	ldr	r1, [r4, #16]
 800e4c2:	464a      	mov	r2, r9
 800e4c4:	f7ff ff84 	bl	800e3d0 <memcpy>
 800e4c8:	89a3      	ldrh	r3, [r4, #12]
 800e4ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d2:	81a3      	strh	r3, [r4, #12]
 800e4d4:	6126      	str	r6, [r4, #16]
 800e4d6:	6165      	str	r5, [r4, #20]
 800e4d8:	444e      	add	r6, r9
 800e4da:	eba5 0509 	sub.w	r5, r5, r9
 800e4de:	6026      	str	r6, [r4, #0]
 800e4e0:	60a5      	str	r5, [r4, #8]
 800e4e2:	463e      	mov	r6, r7
 800e4e4:	42be      	cmp	r6, r7
 800e4e6:	d900      	bls.n	800e4ea <__ssputs_r+0x86>
 800e4e8:	463e      	mov	r6, r7
 800e4ea:	6820      	ldr	r0, [r4, #0]
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	4641      	mov	r1, r8
 800e4f0:	f000 faa8 	bl	800ea44 <memmove>
 800e4f4:	68a3      	ldr	r3, [r4, #8]
 800e4f6:	1b9b      	subs	r3, r3, r6
 800e4f8:	60a3      	str	r3, [r4, #8]
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	4433      	add	r3, r6
 800e4fe:	6023      	str	r3, [r4, #0]
 800e500:	2000      	movs	r0, #0
 800e502:	e7db      	b.n	800e4bc <__ssputs_r+0x58>
 800e504:	462a      	mov	r2, r5
 800e506:	f000 fb97 	bl	800ec38 <_realloc_r>
 800e50a:	4606      	mov	r6, r0
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d1e1      	bne.n	800e4d4 <__ssputs_r+0x70>
 800e510:	6921      	ldr	r1, [r4, #16]
 800e512:	4650      	mov	r0, sl
 800e514:	f000 fab0 	bl	800ea78 <_free_r>
 800e518:	e7c7      	b.n	800e4aa <__ssputs_r+0x46>
	...

0800e51c <_svfiprintf_r>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	4698      	mov	r8, r3
 800e522:	898b      	ldrh	r3, [r1, #12]
 800e524:	061b      	lsls	r3, r3, #24
 800e526:	b09d      	sub	sp, #116	; 0x74
 800e528:	4607      	mov	r7, r0
 800e52a:	460d      	mov	r5, r1
 800e52c:	4614      	mov	r4, r2
 800e52e:	d50e      	bpl.n	800e54e <_svfiprintf_r+0x32>
 800e530:	690b      	ldr	r3, [r1, #16]
 800e532:	b963      	cbnz	r3, 800e54e <_svfiprintf_r+0x32>
 800e534:	2140      	movs	r1, #64	; 0x40
 800e536:	f000 fb0b 	bl	800eb50 <_malloc_r>
 800e53a:	6028      	str	r0, [r5, #0]
 800e53c:	6128      	str	r0, [r5, #16]
 800e53e:	b920      	cbnz	r0, 800e54a <_svfiprintf_r+0x2e>
 800e540:	230c      	movs	r3, #12
 800e542:	603b      	str	r3, [r7, #0]
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	e0d1      	b.n	800e6ee <_svfiprintf_r+0x1d2>
 800e54a:	2340      	movs	r3, #64	; 0x40
 800e54c:	616b      	str	r3, [r5, #20]
 800e54e:	2300      	movs	r3, #0
 800e550:	9309      	str	r3, [sp, #36]	; 0x24
 800e552:	2320      	movs	r3, #32
 800e554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e558:	f8cd 800c 	str.w	r8, [sp, #12]
 800e55c:	2330      	movs	r3, #48	; 0x30
 800e55e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e708 <_svfiprintf_r+0x1ec>
 800e562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e566:	f04f 0901 	mov.w	r9, #1
 800e56a:	4623      	mov	r3, r4
 800e56c:	469a      	mov	sl, r3
 800e56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e572:	b10a      	cbz	r2, 800e578 <_svfiprintf_r+0x5c>
 800e574:	2a25      	cmp	r2, #37	; 0x25
 800e576:	d1f9      	bne.n	800e56c <_svfiprintf_r+0x50>
 800e578:	ebba 0b04 	subs.w	fp, sl, r4
 800e57c:	d00b      	beq.n	800e596 <_svfiprintf_r+0x7a>
 800e57e:	465b      	mov	r3, fp
 800e580:	4622      	mov	r2, r4
 800e582:	4629      	mov	r1, r5
 800e584:	4638      	mov	r0, r7
 800e586:	f7ff ff6d 	bl	800e464 <__ssputs_r>
 800e58a:	3001      	adds	r0, #1
 800e58c:	f000 80aa 	beq.w	800e6e4 <_svfiprintf_r+0x1c8>
 800e590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e592:	445a      	add	r2, fp
 800e594:	9209      	str	r2, [sp, #36]	; 0x24
 800e596:	f89a 3000 	ldrb.w	r3, [sl]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 80a2 	beq.w	800e6e4 <_svfiprintf_r+0x1c8>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5aa:	f10a 0a01 	add.w	sl, sl, #1
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	9307      	str	r3, [sp, #28]
 800e5b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5b6:	931a      	str	r3, [sp, #104]	; 0x68
 800e5b8:	4654      	mov	r4, sl
 800e5ba:	2205      	movs	r2, #5
 800e5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5c0:	4851      	ldr	r0, [pc, #324]	; (800e708 <_svfiprintf_r+0x1ec>)
 800e5c2:	f7f1 fe65 	bl	8000290 <memchr>
 800e5c6:	9a04      	ldr	r2, [sp, #16]
 800e5c8:	b9d8      	cbnz	r0, 800e602 <_svfiprintf_r+0xe6>
 800e5ca:	06d0      	lsls	r0, r2, #27
 800e5cc:	bf44      	itt	mi
 800e5ce:	2320      	movmi	r3, #32
 800e5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5d4:	0711      	lsls	r1, r2, #28
 800e5d6:	bf44      	itt	mi
 800e5d8:	232b      	movmi	r3, #43	; 0x2b
 800e5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5de:	f89a 3000 	ldrb.w	r3, [sl]
 800e5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800e5e4:	d015      	beq.n	800e612 <_svfiprintf_r+0xf6>
 800e5e6:	9a07      	ldr	r2, [sp, #28]
 800e5e8:	4654      	mov	r4, sl
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	f04f 0c0a 	mov.w	ip, #10
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5f6:	3b30      	subs	r3, #48	; 0x30
 800e5f8:	2b09      	cmp	r3, #9
 800e5fa:	d94e      	bls.n	800e69a <_svfiprintf_r+0x17e>
 800e5fc:	b1b0      	cbz	r0, 800e62c <_svfiprintf_r+0x110>
 800e5fe:	9207      	str	r2, [sp, #28]
 800e600:	e014      	b.n	800e62c <_svfiprintf_r+0x110>
 800e602:	eba0 0308 	sub.w	r3, r0, r8
 800e606:	fa09 f303 	lsl.w	r3, r9, r3
 800e60a:	4313      	orrs	r3, r2
 800e60c:	9304      	str	r3, [sp, #16]
 800e60e:	46a2      	mov	sl, r4
 800e610:	e7d2      	b.n	800e5b8 <_svfiprintf_r+0x9c>
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	1d19      	adds	r1, r3, #4
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	9103      	str	r1, [sp, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	bfbb      	ittet	lt
 800e61e:	425b      	neglt	r3, r3
 800e620:	f042 0202 	orrlt.w	r2, r2, #2
 800e624:	9307      	strge	r3, [sp, #28]
 800e626:	9307      	strlt	r3, [sp, #28]
 800e628:	bfb8      	it	lt
 800e62a:	9204      	strlt	r2, [sp, #16]
 800e62c:	7823      	ldrb	r3, [r4, #0]
 800e62e:	2b2e      	cmp	r3, #46	; 0x2e
 800e630:	d10c      	bne.n	800e64c <_svfiprintf_r+0x130>
 800e632:	7863      	ldrb	r3, [r4, #1]
 800e634:	2b2a      	cmp	r3, #42	; 0x2a
 800e636:	d135      	bne.n	800e6a4 <_svfiprintf_r+0x188>
 800e638:	9b03      	ldr	r3, [sp, #12]
 800e63a:	1d1a      	adds	r2, r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	9203      	str	r2, [sp, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	bfb8      	it	lt
 800e644:	f04f 33ff 	movlt.w	r3, #4294967295
 800e648:	3402      	adds	r4, #2
 800e64a:	9305      	str	r3, [sp, #20]
 800e64c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e718 <_svfiprintf_r+0x1fc>
 800e650:	7821      	ldrb	r1, [r4, #0]
 800e652:	2203      	movs	r2, #3
 800e654:	4650      	mov	r0, sl
 800e656:	f7f1 fe1b 	bl	8000290 <memchr>
 800e65a:	b140      	cbz	r0, 800e66e <_svfiprintf_r+0x152>
 800e65c:	2340      	movs	r3, #64	; 0x40
 800e65e:	eba0 000a 	sub.w	r0, r0, sl
 800e662:	fa03 f000 	lsl.w	r0, r3, r0
 800e666:	9b04      	ldr	r3, [sp, #16]
 800e668:	4303      	orrs	r3, r0
 800e66a:	3401      	adds	r4, #1
 800e66c:	9304      	str	r3, [sp, #16]
 800e66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e672:	4826      	ldr	r0, [pc, #152]	; (800e70c <_svfiprintf_r+0x1f0>)
 800e674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e678:	2206      	movs	r2, #6
 800e67a:	f7f1 fe09 	bl	8000290 <memchr>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d038      	beq.n	800e6f4 <_svfiprintf_r+0x1d8>
 800e682:	4b23      	ldr	r3, [pc, #140]	; (800e710 <_svfiprintf_r+0x1f4>)
 800e684:	bb1b      	cbnz	r3, 800e6ce <_svfiprintf_r+0x1b2>
 800e686:	9b03      	ldr	r3, [sp, #12]
 800e688:	3307      	adds	r3, #7
 800e68a:	f023 0307 	bic.w	r3, r3, #7
 800e68e:	3308      	adds	r3, #8
 800e690:	9303      	str	r3, [sp, #12]
 800e692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e694:	4433      	add	r3, r6
 800e696:	9309      	str	r3, [sp, #36]	; 0x24
 800e698:	e767      	b.n	800e56a <_svfiprintf_r+0x4e>
 800e69a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e69e:	460c      	mov	r4, r1
 800e6a0:	2001      	movs	r0, #1
 800e6a2:	e7a5      	b.n	800e5f0 <_svfiprintf_r+0xd4>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	3401      	adds	r4, #1
 800e6a8:	9305      	str	r3, [sp, #20]
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	f04f 0c0a 	mov.w	ip, #10
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6b6:	3a30      	subs	r2, #48	; 0x30
 800e6b8:	2a09      	cmp	r2, #9
 800e6ba:	d903      	bls.n	800e6c4 <_svfiprintf_r+0x1a8>
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0c5      	beq.n	800e64c <_svfiprintf_r+0x130>
 800e6c0:	9105      	str	r1, [sp, #20]
 800e6c2:	e7c3      	b.n	800e64c <_svfiprintf_r+0x130>
 800e6c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e7f0      	b.n	800e6b0 <_svfiprintf_r+0x194>
 800e6ce:	ab03      	add	r3, sp, #12
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	462a      	mov	r2, r5
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	; (800e714 <_svfiprintf_r+0x1f8>)
 800e6d6:	a904      	add	r1, sp, #16
 800e6d8:	4638      	mov	r0, r7
 800e6da:	f3af 8000 	nop.w
 800e6de:	1c42      	adds	r2, r0, #1
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	d1d6      	bne.n	800e692 <_svfiprintf_r+0x176>
 800e6e4:	89ab      	ldrh	r3, [r5, #12]
 800e6e6:	065b      	lsls	r3, r3, #25
 800e6e8:	f53f af2c 	bmi.w	800e544 <_svfiprintf_r+0x28>
 800e6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6ee:	b01d      	add	sp, #116	; 0x74
 800e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f4:	ab03      	add	r3, sp, #12
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	4b06      	ldr	r3, [pc, #24]	; (800e714 <_svfiprintf_r+0x1f8>)
 800e6fc:	a904      	add	r1, sp, #16
 800e6fe:	4638      	mov	r0, r7
 800e700:	f000 f87a 	bl	800e7f8 <_printf_i>
 800e704:	e7eb      	b.n	800e6de <_svfiprintf_r+0x1c2>
 800e706:	bf00      	nop
 800e708:	0800f070 	.word	0x0800f070
 800e70c:	0800f07a 	.word	0x0800f07a
 800e710:	00000000 	.word	0x00000000
 800e714:	0800e465 	.word	0x0800e465
 800e718:	0800f076 	.word	0x0800f076

0800e71c <_printf_common>:
 800e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	4616      	mov	r6, r2
 800e722:	4699      	mov	r9, r3
 800e724:	688a      	ldr	r2, [r1, #8]
 800e726:	690b      	ldr	r3, [r1, #16]
 800e728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e72c:	4293      	cmp	r3, r2
 800e72e:	bfb8      	it	lt
 800e730:	4613      	movlt	r3, r2
 800e732:	6033      	str	r3, [r6, #0]
 800e734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e738:	4607      	mov	r7, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	b10a      	cbz	r2, 800e742 <_printf_common+0x26>
 800e73e:	3301      	adds	r3, #1
 800e740:	6033      	str	r3, [r6, #0]
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	0699      	lsls	r1, r3, #26
 800e746:	bf42      	ittt	mi
 800e748:	6833      	ldrmi	r3, [r6, #0]
 800e74a:	3302      	addmi	r3, #2
 800e74c:	6033      	strmi	r3, [r6, #0]
 800e74e:	6825      	ldr	r5, [r4, #0]
 800e750:	f015 0506 	ands.w	r5, r5, #6
 800e754:	d106      	bne.n	800e764 <_printf_common+0x48>
 800e756:	f104 0a19 	add.w	sl, r4, #25
 800e75a:	68e3      	ldr	r3, [r4, #12]
 800e75c:	6832      	ldr	r2, [r6, #0]
 800e75e:	1a9b      	subs	r3, r3, r2
 800e760:	42ab      	cmp	r3, r5
 800e762:	dc26      	bgt.n	800e7b2 <_printf_common+0x96>
 800e764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e768:	1e13      	subs	r3, r2, #0
 800e76a:	6822      	ldr	r2, [r4, #0]
 800e76c:	bf18      	it	ne
 800e76e:	2301      	movne	r3, #1
 800e770:	0692      	lsls	r2, r2, #26
 800e772:	d42b      	bmi.n	800e7cc <_printf_common+0xb0>
 800e774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e778:	4649      	mov	r1, r9
 800e77a:	4638      	mov	r0, r7
 800e77c:	47c0      	blx	r8
 800e77e:	3001      	adds	r0, #1
 800e780:	d01e      	beq.n	800e7c0 <_printf_common+0xa4>
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	68e5      	ldr	r5, [r4, #12]
 800e786:	6832      	ldr	r2, [r6, #0]
 800e788:	f003 0306 	and.w	r3, r3, #6
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	bf08      	it	eq
 800e790:	1aad      	subeq	r5, r5, r2
 800e792:	68a3      	ldr	r3, [r4, #8]
 800e794:	6922      	ldr	r2, [r4, #16]
 800e796:	bf0c      	ite	eq
 800e798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e79c:	2500      	movne	r5, #0
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	bfc4      	itt	gt
 800e7a2:	1a9b      	subgt	r3, r3, r2
 800e7a4:	18ed      	addgt	r5, r5, r3
 800e7a6:	2600      	movs	r6, #0
 800e7a8:	341a      	adds	r4, #26
 800e7aa:	42b5      	cmp	r5, r6
 800e7ac:	d11a      	bne.n	800e7e4 <_printf_common+0xc8>
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	e008      	b.n	800e7c4 <_printf_common+0xa8>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4652      	mov	r2, sl
 800e7b6:	4649      	mov	r1, r9
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	47c0      	blx	r8
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d103      	bne.n	800e7c8 <_printf_common+0xac>
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c8:	3501      	adds	r5, #1
 800e7ca:	e7c6      	b.n	800e75a <_printf_common+0x3e>
 800e7cc:	18e1      	adds	r1, r4, r3
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	2030      	movs	r0, #48	; 0x30
 800e7d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7d6:	4422      	add	r2, r4
 800e7d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7e0:	3302      	adds	r3, #2
 800e7e2:	e7c7      	b.n	800e774 <_printf_common+0x58>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	4622      	mov	r2, r4
 800e7e8:	4649      	mov	r1, r9
 800e7ea:	4638      	mov	r0, r7
 800e7ec:	47c0      	blx	r8
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	d0e6      	beq.n	800e7c0 <_printf_common+0xa4>
 800e7f2:	3601      	adds	r6, #1
 800e7f4:	e7d9      	b.n	800e7aa <_printf_common+0x8e>
	...

0800e7f8 <_printf_i>:
 800e7f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fc:	7e0f      	ldrb	r7, [r1, #24]
 800e7fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e800:	2f78      	cmp	r7, #120	; 0x78
 800e802:	4691      	mov	r9, r2
 800e804:	4680      	mov	r8, r0
 800e806:	460c      	mov	r4, r1
 800e808:	469a      	mov	sl, r3
 800e80a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e80e:	d807      	bhi.n	800e820 <_printf_i+0x28>
 800e810:	2f62      	cmp	r7, #98	; 0x62
 800e812:	d80a      	bhi.n	800e82a <_printf_i+0x32>
 800e814:	2f00      	cmp	r7, #0
 800e816:	f000 80d8 	beq.w	800e9ca <_printf_i+0x1d2>
 800e81a:	2f58      	cmp	r7, #88	; 0x58
 800e81c:	f000 80a3 	beq.w	800e966 <_printf_i+0x16e>
 800e820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e828:	e03a      	b.n	800e8a0 <_printf_i+0xa8>
 800e82a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e82e:	2b15      	cmp	r3, #21
 800e830:	d8f6      	bhi.n	800e820 <_printf_i+0x28>
 800e832:	a101      	add	r1, pc, #4	; (adr r1, 800e838 <_printf_i+0x40>)
 800e834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e838:	0800e891 	.word	0x0800e891
 800e83c:	0800e8a5 	.word	0x0800e8a5
 800e840:	0800e821 	.word	0x0800e821
 800e844:	0800e821 	.word	0x0800e821
 800e848:	0800e821 	.word	0x0800e821
 800e84c:	0800e821 	.word	0x0800e821
 800e850:	0800e8a5 	.word	0x0800e8a5
 800e854:	0800e821 	.word	0x0800e821
 800e858:	0800e821 	.word	0x0800e821
 800e85c:	0800e821 	.word	0x0800e821
 800e860:	0800e821 	.word	0x0800e821
 800e864:	0800e9b1 	.word	0x0800e9b1
 800e868:	0800e8d5 	.word	0x0800e8d5
 800e86c:	0800e993 	.word	0x0800e993
 800e870:	0800e821 	.word	0x0800e821
 800e874:	0800e821 	.word	0x0800e821
 800e878:	0800e9d3 	.word	0x0800e9d3
 800e87c:	0800e821 	.word	0x0800e821
 800e880:	0800e8d5 	.word	0x0800e8d5
 800e884:	0800e821 	.word	0x0800e821
 800e888:	0800e821 	.word	0x0800e821
 800e88c:	0800e99b 	.word	0x0800e99b
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	1d1a      	adds	r2, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	602a      	str	r2, [r5, #0]
 800e898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e89c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e0a3      	b.n	800e9ec <_printf_i+0x1f4>
 800e8a4:	6820      	ldr	r0, [r4, #0]
 800e8a6:	6829      	ldr	r1, [r5, #0]
 800e8a8:	0606      	lsls	r6, r0, #24
 800e8aa:	f101 0304 	add.w	r3, r1, #4
 800e8ae:	d50a      	bpl.n	800e8c6 <_printf_i+0xce>
 800e8b0:	680e      	ldr	r6, [r1, #0]
 800e8b2:	602b      	str	r3, [r5, #0]
 800e8b4:	2e00      	cmp	r6, #0
 800e8b6:	da03      	bge.n	800e8c0 <_printf_i+0xc8>
 800e8b8:	232d      	movs	r3, #45	; 0x2d
 800e8ba:	4276      	negs	r6, r6
 800e8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8c0:	485e      	ldr	r0, [pc, #376]	; (800ea3c <_printf_i+0x244>)
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	e019      	b.n	800e8fa <_printf_i+0x102>
 800e8c6:	680e      	ldr	r6, [r1, #0]
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e8ce:	bf18      	it	ne
 800e8d0:	b236      	sxthne	r6, r6
 800e8d2:	e7ef      	b.n	800e8b4 <_printf_i+0xbc>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	6820      	ldr	r0, [r4, #0]
 800e8d8:	1d19      	adds	r1, r3, #4
 800e8da:	6029      	str	r1, [r5, #0]
 800e8dc:	0601      	lsls	r1, r0, #24
 800e8de:	d501      	bpl.n	800e8e4 <_printf_i+0xec>
 800e8e0:	681e      	ldr	r6, [r3, #0]
 800e8e2:	e002      	b.n	800e8ea <_printf_i+0xf2>
 800e8e4:	0646      	lsls	r6, r0, #25
 800e8e6:	d5fb      	bpl.n	800e8e0 <_printf_i+0xe8>
 800e8e8:	881e      	ldrh	r6, [r3, #0]
 800e8ea:	4854      	ldr	r0, [pc, #336]	; (800ea3c <_printf_i+0x244>)
 800e8ec:	2f6f      	cmp	r7, #111	; 0x6f
 800e8ee:	bf0c      	ite	eq
 800e8f0:	2308      	moveq	r3, #8
 800e8f2:	230a      	movne	r3, #10
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8fa:	6865      	ldr	r5, [r4, #4]
 800e8fc:	60a5      	str	r5, [r4, #8]
 800e8fe:	2d00      	cmp	r5, #0
 800e900:	bfa2      	ittt	ge
 800e902:	6821      	ldrge	r1, [r4, #0]
 800e904:	f021 0104 	bicge.w	r1, r1, #4
 800e908:	6021      	strge	r1, [r4, #0]
 800e90a:	b90e      	cbnz	r6, 800e910 <_printf_i+0x118>
 800e90c:	2d00      	cmp	r5, #0
 800e90e:	d04d      	beq.n	800e9ac <_printf_i+0x1b4>
 800e910:	4615      	mov	r5, r2
 800e912:	fbb6 f1f3 	udiv	r1, r6, r3
 800e916:	fb03 6711 	mls	r7, r3, r1, r6
 800e91a:	5dc7      	ldrb	r7, [r0, r7]
 800e91c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e920:	4637      	mov	r7, r6
 800e922:	42bb      	cmp	r3, r7
 800e924:	460e      	mov	r6, r1
 800e926:	d9f4      	bls.n	800e912 <_printf_i+0x11a>
 800e928:	2b08      	cmp	r3, #8
 800e92a:	d10b      	bne.n	800e944 <_printf_i+0x14c>
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	07de      	lsls	r6, r3, #31
 800e930:	d508      	bpl.n	800e944 <_printf_i+0x14c>
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	6861      	ldr	r1, [r4, #4]
 800e936:	4299      	cmp	r1, r3
 800e938:	bfde      	ittt	le
 800e93a:	2330      	movle	r3, #48	; 0x30
 800e93c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e940:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e944:	1b52      	subs	r2, r2, r5
 800e946:	6122      	str	r2, [r4, #16]
 800e948:	f8cd a000 	str.w	sl, [sp]
 800e94c:	464b      	mov	r3, r9
 800e94e:	aa03      	add	r2, sp, #12
 800e950:	4621      	mov	r1, r4
 800e952:	4640      	mov	r0, r8
 800e954:	f7ff fee2 	bl	800e71c <_printf_common>
 800e958:	3001      	adds	r0, #1
 800e95a:	d14c      	bne.n	800e9f6 <_printf_i+0x1fe>
 800e95c:	f04f 30ff 	mov.w	r0, #4294967295
 800e960:	b004      	add	sp, #16
 800e962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e966:	4835      	ldr	r0, [pc, #212]	; (800ea3c <_printf_i+0x244>)
 800e968:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e96c:	6829      	ldr	r1, [r5, #0]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	f851 6b04 	ldr.w	r6, [r1], #4
 800e974:	6029      	str	r1, [r5, #0]
 800e976:	061d      	lsls	r5, r3, #24
 800e978:	d514      	bpl.n	800e9a4 <_printf_i+0x1ac>
 800e97a:	07df      	lsls	r7, r3, #31
 800e97c:	bf44      	itt	mi
 800e97e:	f043 0320 	orrmi.w	r3, r3, #32
 800e982:	6023      	strmi	r3, [r4, #0]
 800e984:	b91e      	cbnz	r6, 800e98e <_printf_i+0x196>
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	f023 0320 	bic.w	r3, r3, #32
 800e98c:	6023      	str	r3, [r4, #0]
 800e98e:	2310      	movs	r3, #16
 800e990:	e7b0      	b.n	800e8f4 <_printf_i+0xfc>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	f043 0320 	orr.w	r3, r3, #32
 800e998:	6023      	str	r3, [r4, #0]
 800e99a:	2378      	movs	r3, #120	; 0x78
 800e99c:	4828      	ldr	r0, [pc, #160]	; (800ea40 <_printf_i+0x248>)
 800e99e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9a2:	e7e3      	b.n	800e96c <_printf_i+0x174>
 800e9a4:	0659      	lsls	r1, r3, #25
 800e9a6:	bf48      	it	mi
 800e9a8:	b2b6      	uxthmi	r6, r6
 800e9aa:	e7e6      	b.n	800e97a <_printf_i+0x182>
 800e9ac:	4615      	mov	r5, r2
 800e9ae:	e7bb      	b.n	800e928 <_printf_i+0x130>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	6826      	ldr	r6, [r4, #0]
 800e9b4:	6961      	ldr	r1, [r4, #20]
 800e9b6:	1d18      	adds	r0, r3, #4
 800e9b8:	6028      	str	r0, [r5, #0]
 800e9ba:	0635      	lsls	r5, r6, #24
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	d501      	bpl.n	800e9c4 <_printf_i+0x1cc>
 800e9c0:	6019      	str	r1, [r3, #0]
 800e9c2:	e002      	b.n	800e9ca <_printf_i+0x1d2>
 800e9c4:	0670      	lsls	r0, r6, #25
 800e9c6:	d5fb      	bpl.n	800e9c0 <_printf_i+0x1c8>
 800e9c8:	8019      	strh	r1, [r3, #0]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	6123      	str	r3, [r4, #16]
 800e9ce:	4615      	mov	r5, r2
 800e9d0:	e7ba      	b.n	800e948 <_printf_i+0x150>
 800e9d2:	682b      	ldr	r3, [r5, #0]
 800e9d4:	1d1a      	adds	r2, r3, #4
 800e9d6:	602a      	str	r2, [r5, #0]
 800e9d8:	681d      	ldr	r5, [r3, #0]
 800e9da:	6862      	ldr	r2, [r4, #4]
 800e9dc:	2100      	movs	r1, #0
 800e9de:	4628      	mov	r0, r5
 800e9e0:	f7f1 fc56 	bl	8000290 <memchr>
 800e9e4:	b108      	cbz	r0, 800e9ea <_printf_i+0x1f2>
 800e9e6:	1b40      	subs	r0, r0, r5
 800e9e8:	6060      	str	r0, [r4, #4]
 800e9ea:	6863      	ldr	r3, [r4, #4]
 800e9ec:	6123      	str	r3, [r4, #16]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9f4:	e7a8      	b.n	800e948 <_printf_i+0x150>
 800e9f6:	6923      	ldr	r3, [r4, #16]
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4649      	mov	r1, r9
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	47d0      	blx	sl
 800ea00:	3001      	adds	r0, #1
 800ea02:	d0ab      	beq.n	800e95c <_printf_i+0x164>
 800ea04:	6823      	ldr	r3, [r4, #0]
 800ea06:	079b      	lsls	r3, r3, #30
 800ea08:	d413      	bmi.n	800ea32 <_printf_i+0x23a>
 800ea0a:	68e0      	ldr	r0, [r4, #12]
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	4298      	cmp	r0, r3
 800ea10:	bfb8      	it	lt
 800ea12:	4618      	movlt	r0, r3
 800ea14:	e7a4      	b.n	800e960 <_printf_i+0x168>
 800ea16:	2301      	movs	r3, #1
 800ea18:	4632      	mov	r2, r6
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	47d0      	blx	sl
 800ea20:	3001      	adds	r0, #1
 800ea22:	d09b      	beq.n	800e95c <_printf_i+0x164>
 800ea24:	3501      	adds	r5, #1
 800ea26:	68e3      	ldr	r3, [r4, #12]
 800ea28:	9903      	ldr	r1, [sp, #12]
 800ea2a:	1a5b      	subs	r3, r3, r1
 800ea2c:	42ab      	cmp	r3, r5
 800ea2e:	dcf2      	bgt.n	800ea16 <_printf_i+0x21e>
 800ea30:	e7eb      	b.n	800ea0a <_printf_i+0x212>
 800ea32:	2500      	movs	r5, #0
 800ea34:	f104 0619 	add.w	r6, r4, #25
 800ea38:	e7f5      	b.n	800ea26 <_printf_i+0x22e>
 800ea3a:	bf00      	nop
 800ea3c:	0800f081 	.word	0x0800f081
 800ea40:	0800f092 	.word	0x0800f092

0800ea44 <memmove>:
 800ea44:	4288      	cmp	r0, r1
 800ea46:	b510      	push	{r4, lr}
 800ea48:	eb01 0402 	add.w	r4, r1, r2
 800ea4c:	d902      	bls.n	800ea54 <memmove+0x10>
 800ea4e:	4284      	cmp	r4, r0
 800ea50:	4623      	mov	r3, r4
 800ea52:	d807      	bhi.n	800ea64 <memmove+0x20>
 800ea54:	1e43      	subs	r3, r0, #1
 800ea56:	42a1      	cmp	r1, r4
 800ea58:	d008      	beq.n	800ea6c <memmove+0x28>
 800ea5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea62:	e7f8      	b.n	800ea56 <memmove+0x12>
 800ea64:	4402      	add	r2, r0
 800ea66:	4601      	mov	r1, r0
 800ea68:	428a      	cmp	r2, r1
 800ea6a:	d100      	bne.n	800ea6e <memmove+0x2a>
 800ea6c:	bd10      	pop	{r4, pc}
 800ea6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea76:	e7f7      	b.n	800ea68 <memmove+0x24>

0800ea78 <_free_r>:
 800ea78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea7a:	2900      	cmp	r1, #0
 800ea7c:	d044      	beq.n	800eb08 <_free_r+0x90>
 800ea7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea82:	9001      	str	r0, [sp, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f1a1 0404 	sub.w	r4, r1, #4
 800ea8a:	bfb8      	it	lt
 800ea8c:	18e4      	addlt	r4, r4, r3
 800ea8e:	f000 f913 	bl	800ecb8 <__malloc_lock>
 800ea92:	4a1e      	ldr	r2, [pc, #120]	; (800eb0c <_free_r+0x94>)
 800ea94:	9801      	ldr	r0, [sp, #4]
 800ea96:	6813      	ldr	r3, [r2, #0]
 800ea98:	b933      	cbnz	r3, 800eaa8 <_free_r+0x30>
 800ea9a:	6063      	str	r3, [r4, #4]
 800ea9c:	6014      	str	r4, [r2, #0]
 800ea9e:	b003      	add	sp, #12
 800eaa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eaa4:	f000 b90e 	b.w	800ecc4 <__malloc_unlock>
 800eaa8:	42a3      	cmp	r3, r4
 800eaaa:	d908      	bls.n	800eabe <_free_r+0x46>
 800eaac:	6825      	ldr	r5, [r4, #0]
 800eaae:	1961      	adds	r1, r4, r5
 800eab0:	428b      	cmp	r3, r1
 800eab2:	bf01      	itttt	eq
 800eab4:	6819      	ldreq	r1, [r3, #0]
 800eab6:	685b      	ldreq	r3, [r3, #4]
 800eab8:	1949      	addeq	r1, r1, r5
 800eaba:	6021      	streq	r1, [r4, #0]
 800eabc:	e7ed      	b.n	800ea9a <_free_r+0x22>
 800eabe:	461a      	mov	r2, r3
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	b10b      	cbz	r3, 800eac8 <_free_r+0x50>
 800eac4:	42a3      	cmp	r3, r4
 800eac6:	d9fa      	bls.n	800eabe <_free_r+0x46>
 800eac8:	6811      	ldr	r1, [r2, #0]
 800eaca:	1855      	adds	r5, r2, r1
 800eacc:	42a5      	cmp	r5, r4
 800eace:	d10b      	bne.n	800eae8 <_free_r+0x70>
 800ead0:	6824      	ldr	r4, [r4, #0]
 800ead2:	4421      	add	r1, r4
 800ead4:	1854      	adds	r4, r2, r1
 800ead6:	42a3      	cmp	r3, r4
 800ead8:	6011      	str	r1, [r2, #0]
 800eada:	d1e0      	bne.n	800ea9e <_free_r+0x26>
 800eadc:	681c      	ldr	r4, [r3, #0]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	6053      	str	r3, [r2, #4]
 800eae2:	4421      	add	r1, r4
 800eae4:	6011      	str	r1, [r2, #0]
 800eae6:	e7da      	b.n	800ea9e <_free_r+0x26>
 800eae8:	d902      	bls.n	800eaf0 <_free_r+0x78>
 800eaea:	230c      	movs	r3, #12
 800eaec:	6003      	str	r3, [r0, #0]
 800eaee:	e7d6      	b.n	800ea9e <_free_r+0x26>
 800eaf0:	6825      	ldr	r5, [r4, #0]
 800eaf2:	1961      	adds	r1, r4, r5
 800eaf4:	428b      	cmp	r3, r1
 800eaf6:	bf04      	itt	eq
 800eaf8:	6819      	ldreq	r1, [r3, #0]
 800eafa:	685b      	ldreq	r3, [r3, #4]
 800eafc:	6063      	str	r3, [r4, #4]
 800eafe:	bf04      	itt	eq
 800eb00:	1949      	addeq	r1, r1, r5
 800eb02:	6021      	streq	r1, [r4, #0]
 800eb04:	6054      	str	r4, [r2, #4]
 800eb06:	e7ca      	b.n	800ea9e <_free_r+0x26>
 800eb08:	b003      	add	sp, #12
 800eb0a:	bd30      	pop	{r4, r5, pc}
 800eb0c:	20016658 	.word	0x20016658

0800eb10 <sbrk_aligned>:
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	4e0e      	ldr	r6, [pc, #56]	; (800eb4c <sbrk_aligned+0x3c>)
 800eb14:	460c      	mov	r4, r1
 800eb16:	6831      	ldr	r1, [r6, #0]
 800eb18:	4605      	mov	r5, r0
 800eb1a:	b911      	cbnz	r1, 800eb22 <sbrk_aligned+0x12>
 800eb1c:	f000 f8bc 	bl	800ec98 <_sbrk_r>
 800eb20:	6030      	str	r0, [r6, #0]
 800eb22:	4621      	mov	r1, r4
 800eb24:	4628      	mov	r0, r5
 800eb26:	f000 f8b7 	bl	800ec98 <_sbrk_r>
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	d00a      	beq.n	800eb44 <sbrk_aligned+0x34>
 800eb2e:	1cc4      	adds	r4, r0, #3
 800eb30:	f024 0403 	bic.w	r4, r4, #3
 800eb34:	42a0      	cmp	r0, r4
 800eb36:	d007      	beq.n	800eb48 <sbrk_aligned+0x38>
 800eb38:	1a21      	subs	r1, r4, r0
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f000 f8ac 	bl	800ec98 <_sbrk_r>
 800eb40:	3001      	adds	r0, #1
 800eb42:	d101      	bne.n	800eb48 <sbrk_aligned+0x38>
 800eb44:	f04f 34ff 	mov.w	r4, #4294967295
 800eb48:	4620      	mov	r0, r4
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
 800eb4c:	2001665c 	.word	0x2001665c

0800eb50 <_malloc_r>:
 800eb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb54:	1ccd      	adds	r5, r1, #3
 800eb56:	f025 0503 	bic.w	r5, r5, #3
 800eb5a:	3508      	adds	r5, #8
 800eb5c:	2d0c      	cmp	r5, #12
 800eb5e:	bf38      	it	cc
 800eb60:	250c      	movcc	r5, #12
 800eb62:	2d00      	cmp	r5, #0
 800eb64:	4607      	mov	r7, r0
 800eb66:	db01      	blt.n	800eb6c <_malloc_r+0x1c>
 800eb68:	42a9      	cmp	r1, r5
 800eb6a:	d905      	bls.n	800eb78 <_malloc_r+0x28>
 800eb6c:	230c      	movs	r3, #12
 800eb6e:	603b      	str	r3, [r7, #0]
 800eb70:	2600      	movs	r6, #0
 800eb72:	4630      	mov	r0, r6
 800eb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb78:	4e2e      	ldr	r6, [pc, #184]	; (800ec34 <_malloc_r+0xe4>)
 800eb7a:	f000 f89d 	bl	800ecb8 <__malloc_lock>
 800eb7e:	6833      	ldr	r3, [r6, #0]
 800eb80:	461c      	mov	r4, r3
 800eb82:	bb34      	cbnz	r4, 800ebd2 <_malloc_r+0x82>
 800eb84:	4629      	mov	r1, r5
 800eb86:	4638      	mov	r0, r7
 800eb88:	f7ff ffc2 	bl	800eb10 <sbrk_aligned>
 800eb8c:	1c43      	adds	r3, r0, #1
 800eb8e:	4604      	mov	r4, r0
 800eb90:	d14d      	bne.n	800ec2e <_malloc_r+0xde>
 800eb92:	6834      	ldr	r4, [r6, #0]
 800eb94:	4626      	mov	r6, r4
 800eb96:	2e00      	cmp	r6, #0
 800eb98:	d140      	bne.n	800ec1c <_malloc_r+0xcc>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	4631      	mov	r1, r6
 800eb9e:	4638      	mov	r0, r7
 800eba0:	eb04 0803 	add.w	r8, r4, r3
 800eba4:	f000 f878 	bl	800ec98 <_sbrk_r>
 800eba8:	4580      	cmp	r8, r0
 800ebaa:	d13a      	bne.n	800ec22 <_malloc_r+0xd2>
 800ebac:	6821      	ldr	r1, [r4, #0]
 800ebae:	3503      	adds	r5, #3
 800ebb0:	1a6d      	subs	r5, r5, r1
 800ebb2:	f025 0503 	bic.w	r5, r5, #3
 800ebb6:	3508      	adds	r5, #8
 800ebb8:	2d0c      	cmp	r5, #12
 800ebba:	bf38      	it	cc
 800ebbc:	250c      	movcc	r5, #12
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	f7ff ffa5 	bl	800eb10 <sbrk_aligned>
 800ebc6:	3001      	adds	r0, #1
 800ebc8:	d02b      	beq.n	800ec22 <_malloc_r+0xd2>
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	442b      	add	r3, r5
 800ebce:	6023      	str	r3, [r4, #0]
 800ebd0:	e00e      	b.n	800ebf0 <_malloc_r+0xa0>
 800ebd2:	6822      	ldr	r2, [r4, #0]
 800ebd4:	1b52      	subs	r2, r2, r5
 800ebd6:	d41e      	bmi.n	800ec16 <_malloc_r+0xc6>
 800ebd8:	2a0b      	cmp	r2, #11
 800ebda:	d916      	bls.n	800ec0a <_malloc_r+0xba>
 800ebdc:	1961      	adds	r1, r4, r5
 800ebde:	42a3      	cmp	r3, r4
 800ebe0:	6025      	str	r5, [r4, #0]
 800ebe2:	bf18      	it	ne
 800ebe4:	6059      	strne	r1, [r3, #4]
 800ebe6:	6863      	ldr	r3, [r4, #4]
 800ebe8:	bf08      	it	eq
 800ebea:	6031      	streq	r1, [r6, #0]
 800ebec:	5162      	str	r2, [r4, r5]
 800ebee:	604b      	str	r3, [r1, #4]
 800ebf0:	4638      	mov	r0, r7
 800ebf2:	f104 060b 	add.w	r6, r4, #11
 800ebf6:	f000 f865 	bl	800ecc4 <__malloc_unlock>
 800ebfa:	f026 0607 	bic.w	r6, r6, #7
 800ebfe:	1d23      	adds	r3, r4, #4
 800ec00:	1af2      	subs	r2, r6, r3
 800ec02:	d0b6      	beq.n	800eb72 <_malloc_r+0x22>
 800ec04:	1b9b      	subs	r3, r3, r6
 800ec06:	50a3      	str	r3, [r4, r2]
 800ec08:	e7b3      	b.n	800eb72 <_malloc_r+0x22>
 800ec0a:	6862      	ldr	r2, [r4, #4]
 800ec0c:	42a3      	cmp	r3, r4
 800ec0e:	bf0c      	ite	eq
 800ec10:	6032      	streq	r2, [r6, #0]
 800ec12:	605a      	strne	r2, [r3, #4]
 800ec14:	e7ec      	b.n	800ebf0 <_malloc_r+0xa0>
 800ec16:	4623      	mov	r3, r4
 800ec18:	6864      	ldr	r4, [r4, #4]
 800ec1a:	e7b2      	b.n	800eb82 <_malloc_r+0x32>
 800ec1c:	4634      	mov	r4, r6
 800ec1e:	6876      	ldr	r6, [r6, #4]
 800ec20:	e7b9      	b.n	800eb96 <_malloc_r+0x46>
 800ec22:	230c      	movs	r3, #12
 800ec24:	603b      	str	r3, [r7, #0]
 800ec26:	4638      	mov	r0, r7
 800ec28:	f000 f84c 	bl	800ecc4 <__malloc_unlock>
 800ec2c:	e7a1      	b.n	800eb72 <_malloc_r+0x22>
 800ec2e:	6025      	str	r5, [r4, #0]
 800ec30:	e7de      	b.n	800ebf0 <_malloc_r+0xa0>
 800ec32:	bf00      	nop
 800ec34:	20016658 	.word	0x20016658

0800ec38 <_realloc_r>:
 800ec38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3c:	4680      	mov	r8, r0
 800ec3e:	4614      	mov	r4, r2
 800ec40:	460e      	mov	r6, r1
 800ec42:	b921      	cbnz	r1, 800ec4e <_realloc_r+0x16>
 800ec44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec48:	4611      	mov	r1, r2
 800ec4a:	f7ff bf81 	b.w	800eb50 <_malloc_r>
 800ec4e:	b92a      	cbnz	r2, 800ec5c <_realloc_r+0x24>
 800ec50:	f7ff ff12 	bl	800ea78 <_free_r>
 800ec54:	4625      	mov	r5, r4
 800ec56:	4628      	mov	r0, r5
 800ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5c:	f000 f838 	bl	800ecd0 <_malloc_usable_size_r>
 800ec60:	4284      	cmp	r4, r0
 800ec62:	4607      	mov	r7, r0
 800ec64:	d802      	bhi.n	800ec6c <_realloc_r+0x34>
 800ec66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec6a:	d812      	bhi.n	800ec92 <_realloc_r+0x5a>
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	4640      	mov	r0, r8
 800ec70:	f7ff ff6e 	bl	800eb50 <_malloc_r>
 800ec74:	4605      	mov	r5, r0
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d0ed      	beq.n	800ec56 <_realloc_r+0x1e>
 800ec7a:	42bc      	cmp	r4, r7
 800ec7c:	4622      	mov	r2, r4
 800ec7e:	4631      	mov	r1, r6
 800ec80:	bf28      	it	cs
 800ec82:	463a      	movcs	r2, r7
 800ec84:	f7ff fba4 	bl	800e3d0 <memcpy>
 800ec88:	4631      	mov	r1, r6
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f7ff fef4 	bl	800ea78 <_free_r>
 800ec90:	e7e1      	b.n	800ec56 <_realloc_r+0x1e>
 800ec92:	4635      	mov	r5, r6
 800ec94:	e7df      	b.n	800ec56 <_realloc_r+0x1e>
	...

0800ec98 <_sbrk_r>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	4d06      	ldr	r5, [pc, #24]	; (800ecb4 <_sbrk_r+0x1c>)
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	4604      	mov	r4, r0
 800eca0:	4608      	mov	r0, r1
 800eca2:	602b      	str	r3, [r5, #0]
 800eca4:	f7f2 f886 	bl	8000db4 <_sbrk>
 800eca8:	1c43      	adds	r3, r0, #1
 800ecaa:	d102      	bne.n	800ecb2 <_sbrk_r+0x1a>
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	b103      	cbz	r3, 800ecb2 <_sbrk_r+0x1a>
 800ecb0:	6023      	str	r3, [r4, #0]
 800ecb2:	bd38      	pop	{r3, r4, r5, pc}
 800ecb4:	20016660 	.word	0x20016660

0800ecb8 <__malloc_lock>:
 800ecb8:	4801      	ldr	r0, [pc, #4]	; (800ecc0 <__malloc_lock+0x8>)
 800ecba:	f000 b811 	b.w	800ece0 <__retarget_lock_acquire_recursive>
 800ecbe:	bf00      	nop
 800ecc0:	20016664 	.word	0x20016664

0800ecc4 <__malloc_unlock>:
 800ecc4:	4801      	ldr	r0, [pc, #4]	; (800eccc <__malloc_unlock+0x8>)
 800ecc6:	f000 b80c 	b.w	800ece2 <__retarget_lock_release_recursive>
 800ecca:	bf00      	nop
 800eccc:	20016664 	.word	0x20016664

0800ecd0 <_malloc_usable_size_r>:
 800ecd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecd4:	1f18      	subs	r0, r3, #4
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	bfbc      	itt	lt
 800ecda:	580b      	ldrlt	r3, [r1, r0]
 800ecdc:	18c0      	addlt	r0, r0, r3
 800ecde:	4770      	bx	lr

0800ece0 <__retarget_lock_acquire_recursive>:
 800ece0:	4770      	bx	lr

0800ece2 <__retarget_lock_release_recursive>:
 800ece2:	4770      	bx	lr

0800ece4 <_init>:
 800ece4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece6:	bf00      	nop
 800ece8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecea:	bc08      	pop	{r3}
 800ecec:	469e      	mov	lr, r3
 800ecee:	4770      	bx	lr

0800ecf0 <_fini>:
 800ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf2:	bf00      	nop
 800ecf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecf6:	bc08      	pop	{r3}
 800ecf8:	469e      	mov	lr, r3
 800ecfa:	4770      	bx	lr
